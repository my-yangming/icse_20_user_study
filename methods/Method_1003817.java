/** 
 * Logs out the current user, removing their profile from the session. <p> The returned operation simply removes the profile from the session, regardless of whether it's actually there or not. <pre class="java"> {@code import org.pac4j.http.client.indirect.IndirectBasicAuthClient; import org.pac4j.http.credentials.authenticator.test.SimpleTestUsernamePasswordAuthenticator; import ratpack.guice.Guice; import ratpack.http.client.ReceivedResponse; import ratpack.session.SessionModule; import ratpack.test.embed.EmbeddedApp; import java.util.Optional; import static org.junit.Assert.assertEquals;}"deprecation") public class Example { public static void main(String... args) throws Exception { EmbeddedApp.of(s -> s .registry(Guice.registry(b -> b.module(SessionModule.class))) .handlers(c -> c .all(ratpack.pac4j.RatpackPac4j.authenticator(new IndirectBasicAuthClient(new SimpleTestUsernamePasswordAuthenticator()))) .get("auth", ctx -> ratpack.pac4j.RatpackPac4j.login(ctx, IndirectBasicAuthClient.class).then(p -> ctx.redirect("/"))) .get(ctx -> ratpack.pac4j.RatpackPac4j.userProfile(ctx) .route(Optional::isPresent, p -> ctx.render("Hello " + p.get().getId())) .then(p -> ctx.render("not authenticated")) ) .get("logout", ctx -> ratpack.pac4j.RatpackPac4j.logout(ctx).then(() -> ctx.redirect("/")) ) ) ).test(httpClient -> { // user is not authenticated assertEquals("not authenticated", httpClient.getText()); // authenticate… ReceivedResponse response = httpClient.requestSpec(r -> r.basicAuth("user", "user")).get("auth"); // authenticated (redirected to /) assertEquals("Hello user", response.getBody().getText()); // logout (redirected to /) assertEquals("not authenticated", httpClient.getText("logout")); }); } } }</pre>
 * @param ctx the handling context
 * @return the logout operation
 */
public static Operation logout(Context ctx){
  return ctx.get(Session.class).remove(Pac4jSessionKeys.USER_PROFILE);
}
