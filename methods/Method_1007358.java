/** 
 * Creates a public constructor. <p>If <code>howto</code> is <code>PASS_PARAMS</code>, the created constructor calls the super's constructor with the same signature.  The superclass must contain a constructor taking the same set of parameters as the created one. <p>If <code>howto</code> is <code>PASS_NONE</code>, the created constructor calls the super's default constructor. The superclass must contain a constructor taking no parameters. <p>If <code>howto</code> is <code>PASS_ARRAY</code>, the created constructor calls the super's constructor with the given parameters in the form of an array of <code>Object</code>.  The signature of the super's constructor must be: <pre>constructor(Object[] params, &lt;type&gt; cvalue) </pre> <p>Here, <code>cvalue</code> is the constant value specified by <code>cparam</code>. <p>If <code>cparam</code> is <code>null</code>, the signature must be: <pre>constructor(Object[] params)</pre> <p>If <code>body</code> is not null, a copy of that method is embedded in the body of the created constructor. The embedded method is executed after the super's constructor is called and the values of fields are initialized.  Note that <code>body</code> must not be a constructor but a method. <p>Since the embedded method is wrapped in parameter-conversion code as in <code>CtNewMethod.wrapped()</code>, the constructor parameters are passed in the form of an array of <code>Object</code>. The method specified by <code>body</code> must have the signature shown below: <pre>Object method(Object[] params, &lt;type&gt; cvalue)</pre> <p>If <code>cparam</code> is <code>null</code>, the signature must be: <pre>Object method(Object[] params)</pre> <p>Although the type of the returned value is <code>Object</code>, the value must be always <code>null</code>. <p><i>Example:</i> <pre> ClassPool pool = ... ; CtClass xclass = pool.makeClass("X"); CtMethod method = pool.getMethod("Sample", "m"); xclass.setSuperclass(pool.get("Y")); CtClass[] argTypes = { CtClass.intType }; ConstParameter cparam = ConstParameter.string("test"); CtConstructor c = CtNewConstructor.make(argTypes, null, PASS_PARAMS, method, cparam, xclass); xclass.addConstructor(c);</pre> <p>where the class <code>Sample</code> is as follows: <pre> public class Sample { public Object m(Object[] args, String msg) { System.out.println(msg); return null; } }</pre> <p>This program produces the following class: <pre> public class X extends Y { public X(int p0) { super(p0); String msg = "test"; Object[] args = new Object[] { p0 }; // begin of copied body System.out.println(msg); Object result = null; // end } }</pre>
 * @param parameters        a list of the parameter types
 * @param exceptions        a list of the exceptions
 * @param howto             how to pass parameters to the super-class'constructor (<code>PASS_NONE</code>, <code>PASS_ARRAY</code>, or <code>PASS_PARAMS</code>)
 * @param body              appended body (may be <code>null</code>).It must be not a constructor but a method.
 * @param cparam            constant parameter (may be <code>null</code>.)
 * @param declaring         the class to which the created constructoris added.
 * @see CtNewMethod#wrapped(CtClass,String,CtClass[],CtClass[],CtMethod,CtMethod.ConstParameter,CtClass)
 */
public static CtConstructor make(CtClass[] parameters,CtClass[] exceptions,int howto,CtMethod body,ConstParameter cparam,CtClass declaring) throws CannotCompileException {
  return CtNewWrappedConstructor.wrapped(parameters,exceptions,howto,body,cparam,declaring);
}
