private final List<FundingRecord> mutableList(ReturnDepositsWithdrawalsResponse returnDepositsWithdrawalsPost){
  return Arrays.asList(returnDepositsWithdrawalsPost.getWithdrawals().stream().map(fundingLedger -> new FundingRecord(exchange.getExchangeSpecification().getApiKey(),new Date(Long.parseLong(fundingLedger.getTimestamp()) * 1000),new Currency(fundingLedger.getCurrency()),safeParse(fundingLedger.getAmount()),fundingLedger.getTransactionHash(),fundingLedger.getDepositNumber(),Type.WITHDRAWAL,Status.resolveStatus(fundingLedger.getStatus()),BigDecimal.ZERO,BigDecimal.ZERO,"")).collect(Collectors.toList()),returnDepositsWithdrawalsPost.getDeposits().stream().map(fundingLedger1 -> new FundingRecord(exchange.getExchangeSpecification().getApiKey(),new Date(Long.parseLong(fundingLedger1.getTimestamp()) * 1000),new Currency(fundingLedger1.getCurrency()),safeParse(fundingLedger1.getAmount()),fundingLedger1.getTransactionHash(),fundingLedger1.getDepositNumber(),Type.DEPOSIT,Status.resolveStatus(fundingLedger1.getStatus()),BigDecimal.ZERO,BigDecimal.ZERO,"")).collect(Collectors.toList())).stream().flatMap(List::stream).sorted(Comparator.comparing(FundingRecord::getDate)).collect(Collectors.toList());
}
