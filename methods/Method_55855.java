/** 
 * Swaps the stream capture interaction mode for a thread. <p>Sets the calling thread's stream capture interaction mode to the value contained in  {@code *mode}, and overwrites  {@code *mode} with the previous modefor the thread. To facilitate deterministic behavior across function or module boundaries, callers are encouraged to use this API in a push-pop fashion:</p> <pre><code> CUstreamCaptureMode mode = desiredMode cuThreadExchangeStreamCaptureMode(&amp;mode); ... cuThreadExchangeStreamCaptureMode(&amp;mode); // restore previous mode</code></pre> <p>During stream capture (see  {@link CU100#cuStreamBeginCapture StreamBeginCapture}), some actions, such as a call to  {@code cudaMalloc}, may be unsafe. In the case of  {@code cudaMalloc}, the operation is not enqueued asynchronously to a stream, and is not observed by stream capture. Therefore, if the sequence of operations captured via {@code cuStreamBeginCapture} depended on the allocation being replayed whenever the graph is launched, the captured graph would be invalid.</p><p>Therefore, stream capture places restrictions on API calls that can be made within or concurrently to a  {@code cuStreamBeginCapture-cuStreamEndCapture}sequence. This behavior can be controlled via this API and flags to  {@code cuStreamBeginCapture}.</p> <p>A thread's mode is one of the following:</p> <ul> <li> {@link #CU_STREAM_CAPTURE_MODE_GLOBAL STREAM_CAPTURE_MODE_GLOBAL}: This is the default mode. <p>If the local thread has an ongoing capture sequence that was not initiated with  {@code CU_STREAM_CAPTURE_MODE_RELAXED} at{@code cuStreamBeginCapture}, or if any other thread has a concurrent capture sequence initiated with  {@code CU_STREAM_CAPTURE_MODE_GLOBAL}, this thread is prohibited from potentially unsafe API calls.</p></li> <li> {@link #CU_STREAM_CAPTURE_MODE_THREAD_LOCAL STREAM_CAPTURE_MODE_THREAD_LOCAL}: If the local thread has an ongoing capture sequence not initiated with  {@code CU_STREAM_CAPTURE_MODE_RELAXED}, it is prohibited from potentially unsafe API calls. Concurrent capture sequences in other threads are ignored.</li> <li> {@link #CU_STREAM_CAPTURE_MODE_RELAXED STREAM_CAPTURE_MODE_RELAXED}: The local thread is not prohibited from potentially unsafe API calls. Note that the thread is still prohibited from API calls which necessarily conflict with stream capture, for example, attempting  {@link CU#cuEventQuery EventQuery} on an event that was last recorded inside a capturesequence.</li> </ul>
 * @param mode pointer to mode value to swap with the current mode
 */
@NativeType("CUresult") public static int cuThreadExchangeStreamCaptureMode(@NativeType("CUstreamCaptureMode *") IntBuffer mode){
  if (CHECKS) {
    check(mode,1);
  }
  return ncuThreadExchangeStreamCaptureMode(memAddress(mode));
}
