/** 
 * Puts the content of the method_info JVMS structure generated by this MethodWriter into the given ByteVector.
 * @param output where the method_info structure must be put.
 */
void putMethodInfo(final ByteVector output){
  boolean useSyntheticAttribute=symbolTable.getMajorVersion() < Opcodes.V1_5;
  int mask=useSyntheticAttribute ? Opcodes.ACC_SYNTHETIC : 0;
  output.putShort(accessFlags & ~mask).putShort(nameIndex).putShort(descriptorIndex);
  if (sourceOffset != 0) {
    output.putByteArray(symbolTable.getSource().classFileBuffer,sourceOffset,sourceLength);
    return;
  }
  int attributeCount=0;
  if (code.length > 0) {
    ++attributeCount;
  }
  if (numberOfExceptions > 0) {
    ++attributeCount;
  }
  if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && useSyntheticAttribute) {
    ++attributeCount;
  }
  if (signatureIndex != 0) {
    ++attributeCount;
  }
  if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) {
    ++attributeCount;
  }
  if (lastRuntimeVisibleAnnotation != null) {
    ++attributeCount;
  }
  if (lastRuntimeInvisibleAnnotation != null) {
    ++attributeCount;
  }
  if (lastRuntimeVisibleParameterAnnotations != null) {
    ++attributeCount;
  }
  if (lastRuntimeInvisibleParameterAnnotations != null) {
    ++attributeCount;
  }
  if (lastRuntimeVisibleTypeAnnotation != null) {
    ++attributeCount;
  }
  if (lastRuntimeInvisibleTypeAnnotation != null) {
    ++attributeCount;
  }
  if (defaultValue != null) {
    ++attributeCount;
  }
  if (parameters != null) {
    ++attributeCount;
  }
  if (firstAttribute != null) {
    attributeCount+=firstAttribute.getAttributeCount();
  }
  output.putShort(attributeCount);
  if (code.length > 0) {
    int size=10 + code.length + Handler.getExceptionTableSize(firstHandler);
    int codeAttributeCount=0;
    if (stackMapTableEntries != null) {
      size+=8 + stackMapTableEntries.length;
      ++codeAttributeCount;
    }
    if (lineNumberTable != null) {
      size+=8 + lineNumberTable.length;
      ++codeAttributeCount;
    }
    if (localVariableTable != null) {
      size+=8 + localVariableTable.length;
      ++codeAttributeCount;
    }
    if (localVariableTypeTable != null) {
      size+=8 + localVariableTypeTable.length;
      ++codeAttributeCount;
    }
    if (lastCodeRuntimeVisibleTypeAnnotation != null) {
      size+=lastCodeRuntimeVisibleTypeAnnotation.computeAnnotationsSize(Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS);
      ++codeAttributeCount;
    }
    if (lastCodeRuntimeInvisibleTypeAnnotation != null) {
      size+=lastCodeRuntimeInvisibleTypeAnnotation.computeAnnotationsSize(Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS);
      ++codeAttributeCount;
    }
    if (firstCodeAttribute != null) {
      size+=firstCodeAttribute.computeAttributesSize(symbolTable,code.data,code.length,maxStack,maxLocals);
      codeAttributeCount+=firstCodeAttribute.getAttributeCount();
    }
    output.putShort(symbolTable.addConstantUtf8(Constants.CODE)).putInt(size).putShort(maxStack).putShort(maxLocals).putInt(code.length).putByteArray(code.data,0,code.length);
    Handler.putExceptionTable(firstHandler,output);
    output.putShort(codeAttributeCount);
    if (stackMapTableEntries != null) {
      boolean useStackMapTable=symbolTable.getMajorVersion() >= Opcodes.V1_6;
      output.putShort(symbolTable.addConstantUtf8(useStackMapTable ? Constants.STACK_MAP_TABLE : "StackMap")).putInt(2 + stackMapTableEntries.length).putShort(stackMapTableNumberOfEntries).putByteArray(stackMapTableEntries.data,0,stackMapTableEntries.length);
    }
    if (lineNumberTable != null) {
      output.putShort(symbolTable.addConstantUtf8(Constants.LINE_NUMBER_TABLE)).putInt(2 + lineNumberTable.length).putShort(lineNumberTableLength).putByteArray(lineNumberTable.data,0,lineNumberTable.length);
    }
    if (localVariableTable != null) {
      output.putShort(symbolTable.addConstantUtf8(Constants.LOCAL_VARIABLE_TABLE)).putInt(2 + localVariableTable.length).putShort(localVariableTableLength).putByteArray(localVariableTable.data,0,localVariableTable.length);
    }
    if (localVariableTypeTable != null) {
      output.putShort(symbolTable.addConstantUtf8(Constants.LOCAL_VARIABLE_TYPE_TABLE)).putInt(2 + localVariableTypeTable.length).putShort(localVariableTypeTableLength).putByteArray(localVariableTypeTable.data,0,localVariableTypeTable.length);
    }
    if (lastCodeRuntimeVisibleTypeAnnotation != null) {
      lastCodeRuntimeVisibleTypeAnnotation.putAnnotations(symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS),output);
    }
    if (lastCodeRuntimeInvisibleTypeAnnotation != null) {
      lastCodeRuntimeInvisibleTypeAnnotation.putAnnotations(symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS),output);
    }
    if (firstCodeAttribute != null) {
      firstCodeAttribute.putAttributes(symbolTable,code.data,code.length,maxStack,maxLocals,output);
    }
  }
  if (numberOfExceptions > 0) {
    output.putShort(symbolTable.addConstantUtf8(Constants.EXCEPTIONS)).putInt(2 + 2 * numberOfExceptions).putShort(numberOfExceptions);
    for (    int exceptionIndex : exceptionIndexTable) {
      output.putShort(exceptionIndex);
    }
  }
  Attribute.putAttributes(symbolTable,accessFlags,signatureIndex,output);
  AnnotationWriter.putAnnotations(symbolTable,lastRuntimeVisibleAnnotation,lastRuntimeInvisibleAnnotation,lastRuntimeVisibleTypeAnnotation,lastRuntimeInvisibleTypeAnnotation,output);
  if (lastRuntimeVisibleParameterAnnotations != null) {
    AnnotationWriter.putParameterAnnotations(symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS),lastRuntimeVisibleParameterAnnotations,visibleAnnotableParameterCount == 0 ? lastRuntimeVisibleParameterAnnotations.length : visibleAnnotableParameterCount,output);
  }
  if (lastRuntimeInvisibleParameterAnnotations != null) {
    AnnotationWriter.putParameterAnnotations(symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS),lastRuntimeInvisibleParameterAnnotations,invisibleAnnotableParameterCount == 0 ? lastRuntimeInvisibleParameterAnnotations.length : invisibleAnnotableParameterCount,output);
  }
  if (defaultValue != null) {
    output.putShort(symbolTable.addConstantUtf8(Constants.ANNOTATION_DEFAULT)).putInt(defaultValue.length).putByteArray(defaultValue.data,0,defaultValue.length);
  }
  if (parameters != null) {
    output.putShort(symbolTable.addConstantUtf8(Constants.METHOD_PARAMETERS)).putInt(1 + parameters.length).putByte(parametersCount).putByteArray(parameters.data,0,parameters.length);
  }
  if (firstAttribute != null) {
    firstAttribute.putAttributes(symbolTable,output);
  }
}
