/** 
 * Prints the usage instructions on the console.
 */
private static void printUsage(){
  LOG.info("Usage");
  LOG.info("=====");
  LOG.info("");
  LOG.info("flyway [options] command");
  LOG.info("");
  LOG.info("By default, the configuration will be read from conf/flyway.conf.");
  LOG.info("Options passed from the command-line override the configuration.");
  LOG.info("");
  LOG.info("Commands");
  LOG.info("--------");
  LOG.info("migrate  : Migrates the database");
  LOG.info("clean    : Drops all objects in the configured schemas");
  LOG.info("info     : Prints the information about applied, current and pending migrations");
  LOG.info("validate : Validates the applied migrations against the ones on the classpath");
  LOG.info("undo     : [" + "pro] Undoes the most recently applied versioned migration");
  LOG.info("baseline : Baselines an existing database at the baselineVersion");
  LOG.info("repair   : Repairs the schema history table");
  LOG.info("");
  LOG.info("Options (Format: -key=value)");
  LOG.info("-------");
  LOG.info("driver                       : Fully qualified classname of the JDBC driver");
  LOG.info("url                          : Jdbc url to use to connect to the database");
  LOG.info("user                         : User to use to connect to the database");
  LOG.info("password                     : Password to use to connect to the database");
  LOG.info("connectRetries               : Maximum number of retries when attempting to connect to the database");
  LOG.info("initSql                      : SQL statements to run to initialize a new database connection");
  LOG.info("schemas                      : Comma-separated list of the schemas managed by Flyway");
  LOG.info("table                        : Name of Flyway's schema history table");
  LOG.info("locations                    : Classpath locations to scan recursively for migrations");
  LOG.info("resolvers                    : Comma-separated list of custom MigrationResolvers");
  LOG.info("skipDefaultResolvers         : Skips default resolvers (jdbc, sql and Spring-jdbc)");
  LOG.info("sqlMigrationPrefix           : File name prefix for versioned SQL migrations");
  LOG.info("undoSqlMigrationPrefix       : [" + "pro] File name prefix for undo SQL migrations");
  LOG.info("repeatableSqlMigrationPrefix : File name prefix for repeatable SQL migrations");
  LOG.info("sqlMigrationSeparator        : File name separator for SQL migrations");
  LOG.info("sqlMigrationSuffixes         : Comma-separated list of file name suffixes for SQL migrations");
  LOG.info("stream                       : [" + "pro] Stream SQL migrations when executing them");
  LOG.info("batch                        : [" + "pro] Batch SQL statements when executing them");
  LOG.info("mixed                        : Allow mixing transactional and non-transactional statements");
  LOG.info("encoding                     : Encoding of SQL migrations");
  LOG.info("placeholderReplacement       : Whether placeholders should be replaced");
  LOG.info("placeholders                 : Placeholders to replace in sql migrations");
  LOG.info("placeholderPrefix            : Prefix of every placeholder");
  LOG.info("placeholderSuffix            : Suffix of every placeholder");
  LOG.info("installedBy                  : Username that will be recorded in the schema history table");
  LOG.info("target                       : Target version up to which Flyway should use migrations");
  LOG.info("outOfOrder                   : Allows migrations to be run \"out of order\"");
  LOG.info("callbacks                    : Comma-separated list of FlywayCallback classes");
  LOG.info("skipDefaultCallbacks         : Skips default callbacks (sql)");
  LOG.info("validateOnMigrate            : Validate when running migrate");
  LOG.info("ignoreMissingMigrations      : Allow missing migrations when validating");
  LOG.info("ignoreIgnoredMigrations      : Allow ignored migrations when validating");
  LOG.info("ignorePendingMigrations      : Allow pending migrations when validating");
  LOG.info("ignoreFutureMigrations       : Allow future migrations when validating");
  LOG.info("cleanOnValidationError       : Automatically clean on a validation error");
  LOG.info("cleanDisabled                : Whether to disable clean");
  LOG.info("baselineVersion              : Version to tag schema with when executing baseline");
  LOG.info("baselineDescription          : Description to tag schema with when executing baseline");
  LOG.info("baselineOnMigrate            : Baseline on migrate against uninitialized non-empty schema");
  LOG.info("configFiles                  : Comma-separated list of config files to use");
  LOG.info("configFileEncoding           : Encoding to use when loading the config files");
  LOG.info("jarDirs                      : Comma-separated list of dirs for Jdbc drivers & Java migrations");
  LOG.info("dryRunOutput                 : [" + "pro] File where to output the SQL statements of a migration dry run");
  LOG.info("errorOverrides               : [" + "pro] Rules to override specific SQL states and errors codes");
  LOG.info("oracle.sqlplus               : [" + "pro] Enable Oracle SQL*Plus command support");
  LOG.info("licenseKey                   : [" + "pro] Your Flyway license key");
  LOG.info("");
  LOG.info("Flags");
  LOG.info("-----");
  LOG.info("-X          : Print debug output");
  LOG.info("-q          : Suppress all output, except for errors and warnings");
  LOG.info("-n          : Suppress prompting for a user and password");
  LOG.info("-v          : Print the Flyway version and exit");
  LOG.info("-?          : Print this usage info and exit");
  LOG.info("-community  : Run the Flyway Community Edition (default)");
  LOG.info("-pro        : Run the Flyway Pro Edition");
  LOG.info("-enterprise : Run the Flyway Enterprise Edition");
  LOG.info("");
  LOG.info("Example");
  LOG.info("-------");
  LOG.info("flyway -user=myuser -password=s3cr3t -url=jdbc:h2:mem -placeholders.abc=def migrate");
  LOG.info("");
  LOG.info("More info at https://flywaydb.org/documentation/commandline");
}
