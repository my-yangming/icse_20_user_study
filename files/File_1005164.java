package org.jeecgframework.core.util;

import java.util.HashSet;
import java.util.Set;

import net.sourceforge.pinyin4j.PinyinHelper;
import net.sourceforge.pinyin4j.format.HanyuPinyinCaseType;
import net.sourceforge.pinyin4j.format.HanyuPinyinOutputFormat;
import net.sourceforge.pinyin4j.format.HanyuPinyinToneType;
import net.sourceforge.pinyin4j.format.HanyuPinyinVCharType;
import net.sourceforge.pinyin4j.format.exception.BadHanyuPinyinOutputFormatCombination;

/**
 * 
 * javaæ±‰å­—è½¬æ‹¼éŸ³æ“?ä½œå·¥å…·ç±»
 */

public class PinyinUtil {

	/**
	 * 
	 * å°†å­—ç¬¦ä¸²è½¬æ?¢æˆ?æ‹¼éŸ³æ•°ç»„
	 * 
	 * 
	 * 
	 * @param src
	 * 
	 * @return
	 */

	public static String[] stringToPinyin(String src) {

		return stringToPinyin(src, false, null);

	}

	/**
	 * 
	 * å°†å­—ç¬¦ä¸²è½¬æ?¢æˆ?æ‹¼éŸ³æ•°ç»„
	 * 
	 * 
	 * 
	 * @param src
	 * 
	 * @return
	 */

	public static String[] stringToPinyin(String src, String separator) {

		return stringToPinyin(src, true, separator);

	}

	/**
	 * 
	 * å°†å­—ç¬¦ä¸²è½¬æ?¢æˆ?æ‹¼éŸ³æ•°ç»„
	 * 
	 * 
	 * 
	 * @param src
	 * 
	 * @param isPolyphone
	 * 
	 *            æ˜¯å?¦æŸ¥å‡ºå¤šéŸ³å­—çš„æ‰€æœ‰æ‹¼éŸ³
	 * 
	 * @param separator
	 * 
	 *            å¤šéŸ³å­—æ‹¼éŸ³ä¹‹é—´çš„åˆ†éš”ç¬¦
	 * 
	 * @return
	 */

	public static String[] stringToPinyin(String src, boolean isPolyphone,

	String separator) {

		// åˆ¤æ–­å­—ç¬¦ä¸²æ˜¯å?¦ä¸ºç©º

		if ("".equals(src) || null == src) {

			return null;

		}

		char[] srcChar = src.toCharArray();

		int srcCount = srcChar.length;

		String[] srcStr = new String[srcCount];

		for (int i = 0; i < srcCount; i++) {

			srcStr[i] = charToPinyin(srcChar[i], isPolyphone, separator);

		}

		return srcStr;

	}

	/**
	 * 
	 * å°†å?•ä¸ªå­—ç¬¦è½¬æ?¢æˆ?æ‹¼éŸ³
	 * 
	 * 
	 * 
	 * @param src
	 * 
	 * @return
	 */

	public static String charToPinyin(char src, boolean isPolyphone,

	String separator) {

		// åˆ›å»ºæ±‰è¯­æ‹¼éŸ³å¤„ç?†ç±»

		HanyuPinyinOutputFormat defaultFormat = new HanyuPinyinOutputFormat();

		// è¾“å‡ºè®¾ç½®ï¼Œå¤§å°?å†™ï¼ŒéŸ³æ ‡æ–¹å¼?

		defaultFormat.setCaseType(HanyuPinyinCaseType.LOWERCASE);

		defaultFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);

		StringBuffer tempPinying = new StringBuffer();

		// å¦‚æžœæ˜¯ä¸­æ–‡

		if (src > 128) {

			try {

				// è½¬æ?¢å¾—å‡ºç»“æžœ

				String[] strs = PinyinHelper.toHanyuPinyinStringArray(src,

				defaultFormat);

				// æ˜¯å?¦æŸ¥å‡ºå¤šéŸ³å­—ï¼Œé»˜è®¤æ˜¯æŸ¥å‡ºå¤šéŸ³å­—çš„ç¬¬ä¸€ä¸ªå­—ç¬¦

				if (isPolyphone && null != separator) {

					for (int i = 0; i < strs.length; i++) {

						tempPinying.append(strs[i]);

						if (strs.length != (i + 1)) {

							// å¤šéŸ³å­—ä¹‹é—´ç”¨ç‰¹æ®Šç¬¦å?·é—´éš”èµ·æ?¥

							tempPinying.append(separator);

						}

					}

				} else {

					tempPinying.append(strs[0]);

				}

			} catch (BadHanyuPinyinOutputFormatCombination e) {

				e.printStackTrace();

			}

		} else {

			tempPinying.append(src);

		}

		return tempPinying.toString();

	}

	public static String hanziToPinyin(String hanzi) {

		return hanziToPinyin(hanzi, " ");

	}

	/**
	 * 
	 * å°†æ±‰å­—è½¬æ?¢æˆ?æ‹¼éŸ³
	 * 
	 * @param hanzi
	 * 
	 * @param separator
	 * 
	 * @return
	 */

	@SuppressWarnings("deprecation")
	public static String hanziToPinyin(String hanzi, String separator) {

		// åˆ›å»ºæ±‰è¯­æ‹¼éŸ³å¤„ç?†ç±»

		HanyuPinyinOutputFormat defaultFormat = new HanyuPinyinOutputFormat();

		// è¾“å‡ºè®¾ç½®ï¼Œå¤§å°?å†™ï¼ŒéŸ³æ ‡æ–¹å¼?

		defaultFormat.setCaseType(HanyuPinyinCaseType.LOWERCASE);

		defaultFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);

		String pinyingStr = "";

		try {

			pinyingStr = PinyinHelper.toHanYuPinyinString(hanzi, defaultFormat,
					separator,false);


		} catch (BadHanyuPinyinOutputFormatCombination e) {

			e.printStackTrace();

		}

		return pinyingStr;

	}

	/**
	 * 
	 * å°†å­—ç¬¦ä¸²æ•°ç»„è½¬æ?¢æˆ?å­—ç¬¦ä¸²
	 * 
	 * @param str
	 * 
	 * @param separator
	 *            å?„ä¸ªå­—ç¬¦ä¸²ä¹‹é—´çš„åˆ†éš”ç¬¦
	 * 
	 * @return
	 */

	public static String stringArrayToString(String[] str, String separator) {

		StringBuffer sb = new StringBuffer();

		for (int i = 0; i < str.length; i++) {

			sb.append(str[i]);

			if (str.length != (i + 1)) {

				sb.append(separator);

			}

		}

		return sb.toString();

	}

	/**
	 * 
	 * ç®€å?•çš„å°†å?„ä¸ªå­—ç¬¦æ•°ç»„ä¹‹é—´è¿žæŽ¥èµ·æ?¥
	 * 
	 * @param str
	 * 
	 * @return
	 */

	public static String stringArrayToString(String[] str) {

		return stringArrayToString(str, "");

	}

	/**
	 * 
	 * å°†å­—ç¬¦æ•°ç»„è½¬æ?¢æˆ?å­—ç¬¦ä¸²
	 * 
	 * @param str
	 * 
	 * @param separator
	 *            å?„ä¸ªå­—ç¬¦ä¸²ä¹‹é—´çš„åˆ†éš”ç¬¦
	 * 
	 * @return
	 */

	public static String charArrayToString(char[] ch, String separator) {

		StringBuffer sb = new StringBuffer();

		for (int i = 0; i < ch.length; i++) {

			sb.append(ch[i]);

			if (ch.length != (i + 1)) {

				sb.append(separator);

			}

		}

		return sb.toString();

	}

	/**
	 * 
	 * å°†å­—ç¬¦æ•°ç»„è½¬æ?¢æˆ?å­—ç¬¦ä¸²
	 * 
	 * @param str
	 * 
	 * @return
	 */

	public static String charArrayToString(char[] ch) {

		return charArrayToString(ch, " ");

	}

	/**
	 * 
	 * å?–æ±‰å­—çš„é¦–å­—æ¯?
	 * 
	 * @param src
	 * 
	 * @param isCapital
	 *            æ˜¯å?¦æ˜¯å¤§å†™
	 * 
	 * @return
	 */

	public static char[] getHeadByChar(char src, boolean isCapital) {

		// å¦‚æžœä¸?æ˜¯æ±‰å­—ç›´æŽ¥è¿”å›ž

		if (src <= 128) {

			return new char[] { src };

		}

		// èŽ·å?–æ‰€æœ‰çš„æ‹¼éŸ³

		String[] pinyingStr = PinyinHelper.toHanyuPinyinStringArray(src);

		// åˆ›å»ºè¿”å›žå¯¹è±¡

		int polyphoneSize = pinyingStr.length;

		char[] headChars = new char[polyphoneSize];

		int i = 0;

		// æˆªå?–é¦–å­—ç¬¦

		for (String s : pinyingStr) {

			char headChar = s.charAt(0);

			// é¦–å­—æ¯?æ˜¯å?¦å¤§å†™ï¼Œé»˜è®¤æ˜¯å°?å†™

			if (isCapital) {

				headChars[i] = Character.toUpperCase(headChar);

			} else {

				headChars[i] = headChar;

			}

			i++;

		}

		return headChars;

	}

	/**
	 * 
	 * å?–æ±‰å­—çš„é¦–å­—æ¯?(é»˜è®¤æ˜¯å¤§å†™)
	 * 
	 * @param src
	 * 
	 * @return
	 */

	public static char[] getHeadByChar(char src) {

		return getHeadByChar(src, true);

	}

	/**
	 * 
	 * æŸ¥æ‰¾å­—ç¬¦ä¸²é¦–å­—æ¯?
	 * 
	 * @param src
	 * 
	 * @return
	 */

	public static String[] getHeadByString(String src) {

		return getHeadByString(src, true);

	}

	/**
	 * 
	 * æŸ¥æ‰¾å­—ç¬¦ä¸²é¦–å­—æ¯?
	 * 
	 * @param src
	 * 
	 * @param isCapital
	 *            æ˜¯å?¦å¤§å†™
	 * 
	 * @return
	 */

	public static String[] getHeadByString(String src, boolean isCapital) {

		return getHeadByString(src, isCapital, null);

	}

	/**
	 * 
	 * æŸ¥æ‰¾å­—ç¬¦ä¸²é¦–å­—æ¯?
	 * 
	 * @param src
	 * 
	 * @param isCapital
	 *            æ˜¯å?¦å¤§å†™
	 * 
	 * @param separator
	 *            åˆ†éš”ç¬¦
	 * 
	 * @return
	 */

	public static String[] getHeadByString(String src, boolean isCapital,
			String separator) {

		char[] chars = src.toCharArray();

		String[] headString = new String[chars.length];

		int i = 0;

		for (char ch : chars) {

			char[] chs = getHeadByChar(ch, isCapital);

			StringBuffer sb = new StringBuffer();

			if (null != separator) {

				int j = 1;

				for (char ch1 : chs) {

					sb.append(ch1);

					if (j != chs.length) {

						sb.append(separator);

					}

					j++;

				}

			} else {

				sb.append(chs[0]);

			}

			headString[i] = sb.toString();

			i++;

		}

		return headString;

	}

	/**
	 * å°†æ±‰å­—è½¬æ?¢ä¸ºå…¨æ‹¼
	 * 
	 * @param src
	 * @return String
	 */
	public static String getPinYin(String src) {
		char[] t1 = null;
		t1 = src.toCharArray();
		// org.jeecgframework.core.util.LogUtil.info(t1.length);
		String[] t2 = new String[t1.length];
		// org.jeecgframework.core.util.LogUtil.info(t2.length);
		// è®¾ç½®æ±‰å­—æ‹¼éŸ³è¾“å‡ºçš„æ ¼å¼?
		HanyuPinyinOutputFormat t3 = new HanyuPinyinOutputFormat();
		t3.setCaseType(HanyuPinyinCaseType.LOWERCASE);
		t3.setToneType(HanyuPinyinToneType.WITHOUT_TONE);
		t3.setVCharType(HanyuPinyinVCharType.WITH_V);
		String t4 = "";
		int t0 = t1.length;
		try {
			for (int i = 0; i < t0; i++) {
				// åˆ¤æ–­èƒ½å?¦ä¸ºæ±‰å­—å­—ç¬¦
				// org.jeecgframework.core.util.LogUtil.info(t1[i]);
				if (Character.toString(t1[i]).matches("[\\u4E00-\\u9FA5]+")) {
					t2 = PinyinHelper.toHanyuPinyinStringArray(t1[i], t3);// å°†æ±‰å­—çš„å‡ ç§?å…¨æ‹¼éƒ½å­˜åˆ°t2æ•°ç»„ä¸­
					t4 += t2[0];// å?–å‡ºè¯¥æ±‰å­—å…¨æ‹¼çš„ç¬¬ä¸€ç§?è¯»éŸ³å¹¶è¿žæŽ¥åˆ°å­—ç¬¦ä¸²t4å?Ž
				} else {
					// å¦‚æžœä¸?æ˜¯æ±‰å­—å­—ç¬¦ï¼Œé—´æŽ¥å?–å‡ºå­—ç¬¦å¹¶è¿žæŽ¥åˆ°å­—ç¬¦ä¸²t4å?Ž
					t4 += Character.toString(t1[i]);
				}
			}
		} catch (BadHanyuPinyinOutputFormatCombination e) {
			e.printStackTrace();
		}
		return t4;
	}

	/**
	 * æ??å?–æ¯?ä¸ªæ±‰å­—çš„é¦–å­—æ¯?
	 * 
	 * @param str
	 * @return String
	 */
	public static String getPinYinHeadChar(String str) {
		String convert = "";
		for (int j = 0; j < str.length(); j++) {
			char word = str.charAt(j);
			// æ??å?–æ±‰å­—çš„é¦–å­—æ¯?
			String[] pinyinArray = PinyinHelper.toHanyuPinyinStringArray(word);
			if (pinyinArray != null) {
				convert += pinyinArray[0].charAt(0);
			} else {
				convert += word;
			}
		}
		return convert;
	}

	/**
	 * å°†å­—ç¬¦ä¸²è½¬æ?¢æˆ?ASCIIç ?
	 * 
	 * @param cnStr
	 * @return String
	 */
	public static String getCnASCII(String cnStr) {
		StringBuffer strBuf = new StringBuffer();
		// å°†å­—ç¬¦ä¸²è½¬æ?¢æˆ?å­—èŠ‚åº?åˆ—
		byte[] bGBK = cnStr.getBytes();
		for (int i = 0; i < bGBK.length; i++) {
			// org.jeecgframework.core.util.LogUtil.info(Integer.toHexString(bGBK[i] & 0xff));
			// å°†æ¯?ä¸ªå­—ç¬¦è½¬æ?¢æˆ?ASCIIç ?
			strBuf.append(Integer.toHexString(bGBK[i] & 0xff));
		}
		return strBuf.toString();
	}

	/**
	 * æ±‰å­—è½¬æ?¢ä½?æ±‰è¯­æ‹¼éŸ³é¦–å­—æ¯?ï¼Œè‹±æ–‡å­—ç¬¦ä¸?å?˜
	 * 
	 * @param chines
	 *            æ±‰å­—
	 * @return æ‹¼éŸ³
	 */
	public static String converterToFirstSpell(String chines) {
		String pinyinName = "";
		char[] nameChar = chines.toCharArray();
		HanyuPinyinOutputFormat defaultFormat = new HanyuPinyinOutputFormat();
		defaultFormat.setCaseType(HanyuPinyinCaseType.LOWERCASE);
		defaultFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);
		for (int i = 0; i < nameChar.length; i++) {
			if (nameChar[i] > 128) {
				try {
					pinyinName += PinyinHelper.toHanyuPinyinStringArray(
							nameChar[i], defaultFormat)[0].charAt(0);
				} catch (BadHanyuPinyinOutputFormatCombination e) {
					e.printStackTrace();
				}
			} else {
				pinyinName += nameChar[i];
			}
		}
		return pinyinName;
	}

	/**
	 * æ±‰å­—è½¬æ?¢ä½?æ±‰è¯­æ‹¼éŸ³ï¼Œè‹±æ–‡å­—ç¬¦ä¸?å?˜
	 * 
	 * @param chines
	 *            æ±‰å­—
	 * @return æ‹¼éŸ³
	 */
	public static String converterToSpell(String chines) {
		String pinyinName = "";
		char[] nameChar = chines.toCharArray();
		HanyuPinyinOutputFormat defaultFormat = new HanyuPinyinOutputFormat();
		defaultFormat.setCaseType(HanyuPinyinCaseType.LOWERCASE);
		defaultFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);
		for (int i = 0; i < nameChar.length; i++) {
			if (nameChar[i] > 128) {
				try {
					pinyinName += PinyinHelper.toHanyuPinyinStringArray(
							nameChar[i], defaultFormat)[0];
				} catch (BadHanyuPinyinOutputFormatCombination e) {
					e.printStackTrace();
				}
			} else {
				pinyinName += nameChar[i];
			}
		}
		return pinyinName;
	}

	/**
	 * å­—ç¬¦ä¸²é›†å?ˆè½¬æ?¢å­—ç¬¦ä¸²(é€—å?·åˆ†éš”)
	 * 
	 * @author wyh
	 * @param stringSet
	 * @return
	 */
	public static String makeStringByStringSet(Set<String> stringSet) {
		StringBuilder str = new StringBuilder();
		int i = 0;
		for (String s : stringSet) {
			if (i == stringSet.size() - 1) {
				str.append(s);
			} else {
				str.append(s + ",");
			}
			i++;
		}
		return str.toString().toLowerCase();
	}

	/**
	 * èŽ·å?–æ‹¼éŸ³é›†å?ˆ
	 * 
	 * @author wyh
	 * @param src
	 * @return Set<String>
	 */
	public static Set<String> getPinyin(String src) {
		if (src != null && !src.trim().equalsIgnoreCase("")) {
			char[] srcChar;
			srcChar = src.toCharArray();
			// æ±‰è¯­æ‹¼éŸ³æ ¼å¼?è¾“å‡ºç±»
			HanyuPinyinOutputFormat hanYuPinOutputFormat = new HanyuPinyinOutputFormat();

			// è¾“å‡ºè®¾ç½®ï¼Œå¤§å°?å†™ï¼ŒéŸ³æ ‡æ–¹å¼?ç­‰
			hanYuPinOutputFormat.setCaseType(HanyuPinyinCaseType.LOWERCASE);
			hanYuPinOutputFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);
			hanYuPinOutputFormat.setVCharType(HanyuPinyinVCharType.WITH_V);

			String[][] temp = new String[src.length()][];
			for (int i = 0; i < srcChar.length; i++) {
				char c = srcChar[i];
				// æ˜¯ä¸­æ–‡æˆ–è€…a-zæˆ–è€…A-Zè½¬æ?¢æ‹¼éŸ³(æˆ‘çš„éœ€æ±‚ï¼Œæ˜¯ä¿?ç•™ä¸­æ–‡æˆ–è€…a-zæˆ–è€…A-Z)
				if (String.valueOf(c).matches("[\\u4E00-\\u9FA5]+")) {
					try {
						temp[i] = PinyinHelper.toHanyuPinyinStringArray(
								srcChar[i], hanYuPinOutputFormat);
					} catch (BadHanyuPinyinOutputFormatCombination e) {
						e.printStackTrace();
					}
				} else if (((int) c >= 65 && (int) c <= 90)
						|| ((int) c >= 97 && (int) c <= 122)) {
					temp[i] = new String[] { String.valueOf(srcChar[i]) };
				} else {
					temp[i] = new String[] { "" };
				}
			}
			String[] pingyinArray = Exchange(temp);
			Set<String> pinyinSet = new HashSet<String>();
			for (int i = 0; i < pingyinArray.length; i++) {
				pinyinSet.add(pingyinArray[i]);
			}
			return pinyinSet;
		}
		return null;
	}

	/**
	 * é€’å½’
	 * 
	 * @author wyh
	 * @param strJaggedArray
	 * @return
	 */
	public static String[] Exchange(String[][] strJaggedArray) {
		String[][] temp = DoExchange(strJaggedArray);
		return temp[0];
	}

	/**
	 * é€’å½’
	 * 
	 * @author wyh
	 * @param strJaggedArray
	 * @return
	 */
	private static String[][] DoExchange(String[][] strJaggedArray) {
		int len = strJaggedArray.length;
		if (len >= 2) {
			int len1 = strJaggedArray[0].length;
			int len2 = strJaggedArray[1].length;
			int newlen = len1 * len2;
			String[] temp = new String[newlen];
			int Index = 0;
			for (int i = 0; i < len1; i++) {
				for (int j = 0; j < len2; j++) {
					temp[Index] = strJaggedArray[0][i] + strJaggedArray[1][j];
					Index++;
				}
			}
			String[][] newArray = new String[len - 1][];
			for (int i = 2; i < len; i++) {
				newArray[i - 1] = strJaggedArray[i];
			}
			newArray[0] = temp;
			return DoExchange(newArray);
		} else {
			return strJaggedArray;
		}
	}

}
