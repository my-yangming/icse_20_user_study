package com.roncoo.pay.trade.utils.alipay.util.httpClient;

import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.methods.multipart.*;
import org.apache.commons.httpclient.params.HttpMethodParams;
import org.apache.commons.httpclient.util.IdleConnectionTimeoutThread;

import java.io.File;
import java.io.IOException;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;

/* *
 *ç±»å??ï¼šHttpProtocolHandler
 *åŠŸèƒ½ï¼šHttpClientæ–¹å¼?è®¿é—®
 *è¯¦ç»†ï¼šèŽ·å?–è¿œç¨‹HTTPæ•°æ?®
 *ç‰ˆæœ¬ï¼š3.3
 *æ—¥æœŸï¼š2012-08-17
 *è¯´æ˜Žï¼š
 *ä»¥ä¸‹ä»£ç ?å?ªæ˜¯ä¸ºäº†æ–¹ä¾¿å•†æˆ·æµ‹è¯•è€Œæ??ä¾›çš„æ ·ä¾‹ä»£ç ?ï¼Œå•†æˆ·å?¯ä»¥æ ¹æ?®è‡ªå·±ç½‘ç«™çš„éœ€è¦?ï¼ŒæŒ‰ç…§æŠ€æœ¯æ–‡æ¡£ç¼–å†™,å¹¶é?žä¸€å®šè¦?ä½¿ç”¨è¯¥ä»£ç ?ã€‚
 *è¯¥ä»£ç ?ä»…ä¾›å­¦ä¹ å’Œç ”ç©¶æ”¯ä»˜å®?æŽ¥å?£ä½¿ç”¨ï¼Œå?ªæ˜¯æ??ä¾›ä¸€ä¸ªå?‚è€ƒã€‚
 */

public class HttpProtocolHandler {

    private static String              DEFAULT_CHARSET                     = "GBK";

    /** è¿žæŽ¥è¶…æ—¶æ—¶é—´ï¼Œç”±bean factoryè®¾ç½®ï¼Œç¼ºçœ?ä¸º8ç§’é’Ÿ */
    private int                        defaultConnectionTimeout            = 8000;

    /** å›žåº”è¶…æ—¶æ—¶é—´, ç”±bean factoryè®¾ç½®ï¼Œç¼ºçœ?ä¸º30ç§’é’Ÿ */
    private int                        defaultSoTimeout                    = 30000;

    /** é—²ç½®è¿žæŽ¥è¶…æ—¶æ—¶é—´, ç”±bean factoryè®¾ç½®ï¼Œç¼ºçœ?ä¸º60ç§’é’Ÿ */
    private int                        defaultIdleConnTimeout              = 60000;

    private int                        defaultMaxConnPerHost               = 30;

    private int                        defaultMaxTotalConn                 = 80;

    /** é»˜è®¤ç­‰å¾…HttpConnectionManagerè¿”å›žè¿žæŽ¥è¶…æ—¶ï¼ˆå?ªæœ‰åœ¨è¾¾åˆ°æœ€å¤§è¿žæŽ¥æ•°æ—¶èµ·ä½œç”¨ï¼‰ï¼š1ç§’*/
    private static final long          defaultHttpConnectionManagerTimeout = 3 * 1000;

    /**
     * HTTPè¿žæŽ¥ç®¡ç?†å™¨ï¼Œè¯¥è¿žæŽ¥ç®¡ç?†å™¨å¿…é¡»æ˜¯çº¿ç¨‹å®‰å…¨çš„.
     */
    private HttpConnectionManager      connectionManager;

    private static HttpProtocolHandler httpProtocolHandler                 = new HttpProtocolHandler();

    /**
     * å·¥åŽ‚æ–¹æ³•
     * 
     * @return
     */
    public static HttpProtocolHandler getInstance() {
        return httpProtocolHandler;
    }

    /**
     * ç§?æœ‰çš„æž„é€ æ–¹æ³•
     */
    private HttpProtocolHandler() {
        // åˆ›å»ºä¸€ä¸ªçº¿ç¨‹å®‰å…¨çš„HTTPè¿žæŽ¥æ± 
        connectionManager = new MultiThreadedHttpConnectionManager();
        connectionManager.getParams().setDefaultMaxConnectionsPerHost(defaultMaxConnPerHost);
        connectionManager.getParams().setMaxTotalConnections(defaultMaxTotalConn);

        IdleConnectionTimeoutThread ict = new IdleConnectionTimeoutThread();
        ict.addConnectionManager(connectionManager);
        ict.setConnectionTimeout(defaultIdleConnTimeout);

        ict.start();
    }

    /**
     * æ‰§è¡ŒHttpè¯·æ±‚
     * 
     * @param request è¯·æ±‚æ•°æ?®
     * @param strParaFileName æ–‡ä»¶ç±»åž‹çš„å?‚æ•°å??
     * @param strFilePath æ–‡ä»¶è·¯å¾„
     * @return 
     * @throws HttpException, IOException 
     */
    public HttpResponse execute(HttpRequest request, String strParaFileName, String strFilePath) throws HttpException, IOException {
        HttpClient httpclient = new HttpClient(connectionManager);

        // è®¾ç½®è¿žæŽ¥è¶…æ—¶
        int connectionTimeout = defaultConnectionTimeout;
        if (request.getConnectionTimeout() > 0) {
            connectionTimeout = request.getConnectionTimeout();
        }
        httpclient.getHttpConnectionManager().getParams().setConnectionTimeout(connectionTimeout);

        // è®¾ç½®å›žåº”è¶…æ—¶
        int soTimeout = defaultSoTimeout;
        if (request.getTimeout() > 0) {
            soTimeout = request.getTimeout();
        }
        httpclient.getHttpConnectionManager().getParams().setSoTimeout(soTimeout);

        // è®¾ç½®ç­‰å¾…ConnectionManageré‡Šæ”¾connectionçš„æ—¶é—´
        httpclient.getParams().setConnectionManagerTimeout(defaultHttpConnectionManagerTimeout);

        String charset = request.getCharset();
        charset = charset == null ? DEFAULT_CHARSET : charset;
        HttpMethod method = null;

        //getæ¨¡å¼?ä¸”ä¸?å¸¦ä¸Šä¼ æ–‡ä»¶
        if (request.getMethod().equals(HttpRequest.METHOD_GET)) {
            method = new GetMethod(request.getUrl());
            method.getParams().setCredentialCharset(charset);

            // parseNotifyConfigä¼šä¿?è¯?ä½¿ç”¨GETæ–¹æ³•æ—¶ï¼Œrequestä¸€å®šä½¿ç”¨QueryString
            method.setQueryString(request.getQueryString());
        } else if(strParaFileName.equals("") && strFilePath.equals("")) {
        	//postæ¨¡å¼?ä¸”ä¸?å¸¦ä¸Šä¼ æ–‡ä»¶
            method = new PostMethod(request.getUrl());
            ((PostMethod) method).addParameters(request.getParameters());
            method.addRequestHeader("Content-Type", "application/x-www-form-urlencoded; text/html; charset=" + charset);
        }
        else {
        	//postæ¨¡å¼?ä¸”å¸¦ä¸Šä¼ æ–‡ä»¶
            method = new PostMethod(request.getUrl());
            List<Part> parts = new ArrayList<Part>();
            for (int i = 0; i < request.getParameters().length; i++) {
            	parts.add(new StringPart(request.getParameters()[i].getName(), request.getParameters()[i].getValue(), charset));
            }
            //å¢žåŠ æ–‡ä»¶å?‚æ•°ï¼ŒstrParaFileNameæ˜¯å?‚æ•°å??ï¼Œä½¿ç”¨æœ¬åœ°æ–‡ä»¶
            parts.add(new FilePart(strParaFileName, new FilePartSource(new File(strFilePath))));
            
            // è®¾ç½®è¯·æ±‚ä½“
            ((PostMethod) method).setRequestEntity(new MultipartRequestEntity(parts.toArray(new Part[0]), new HttpMethodParams()));
        }

        // è®¾ç½®Http Headerä¸­çš„User-Agentå±žæ€§
        method.addRequestHeader("User-Agent", "Mozilla/4.0");
        HttpResponse response = new HttpResponse();

        try {
            httpclient.executeMethod(method);
            if (request.getResultType().equals(HttpResultType.STRING)) {
                response.setStringResult(method.getResponseBodyAsString());
            } else if (request.getResultType().equals(HttpResultType.BYTES)) {
                response.setByteResult(method.getResponseBody());
            }
            response.setResponseHeaders(method.getResponseHeaders());
        } catch (UnknownHostException ex) {

            return null;
        } catch (IOException ex) {

            return null;
        } catch (Exception ex) {

            return null;
        } finally {
            method.releaseConnection();
        }
        return response;
    }

    /**
     * å°†NameValuePairsæ•°ç»„è½¬å?˜ä¸ºå­—ç¬¦ä¸²
     * 
     * @param nameValues
     * @return
     */
    protected String toString(NameValuePair[] nameValues) {
        if (nameValues == null || nameValues.length == 0) {
            return "null";
        }

        StringBuffer buffer = new StringBuffer();

        for (int i = 0; i < nameValues.length; i++) {
            NameValuePair nameValue = nameValues[i];

            if (i == 0) {
                buffer.append(nameValue.getName() + "=" + nameValue.getValue());
            } else {
                buffer.append("&" + nameValue.getName() + "=" + nameValue.getValue());
            }
        }

        return buffer.toString();
    }
}
