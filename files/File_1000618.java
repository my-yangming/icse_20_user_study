package org.nutz.lang.random;

import java.awt.Color;
import java.awt.Font;
import java.util.Arrays;
import java.util.Random;
import java.util.UUID;

import org.nutz.img.Colors;
import org.nutz.img.Fonts;
import org.nutz.lang.Strings;

/**
 * å¯¹éš?æœºæ•°æ“?ä½œçš„å°?è£…
 * 
 * @author zozoh(zozohtnt@gmail.com)
 */
public abstract class R {

    static Random r = new Random();

    /**
     * æ ¹æ?®ä¸€ä¸ªèŒƒå›´ï¼Œç”Ÿæˆ?ä¸€ä¸ªéš?æœºçš„æ•´æ•°
     * 
     * @param min
     *            æœ€å°?å€¼ï¼ˆåŒ…æ‹¬ï¼‰
     * @param max
     *            æœ€å¤§å€¼ï¼ˆåŒ…æ‹¬ï¼‰
     * @return éš?æœºæ•°
     */
    public static int random(int min, int max) {
        return r.nextInt(max - min + 1) + min;
    }

    /**
     * æ ¹æ?®ä¸€ä¸ªé•¿åº¦èŒƒå›´ï¼Œç”Ÿæˆ?ä¸€ä¸ªéš?æœºçš„å­—ç¬¦ä¸²ï¼Œå­—ç¬¦ä¸²å†…å®¹ä¸º [0-9a-zA-Z_]
     * 
     * @param min
     *            æœ€å°?å€¼ï¼ˆåŒ…æ‹¬ï¼‰
     * @param max
     *            æœ€å¤§å€¼ï¼ˆåŒ…æ‹¬ï¼‰
     * @return éš?æœºå­—ç¬¦ä¸²
     */

    public static StringGenerator sg(int min, int max) {
        return new StringGenerator(min, max);
    }

    /**
     * ç”Ÿæˆ?ä¸€ä¸ªç¡®å®šé•¿åº¦çš„éš?æœºå­—ç¬¦ä¸²ï¼Œå­—ç¬¦ä¸²å†…å®¹ä¸º [0-9a-zA-Z_]
     * 
     * @param len
     *            å­—ç¬¦ä¸²é•¿åº¦
     * @return éš?æœºå­—ç¬¦ä¸²
     */
    public static StringGenerator sg(int len) {
        return new StringGenerator(len, len);
    }

    private static final char[] _UU64 = "-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".toCharArray();
    private static final char[] _UU32 = "0123456789abcdefghijklmnopqrstuv".toCharArray();

    /**
     * @return 64è¿›åˆ¶è¡¨ç¤ºçš„ç´§å‡‘æ ¼å¼?çš„ UUID
     * @see org.nutz.lang.random.R#UU64(UUID)
     */
    public static String UU64() {
        return UU64(UUID.randomUUID());
    }

    /**
     * è¿”å›žä¸€ä¸ª UUID ï¼Œå¹¶ç”¨ 64 è¿›åˆ¶è½¬æ?¢æˆ?ç´§å‡‘å½¢å¼?çš„å­—ç¬¦ä¸²ï¼Œå†…å®¹ä¸º [\\-0-9a-zA-Z_]
     * <p>
     * æ¯”å¦‚ä¸€ä¸ªç±»ä¼¼ä¸‹é?¢çš„ UUID:
     * 
     * <pre>
     * a6c5c51c-689c-4525-9bcd-c14c1e107c80
     * ä¸€å…± 128 ä½?ï¼Œåˆ†å?šL64 å’Œ R64ï¼Œåˆ†ä¸ºä¸ºä¸¤ä¸ª 64ä½?æ•°ï¼ˆä¸¤ä¸ª longï¼‰
     *    > L = uu.getLeastSignificantBits();
     *    > R = uu.getMostSignificantBits();
     * è€Œä¸€ä¸ª 64 è¿›åˆ¶æ•°ï¼Œæ˜¯ 6 ä½?ï¼Œå› æ­¤æˆ‘ä»¬å?–å€¼çš„é¡ºåº?æ˜¯
     * 1. ä»ŽL64ä½?å?–10æ¬¡ï¼Œæ¯?æ¬¡å?–6ä½?
     * 2. ä»ŽL64ä½?å?–æœ€å?Žçš„4ä½? ï¼‹ R64ä½?å¤´2ä½?æ‹¼ä¸Š
     * 3. ä»ŽR64ä½?å?–10æ¬¡ï¼Œæ¯?æ¬¡å?–6ä½?
     * 4. å‰©ä¸‹çš„ä¸¤ä½?æœ€å?Žå?–
     * è¿™æ ·ï¼Œå°±èƒ½ç”¨ä¸€ä¸ª 22 é•¿åº¦çš„å­—ç¬¦ä¸²è¡¨ç¤ºä¸€ä¸ª 32 é•¿åº¦çš„UUIDï¼ŒåŽ‹ç¼©äº† 1/3
     * </pre>
     * 
     * @param uu
     *            UUID å¯¹è±¡
     * @return 64è¿›åˆ¶è¡¨ç¤ºçš„ç´§å‡‘æ ¼å¼?çš„ UUID
     */
    public static String UU64(UUID uu) {
        int index = 0;
        char[] cs = new char[22];
        long L = uu.getMostSignificantBits();
        long R = uu.getLeastSignificantBits();
        long mask = 63;
        // ä»ŽL64ä½?å?–10æ¬¡ï¼Œæ¯?æ¬¡å?–6ä½?
        for (int off = 58; off >= 4; off -= 6) {
            long hex = (L & (mask << off)) >>> off;
            cs[index++] = _UU64[(int) hex];
        }
        // ä»ŽL64ä½?å?–æœ€å?Žçš„4ä½? ï¼‹ R64ä½?å¤´2ä½?æ‹¼ä¸Š
        int l = (int) (((L & 0xF) << 2) | ((R & (3 << 62)) >>> 62));
        cs[index++] = _UU64[l];
        // ä»ŽR64ä½?å?–10æ¬¡ï¼Œæ¯?æ¬¡å?–6ä½?
        for (int off = 56; off >= 2; off -= 6) {
            long hex = (R & (mask << off)) >>> off;
            cs[index++] = _UU64[(int) hex];
        }
        // å‰©ä¸‹çš„ä¸¤ä½?æœ€å?Žå?–
        cs[index++] = _UU64[(int) (R & 3)];
        // è¿”å›žå­—ç¬¦ä¸²
        return new String(cs);
    }

    /**
     * ä»Žä¸€ä¸ª UU64 æ?¢å¤?å›žä¸€ä¸ª UUID å¯¹è±¡
     * 
     * @param uu64
     *            64è¿›åˆ¶è¡¨ç¤ºçš„ UUID, å†…å®¹ä¸º [\\-0-9a-zA-Z_]
     * @return UUID å¯¹è±¡
     */
    public static UUID fromUU64(String uu64) {
        String uu16 = UU16FromUU64(uu64);
        return UUID.fromString(UU(uu16));
    }

    public static String UU32(UUID uu) {
        StringBuilder sb = new StringBuilder();
        long m = uu.getMostSignificantBits();
        long l = uu.getLeastSignificantBits();
        for (int i = 0; i < 13; i++) {
            sb.append(_UU32[(int) (m >> ((13 - i - 1) * 5)) & 31]);
        }
        for (int i = 0; i < 13; i++) {
            sb.append(_UU32[(int) (l >> ((13 - i - 1)) * 5) & 31]);
        }
        return sb.toString();
    }

    public static String UU32() {
        return UU32(UUID.randomUUID());
    }

    public static UUID fromUU32(String u32) {
        return new UUID(parseUnsignedLong(u32.substring(0, 13), 32),
                        parseUnsignedLong(u32.substring(13), 32));
    }

    public static long parseUnsignedLong(String s, int radix) {
        int len = s.length();
        long first = Long.parseLong(s.substring(0, len - 1), radix);
        int second = Character.digit(s.charAt(len - 1), radix);
        return first * radix + second;
    }

    /**
     * å°†ç´§å‡‘æ ¼å¼?çš„ UU16 å­—ç¬¦ä¸²å?˜æˆ?æ ‡å‡† UUID æ ¼å¼?çš„å­—ç¬¦ä¸²
     * 
     * @param uu16
     * @return æ ‡å‡† UUID å­—ç¬¦ä¸²
     */
    public static String UU(String uu16) {
        StringBuilder sb = new StringBuilder();
        sb.append(uu16.substring(0, 8));
        sb.append('-');
        sb.append(uu16.substring(8, 12));
        sb.append('-');
        sb.append(uu16.substring(12, 16));
        sb.append('-');
        sb.append(uu16.substring(16, 20));
        sb.append('-');
        sb.append(uu16.substring(20));
        return sb.toString();
    }

    private static final char[] _UU16 = "0123456789abcdef".toCharArray();

    /**
     * å°†ä¸€ä¸ª UU64 è¡¨ç¤ºçš„ç´§å‡‘å­—ç¬¦ä¸²ï¼Œå?˜æˆ? UU16 è¡¨ç¤ºçš„å­—ç¬¦ä¸²
     * 
     * <pre>
     * æ¯?æ¬¡å?–2ä¸ªå­—ç¬¦ï¼Œæ?¢å¤?æˆ?3ä¸ªbyteï¼Œé‡?å¤?10æ¬¡ï¼Œ æœ€å?Žä¸€æ¬¡ï¼Œæ˜¯ç”¨æœ€å?Ž2ä¸ªå­—ç¬¦ï¼Œæ?¢å¤?å›ž2ä¸ªbyte </prev>
     * 
     * @param uu64
     *            uu64 64è¿›åˆ¶è¡¨ç¤ºçš„ UUID, å†…å®¹ä¸º [\\-0-9a-zA-Z_]
     * @return 16è¿›åˆ¶è¡¨ç¤ºçš„ç´§å‡‘æ ¼å¼?çš„ UUID
     */
    public static String UU16FromUU64(String uu64) {
        byte[] bytes = new byte[32];
        char[] cs = uu64.toCharArray();
        int index = 0;
        // æ¯?æ¬¡å?–2ä¸ªå­—ç¬¦ï¼Œæ?¢å¤?æˆ?3ä¸ªbyteï¼Œé‡?å¤?10æ¬¡ï¼Œ
        for (int i = 0; i < 10; i++) {
            int off = i * 2;
            char cl = cs[off];
            char cr = cs[off + 1];
            int l = Arrays.binarySearch(_UU64, cl);
            int r = Arrays.binarySearch(_UU64, cr);
            int n = (l << 6) | r;
            bytes[index++] = (byte) ((n & 0xF00) >>> 8);
            bytes[index++] = (byte) ((n & 0xF0) >>> 4);
            bytes[index++] = (byte) (n & 0xF);
        }
        // æœ€å?Žä¸€æ¬¡ï¼Œæ˜¯ç”¨æœ€å?Ž2ä¸ªå­—ç¬¦ï¼Œæ?¢å¤?å›ž2ä¸ªbyte
        char cl = cs[20];
        char cr = cs[21];
        int l = Arrays.binarySearch(_UU64, cl);
        int r = Arrays.binarySearch(_UU64, cr);
        int n = (l << 2) | r;
        bytes[index++] = (byte) ((n & 0xF0) >>> 4);
        bytes[index++] = (byte) (n & 0xF);

        // è¿”å›ž UUID å¯¹è±¡
        char[] names = new char[32];
        for (int i = 0; i < bytes.length; i++)
            names[i] = _UU16[bytes[i]];
        return new String(names);
    }

    /**
     * @return 16è¿›åˆ¶è¡¨ç¤ºçš„ç´§å‡‘æ ¼å¼?çš„ UUID
     */
    public static String UU16() {
        return UU16(UUID.randomUUID());
    }

    /**
     * @param uu
     *            UUID å¯¹è±¡
     * @return 16è¿›åˆ¶è¡¨ç¤ºçš„ç´§å‡‘æ ¼å¼?çš„ UUID
     */
    public static String UU16(UUID uu) {
        return Strings.alignRight(Long.toHexString(uu.getMostSignificantBits()), 16, '0')
               + Strings.alignRight(Long.toHexString(uu.getLeastSignificantBits()), 16, '0');
    }

    /**
     * è¿”å›žæŒ‡å®šé•¿åº¦ç”±éš?æœºæ•°å­—+å°?å†™å­—æ¯?ç»„æˆ?çš„å­—ç¬¦ä¸²
     * 
     * @param length
     *            æŒ‡å®šé•¿åº¦
     * @return éš?æœºå­—ç¬¦ä¸²
     */
    public static String captchaChar(int length) {
        return captchaChar(length, false);
    }

    /**
     * è¿”å›žæŒ‡å®šé•¿åº¦éš?æœºæ•°å­—+å­—æ¯?(å¤§å°?å†™æ•?æ„Ÿ)ç»„æˆ?çš„å­—ç¬¦ä¸²
     * 
     * @param length
     *            æŒ‡å®šé•¿åº¦
     * @param caseSensitivity
     *            æ˜¯å?¦åŒºåˆ†å¤§å°?å†™
     * @return éš?æœºå­—ç¬¦ä¸²
     */
    public static String captchaChar(int length, boolean caseSensitivity) {
        StringBuilder sb = new StringBuilder();
        Random rand = new Random();// éš?æœºç”¨ä»¥ä¸‹ä¸‰ä¸ªéš?æœºç”Ÿæˆ?å™¨
        Random randdata = new Random();
        int data = 0;
        for (int i = 0; i < length; i++) {
            int index = rand.nextInt(caseSensitivity ? 3 : 2);
            // ç›®çš„æ˜¯éš?æœºé€‰æ‹©ç”Ÿæˆ?æ•°å­—ï¼Œå¤§å°?å†™å­—æ¯?
            switch (index) {
            case 0:
                data = randdata.nextInt(10);// ä»…ä»…ä¼šç”Ÿæˆ?0~9, 0~9çš„ASCIIä¸º48~57
                sb.append(data);
                break;
            case 1:
                data = randdata.nextInt(26) + 97;// ä¿?è¯?å?ªä¼šäº§ç”ŸASCIIä¸º97~122(a-z)ä¹‹é—´çš„æ•´æ•°,
                sb.append((char) data);
                break;
            case 2: // caseSensitivityä¸ºtrueçš„æ—¶å€™, æ‰?ä¼šæœ‰å¤§å†™å­—æ¯?
                data = randdata.nextInt(26) + 65;// ä¿?è¯?å?ªä¼šäº§ç”ŸASCIIä¸º65~90(A~Z)ä¹‹é—´çš„æ•´æ•°
                sb.append((char) data);
                break;
            }
        }
        return sb.toString();
    }

    /**
     * è¿”å›žæŒ‡å®šé•¿åº¦éš?æœºæ•°å­—ç»„æˆ?çš„å­—ç¬¦ä¸²
     * 
     * @param length
     *            æŒ‡å®šé•¿åº¦
     * @return éš?æœºå­—ç¬¦ä¸²
     */
    public static String captchaNumber(int length) {
        StringBuilder sb = new StringBuilder();
        Random rand = new Random();
        for (int i = 0; i < length; i++) {
            sb.append(rand.nextInt(10));
        }
        return sb.toString();
    }

    /**
     * è®¾ç½®éš?æœºæ•°ç”Ÿæˆ?å™¨çš„å®žä¾‹, ä¾‹å¦‚ SecureRandom
     * 
     * @param r
     *            éš?æœºç”Ÿæˆ?å™¨,ä¸?å?¯ä»¥æ˜¯null
     */
    public static void setR(Random r) {
        if (r == null)
            throw new NullPointerException("Random MUST NOT NULL");
        R.r = r;
    }

    /**
     * èŽ·å?–ä¸€ä¸ªéš?æœºé¢œè‰²
     * 
     * @return é¢œè‰²
     */
    public static Color color() {
        return Colors.randomColor();
    }

    /**
     * èŽ·å?–ä¸€ä¸ªéš?æœºé¢œè‰²ï¼Œæ ¼å¼?ä¸ºâ€œrgb(12, 25, 33)â€?
     * 
     * @return rgbæ ¼å¼?å­—ç¬¦ä¸²
     */
    public static String colorRGB() {
        return Colors.toRGB(Colors.randomColor());
    }

    /**
     * èŽ·å?–ä¸€ä¸ªéš?æœºå­—ä½“ï¼Œä¸?èƒ½ä¿?è¯?é?žè‹±æ–‡å­—ç¬¦äº§ç”Ÿä¹±ç ?é—®é¢˜
     * 
     * @param style
     *            å­—ä½“æ ·å¼? æ”¯æŒ?ï¼šFont.PLAIN Font.BOLD Font.ITALIC
     * @param size
     *            å­—ä½“å¤§å°?
     * @return å­—ä½“
     */
    public static Font font(int style, int size) {
        return Fonts.random(style, size);
    }

    public static Random get() {
        return r;
    }
}
