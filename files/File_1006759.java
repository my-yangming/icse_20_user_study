package org.jee.rpc;

import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.net.InetSocketAddress;
import java.net.Socket;

/**
 * æ??è¿°:Rpcæœ¬åœ°æœ?åŠ¡ä»£ç?†ç±»
 * 1. å°†æœ¬åœ°æŽ¥å?£è°ƒç”¨è½¬åŒ–ä¸ºJDKçš„åŠ¨æ€?è°ƒç”¨,åœ¨åŠ¨æ€?è°ƒç”¨ä¸­å®žçŽ°æŽ¥å?£çš„è¿œç¨‹è°ƒç”¨
 * 2. åˆ›å»ºSocketå®¢æˆ·ç«¯,æ ¹æ?®åˆ¶å®šåœ°å?€è¿žæŽ¥è¿œç¨‹æœ?åŠ¡æ??ä¾›è€…
 * 3. å°†è¿œç¨‹æœ?åŠ¡è°ƒç”¨æ‰€éœ€çš„æŽ¥å?£ç±»,æ–¹æ³•å??,å?‚æ•°åˆ—è¡¨ç­‰ç¼–ç ?å?Žå?‘é€?ç»™æœ?åŠ¡æ??ä¾›è€…
 * 4. å?Œæ­¥é˜»å¡žç­‰å¾…æœ?åŠ¡ç«¯è¿”å›žåº”ç­”,èŽ·å?–åº”ç­”å?Žè¿”å›ž
 * Created by bysocket on 16/2/29.
 */
public class RpcImporter<S> {
    public S importer(final Class<?> serviceClass, final InetSocketAddress address) {
        // JDKåŠ¨æ€?ä»£ç?†,å®žçŽ°æŽ¥å?£çš„è¿œç¨‹è°ƒç”¨
        return (S) Proxy.newProxyInstance(serviceClass.getClassLoader(),
                new Class<?>[]{serviceClass.getInterfaces()[0]},
                new InvocationHandler() {

                    @Override
                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                        Socket socket = null;
                        ObjectOutputStream output = null;
                        ObjectInputStream  input  = null;

                        try {
                            // è¿žæŽ¥è¿œç¨‹æœ?åŠ¡æ??ä¾›è€…
                            socket = new Socket();
                            socket.connect(address);

                            // å¯¹è±¡è¾“å‡ºæµ?
                            output = new ObjectOutputStream(socket.getOutputStream());
                            output.writeUTF(serviceClass.getName());
                            output.writeUTF(method.getName());
                            output.writeObject(method.getParameterTypes());
                            output.writeObject(args);

                            input = new ObjectInputStream(socket.getInputStream());
                            return input.readObject();
                        } finally {
                            if (socket != null) {
                                socket.close();
                            }
                            if (output != null) {
                                output.close();
                            }
                            if (input != null) {
                                input.close();
                            }
                        }
                    }
                });
    }
}
