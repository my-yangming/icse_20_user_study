package org.nutz.lang;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

import org.nutz.lang.util.CronSequenceGenerator;
import org.nutz.log.Log;
import org.nutz.log.Logs;

/**
 * å®šæ—¶ä»»åŠ¡æœ?åŠ¡çš„å?‹å¥½å°?è£…
 * @author QinerG(qinerg@gmail.com)
 */
public abstract class Tasks {

    private static Log logger = Logs.get();

    private static ScheduledThreadPoolExecutor taskScheduler = new ScheduledThreadPoolExecutor(getBestPoolSize());
    private static List<Timer> timerList = new ArrayList<Timer>();
    
    /**
     * é€šè¿‡ cron è¡¨è¾¾å¼?æ?¥é…?ç½®ä»»åŠ¡çš„å?¯åŠ¨æ—¶é—´
     * @param task
     * @param cronExpression
     */
    public static void scheduleAtCron(final Runnable task, String cronExpression) {
        TimeSchedule timeSchedule = new TimeSchedule(task, cronExpression);
        timeSchedule.start();
    }

    /**
     * ç«‹å?³å?¯åŠ¨ï¼Œå¹¶ä»¥å›ºå®šçš„é¢‘çŽ‡æ?¥è¿?è¡Œä»»åŠ¡ã€‚å?Žç»­ä»»åŠ¡çš„å?¯åŠ¨æ—¶é—´ä¸?å?—å‰?æ¬¡ä»»åŠ¡å»¶æ—¶å½±å“?ã€‚
     * @param task å…·ä½“å¾…æ‰§è¡Œçš„ä»»åŠ¡
     * @param periodSeconds æ¯?æ¬¡æ‰§è¡Œä»»åŠ¡çš„é—´éš”æ—¶é—´(å?•ä½?ç§’)
     */
    public static ScheduledFuture<?> scheduleAtFixedRate(Runnable task, long periodSeconds) {
        return scheduleAtFixedRate(task, 0, periodSeconds, TimeUnit.SECONDS);
    }

    /**
     * åœ¨æŒ‡å®šçš„å»¶æ—¶ä¹‹å?Žå¼€å§‹ä»¥å›ºå®šçš„é¢‘çŽ‡æ?¥è¿?è¡Œä»»åŠ¡ã€‚å?Žç»­ä»»åŠ¡çš„å?¯åŠ¨æ—¶é—´ä¸?å?—å‰?æ¬¡ä»»åŠ¡å»¶æ—¶å½±å“?ã€‚
     * @param task å…·ä½“å¾…æ‰§è¡Œçš„ä»»åŠ¡
     * @param initialDelay é¦–æ¬¡æ‰§è¡Œä»»åŠ¡çš„å»¶æ—¶æ—¶é—´
     * @param periodSeconds æ¯?æ¬¡æ‰§è¡Œä»»åŠ¡çš„é—´éš”æ—¶é—´(å?•ä½?ç§’)
     * @param unit æ—¶é—´å?•ä½?
     */
    public static ScheduledFuture<?> scheduleAtFixedRate(Runnable task, long initialDelay, long periodSeconds, TimeUnit unit) {
        return taskScheduler.scheduleAtFixedRate(task, initialDelay, periodSeconds, unit);
    }

    /**
     * åœ¨æŒ‡å®šçš„æ—¶é—´ç‚¹å¼€å§‹ä»¥å›ºå®šçš„é¢‘çŽ‡è¿?è¡Œä»»åŠ¡ã€‚å?Žç»­ä»»åŠ¡çš„å?¯åŠ¨æ—¶é—´ä¸?å?—å‰?æ¬¡ä»»åŠ¡å»¶æ—¶å½±å“?ã€‚
     * @param task å…·ä½“å¾…æ‰§è¡Œçš„ä»»åŠ¡
     * @param startTime é¦–æ¬¡è¿?è¡Œçš„æ—¶é—´ç‚¹,æ”¯æŒ? "yyyy-MM-dd HH:mm:ss" æ ¼å¼?
     * @param period æ¯?æ¬¡æ‰§è¡Œä»»åŠ¡çš„é—´éš”æ—¶é—´
     * @param unit æ—¶é—´å?•ä½?
     */
    public static void scheduleAtFixedRate(Runnable task, String startTime, long period, TimeUnit unit) throws ParseException {
        Date dt = Times.D(startTime);
        scheduleAtFixedRate(task, dt, period, unit);
    }

    /**
     * åœ¨æŒ‡å®šçš„æ—¶é—´ç‚¹å¼€å§‹ä»¥å›ºå®šçš„é¢‘çŽ‡è¿?è¡Œä»»åŠ¡ã€‚å?Žç»­ä»»åŠ¡çš„å?¯åŠ¨æ—¶é—´ä¸?å?—å‰?æ¬¡ä»»åŠ¡å»¶æ—¶å½±å“?ã€‚
     * @param task å…·ä½“å¾…æ‰§è¡Œçš„ä»»åŠ¡
     * @param startTime é¦–æ¬¡è¿?è¡Œçš„æ—¶é—´ç‚¹
     * @param period æ¯?æ¬¡æ‰§è¡Œä»»åŠ¡çš„é—´éš”æ—¶é—´
     * @param unit æ—¶é—´å?•ä½?
     */
    public static void scheduleAtFixedRate(final Runnable task, Date startTime, final long period, final TimeUnit unit) {
        final Timer timer = new Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                taskScheduler.scheduleAtFixedRate(task, 0, period, unit);
                timer.cancel();
                timerList.remove(timer);
            }
        }, startTime);
        timerList.add(timer);
    }

    /**
     * ç«‹å?³å?¯åŠ¨ï¼Œä¸¤æ¬¡ä»»åŠ¡é—´ä¿?æŒ?å›ºå®šçš„æ—¶é—´é—´éš”
     * @param task å…·ä½“å¾…æ‰§è¡Œçš„ä»»åŠ¡
     * @param periodSeconds ä¸¤æ¬¡ä»»åŠ¡çš„é—´éš”æ—¶é—´(å?•ä½?ç§’)
     */
    public static ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, long periodSeconds) {
        return scheduleWithFixedDelay(task, 0, periodSeconds, TimeUnit.SECONDS);
    }

    /**
     * åœ¨æŒ‡å®šçš„å»¶æ—¶ä¹‹å?Žå?¯åŠ¨ï¼Œä¸¤æ¬¡ä»»åŠ¡é—´ä¿?æŒ?å›ºå®šçš„æ—¶é—´é—´éš”
     * @param task å…·ä½“å¾…æ‰§è¡Œçš„ä»»åŠ¡
     * @param initialDelay é¦–æ¬¡æ‰§è¡Œä»»åŠ¡çš„å»¶æ—¶æ—¶é—´
     * @param period ä¸¤æ¬¡ä»»åŠ¡çš„é—´éš”æ—¶é—´(å?•ä½?ç§’)
     * @param unit æ—¶é—´å?•ä½?
     */
    public static ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, long initialDelay, long period, TimeUnit unit) {
        return taskScheduler.scheduleWithFixedDelay(task, initialDelay, period, unit);
    }

    /**
     * åœ¨æŒ‡å®šçš„æ—¶é—´ç‚¹å?¯åŠ¨ï¼Œä¸¤æ¬¡ä»»åŠ¡é—´ä¿?æŒ?å›ºå®šçš„æ—¶é—´é—´éš”
     * @param task å…·ä½“å¾…æ‰§è¡Œçš„ä»»åŠ¡
     * @param startTime é¦–æ¬¡è¿?è¡Œçš„æ—¶é—´ç‚¹,æ”¯æŒ? "yyyy-MM-dd HH:mm:ss" æ ¼å¼?
     * @param period ä¸¤æ¬¡ä»»åŠ¡çš„é—´éš”æ—¶é—´
     * @param unit æ—¶é—´å?•ä½?
     */
    public static void scheduleWithFixedDelay(Runnable task, String startTime, long period, TimeUnit unit) throws ParseException {
        Date dt = Times.D(startTime);
        scheduleWithFixedDelay(task, dt, period, unit);
    }

    /**
     * åœ¨æŒ‡å®šçš„æ—¶é—´ç‚¹å?¯åŠ¨ï¼Œä¸¤æ¬¡ä»»åŠ¡é—´ä¿?æŒ?å›ºå®šçš„æ—¶é—´é—´éš”
     * @param task å…·ä½“å¾…æ‰§è¡Œçš„ä»»åŠ¡
     * @param startTime é¦–æ¬¡è¿?è¡Œçš„æ—¶é—´ç‚¹
     * @param period ä¸¤æ¬¡ä»»åŠ¡çš„é—´éš”æ—¶é—´
     * @param unit æ—¶é—´å?•ä½?
     */
    public static void scheduleWithFixedDelay(final Runnable task, Date startTime, final long period, final TimeUnit unit) {
        final Timer timer = new Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                taskScheduler.scheduleWithFixedDelay(task, 0, period, unit);
                timer.cancel();
                timerList.remove(timer);
            }
        }, startTime);
        timerList.add(timer);
    }
    /**
     * åœ¨æŒ‡å®šçš„æ—¶é—´ç‚¹å?¯åŠ¨ä»»åŠ¡å?ªè¿?è¡Œä¸€æ¬¡
     * @param task å…·ä½“å¾…æ‰§è¡Œçš„ä»»åŠ¡
     * @param startTime è¿?è¡Œçš„æ—¶é—´ç‚¹
     */
    public static void scheduleAtFixedTime(final Runnable task, Date startTime) {
        final Timer timer = new Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                taskScheduler.execute(task);
                timer.cancel();
                timerList.remove(timer);
            }
        }, startTime);
        timerList.add(timer);
    }
    /**
     * åœ¨ç¬¦å?ˆæ?¡ä»¶çš„æ—¶é—´ç‚¹å?¯åŠ¨ä»»åŠ¡
     * @see scheduleAtCron
     * @param task å…·ä½“å¾…æ‰§è¡Œçš„ä»»åŠ¡
     * @param expression  cronè¡¨è¾¾å¼?
     */
    @Deprecated
    public static void scheduleAtFixedTime(final Runnable task, String cronExpression) {
    	scheduleAtCron(task, cronExpression);
    }

    /**
     * è°ƒæ•´çº¿ç¨‹æ± å¤§å°?
     * @param threadPoolSize çº¿ç¨‹æ± å¤§å°?
     */
    public static void resizeThreadPool(int threadPoolSize) {
        taskScheduler.setCorePoolSize(threadPoolSize);
    }

    /**
     * è¿”å›žå®šæ—¶ä»»åŠ¡çº¿ç¨‹æ± ï¼Œå?¯å?šæ›´é«˜çº§çš„åº”ç”¨
     * @return å½“å‰?çš„çº¿ç¨‹æ± 
     */
    public static ScheduledThreadPoolExecutor getTaskScheduler() {
        return taskScheduler;
    }

    /**
     * å…³é—­å®šæ—¶ä»»åŠ¡æœ?åŠ¡
     * <p>ç³»ç»Ÿå…³é—­æ—¶å?¯è°ƒç”¨æ­¤æ–¹æ³•ç»ˆæ­¢æ­£åœ¨æ‰§è¡Œçš„å®šæ—¶ä»»åŠ¡ï¼Œä¸€æ—¦å…³é—­å?Žä¸?å…?è®¸å†?å?‘çº¿ç¨‹æ± ä¸­æ·»åŠ ä»»åŠ¡ï¼Œå?¦åˆ™ä¼šæŠ¥RejectedExecutionExceptionå¼‚å¸¸</p>
     */
    public static void depose() {
    	int timerNum = timerList.size();
    	//æ¸…é™¤Timer
    	synchronized (timerList) {
    		for (Timer t: timerList)
    			t.cancel();
    		timerList.clear();
    	}
    	
        List<Runnable> awaitingExecution = taskScheduler.shutdownNow();
        logger.infof("Tasks stopping. Tasks awaiting execution: %d", timerNum + awaitingExecution.size());
    }

    /**
     * é‡?å?¯åŠ¨å®šæ—¶ä»»åŠ¡æœ?åŠ¡
     */
    public static void reset() {
        depose();
        taskScheduler = new ScheduledThreadPoolExecutor(getBestPoolSize());
    }

    /**
     * æ ¹æ?® Java è™šæ‹Ÿæœºå?¯ç”¨å¤„ç?†å™¨æ•°ç›®è¿”å›žæœ€ä½³çš„çº¿ç¨‹æ•°ã€‚<br>
     * æœ€ä½³çš„çº¿ç¨‹æ•° = CPUå?¯ç”¨æ ¸å¿ƒæ•° / (1 - é˜»å¡žç³»æ•°)ï¼Œå…¶ä¸­é˜»å¡žç³»æ•°è¿™é‡Œè®¾ä¸º0.9
     */
    private static int getBestPoolSize() {
        try {
            // JVMå?¯ç”¨å¤„ç?†å™¨çš„ä¸ªæ•°
            final int cores = Runtime.getRuntime().availableProcessors();
            // æœ€ä½³çš„çº¿ç¨‹æ•° = CPUå?¯ç”¨æ ¸å¿ƒæ•° / (1 - é˜»å¡žç³»æ•°)
            // TODO é˜»å¡žç³»æ•°æ˜¯ä¸?æ˜¯éœ€è¦?æœ‰ä¸ªsetteræ–¹æ³•èƒ½è®©ä½¿ç”¨è€…è‡ªç”±è®¾ç½®å‘¢ï¼Ÿ
            return (int)(cores / (1 - 0.9));
        }
        catch (Throwable e) {
            // å¼‚å¸¸å?‘ç”Ÿæ—¶å§‘ä¸”è¿”å›ž10ä¸ªä»»åŠ¡çº¿ç¨‹æ± 
            return 10;
        }
    }
}

class TimeSchedule implements Runnable {
    private final Runnable task;
    private final CronSequenceGenerator cron;

    public TimeSchedule(Runnable task, String expression) {
        this.task = task;
        this.cron =  new CronSequenceGenerator(expression);
    }

    public void start(){
        Date startTime = cron.next(new Date());
        Tasks.scheduleAtFixedTime(this,startTime);
    }

    @Override
    public void run() {
        task.run();
        start();
    }
}
