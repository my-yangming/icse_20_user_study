package com.roncoo.pay.reconciliation.utils.alipay;

import com.roncoo.pay.trade.utils.AlipayConfigUtil;
import org.apache.commons.httpclient.NameValuePair;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Node;
import org.dom4j.io.SAXReader;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/* *
 *ç±»å??ï¼šAlipaySubmit
 *åŠŸèƒ½ï¼šæ”¯ä»˜å®?å?„æŽ¥å?£è¯·æ±‚æ??äº¤ç±»
 *è¯¦ç»†ï¼šæž„é€ æ”¯ä»˜å®?å?„æŽ¥å?£è¡¨å?•HTMLæ–‡æœ¬ï¼ŒèŽ·å?–è¿œç¨‹HTTPæ•°æ?®
 *ç‰ˆæœ¬ï¼š3.3
 *æ—¥æœŸï¼š2012-08-13
 *è¯´æ˜Žï¼š
 *ä»¥ä¸‹ä»£ç ?å?ªæ˜¯ä¸ºäº†æ–¹ä¾¿å•†æˆ·æµ‹è¯•è€Œæ??ä¾›çš„æ ·ä¾‹ä»£ç ?ï¼Œå•†æˆ·å?¯ä»¥æ ¹æ?®è‡ªå·±ç½‘ç«™çš„éœ€è¦?ï¼ŒæŒ‰ç…§æŠ€æœ¯æ–‡æ¡£ç¼–å†™,å¹¶é?žä¸€å®šè¦?ä½¿ç”¨è¯¥ä»£ç ?ã€‚
 *è¯¥ä»£ç ?ä»…ä¾›å­¦ä¹ å’Œç ”ç©¶æ”¯ä»˜å®?æŽ¥å?£ä½¿ç”¨ï¼Œå?ªæ˜¯æ??ä¾›ä¸€ä¸ªå?‚è€ƒã€‚
 */

public class AlipaySubmit {

	/**
	 * å?ˆä½œèº«ä»½è€…IDï¼Œç­¾çº¦è´¦å?·
	 */
	private static final String PARTNER = AlipayConfigUtil.readConfig("partner");

	/**
	 * MD5å¯†é’¥ï¼Œå®‰å…¨æ£€éªŒç ?
	 */
	private static final String KEY = AlipayConfigUtil.readConfig("key");

	/**
	 * æ”¯ä»˜å®?æ??ä¾›ç»™å•†æˆ·çš„æœ?åŠ¡æŽ¥å…¥ç½‘å…³URL(æ–°)
	 */
	private static final String ALIPAY_GATEWAY_NEW = AlipayConfigUtil.readConfig("alipay_gateway_new");

	/**
	 * ç­¾å??æ–¹å¼?
	 */
	private static final String SIGN_TYPE = AlipayConfigUtil.readConfig("sign_type");

	/**
	 * å­—ç¬¦ç¼–ç ?æ ¼å¼? ç›®å‰?æ”¯æŒ?
	 */
	private static final String INPUT_CHARSET = AlipayConfigUtil.readConfig("input_charset");

	/**
	 * ç”Ÿæˆ?ç­¾å??ç»“æžœ
	 * 
	 * @param sPara
	 *            è¦?ç­¾å??çš„æ•°ç»„
	 * @return ç­¾å??ç»“æžœå­—ç¬¦ä¸²
	 */
	public static String buildRequestMysign(Map<String, String> sPara) {
		String prestr = AlipayCore.createLinkString(sPara); // æŠŠæ•°ç»„æ‰€æœ‰å…ƒç´ ï¼ŒæŒ‰ç…§â€œå?‚æ•°=å?‚æ•°å€¼â€?çš„æ¨¡å¼?ç”¨â€œ&â€?å­—ç¬¦æ‹¼æŽ¥æˆ?å­—ç¬¦ä¸²
		String mysign = "";
		if (SIGN_TYPE.equals("MD5")) {
			mysign = MD5.sign(prestr, KEY, INPUT_CHARSET);
		}
		return mysign;
	}

	/**
	 * ç”Ÿæˆ?è¦?è¯·æ±‚ç»™æ”¯ä»˜å®?çš„å?‚æ•°æ•°ç»„
	 * 
	 * @param sParaTemp
	 *            è¯·æ±‚å‰?çš„å?‚æ•°æ•°ç»„
	 * @return è¦?è¯·æ±‚çš„å?‚æ•°æ•°ç»„
	 */
	public static Map<String, String> buildRequestPara(Map<String, String> sParaTemp) {
		// é™¤åŽ»æ•°ç»„ä¸­çš„ç©ºå€¼å’Œç­¾å??å?‚æ•°
		Map<String, String> sPara = AlipayCore.paraFilter(sParaTemp);

		// ç”Ÿæˆ?ç­¾å??ç»“æžœ
		String mysign = buildRequestMysign(sPara);

		// ç­¾å??ç»“æžœä¸Žç­¾å??æ–¹å¼?åŠ å…¥è¯·æ±‚æ??äº¤å?‚æ•°ç»„ä¸­
		sPara.put("sign", mysign);
		sPara.put("sign_type", SIGN_TYPE);

		return sPara;
	}

	/**
	 * å»ºç«‹è¯·æ±‚ï¼Œä»¥è¡¨å?•HTMLå½¢å¼?æž„é€ ï¼ˆé»˜è®¤ï¼‰
	 * 
	 * @param sParaTemp
	 *            è¯·æ±‚å?‚æ•°æ•°ç»„
	 * @param strMethod
	 *            æ??äº¤æ–¹å¼?ã€‚ä¸¤ä¸ªå€¼å?¯é€‰ï¼špostã€?get
	 * @param strButtonName
	 *            ç¡®è®¤æŒ‰é’®æ˜¾ç¤ºæ–‡å­—
	 * @return æ??äº¤è¡¨å?•HTMLæ–‡æœ¬
	 */
	public static String buildRequest(Map<String, String> sParaTemp, String strMethod, String strButtonName) {
		// å¾…è¯·æ±‚å?‚æ•°æ•°ç»„
		Map<String, String> sPara = buildRequestPara(sParaTemp);

		List<String> keys = new ArrayList<String>(sPara.keySet());

		StringBuffer sbHtml = new StringBuffer();

		sbHtml.append("<form id=\"alipaysubmit\" name=\"alipaysubmit\" action=\"" + ALIPAY_GATEWAY_NEW + "_input_charset=" + INPUT_CHARSET + "\" method=\"" + strMethod + "\">");

		for (int i = 0; i < keys.size(); i++) {
			String name = (String) keys.get(i);
			String value = (String) sPara.get(name);

			sbHtml.append("<input type=\"hidden\" name=\"" + name + "\" value=\"" + value + "\"/>");
		}

		// submitæŒ‰é’®æŽ§ä»¶è¯·ä¸?è¦?å?«æœ‰nameå±žæ€§
		sbHtml.append("<input type=\"submit\" value=\"" + strButtonName + "\" style=\"display:none;\"></form>");
		sbHtml.append("<script>document.forms['alipaysubmit'].submit();</script>");

		return sbHtml.toString();
	}

	/**
	 * MAPç±»åž‹æ•°ç»„è½¬æ?¢æˆ?NameValuePairç±»åž‹
	 * 
	 * @param properties
	 *            MAPç±»åž‹æ•°ç»„
	 * @return NameValuePairç±»åž‹æ•°ç»„
	 */
	public static NameValuePair[] generatNameValuePair(Map<String, String> properties) {
		NameValuePair[] nameValuePair = new NameValuePair[properties.size()];
		int i = 0;
		for (Map.Entry<String, String> entry : properties.entrySet()) {
			nameValuePair[i++] = new NameValuePair(entry.getKey(), entry.getValue());
		}

		return nameValuePair;
	}

	/**
	 * ç”¨äºŽé˜²é’“é±¼ï¼Œè°ƒç”¨æŽ¥å?£query_timestampæ?¥èŽ·å?–æ—¶é—´æˆ³çš„å¤„ç?†å‡½æ•° æ³¨æ„?ï¼šè¿œç¨‹è§£æž?XMLå‡ºé”™ï¼Œä¸Žæœ?åŠ¡å™¨æ˜¯å?¦æ”¯æŒ?SSLç­‰é…?ç½®æœ‰å…³
	 * 
	 * @return æ—¶é—´æˆ³å­—ç¬¦ä¸²
	 * @throws IOException
	 * @throws DocumentException
	 * @throws MalformedURLException
	 */
	public static String query_timestamp() throws MalformedURLException, DocumentException, IOException {

		// æž„é€ è®¿é—®query_timestampæŽ¥å?£çš„URLä¸²
		String strUrl = ALIPAY_GATEWAY_NEW + "service=query_timestamp&partner=" + PARTNER + "&_input_charset" + INPUT_CHARSET;
		StringBuffer result = new StringBuffer();

		SAXReader reader = new SAXReader();
		Document doc = reader.read(new URL(strUrl).openStream());

		List<Node> nodeList = doc.selectNodes("//alipay/*");

		for (Node node : nodeList) {
			// æˆªå?–éƒ¨åˆ†ä¸?éœ€è¦?è§£æž?çš„ä¿¡æ?¯
			if (node.getName().equals("is_success") && node.getText().equals("T")) {
				// åˆ¤æ–­æ˜¯å?¦æœ‰æˆ?åŠŸæ ‡ç¤º
				List<Node> nodeList1 = doc.selectNodes("//response/timestamp/*");
				for (Node node1 : nodeList1) {
					result.append(node1.getText());
				}
			}
		}

		return result.toString();
	}
}
