/*Copyright Â©2015 TommyLemon(https://github.com/TommyLemon)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.*/

package zuo.biao.library.base;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

import zuo.biao.library.R;
import zuo.biao.library.interfaces.AdapterCallBack;
import zuo.biao.library.interfaces.CacheCallBack;
import zuo.biao.library.interfaces.OnStopLoadListener;
import zuo.biao.library.manager.CacheManager;
import zuo.biao.library.manager.HttpManager;
import zuo.biao.library.util.Log;
import zuo.biao.library.util.SettingUtil;
import zuo.biao.library.util.StringUtil;
import android.widget.AbsListView;
import android.widget.BaseAdapter;

/**åŸºç¡€åˆ—è¡¨Activity
 * @author Lemon
 * @param <T> æ•°æ?®æ¨¡åž‹(model/JavaBean)ç±»
 * @param <LV> AbsListViewçš„å­?ç±»ï¼ˆListView,GridViewç­‰ï¼‰
 * @param <BA> ç®¡ç?†LVçš„Adapter
 * @see #lvBaseList
 * @see #initCache
 * @see #initView
 * @see #getListAsync
 * @see #onRefresh
 * @use extends BaseListActivity å¹¶åœ¨å­?ç±»onCreateä¸­è°ƒç”¨onRefresh(...), å…·ä½“å?‚è€ƒ.DemoListActivity
 * *ç¼“å­˜ä½¿ç”¨ï¼šåœ¨initDataå‰?è°ƒç”¨initCache(...), å…·ä½“å?‚è€ƒ .DemoListActivity(onCreateæ–¹æ³•å†…)
 */
public abstract class BaseListActivity<T, LV extends AbsListView, BA extends BaseAdapter> extends BaseActivity {
	private static final String TAG = "BaseListActivity";

	private OnStopLoadListener onStopLoadListener;
	/**è®¾ç½®å?œæ­¢åŠ è½½ç›‘å?¬
	 * @param onStopLoadListener
	 */
	protected void setOnStopLoadListener(OnStopLoadListener onStopLoadListener) {
		this.onStopLoadListener = onStopLoadListener;
	}


	private CacheCallBack<T> cacheCallBack;
	/**åˆ?å§‹åŒ–ç¼“å­˜
	 * @warn åœ¨initDataå‰?ä½¿ç”¨æ‰?æœ‰æ•ˆ
	 * @param cacheCallBack
	 */
	protected void initCache(CacheCallBack<T> cacheCallBack) {
		this.cacheCallBack = cacheCallBack;
	}




	// UIæ˜¾ç¤ºåŒº(æ“?ä½œUIï¼Œä½†ä¸?å­˜åœ¨æ•°æ?®èŽ·å?–æˆ–å¤„ç?†ä»£ç ?ï¼Œä¹Ÿä¸?å­˜åœ¨äº‹ä»¶ç›‘å?¬ä»£ç ?)<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	/**
	 * æ˜¾ç¤ºåˆ—è¡¨çš„ListView
	 * @warn å?ªä½¿ç”¨lvBaseListä¸ºæ˜¾ç¤ºåˆ—è¡¨æ•°æ?®çš„AbsListView(ListView,GridViewç­‰)ï¼Œä¸?è¦?åœ¨å­?ç±»ä¸­æ”¹å?˜å®ƒ
	 */
	protected LV lvBaseList;
	/**
	 * ç®¡ç?†LVçš„Itemçš„Adapter
	 */
	protected BA adapter;
	/**
	 * å¦‚æžœåœ¨å­?ç±»ä¸­è°ƒç”¨(å?³super.initView());åˆ™viewå¿…é¡»å?«æœ‰initViewä¸­åˆ?å§‹åŒ–ç”¨åˆ°çš„idä¸”idå¯¹åº”çš„Viewçš„ç±»åž‹å…¨éƒ¨ç›¸å?Œï¼›
	 * å?¦åˆ™å¿…é¡»åœ¨å­?ç±»initViewä¸­é‡?å†™è¿™ä¸ªç±»ä¸­initViewå†…çš„ä»£ç ?(æ‰€æœ‰idæ›¿æ?¢æˆ?å?¯ç”¨id)
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void initView() {// å¿…é¡»è°ƒç”¨

		lvBaseList = (LV) findViewById(R.id.lvBaseList);
	}

	/**è®¾ç½®adapter
	 * @param adapter
	 */
	public void setAdapter(BA adapter) {
		this.adapter = adapter;
		lvBaseList.setAdapter(adapter);
	}

	/**æ˜¾ç¤ºåˆ—è¡¨ï¼ˆå·²åœ¨UIçº¿ç¨‹ä¸­ï¼‰ï¼Œä¸€èˆ¬éœ€æ±‚å»ºè®®ç›´æŽ¥è°ƒç”¨setList(List<T> l, AdapterCallBack<BA> callBack)
	 * @param list
	 */
	public abstract void setList(List<T> list);

	/**æ˜¾ç¤ºåˆ—è¡¨ï¼ˆå·²åœ¨UIçº¿ç¨‹ä¸­ï¼‰
	 * @param list
	 */
	public void setList(AdapterCallBack<BA> callBack) {
		if (adapter == null) {
			setAdapter(callBack.createAdapter());
		}
		callBack.refreshAdapter();
	}


	// UIæ˜¾ç¤ºåŒº(æ“?ä½œUIï¼Œä½†ä¸?å­˜åœ¨æ•°æ?®èŽ·å?–æˆ–å¤„ç?†ä»£ç ?ï¼Œä¹Ÿä¸?å­˜åœ¨äº‹ä»¶ç›‘å?¬ä»£ç ?)>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>










	// Dataæ•°æ?®åŒº(å­˜åœ¨æ•°æ?®èŽ·å?–æˆ–å¤„ç?†ä»£ç ?ï¼Œä½†ä¸?å­˜åœ¨äº‹ä»¶ç›‘å?¬ä»£ç ?)<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	private boolean isToSaveCache;
	private boolean isToLoadCache;
	@Override
	public void initData() {// å¿…é¡»è°ƒç”¨

		isToSaveCache = SettingUtil.cache && cacheCallBack != null && cacheCallBack.getCacheClass() != null;
		isToLoadCache = isToSaveCache && StringUtil.isNotEmpty(cacheCallBack.getCacheGroup(), true);
	}

	/**
	 * èŽ·å?–åˆ—è¡¨ï¼Œåœ¨é?žUIçº¿ç¨‹ä¸­
	 * @must èŽ·å?–æˆ?åŠŸå?Žè°ƒç”¨onLoadSucceed
	 * @param page åœ¨onLoadSucceedä¸­ä¼ å›žæ?¥ä¿?è¯?ä¸€è‡´æ€§
	 */
	public abstract void getListAsync(int page);



	public void loadData(int page) {
		loadData(page, isToLoadCache);
	}

	/**
	 * æ•°æ?®åˆ—è¡¨
	 */
	private List<T> list;
	/**
	 * æ­£åœ¨åŠ è½½
	 */
	protected boolean isLoading = false;
	/**
	 * è¿˜æœ‰æ›´å¤šå?¯åŠ è½½æ•°æ?®
	 */
	protected boolean isHaveMore = true;
	/**
	 * åŠ è½½é¡µç ?ï¼Œæ¯?é¡µå¯¹åº”ä¸€å®šæ•°é‡?çš„æ•°æ?®
	 */
	private int page;
	private int loadCacheStart;
	/**åŠ è½½æ•°æ?®ï¼Œç”¨getListAsyncæ–¹æ³•å?‘è¯·æ±‚èŽ·å?–æ•°æ?®
	 * @param page_
	 * @param isCache
	 */
	private void loadData(int page_, final boolean isCache) {
		if (isLoading) {
			Log.w(TAG, "loadData  isLoading >> return;");
			return;
		}
		isLoading = true;
		isSucceed = false;

		if (page_ <= HttpManager.PAGE_NUM_0) {
			page_ = HttpManager.PAGE_NUM_0;
			isHaveMore = true;
			loadCacheStart = 0;//ä½¿ç”¨åˆ™å?¯åƒ?ç½‘ç»œæ­£å¸¸æƒ…å†µä¸‹çš„é‡?è½½ï¼Œä¸?ä½¿ç”¨åˆ™åœ¨ç½‘ç»œå¼‚å¸¸æƒ…å†µä¸‹ä¸?é‡?è½½ï¼ˆå¯¼è‡´é‡?è½½å?ŽåŠ è½½æ•°æ?®ä¸‹ç§»ï¼‰
		} else {
			if (isHaveMore == false) {
				stopLoadData(page_);
				return;
			}
			loadCacheStart = list == null ? 0 : list.size();
		}
		this.page = page_;
		Log.i(TAG, "loadData  page_ = " + page_ + "; isCache = " + isCache
				+ "; isHaveMore = " + isHaveMore + "; loadCacheStart = " + loadCacheStart);

		runThread(TAG + "loadData", new Runnable() {

			@Override
			public void run() {
				if (isCache == false) {//ä»Žç½‘ç»œèŽ·å?–æ•°æ?®
					getListAsync(page);
				} else {//ä»Žç¼“å­˜èŽ·å?–æ•°æ?®
					onLoadSucceed(page, CacheManager.getInstance().getList(cacheCallBack.getCacheClass()
							, cacheCallBack.getCacheGroup(), loadCacheStart, cacheCallBack.getCacheCount()),
							true);
					if (page <= HttpManager.PAGE_NUM_0) {
						isLoading = false;//stopLoadeDataåœ¨å…¶å®ƒçº¿ç¨‹isLoading = false;å?Žè¿™ä¸ªçº¿ç¨‹é‡Œè¿˜æ˜¯true
						loadData(page, false);
					}
				}
			}
		});
	}

	/**å?œæ­¢åŠ è½½æ•°æ?®
	 * isCache = false;
	 * @param page
	 */
	public synchronized void stopLoadData(int page) {
		stopLoadData(page, false);
	}
	/**å?œæ­¢åŠ è½½æ•°æ?®
	 * @param page
	 * @param isCache
	 */
	private synchronized void stopLoadData(int page, boolean isCache) {
		Log.i(TAG, "stopLoadData  isCache = " + isCache);
		isLoading = false;
		dismissProgressDialog();

		if (isCache) {
			Log.d(TAG, "stopLoadData  isCache >> return;");
			return;
		}

		if (onStopLoadListener == null) {
			Log.w(TAG, "stopLoadData  onStopLoadListener == null >> return;");
			return;
		}
		onStopLoadListener.onStopRefresh();
		if (page > HttpManager.PAGE_NUM_0) {
			onStopLoadListener.onStopLoadMore(isHaveMore);
		}
	}



	private boolean isSucceed = false;
	/**å¤„ç?†åˆ—è¡¨
	 * @param page
	 * @param newList æ–°æ•°æ?®åˆ—è¡¨
	 * @param isCache
	 * @return
	 * @return
	 */
	public synchronized void handleList(int page, List<T> newList, boolean isCache) {
		if (newList == null) {
			newList = new ArrayList<T>();
		}
		isSucceed = ! newList.isEmpty();
		Log.i(TAG, "\n\n<<<<<<<<<<<<<<<<<\n handleList  newList.size = " + newList.size() + "; isCache = " + isCache
				+ "; page = " + page + "; isSucceed = " + isSucceed);

		if (page <= HttpManager.PAGE_NUM_0) {
			Log.i(TAG, "handleList  page <= HttpManager.PAGE_NUM_0 >>>>  ");
			saveCacheStart = 0;
			list = new ArrayList<T>(newList);
			if (isCache == false && list.isEmpty() == false) {
				Log.i(TAG, "handleList  isCache == false && list.isEmpty() == false >>  isToLoadCache = false;");
				isToLoadCache = false;
			}
		} else {
			Log.i(TAG, "handleList  page > HttpManager.PAGE_NUM_0 >>>>  ");
			if (list == null) {
				list = new ArrayList<T>();
			}
			saveCacheStart = list.size();
			isHaveMore = ! newList.isEmpty();
			if (isHaveMore) {
				list.addAll(newList);
			}
		}

		Log.i(TAG, "handleList  list.size = " + list.size() + "; isHaveMore = " + isHaveMore
				+ "; isToLoadCache = " + isToLoadCache + "; saveCacheStart = " + saveCacheStart
				+ "\n>>>>>>>>>>>>>>>>>>\n\n");
	}



	/**åŠ è½½æˆ?åŠŸ
	 * isCache = false;
	 * @param page
	 * @param newList
	 */
	public synchronized void onLoadSucceed(final int page, final List<T> newList) {
		onLoadSucceed(page, newList, false);
	}
	/**åŠ è½½æˆ?åŠŸ
	 * @param page
	 * @param newList
	 * @param isCache newListæ˜¯å?¦ä¸ºç¼“å­˜
	 */
	private synchronized void onLoadSucceed(final int page, final List<T> newList, final boolean isCache) {
		runThread(TAG + "onLoadSucceed", new Runnable() {
			@Override
			public void run() {
				Log.i(TAG, "onLoadSucceed  page = " + page + "; isCache = " + isCache + " >> handleList...");
				handleList(page, newList, isCache);

				runUiThread(new Runnable() {

					@Override
					public void run() {
						stopLoadData(page, isCache);
						setList(list);
					}
				});

				if (isToSaveCache && isCache == false) {
					saveCache(newList);
				}
			}
		});
	}

	/**åŠ è½½å¤±è´¥
	 * @param page
	 * @param e
	 */
	public synchronized void onLoadFailed(int page, Exception e) {
		Log.e(TAG, "onLoadFailed page = " + page + "; e = " + (e == null ? null : e.getMessage()));
		stopLoadData(page);
		showShortToast(R.string.get_failed);
	}




	//ç¼“å­˜<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	//	/**
	//	 * èŽ·å?–ç¼“å­˜æ¯?é¡µæ•°é‡?
	//	 * @return > 0 ï¼Ÿç¼“å­˜ : ä¸?ç¼“å­˜
	//	 */
	//	public int getCacheCount() {
	//		//è®©ç»™æœ?åŠ¡å™¨è¿”å›žæ¯?é¡µæ•°é‡?ä¸ºcountçš„æ•°æ?®ï¼Œä¸?è¡Œçš„è¯?åœ¨å­?ç±»é‡?å†™ Math.max(10, newList == null ? 0 : newList.size());
	//		return CacheManager.MAX_PAGE_SIZE;
	//	}

	private int saveCacheStart;
	/**ä¿?å­˜ç¼“å­˜
	 * @param newList
	 */
	public synchronized void saveCache(List<T> newList) {
		if (cacheCallBack == null || newList == null || newList.isEmpty()) {
			Log.e(TAG, "saveCache  cacheCallBack == null || newList == null || newList.isEmpty() >> return;");
			return;
		}

		LinkedHashMap<String, T> map = new LinkedHashMap<String, T>();
		for (T data : newList) {
			if (data != null) {
				map.put(cacheCallBack.getCacheId(data), data);//map.put(null, data);ä¸?ä¼šå´©æºƒ
			}
		}

		CacheManager.getInstance().saveList(cacheCallBack.getCacheClass(), cacheCallBack.getCacheGroup()
				, map, saveCacheStart, cacheCallBack.getCacheCount());
	}
	//ç¼“å­˜>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



	// Dataæ•°æ?®åŒº(å­˜åœ¨æ•°æ?®èŽ·å?–æˆ–å¤„ç?†ä»£ç ?ï¼Œä½†ä¸?å­˜åœ¨äº‹ä»¶ç›‘å?¬ä»£ç ?)>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>










	// Eventäº‹ä»¶åŒº(å?ªè¦?å­˜åœ¨äº‹ä»¶ç›‘å?¬ä»£ç ?å°±æ˜¯)<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	@Override
	public void initEvent() {

	}


	/**åˆ·æ–°ï¼ˆä»Žå¤´åŠ è½½ï¼‰
	 * @must åœ¨å­?ç±»onCreateä¸­è°ƒç”¨ï¼Œå»ºè®®æ”¾åœ¨æœ€å?Ž
	 */
	public void onRefresh() {
		loadData(HttpManager.PAGE_NUM_0);
	}
	/**åŠ è½½æ›´å¤š
	 */
	public void onLoadMore() {
		if (isSucceed == false && page <= HttpManager.PAGE_NUM_0) {
			Log.w(TAG, "onLoadMore  isSucceed == false && page <= HttpManager.PAGE_NUM_0 >> return;");
			return;
		}
		loadData(page + (isSucceed ? 1 : 0));
	}


	// ç³»ç»Ÿè‡ªå¸¦ç›‘å?¬æ–¹æ³•<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


	// ç±»ç›¸å…³ç›‘å?¬<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	@Override
	protected void onDestroy() {
		isLoading = false;
		isHaveMore = false;
		isToSaveCache = false;
		isToLoadCache = false;

		super.onDestroy();

		lvBaseList = null;
		list = null;

		onStopLoadListener = null;
		cacheCallBack = null;
	}

	// ç±»ç›¸å…³ç›‘å?¬>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	// ç³»ç»Ÿè‡ªå¸¦ç›‘å?¬æ–¹æ³•>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


	// Eventäº‹ä»¶åŒº(å?ªè¦?å­˜åœ¨äº‹ä»¶ç›‘å?¬ä»£ç ?å°±æ˜¯)>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



	// å†…éƒ¨ç±»,å°½é‡?å°‘ç”¨<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	// å†…éƒ¨ç±»,å°½é‡?å°‘ç”¨>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

}
