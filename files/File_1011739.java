package jetbrains.mps.smodel.persistence.def.v7;

/*Generated by MPS */

import jetbrains.mps.util.xml.XMLSAXHandler;
import jetbrains.mps.smodel.loading.ModelLoadResult;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.util.Stack;
import org.xml.sax.Locator;
import jetbrains.mps.smodel.loading.ModelLoadingState;
import jetbrains.mps.smodel.SModelHeader;
import jetbrains.mps.smodel.DefaultSModel;
import org.xml.sax.SAXException;
import org.xml.sax.Attributes;
import org.xml.sax.SAXParseException;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModel;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.smodel.SModelLegacy;
import jetbrains.mps.util.xml.BreakParseSAXException;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.vcspersistence.SNodeFactory;
import jetbrains.mps.util.Pair;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.apache.log4j.Level;
import jetbrains.mps.smodel.StaticReference;

public class ModelReader7Handler extends XMLSAXHandler<ModelLoadResult> {
  private static final Logger LOG = LogManager.getLogger(ModelReader7Handler.class);
  private ModelReader7Handler.ModelElementHandler modelHandler = new ModelReader7Handler.ModelElementHandler();
  private ModelReader7Handler.PersistenceElementHandler persistenceHandler = new ModelReader7Handler.PersistenceElementHandler();
  private ModelReader7Handler.Module_referenceElementHandler module_referenceHandler = new ModelReader7Handler.Module_referenceElementHandler();
  private ModelReader7Handler.ImportElementHandler importHandler = new ModelReader7Handler.ImportElementHandler();
  private ModelReader7Handler.RootsElementHandler rootsHandler = new ModelReader7Handler.RootsElementHandler();
  private ModelReader7Handler.RootContentElementHandler rootContentHandler = new ModelReader7Handler.RootContentElementHandler();
  private ModelReader7Handler.NodeElementHandler nodeHandler = new ModelReader7Handler.NodeElementHandler();
  private ModelReader7Handler.PropertyElementHandler propertyHandler = new ModelReader7Handler.PropertyElementHandler();
  private ModelReader7Handler.LinkElementHandler linkHandler = new ModelReader7Handler.LinkElementHandler();
  private Stack<ModelReader7Handler.ElementHandler> myHandlersStack = new Stack<ModelReader7Handler.ElementHandler>();
  private Stack<ModelReader7Handler.ChildHandler> myChildHandlersStack = new Stack<ModelReader7Handler.ChildHandler>();
  private Stack<Object> myValues = new Stack<Object>();
  private Locator myLocator;
  private ModelLoadResult myResult;
  private ModelLoadingState my_toStateParam;
  private SModelHeader my_headerParam;
  private DefaultSModel my_modelField;
  private ReadHelper my_helperField;
  public ModelReader7Handler(ModelLoadingState toState, SModelHeader header) {
    my_toStateParam = toState;
    my_headerParam = header;
  }
  public ModelLoadResult getResult() {
    return myResult;
  }
  @Override
  public void setDocumentLocator(Locator locator) {
    myLocator = locator;
  }
  @Override
  public void characters(char[] array, int start, int len) throws SAXException {
    ModelReader7Handler.ElementHandler current = (myHandlersStack.empty() ? (ModelReader7Handler.ElementHandler) null : myHandlersStack.peek());
    if (current != null) {
      current.handleText(myValues.peek(), new String(array, start, len));
    }
  }
  @Override
  public void endElement(String uri, String localName, String qName) throws SAXException {
    ModelReader7Handler.ElementHandler current = myHandlersStack.pop();
    Object childValue = myValues.pop();
    current.validate(childValue);
    if (myChildHandlersStack.empty()) {
      myResult = (ModelLoadResult) childValue;
    } else {
      ModelReader7Handler.ChildHandler ch = myChildHandlersStack.pop();
      if (ch != null) {
        ch.apply(myValues.peek(), childValue);
      }
    }
  }
  @Override
  public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
    ModelReader7Handler.ElementHandler current = (myHandlersStack.empty() ? (ModelReader7Handler.ElementHandler) null : myHandlersStack.peek());
    if (current == null) {
      // root 
      current = modelHandler;
    } else {
      current = current.createChild(myValues.peek(), qName, attributes);
    }

    // check required 
    for (String attr : current.requiredAttributes()) {
      if (attributes.getValue(attr) == null) {
        throw new SAXParseException("attribute " + attr + " is absent", null);
      }
    }

    Object result = current.createObject(attributes);
    if (myHandlersStack.empty()) {
      myResult = (ModelLoadResult) result;
    }

    // handle attributes 
    for (int i = 0; i < attributes.getLength(); i++) {
      String name = attributes.getQName(i);
      String value = attributes.getValue(i);
      current.handleAttribute(result, name, value);
    }
    myHandlersStack.push(current);
    myValues.push(result);
  }
  private interface ChildHandler {
    void apply(Object resultObject, Object value) throws SAXException;
  }
  private class ElementHandler {
    private String[] requiredAttributes = new String[0];

    private ElementHandler() {
    }
    protected Object createObject(Attributes attrs) throws SAXException {
      return null;
    }
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
    }
    protected ModelReader7Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      throw new SAXParseException("unknown tag: " + tagName, null);
    }
    protected void handleText(Object resultObject, String value) throws SAXException {
      if (value.trim().length() == 0) {
        return;
      }
      throw new SAXParseException("text is not accepted: '" + value + "'", null);
    }
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }
    protected void setRequiredAttributes(String... required) {
      requiredAttributes = required;
    }
    protected void validate(Object resultObject) throws SAXException {
    }
  }
  public class ModelElementHandler extends ModelReader7Handler.ElementHandler {
    public ModelElementHandler() {
      setRequiredAttributes("modelUID");
    }
    @Override
    protected ModelLoadResult createObject(Attributes attrs) throws SAXException {
      my_modelField = new DefaultSModel(PersistenceFacade.getInstance().createModelReference(attrs.getValue("modelUID")), my_headerParam);
      my_helperField = new ReadHelper(my_modelField.getReference());
      return new ModelLoadResult((SModel) my_modelField, ModelLoadingState.NOT_LOADED);
    }
    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      ModelLoadResult result = (ModelLoadResult) resultObject;
      if ("version".equals(name)) {
        int version;
        try {
          version = (value == null ? -1 : Integer.parseInt(value));
        } catch (NumberFormatException e) {
          version = -1;
        }
        return;
      }
      if ("doNotGenerate".equals(name)) {
        my_headerParam.setDoNotGenerate(Boolean.parseBoolean(value));
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
    @Override
    protected ModelReader7Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("persistence".equals(tagName)) {
        myChildHandlersStack.push(null);
        return persistenceHandler;
      }
      if ("language".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader7Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_286176397450364079(resultObject, value);
          }
        });
        return module_referenceHandler;
      }
      if ("language-engaged-on-generation".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader7Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_286176397450364090(resultObject, value);
          }
        });
        return module_referenceHandler;
      }
      if ("devkit".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader7Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_286176397450364101(resultObject, value);
          }
        });
        return module_referenceHandler;
      }
      if ("import".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader7Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_286176397450364112(resultObject, value);
          }
        });
        return importHandler;
      }
      if ("roots".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader7Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_2824634917103356434(resultObject, value);
          }
        });
        return rootsHandler;
      }
      if ("root".equals(tagName)) {
        myChildHandlersStack.push(null);
        return rootContentHandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }
    private void handleChild_286176397450364079(Object resultObject, Object value) throws SAXException {
      SModuleReference child = (SModuleReference) value;
      new SModelLegacy(my_modelField).addLanguage(child);
    }
    private void handleChild_286176397450364090(Object resultObject, Object value) throws SAXException {
      SModuleReference child = (SModuleReference) value;
      new SModelLegacy(my_modelField).addEngagedOnGenerationLanguage(child);
    }
    private void handleChild_286176397450364101(Object resultObject, Object value) throws SAXException {
      SModuleReference child = (SModuleReference) value;
      my_modelField.addDevKit(child);
    }
    private void handleChild_286176397450364112(Object resultObject, Object value) throws SAXException {
      String[] child = (String[]) value;
      my_helperField.addImportToModel(my_modelField, child[0], child[1], Integer.parseInt(child[2]), child[3] != null);
    }
    private void handleChild_2824634917103356434(Object resultObject, Object value) throws SAXException {
      ModelLoadResult result = (ModelLoadResult) resultObject;
      Object child = (Object) value;
      if (my_toStateParam == ModelLoadingState.INTERFACE_LOADED) {
        result.setState(ModelLoadingState.INTERFACE_LOADED);
        throw new BreakParseSAXException();
      }
    }
    @Override
    protected void validate(Object resultObject) throws SAXException {
      if (!(validateInternal((ModelLoadResult) resultObject))) {
        throw new SAXParseException("missing tags", null);
      }
    }
    private boolean validateInternal(ModelLoadResult result) throws SAXException {
      result.setState(ModelLoadingState.FULLY_LOADED);
      return true;
    }
  }
  public class PersistenceElementHandler extends ModelReader7Handler.ElementHandler {
    public PersistenceElementHandler() {
      setRequiredAttributes("version");
    }
    @Override
    protected Integer createObject(Attributes attrs) throws SAXException {
      return Integer.parseInt(attrs.getValue("version"));
    }
  }
  public class Module_referenceElementHandler extends ModelReader7Handler.ElementHandler {
    public Module_referenceElementHandler() {
      setRequiredAttributes("namespace");
    }
    @Override
    protected SModuleReference createObject(Attributes attrs) throws SAXException {
      return PersistenceFacade.getInstance().createModuleReference(attrs.getValue("namespace"));
    }
  }
  public class ImportElementHandler extends ModelReader7Handler.ElementHandler {
    public ImportElementHandler() {
      setRequiredAttributes("index", "version", "modelUID");
    }
    @Override
    protected String[] createObject(Attributes attrs) throws SAXException {
      return new String[]{attrs.getValue("index"), attrs.getValue("modelUID"), attrs.getValue("version"), null};
    }
    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      String[] result = (String[]) resultObject;
      if ("implicit".equals(name)) {
        result[3] = value;
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }
  public class RootsElementHandler extends ModelReader7Handler.ElementHandler {
    public RootsElementHandler() {
    }
    @Override
    protected ModelReader7Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("node".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader7Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_2301870845769311858(resultObject, value);
          }
        });
        return nodeHandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }
    private void handleChild_2301870845769311858(Object resultObject, Object value) throws SAXException {
      SNode child = (SNode) value;
      if (child != null) {
        my_modelField.addRootNode(child);
      }
    }
  }
  public class RootContentElementHandler extends ModelReader7Handler.ElementHandler {
    public RootContentElementHandler() {
      setRequiredAttributes("id");
    }
    @Override
    protected SNode createObject(Attributes attrs) throws SAXException {
      return my_modelField.getNode(SNodeId.fromString(attrs.getValue("id")));
    }
    @Override
    protected ModelReader7Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("node".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader7Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_2301870845769311882(resultObject, value);
          }
        });
        return nodeHandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }
    private void handleChild_2301870845769311882(Object resultObject, Object value) throws SAXException {
      SNode result = (SNode) resultObject;
      SNode child = (SNode) value;
      if (child != null) {
        String role = (String) child.getUserObject("role");
        result.addChild(role, child);
        child.putUserObject("role", null);
      }
    }
  }
  public class NodeElementHandler extends ModelReader7Handler.ElementHandler {
    public NodeElementHandler() {
      setRequiredAttributes("type");
    }
    @Override
    protected SNode createObject(Attributes attrs) throws SAXException {
      boolean needLazy = my_toStateParam != ModelLoadingState.FULLY_LOADED;
      String readType = my_helperField.readType(attrs.getValue("type"));
      jetbrains.mps.smodel.SNode result = (needLazy ? SNodeFactory.newLazy(readType) : SNodeFactory.newRegular(readType));
      return result;
    }
    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      SNode result = (SNode) resultObject;
      if ("role".equals(name)) {
        String role = my_helperField.readRole(value);
        result.putUserObject("role", role);
        return;
      }
      if ("id".equals(name)) {
        org.jetbrains.mps.openapi.model.SNodeId id = SNodeId.fromString(value);
        if (id == null) {
          throw new SAXParseException("bad node ID", null);
        }
        ((jetbrains.mps.smodel.SNode) result).setId(id);
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
    @Override
    protected ModelReader7Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("property".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader7Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_286176397450364265(resultObject, value);
          }
        });
        return propertyHandler;
      }
      if ("link".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader7Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_286176397450364288(resultObject, value);
          }
        });
        return linkHandler;
      }
      if ("node".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader7Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_286176397450364333(resultObject, value);
          }
        });
        return nodeHandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }
    private void handleChild_286176397450364265(Object resultObject, Object value) throws SAXException {
      SNode result = (SNode) resultObject;
      String[] child = (String[]) value;
      if (child[1] != null) {
        String pname = my_helperField.readName(child[0]);
        result.setProperty(pname, child[1]);
      }
    }
    private void handleChild_286176397450364288(Object resultObject, Object value) throws SAXException {
      SNode result = (SNode) resultObject;
      String[] child = (String[]) value;
      Pair<Boolean, SNodeReference> pptr = my_helperField.readLink_internal(child[1]);
      SNodeReference ptr = pptr.o2;
      if (ptr == null || ptr.getModelReference() == null) {
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error("couldn't create reference '" + child[0] + "' from " + child[1]);
        }
        return;
      }
      StaticReference ref = new StaticReference(my_helperField.readRole(child[0]), result, ptr.getModelReference(), ptr.getNodeId(), child[2]);

      result.setReference(ref.getRole(), ref);
    }
    private void handleChild_286176397450364333(Object resultObject, Object value) throws SAXException {
      SNode result = (SNode) resultObject;
      SNode child = (SNode) value;
      String role = (String) child.getUserObject("role");
      result.addChild((role), child);
      child.putUserObject("role", null);
    }
  }
  public class PropertyElementHandler extends ModelReader7Handler.ElementHandler {
    public PropertyElementHandler() {
      setRequiredAttributes("name");
    }
    @Override
    protected String[] createObject(Attributes attrs) throws SAXException {
      return new String[]{attrs.getValue("name"), null, null};
    }
    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      String[] result = (String[]) resultObject;
      if ("nameId".equals(name)) {
        result[2] = value;
        return;
      }
      if ("value".equals(name)) {
        result[1] = value;
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }
  public class LinkElementHandler extends ModelReader7Handler.ElementHandler {
    public LinkElementHandler() {
      setRequiredAttributes("role", "targetNodeId");
    }
    @Override
    protected String[] createObject(Attributes attrs) throws SAXException {
      return new String[]{attrs.getValue("role"), attrs.getValue("targetNodeId"), null, null};
    }
    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      String[] result = (String[]) resultObject;
      if ("roleId".equals(name)) {
        result[3] = value;
        return;
      }
      if ("resolveInfo".equals(name)) {
        result[2] = value;
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }
}
