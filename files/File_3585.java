/*
 * <summary></summary>
 * <author>He Han</author>
 * <email>hankcs.cn@gmail.com</email>
 * <create-date>2014/8/22 14:17</create-date>
 *
 * <copyright file="BM25.java" company="ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸">
 * Copyright (c) 2003-2014, ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸. All Right Reserved, http://www.linrunsoft.com/
 * This source is subject to the LinrunSpace License. Please contact ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸ to get more information.
 * </copyright>
 */
package com.hankcs.hanlp.summary;

import java.util.List;
import java.util.Map;
import java.util.TreeMap;

/**
 * æ?œç´¢ç›¸å…³æ€§è¯„åˆ†ç®—æ³•
 * @author hankcs
 */
public class BM25
{
    /**
     * æ–‡æ¡£å?¥å­?çš„ä¸ªæ•°
     */
    int D;

    /**
     * æ–‡æ¡£å?¥å­?çš„å¹³å?‡é•¿åº¦
     */
    double avgdl;

    /**
     * æ‹†åˆ†ä¸º[å?¥å­?[å?•è¯?]]å½¢å¼?çš„æ–‡æ¡£
     */
    List<List<String>> docs;

    /**
     * æ–‡æ¡£ä¸­æ¯?ä¸ªå?¥å­?ä¸­çš„æ¯?ä¸ªè¯?ä¸Žè¯?é¢‘
     */
    Map<String, Integer>[] f;

    /**
     * æ–‡æ¡£ä¸­å…¨éƒ¨è¯?è¯­ä¸Žå‡ºçŽ°åœ¨å‡ ä¸ªå?¥å­?ä¸­
     */
    Map<String, Integer> df;

    /**
     * IDF
     */
    Map<String, Double> idf;

    /**
     * è°ƒèŠ‚å› å­?
     */
    final static float k1 = 1.5f;

    /**
     * è°ƒèŠ‚å› å­?
     */
    final static float b = 0.75f;

    public BM25(List<List<String>> docs)
    {
        this.docs = docs;
        D = docs.size();
        for (List<String> sentence : docs)
        {
            avgdl += sentence.size();
        }
        avgdl /= D;
        f = new Map[D];
        df = new TreeMap<String, Integer>();
        idf = new TreeMap<String, Double>();
        init();
    }

    /**
     * åœ¨æž„é€ æ—¶åˆ?å§‹åŒ–è‡ªå·±çš„æ‰€æœ‰å?‚æ•°
     */
    private void init()
    {
        int index = 0;
        for (List<String> sentence : docs)
        {
            Map<String, Integer> tf = new TreeMap<String, Integer>();
            for (String word : sentence)
            {
                Integer freq = tf.get(word);
                freq = (freq == null ? 0 : freq) + 1;
                tf.put(word, freq);
            }
            f[index] = tf;
            for (Map.Entry<String, Integer> entry : tf.entrySet())
            {
                String word = entry.getKey();
                Integer freq = df.get(word);
                freq = (freq == null ? 0 : freq) + 1;
                df.put(word, freq);
            }
            ++index;
        }
        for (Map.Entry<String, Integer> entry : df.entrySet())
        {
            String word = entry.getKey();
            Integer freq = entry.getValue();
            idf.put(word, Math.log(D - freq + 0.5) - Math.log(freq + 0.5));
        }
    }

    /**
     * è®¡ç®—ä¸€ä¸ªå?¥å­?ä¸Žä¸€ä¸ªæ–‡æ¡£çš„BM25ç›¸ä¼¼åº¦
     *
     * @param sentence å?¥å­?ï¼ˆæŸ¥è¯¢è¯­å?¥ï¼‰
     * @param index    æ–‡æ¡£ï¼ˆç”¨è¯­æ–™åº“ä¸­çš„ä¸‹æ ‡è¡¨ç¤ºï¼‰
     * @return BM25 score
     */
    public double sim(List<String> sentence, int index)
    {
        double score = 0;
        for (String word : sentence)
        {
            if (!f[index].containsKey(word)) continue;
            int d = docs.get(index).size();
            Integer tf = f[index].get(word);
            score += (idf.get(word) * tf * (k1 + 1)
                    / (tf + k1 * (1 - b + b * d
                                                / avgdl)));
        }

        return score;
    }

    public double[] simAll(List<String> sentence)
    {
        double[] scores = new double[D];
        for (int i = 0; i < D; ++i)
        {
            scores[i] = sim(sentence, i);
        }
        return scores;
    }
}
