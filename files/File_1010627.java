package jetbrains.mps.core.tool.environment.util;

/*Generated by MPS */

import jetbrains.mps.project.ProjectBase;
import jetbrains.mps.project.FileBasedProject;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.io.File;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.core.platform.Platform;
import jetbrains.mps.project.structure.project.ProjectDescriptor;
import jetbrains.mps.util.MacroHelper;
import jetbrains.mps.util.MacrosFactory;
import jetbrains.mps.vfs.iofs.file.LocalIoFileSystem;
import jetbrains.mps.vfs.util.PathUtil;
import jetbrains.mps.util.FileUtil;
import java.io.IOException;
import org.apache.log4j.Level;
import jetbrains.mps.project.persistence.ProjectDescriptorPersistence;
import org.jetbrains.annotations.Nullable;
import org.jdom.Element;
import jetbrains.mps.project.ElementProjectDataSource;

public class FileMPSProject extends ProjectBase implements FileBasedProject {
  private static final Logger LOG = LogManager.getLogger(FileMPSProject.class);
  private final File myProjectFile;

  public FileMPSProject(@NotNull File file, @NotNull Platform mpsPlatform) {
    super(new ProjectDescriptor(file.getName()), mpsPlatform);
    myProjectFile = file;
    init();
  }

  @NotNull
  private MacroHelper createMacroHelper() {
    // todo [MM] investigate why it fails when using just path (where those . and .. come from) 
    return MacrosFactory.forProjectFile(LocalIoFileSystem.getInstance().getFile(PathUtil.toSystemIndependent(FileUtil.getCanonicalPath(getProjectFile().getPath()))));
  }

  @Override
  @NotNull
  public String getName() {
    try {
      return myProjectFile.getCanonicalFile().getName();
    } catch (IOException e) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Got while accessing the project file", e);
      }
      return myProjectFile.getName();
    }
  }

  @Override
  public void save() {
    MacroHelper helper = createMacroHelper();
    new ProjectDescriptorPersistence(getProjectFile(), helper).save(myProjectDescriptor);
  }

  /**
   * 
   * @return the element with xml description of the project
   */
  @Nullable
  private Element getElement() {
    return new ProjectDescriptorPersistence(getProjectFile(), createMacroHelper()).loadProjectElement();
  }

  private void init() {
    loadProjectDescriptorWithMacros();
    update();
    projectOpened();
  }

  private void loadProjectDescriptorWithMacros() {
    loadDescriptor(new ElementProjectDataSource(getElement(), getProjectFile(), createMacroHelper()));
  }

  private boolean close() {
    projectClosed();
    assert getProjectModules().isEmpty();
    return true;
  }

  @Override
  public void dispose() {
    close();
    super.dispose();
  }

  @Override
  @NotNull
  public final File getProjectFile() {
    return myProjectFile;
  }
}
