package org.nlpcn.es4sql.query.maker;

import org.apache.lucene.search.join.ScoreMode;
import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;
import org.elasticsearch.common.xcontent.NamedXContentRegistry;
import org.elasticsearch.common.xcontent.XContentParser;
import org.elasticsearch.common.xcontent.json.JsonXContent;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.InnerHitBuilder;
import org.elasticsearch.index.query.NestedQueryBuilder;
import org.elasticsearch.index.query.QueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.join.query.JoinQueryBuilders;
import org.nlpcn.es4sql.domain.Condition;
import org.nlpcn.es4sql.domain.Where;
import org.nlpcn.es4sql.domain.Where.CONN;
import org.nlpcn.es4sql.exception.SqlParseException;

import java.io.IOException;

public class QueryMaker extends Maker {

	/**
	 * å°†whereæ?¡ä»¶æž„å»ºæˆ?query
	 * 
	 * @param where
	 * @return
	 * @throws SqlParseException
	 */
	public static BoolQueryBuilder explan(Where where) throws SqlParseException {
		return explan(where,true);
	}

    public static BoolQueryBuilder explan(Where where,boolean isQuery) throws SqlParseException {
        BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();

        //zhongshu-comment ä¸€ç›´å?–ï¼Œå?–åˆ°æœ€æ·±çš„é‚£ä¸ªwhere
		//zhongshu-comment æš‚æ—¶å?ªé?‡åˆ°äº†è¯¥sqlï¼šselect a,b,c as my_c from tbl where a = 1ï¼Œä¼šèµ°è¿™ä¸ªåˆ†æ”¯
		//å°±æ˜¯whereå­?å?¥ä¸­å?ªæœ‰ä¸€ä¸ªæ?¡ä»¶çš„æƒ…å†µä¸‹ä¼šèµ°è¯¥åˆ†æ”¯
		//zhongshu-comment é‚£ä»–ä¸ºä»€ä¹ˆç”¨whileå‘¢ï¼Ÿï¼Ÿç”¨ifä¸?å°±å¾—å?—ï¼Ÿé‚£åº”è¯¥æ˜¯è¿˜æœ‰å±‚å±‚åµŒå¥—çš„æƒ…å†µï¼Œä¸€ç›´getåˆ°åº•
        while (where.getWheres().size() == 1) {
            where = where.getWheres().getFirst();
        }

        //zhongshu-comment where.getWheres().size()çš„é•¿åº¦ç­‰äºŽ0 æˆ–è€… å¤§äºŽ1
        new QueryMaker().explanWhere(boolQuery, where);

		//zhongshu-comment isQueryä¸ºtrueï¼Œåº”è¯¥å°±æ˜¯è¦?è®¡ç®—_scoreçš„
        if(isQuery){
            return boolQuery;
        }
        //zhongshu-comment isQueryä¸ºfalseï¼Œåº”è¯¥å°±æ˜¯ä½¿ç”¨filterï¼Œä¸?éœ€è¦?è®¡ç®—_score
        return QueryBuilders.boolQuery().filter(boolQuery);
    }

	private QueryMaker() {
		super(true);
	}

	private void explanWhere(BoolQueryBuilder boolQuery, Where where) throws SqlParseException {

		//zhongshu-comment æš‚æ—¶å?ªé?‡åˆ°äº†è¯¥sqlï¼šselect a,b,c as my_c from tbl where a = 1ï¼Œä¼šèµ°è¿™ä¸ªåˆ†æ”¯
		if (where instanceof Condition) {
			addSubQuery(
					boolQuery,
					where,
					(QueryBuilder) make((Condition) where) //zhongshu-comment é‡?ç‚¹æ–¹æ³• å°±æ˜¯è¿™é‡Œè§£æž?æœ€ç»†ç²’åº¦çš„whereæ?¡ä»¶
			);
		} else {
			/*
			zhongshu-comment select a,b,c as my_c from tbl where a = 1 or b = 2 and (c = 3 or d = 4) or e > 1
			ä¸Šé?¢è¿™æ?¡sqlä¸­çš„â€œb = 2 and (c = 3 or d = 4)â€?è¿™éƒ¨åˆ†ä¼šèµ°è¯¥åˆ†æ”¯ï¼Œ
			å› ä¸ºâ€œb = 2 and (c = 3 or d = 4)â€?è¢«å°?è£…ä¸ºWhereç±»åž‹çš„å¯¹è±¡ï¼Œè€Œä¸?æ˜¯Conditionå¯¹è±¡
			å¯¹åº”çš„å…·ä½“ç¬”è®°è§?ï¼šæ?œç´¢-->esæ?’ä»¶å¼€å?‘-->es-sql-->ä»£ç ?é˜…è¯»-->å¦‚ä½•è§£æž?whereæ?¡ä»¶
			 */
			BoolQueryBuilder subQuery = QueryBuilders.boolQuery();

			//zhongshu-comment å°†subQueryå¯¹è±¡çº³å…¥åˆ°boolQueryä¸­ï¼Œå?³boolQueryæ˜¯ä¸Šä¸€çº§ï¼ŒsubQueryæ˜¯ä¸‹ä¸€çº§
			addSubQuery(boolQuery, where, subQuery);
			for (Where subWhere : where.getWheres()) {
				//zhongshu-comment ç„¶å?Žå?ˆå°†subWhereå¯¹è±¡çº³å…¥åˆ°subQueryå¯¹è±¡ä¸­ï¼Œé€šè¿‡é€’å½’å°±èƒ½å±‚å±‚è§£æž?å‡ºè¿™ä¸ªWhereæ?¡ä»¶äº†ï¼šâ€œb = 2 and (c = 3 or d = 4)â€?
				explanWhere(subQuery, subWhere);
			}
		}
	}

	/**
	 * å¢žåŠ åµŒå¥—æ?’
	 * 
	 * @param boolQuery
	 * @param where
	 * @param subQuery
	 */
	private void addSubQuery(BoolQueryBuilder boolQuery, Where where, QueryBuilder subQuery) {
        if(where instanceof Condition){
            Condition condition = (Condition) where;

			if (condition.isNested()) {
				boolean isNestedQuery = subQuery instanceof NestedQueryBuilder;
				InnerHitBuilder ihb = null;
				if (condition.getInnerHits() != null) {
                    try (XContentParser parser = JsonXContent.jsonXContent.createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, condition.getInnerHits())) {
                        ihb = InnerHitBuilder.fromXContent(parser);
                    } catch (IOException e) {
                        throw new IllegalArgumentException("couldn't parse inner_hits: " + e.getMessage(), e);
                    }
                }

                // bugfix #628
                if ("missing".equalsIgnoreCase(String.valueOf(condition.getValue())) && (condition.getOpear() == Condition.OPEAR.IS || condition.getOpear() == Condition.OPEAR.EQ)) {
                    NestedQueryBuilder q = isNestedQuery ? (NestedQueryBuilder) subQuery : QueryBuilders.nestedQuery(condition.getNestedPath(), QueryBuilders.boolQuery().mustNot(subQuery), ScoreMode.None);
					if (ihb != null) {
						q.innerHit(ihb);
                    }
                    boolQuery.mustNot(q);
                    return;
                }

                // support not nested
                if (condition.getOpear() == Condition.OPEAR.NNESTED_COMPLEX) {
                    if (ihb != null) {
                        NestedQueryBuilder.class.cast(subQuery).innerHit(ihb);
                    }
                    boolQuery.mustNot(subQuery);
                    return;
                }

                if (!isNestedQuery) {
					subQuery = QueryBuilders.nestedQuery(condition.getNestedPath(), subQuery, ScoreMode.None);
				}
                if (ihb != null) {
                    ((NestedQueryBuilder) subQuery).innerHit(ihb);
                }
            } else if(condition.isChildren()) {
            	subQuery = JoinQueryBuilders.hasChildQuery(condition.getChildType(), subQuery, ScoreMode.None);
            }
        }

		//zhongshu-comment å°†subQueryå¯¹è±¡çº³å…¥åˆ°boolQueryä¸­ï¼Œå?³boolQueryæ˜¯ä¸Šä¸€çº§ï¼ŒsubQueryæ˜¯ä¸‹ä¸€çº§
		if (where.getConn() == CONN.AND) {
			boolQuery.must(subQuery);
		} else {
			boolQuery.should(subQuery);
		}
	}
}
