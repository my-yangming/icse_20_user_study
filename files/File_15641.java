/*
 * Copyright 2019 http://www.hswebframework.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

package org.hswebframework.web.authorization;

import lombok.NonNull;
import org.hswebframework.web.authorization.access.DataAccessConfig;
import org.hswebframework.web.authorization.access.FieldFilterDataAccessConfig;
import org.hswebframework.web.authorization.access.ScopeDataAccessConfig;

import java.io.Serializable;
import java.util.Collections;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.function.Predicate;

import static org.hswebframework.web.authorization.access.DataAccessConfig.DefaultType.DENY_FIELDS;

/**
 * ç”¨æˆ·æŒ?æœ‰çš„æ?ƒé™?ä¿¡æ?¯,åŒ…å?«äº†æ?ƒé™?åŸºæœ¬ä¿¡æ?¯ã€?å?¯æ“?ä½œèŒƒå›´(action)ã€?è¡Œ,åˆ—çº§æ?ƒé™?æŽ§åˆ¶è§„åˆ™ã€‚
 * æ˜¯ç”¨æˆ·æ?ƒé™?çš„é‡?è¦?æŽ¥å?£ã€‚
 *
 * @author zhouhao
 * @see Authentication
 * @since 3.0
 */
public interface Permission extends Serializable {
    /**
     * æŸ¥è¯¢
     */
    String ACTION_QUERY = "query";
    /**
     * èŽ·å?–æ˜Žç»†
     */
    String ACTION_GET = "get";
    /**
     * æ–°å¢ž
     */
    String ACTION_ADD = "add";
    /**
     * æ›´æ–°
     */
    String ACTION_UPDATE = "update";

    /**
     * åˆ é™¤
     */
    String ACTION_DELETE = "delete";
    /**
     * å¯¼å…¥
     */
    String ACTION_IMPORT = "import";
    /**
     * å¯¼å‡º
     */
    String ACTION_EXPORT = "export";

    /**
     * ç¦?ç”¨
     */
    String ACTION_DISABLE = "disable";

    /**
     * å?¯ç”¨
     */
    String ACTION_ENABLE = "enable";

    /**
     * @return æ?ƒé™?IDï¼Œæ?ƒé™?çš„å”¯ä¸€æ ‡è¯†
     */
    String getId();

    String getName();

    /**
     * ç”¨æˆ·å¯¹æ­¤æ?ƒé™?çš„å?¯æ“?ä½œäº‹ä»¶(æŒ‰é’®)
     * <p>
     * âš ï¸?:ä»»ä½•æ—¶å€™éƒ½ä¸?åº”è¯¥å¯¹è¿”å›žçš„Setè¿›è¡Œå†™æ“?ä½œ
     *
     * @return å¦‚æžœæ²¡æœ‰é…?ç½®è¿”å›žç©º{@link Collections#emptySet()},ä¸?ä¼šè¿”å›žnull.
     */
    Set<String> getActions();

    /**
     * ç”¨æˆ·å¯¹æ­¤æ?ƒé™?æŒ?æœ‰çš„æ•°æ?®æ?ƒé™?ä¿¡æ?¯, ç”¨äºŽæ•°æ?®çº§åˆ«çš„æŽ§åˆ¶
     * <p>
     * âš ï¸?:ä»»ä½•æ—¶å€™éƒ½ä¸?åº”è¯¥å¯¹è¿”å›žçš„Setè¿›è¡Œå†™æ“?ä½œ
     *
     * @return å¦‚æžœæ²¡æœ‰é…?ç½®è¿”å›žç©º{@link Collections#emptySet()},ä¸?ä¼šè¿”å›žnull.
     * @see DataAccessConfig
     * @see org.hswebframework.web.authorization.access.DataAccessController
     */
    Set<DataAccessConfig> getDataAccesses();


    /**
     * æŸ¥æ‰¾æ•°æ?®æ?ƒé™?é…?ç½®
     *
     * @param configPredicate æ•°æ?®æ?ƒé™?é…?ç½®åŒ¹é…?è§„åˆ™
     * @param <T>             æ•°æ?®æ?ƒé™?é…?ç½®ç±»åž‹
     * @return {@link Optional}
     * @see this#scope(String, String, String)
     */
    @SuppressWarnings("all")
    default <T extends DataAccessConfig> Optional<T> findDataAccess(DataAccessPredicate<T> configPredicate) {
        return (Optional) getDataAccesses().stream()
                .filter(configPredicate)
                .findFirst();
    }

    /**
     * æŸ¥æ‰¾å­—æ®µè¿‡æ»¤çš„æ•°æ?®æ?ƒé™?é…?ç½®(åˆ—çº§æ•°æ?®æ?ƒé™?),æ¯”å¦‚:ä¸?æŸ¥è¯¢æŸ?äº›å­—æ®µ
     *
     * @param action æ?ƒé™?æ“?ä½œç±»åž‹ {@link Permission#ACTION_QUERY}
     * @return {@link Optional}
     * @see FieldFilterDataAccessConfig
     * @see FieldFilterDataAccessConfig#getFields()
     */
    default Optional<FieldFilterDataAccessConfig> findFieldFilter(String action) {
        return findDataAccess(conf -> FieldFilterDataAccessConfig.class.isInstance(conf) && conf.getAction().equals(action));
    }


    /**
     * èŽ·å?–ä¸?èƒ½æ‰§è¡Œæ“?ä½œçš„å­—æ®µ
     *
     * @param action æ?ƒé™?æ“?ä½œ
     * @return æœªé…?ç½®æ—¶è¿”å›žç©ºset, ä¸?ä¼šè¿”å›žnull
     */
    default Set<String> findDenyFields(String action) {
        return findFieldFilter(action)
                .filter(conf -> DENY_FIELDS.equals(conf.getType()))
                .map(FieldFilterDataAccessConfig::getFields)
                .orElseGet(Collections::emptySet);
    }


    /**
     * æŸ¥æ‰¾æ•°æ?®èŒƒå›´æ?ƒé™?æŽ§åˆ¶é…?ç½®(è¡Œçº§æ•°æ?®æ?ƒé™?),æ¯”å¦‚: å?ªèƒ½æŸ¥è¯¢æœ¬æœºæž„çš„æ•°æ?®
     *
     * @param type      èŒƒå›´ç±»åž‹æ ‡è¯†,ç”±å…·ä½“çš„å®žçŽ°å®šä¹‰,å¦‚: æœºæž„èŒƒå›´
     * @param scopeType èŒƒå›´ç±»åž‹,ç”±å…·ä½“çš„å®žçŽ°å®šä¹‰,å¦‚: å?ªèƒ½æŸ¥çœ‹è‡ªå·±æ‰€åœ¨æœºæž„
     * @param action    æ?ƒé™?æ“?ä½œ {@link Permission#ACTION_QUERY}
     * @return æœªé…?ç½®æ—¶è¿”å›žç©ºset, ä¸?ä¼šè¿”å›žnull
     */
    default Set<Object> findScope(String action, String type, String scopeType) {
        return findScope(scope(action, type, scopeType));
    }

    default Set<Object> findScope(Permission.DataAccessPredicate<ScopeDataAccessConfig> predicate) {
        return findDataAccess(predicate)
                .map(ScopeDataAccessConfig::getScope)
                .orElseGet(Collections::emptySet);
    }

    /**
     * æž„é€ ä¸€ä¸ªæ•°æ?®èŒƒå›´æ?ƒé™?æŽ§åˆ¶é…?ç½®æŸ¥æ‰¾é€»è¾‘
     *
     * @param type      èŒƒå›´ç±»åž‹æ ‡è¯†,ç”±å…·ä½“çš„å®žçŽ°å®šä¹‰,å¦‚: æœºæž„èŒƒå›´
     * @param scopeType èŒƒå›´ç±»åž‹,ç”±å…·ä½“çš„å®žçŽ°å®šä¹‰,å¦‚: å?ªèƒ½æŸ¥çœ‹è‡ªå·±æ‰€åœ¨æœºæž„
     * @param action    æ?ƒé™?æ“?ä½œ {@link Permission#ACTION_QUERY}
     * @return {@link DataAccessPredicate}
     */
    static Permission.DataAccessPredicate<ScopeDataAccessConfig> scope(String action, String type, String scopeType) {
        Objects.requireNonNull(action, "action can not be null");
        Objects.requireNonNull(type, "type can not be null");
        Objects.requireNonNull(scopeType, "scopeType can not be null");

        return config ->
                config instanceof ScopeDataAccessConfig
                        && action.equals(config.getAction())
                        && type.equals(config.getType())
                        && scopeType.equals(((ScopeDataAccessConfig) config).getScopeType());
    }


    /**
     * æ•°æ?®æ?ƒé™?æŸ¥æ‰¾åˆ¤æ–­é€»è¾‘æŽ¥å?£
     *
     * @param <T>
     */
    interface DataAccessPredicate<T extends DataAccessConfig> extends Predicate<DataAccessConfig> {
        boolean test(DataAccessConfig config);


        @Override
        default DataAccessPredicate<T> and(Predicate<? super DataAccessConfig> other) {
            return (t) -> test(t) && other.test(t);
        }

        @Override
        default DataAccessPredicate<T> or(Predicate<? super DataAccessConfig> other) {
            return (t) -> test(t) || other.test(t);
        }
    }

}
