package com.sohu.cache.util;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.sohu.cache.server.data.OS;
import com.sohu.cache.server.data.OSInfo;
import com.sohu.cache.server.data.OSInfo.DistributionType;
import com.sohu.cache.server.data.OSInfo.DistributionVersion;
import com.sohu.cache.server.data.OSInfo.OSType;
import com.sohu.cache.server.data.OSInfo.ProcessorArchitecture;

/**
 * æ ¹æ?®æ“?ä½œç³»ç»ŸåŽŸç”Ÿä¿¡æ?¯è§£æž?å‡ºOS
 */
public class OSFactory {
	private static final Logger logger = LoggerFactory.getLogger(OSFactory.class);
	//èŽ·å?–å?‘è¡Œç‰ˆæœ¬å?·çš„ä¸»ç‰ˆæœ¬å’Œæ¬¡ç‰ˆæœ¬
	private static final Pattern VERSION_PATTERN = Pattern.compile("([1-9]+(\\.[0-9]+)?)");
	
	public static OS getDefaultOS(OSInfo osInfo) {
		String uname = osInfo.getUname();
		//æ— æ³•èŽ·å?–ç³»ç»Ÿä½?æ•°
		if(uname == null) {
			return null;
		}
		uname = uname.toLowerCase();
		ProcessorArchitecture defaultArch = ProcessorArchitecture.X86_64;
		//å…¶æ¬¡èŽ·å?–æ“?ä½œç³»ç»Ÿä½?æ•°
		if(!uname.contains(defaultArch.getValue())) {
			defaultArch = ProcessorArchitecture.X86;
		}
		return new OS(OSType.LINUX, DistributionType.LINUX_OLD, 
				DistributionVersion.DEFAULT, defaultArch);
	}
	
	/**
	 * é‡‡ç”¨uname -aä¿¡æ?¯å’Œ/etc/issueè§£æž?å‡ºç›®å‰?èƒ½å¤Ÿæ”¯æŒ?çš„æ“?ä½œç³»ç»Ÿ
	 * @param osInfo
	 * @return OS
	 */
	public static OS getOS(OSInfo osInfo) {
		String uname = osInfo.getUname();
		String issue = osInfo.getIssue();
		OSType osType = OSType.LINUX;
		ProcessorArchitecture defaultArch = ProcessorArchitecture.X86_64;
		DistributionType defaultDist = DistributionType.LINUX_OLD;
		DistributionVersion version = DistributionVersion.DEFAULT;
		
		//æ— æ³•èŽ·å?–ç³»ç»Ÿç±»åž‹ï¼Œä½?æ•° ç‰ˆæœ¬ï¼Œé‡‡ç”¨é»˜è®¤
		if(uname == null || issue == null) {
			OS os = new OS(osType, defaultDist, version, defaultArch);
			return os;
		}
		
		uname = uname.toLowerCase();
		//é¦–å…ˆèŽ·å?–æ“?ä½œç³»ç»Ÿç±»åž‹
		if(!uname.contains(OSType.LINUX.getValue())) {
			logger.error("os={} is temporarily not supported", uname);
			return null;
		}
		//å…¶æ¬¡èŽ·å?–æ“?ä½œç³»ç»Ÿä½?æ•°
		if(!uname.contains(defaultArch.getValue())) {
			defaultArch = ProcessorArchitecture.X86;
		}
		//å†?æ¬¡è§£æž?æ“?ä½œç³»ç»Ÿå?‘è¡Œç‰ˆæœ¬
		issue = issue.toLowerCase();
		
		DistributionType findType = DistributionType.findByContains(issue);
		//æ²¡æœ‰æ‰¾åˆ°åŒ¹é…?çš„ç‰ˆæœ¬ï¼Œä½¿ç”¨é»˜è®¤
		if(findType == null) {
			logger.warn("dist cannot matched, {}", issue);
			OS os = new OS(osType, defaultDist, version, defaultArch);
			return os;
		}
		
		//æœ€å?Žè§£æž?ç‰ˆæœ¬å?·
		Matcher matcher = VERSION_PATTERN.matcher(issue);
		//æ²¡æœ‰ç‰ˆæœ¬å¥½ç”¨é»˜è®¤çš„
		if(!matcher.find()) {
			logger.warn("version not matched, {}", issue);
			OS os = new OS(osType, defaultDist, version, defaultArch);
			return os;
		}
		String ver = matcher.group();
		ver = ver.replaceAll("\\.", "");
		logger.info("version matched, {} - {}", ver, issue);
		DistributionVersion versionResult = findVersion(findType.getVersions(), ver);
		//æ²¡æœ‰å…·ä½“çš„ç‰ˆæœ¬èƒ½åŒ¹é…?ä¸Š
		if(versionResult == null) {
			logger.info("version {} not found, {}", ver);
			OS os = new OS(osType, defaultDist, version, defaultArch);
			return os;
		}
		
		OS os = new OS(osType, findType, versionResult, defaultArch);
		logger.info("find OS={}", os);
		return os;
	}
	
	private static DistributionVersion findVersion(DistributionVersion[] versions, String target) {
		for(DistributionVersion dv : versions) {
			if(dv.getValue().equals(target)){
				return dv;
			} 
		}
		return null;
	}
}
