package com.xiaojinzi.component.impl;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Parcelable;
import android.support.annotation.AnyThread;
import android.support.annotation.MainThread;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.util.SparseArray;

import com.xiaojinzi.component.Component;
import com.xiaojinzi.component.ComponentUtil;
import com.xiaojinzi.component.RouterRxFragment;
import com.xiaojinzi.component.bean.ActivityResult;
import com.xiaojinzi.component.error.ignore.ActivityResultException;
import com.xiaojinzi.component.error.ignore.InterceptorNotFoundException;
import com.xiaojinzi.component.error.ignore.NavigationFailException;
import com.xiaojinzi.component.impl.interceptor.InterceptorCenter;
import com.xiaojinzi.component.impl.interceptor.OpenOnceInterceptor;
import com.xiaojinzi.component.support.Action;
import com.xiaojinzi.component.support.CallbackAdapter;
import com.xiaojinzi.component.support.Consumer;
import com.xiaojinzi.component.support.NavigationDisposable;
import com.xiaojinzi.component.support.RouterInterceptorCache;
import com.xiaojinzi.component.support.Utils;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Random;
import java.util.Set;

/**
 * è¿™ä¸ªç±»ä¸€éƒ¨åˆ†åŠŸèƒ½åº”è¯¥æ˜¯ {@link Router} çš„æž„å»ºè€…å¯¹è±¡çš„åŠŸèƒ½,ä½†æ˜¯è¿™é‡Œé?¢æ›´å¤šçš„ä¸ºå¯¼èˆªçš„åŠŸèƒ½
 * å†™äº†å¾ˆå¤šä»£ç ?,æ‰€ä»¥å??å­—å°±ä¸?å?« Builder äº†
 */
public class Navigator extends RouterRequest.Builder implements Call {

    /**
     * requestCode å¦‚æžœç­‰äºŽè¿™ä¸ªå€¼,å°±è¡¨ç¤ºæ˜¯éš?æœºç”Ÿæˆ?çš„
     * ä»Ž 1-256 ä¸­éš?æœºç”Ÿæˆ?ä¸€ä¸ª,å¦‚æžœç”Ÿæˆ?çš„æ­£å¥½æ˜¯ç›®å‰?æ­£åœ¨ç”¨çš„,ä¼šé‡?æ–°ç”Ÿæˆ?ä¸€ä¸ª
     */
    static final Integer RANDOM_REQUSET_CODE = Integer.MIN_VALUE;

    /**
     * è‡ªå®šä¹‰çš„æ‹¦æˆªå™¨åˆ—è¡¨,ä¸ºäº†ä¿?è¯?é¡ºåº?æ‰?ç”¨ä¸€ä¸ªé›†å?ˆçš„
     * 1. RouterInterceptor ç±»åž‹
     * 2. Class<RouterInterceptor> ç±»åž‹
     * 3. String ç±»åž‹
     * å…¶ä»–ç±»åž‹ä¼š debug çš„æ—¶å€™æŠ¥é”™
     */
    @Nullable
    private List<Object> customInterceptors;

    /**
     * æ ‡è®°è¿™ä¸ª builder æ˜¯å?¦å·²ç»?è¢«ä½¿ç”¨äº†,ä½¿ç”¨è¿‡äº†å°±ä¸?èƒ½ä½¿ç”¨äº†
     */
    protected boolean isFinish = false;

    public Navigator() {
    }

    public Navigator(@NonNull Context context) {
        Utils.checkNullPointer(context, "context");
        context(context);
    }

    public Navigator(@NonNull Fragment fragment) {
        Utils.checkNullPointer(fragment, "fragment");
        fragment(fragment);
    }

    /**
     * æ‡’åŠ è½½è‡ªå®šä¹‰æ‹¦æˆªå™¨åˆ—è¡¨
     *
     * @param size
     */
    private void lazyInitCustomInterceptors(int size) {
        if (customInterceptors == null) {
            customInterceptors = new ArrayList<>(size > 3 ? size : 3);
        }
    }

    public Navigator interceptors(RouterInterceptor... interceptorArr) {
        Utils.checkNullPointer(interceptorArr, "interceptorArr");
        if (interceptorArr != null) {
            lazyInitCustomInterceptors(interceptorArr.length);
            customInterceptors.addAll(Arrays.asList(interceptorArr));
        }
        return this;
    }

    public Navigator interceptors(Class<? extends RouterInterceptor>... interceptorClassArr) {
        Utils.checkNullPointer(interceptorClassArr, "interceptorClassArr");
        if (interceptorClassArr != null) {
            lazyInitCustomInterceptors(interceptorClassArr.length);
            customInterceptors.addAll(Arrays.asList(interceptorClassArr));
        }
        return this;
    }

    public Navigator interceptorNames(String... interceptorNameArr) {
        Utils.checkNullPointer(interceptorNameArr, "interceptorNameArr");
        if (interceptorNameArr != null) {
            lazyInitCustomInterceptors(interceptorNameArr.length);
            customInterceptors.addAll(Arrays.asList(interceptorNameArr));
        }
        return this;
    }

    @Override
    public Navigator intentConsumer(@Nullable Consumer<Intent> intentConsumer) {
        return (Navigator) super.intentConsumer(intentConsumer);
    }

    @Override
    public Navigator addIntentFlags(@Nullable Integer... flags) {
        return (Navigator) super.addIntentFlags(flags);
    }

    @Override
    public Navigator addIntentCategories(@Nullable String... categories) {
        return (Navigator) super.addIntentCategories(categories);
    }

    @Override
    public Navigator beforJumpAction(@Nullable Action action) {
        return (Navigator) super.beforJumpAction(action);
    }

    @Override
    public Navigator afterJumpAction(@Nullable Action action) {
        return (Navigator) super.afterJumpAction(action);
    }

    @Override
    public Navigator requestCode(@Nullable Integer requestCode) {
        return (Navigator) super.requestCode(requestCode);
    }

    @Override
    public Navigator options(@Nullable Bundle options) {
        return (Navigator) super.options(options);
    }

    /**
     * requestCode ä¼šéš?æœºçš„ç”Ÿæˆ?
     *
     * @return
     */
    public Navigator requestCodeRandom() {
        return requestCode(RANDOM_REQUSET_CODE);
    }

    @Override
    public Navigator url(@NonNull String url) {
        return (Navigator) super.url(url);
    }

    @Override
    public Navigator scheme(@NonNull String scheme) {
        return (Navigator) super.scheme(scheme);
    }

    @Override
    public Navigator hostAndPath(@NonNull String hostAndPath) {
        return (Navigator) super.hostAndPath(hostAndPath);
    }

    @Override
    public Navigator host(@NonNull String host) {
        return (Navigator) super.host(host);
    }

    @Override
    public Navigator path(@Nullable String path) {
        return (Navigator) super.path(path);
    }

    @Override
    public Navigator putBundle(@NonNull String key, @Nullable Bundle bundle) {
        return (Navigator) super.putBundle(key, bundle);
    }

    @Override
    public Navigator putAll(@NonNull Bundle bundle) {
        return (Navigator) super.putAll(bundle);
    }

    @Override
    public Navigator putCharSequence(@NonNull String key, @Nullable CharSequence value) {
        return (Navigator) super.putCharSequence(key, value);
    }

    @Override
    public Navigator putCharSequenceArray(@NonNull String key, @Nullable CharSequence[] value) {
        return (Navigator) super.putCharSequenceArray(key, value);
    }

    @Override
    public Navigator putCharSequenceArrayList(@NonNull String key, @Nullable ArrayList<CharSequence> value) {
        return (Navigator) super.putCharSequenceArrayList(key, value);
    }

    @Override
    public Navigator putByte(@NonNull String key, @Nullable byte value) {
        return (Navigator) super.putByte(key, value);
    }

    @Override
    public Navigator putByteArray(@NonNull String key, @Nullable byte[] value) {
        return (Navigator) super.putByteArray(key, value);
    }

    @Override
    public Navigator putChar(@NonNull String key, @Nullable char value) {
        return (Navigator) super.putChar(key, value);
    }

    @Override
    public Navigator putCharArray(@NonNull String key, @Nullable char[] value) {
        return (Navigator) super.putCharArray(key, value);
    }

    @Override
    public Navigator putBoolean(@NonNull String key, @Nullable boolean value) {
        return (Navigator) super.putBoolean(key, value);
    }

    @Override
    public Navigator putBooleanArray(@NonNull String key, @Nullable boolean[] value) {
        return (Navigator) super.putBooleanArray(key, value);
    }

    @Override
    public Navigator putString(@NonNull String key, @Nullable String value) {
        return (Navigator) super.putString(key, value);
    }

    @Override
    public Navigator putStringArray(@NonNull String key, @Nullable String[] value) {
        return (Navigator) super.putStringArray(key, value);
    }

    @Override
    public Navigator putStringArrayList(@NonNull String key, @Nullable ArrayList<String> value) {
        return (Navigator) super.putStringArrayList(key, value);
    }

    @Override
    public Navigator putShort(@NonNull String key, @Nullable short value) {
        return (Navigator) super.putShort(key, value);
    }

    @Override
    public Navigator putShortArray(@NonNull String key, @Nullable short[] value) {
        return (Navigator) super.putShortArray(key, value);
    }

    @Override
    public Navigator putInt(@NonNull String key, @Nullable int value) {
        return (Navigator) super.putInt(key, value);
    }

    @Override
    public Navigator putIntArray(@NonNull String key, @Nullable int[] value) {
        return (Navigator) super.putIntArray(key, value);
    }

    @Override
    public Navigator putIntegerArrayList(@NonNull String key, @Nullable ArrayList<Integer> value) {
        return (Navigator) super.putIntegerArrayList(key, value);
    }

    @Override
    public Navigator putLong(@NonNull String key, @Nullable long value) {
        return (Navigator) super.putLong(key, value);
    }

    @Override
    public Navigator putLongArray(@NonNull String key, @Nullable long[] value) {
        return (Navigator) super.putLongArray(key, value);
    }

    @Override
    public Navigator putFloat(@NonNull String key, @Nullable float value) {
        return (Navigator) super.putFloat(key, value);
    }

    @Override
    public Navigator putFloatArray(@NonNull String key, @Nullable float[] value) {
        return (Navigator) super.putFloatArray(key, value);
    }

    @Override
    public Navigator putDouble(@NonNull String key, @Nullable double value) {
        return (Navigator) super.putDouble(key, value);
    }

    @Override
    public Navigator putDoubleArray(@NonNull String key, @Nullable double[] value) {
        return (Navigator) super.putDoubleArray(key, value);
    }

    @Override
    public Navigator putParcelable(@NonNull String key, @Nullable Parcelable value) {
        return (Navigator) super.putParcelable(key, value);
    }

    @Override
    public Navigator putParcelableArray(@NonNull String key, @Nullable Parcelable[] value) {
        return (Navigator) super.putParcelableArray(key, value);
    }

    @Override
    public Navigator putParcelableArrayList(@NonNull String key, @Nullable ArrayList<? extends Parcelable> value) {
        return (Navigator) super.putParcelableArrayList(key, value);
    }

    @Override
    public Navigator putSparseParcelableArray(@NonNull String key, @Nullable SparseArray<? extends Parcelable> value) {
        return (Navigator) super.putSparseParcelableArray(key, value);
    }

    @Override
    public Navigator putSerializable(@NonNull String key, @Nullable Serializable value) {
        return (Navigator) super.putSerializable(key, value);
    }

    @Override
    public Navigator query(@NonNull String queryName, @Nullable String queryValue) {
        return (Navigator) super.query(queryName, queryValue);
    }

    @Override
    public Navigator query(@NonNull String queryName, boolean queryValue) {
        return (Navigator) super.query(queryName, queryValue);
    }

    @Override
    public Navigator query(@NonNull String queryName, byte queryValue) {
        return (Navigator) super.query(queryName, queryValue);
    }

    @Override
    public Navigator query(@NonNull String queryName, int queryValue) {
        return (Navigator) super.query(queryName, queryValue);
    }

    @Override
    public Navigator query(@NonNull String queryName, float queryValue) {
        return (Navigator) super.query(queryName, queryValue);
    }

    @Override
    public Navigator query(@NonNull String queryName, long queryValue) {
        return (Navigator) super.query(queryName, queryValue);
    }

    @Override
    public Navigator query(@NonNull String queryName, double queryValue) {
        return (Navigator) super.query(queryName, queryValue);
    }

    @Override
    public RouterRequest build() {
        return Help.randomlyGenerateRequestCode(super.build());
    }

    private void useDefaultApplication(){
        // å¦‚æžœ Context å’Œ Fragment éƒ½æ˜¯ç©ºçš„,ä½¿ç”¨é»˜è®¤çš„ Application
        if (context == null && fragment == null) {
            context = Component.getApplication();
            addIntentFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        }
    }

    /**
     * è·¯ç”±å‰?çš„æ£€æŸ¥
     *
     * @throws Exception
     */
    private void onCheck() {
        // ä¸€ä¸ª Builder ä¸?èƒ½è¢«ä½¿ç”¨å¤šæ¬¡
        if (isFinish) {
            throw new NavigationFailException("Builder can't be used multiple times");
        }
        // æ£€æŸ¥ä¸Šä¸‹æ–‡å’Œfragment
        if (context == null && fragment == null) {
            throw new NullPointerException("the parameter 'context' or 'fragment' both are null");
        }
    }

    /**
     * æ£€æŸ¥å?‚æ•°,è¿™ä¸ªæ–¹æ³•å’Œ {@link #onCheck()} å¾ˆå¤šé¡¹ç›®éƒ½ä¸€æ ·çš„,ä½†æ˜¯æ²¡åŠžæ³•
     * è¿™é‡Œçš„æ£€æŸ¥æ˜¯éœ€è¦?æ??å‰?æ£€æŸ¥çš„
     * çˆ¶ç±»çš„æ£€æŸ¥æ˜¯è°ƒç”¨ {@link #navigate(Callback)}æ–¹æ³•çš„æ—¶å€™è°ƒç”¨ {@link #onCheck()} æ£€æŸ¥çš„
     * è¿™ä¸ªç±»æ˜¯è°ƒç”¨ {@link #navigate(Callback)} æ–¹æ³•ä¹‹å‰?æ£€æŸ¥çš„,è€Œä¸”æ£€æŸ¥çš„é¡¹ç›®è™½ç„¶åŸºæœ¬ä¸€æ ·,ä½†æ˜¯æœ‰æ‰€å·®åˆ«
     *
     * @throws RuntimeException
     */
    private void onCheckForResult() throws Exception {
        if (context == null && fragment == null) {
            throw new NavigationFailException(new NullPointerException("Context or Fragment is necessary for router if you want get ActivityResult"));
        }
        // å¦‚æžœæ˜¯ä½¿ç”¨ Context çš„,é‚£ä¹ˆå°±å¿…é¡»æ˜¯ FragmentActivity,éœ€è¦?æ“?ä½œ Fragment
        // è¿™é‡Œçš„ context != null åˆ¤æ–­æ?¡ä»¶ä¸?èƒ½åŽ»æŽ‰,ä¸?ç„¶ä½¿ç”¨ Fragment è·³è½¬çš„å°±è¿‡ä¸?åŽ»äº†
        if (context != null && !(Utils.getActivityFromContext(context) instanceof FragmentActivity)) {
            throw new NavigationFailException(new IllegalArgumentException("Context must be FragmentActivity"));
        }
        if (requestCode == null) {
            throw new NavigationFailException(new NullPointerException("requestCode must not be null for router"));
        }
    }

    /**
     * ä¸ºäº†æ‹¿åˆ° {@link ActivityResult#resultCode}
     *
     * @param callback å›žè°ƒæ–¹æ³•
     * @return
     */
    @NonNull
    public NavigationDisposable navigateForResultCode(@NonNull final BiCallback<Integer> callback) {
        return navigateForResult(new BiCallback.Map<ActivityResult, Integer>(callback) {
            @NonNull
            @Override
            public Integer apply(@NonNull ActivityResult activityResult) throws Exception {
                return activityResult.resultCode;
            }
        });
    }

    /**
     * ä¸ºäº†æ‹¿åˆ° {@link ActivityResult#resultCode}
     *
     * @param callback å›žè°ƒæ–¹æ³•
     * @return
     */
    @NonNull
    public NavigationDisposable navigateForResultCodeMatch(@NonNull final Callback callback,
                                                           final int expectedResultCode) {
        return navigateForResult(new BiCallback<ActivityResult>() {
            @Override
            public void onSuccess(@NonNull RouterResult result, @NonNull ActivityResult activityResult) {
                if (expectedResultCode == activityResult.resultCode) {
                    callback.onSuccess(result);
                } else {
                    callback.onError(new RouterErrorResult(result.getOriginalRequest(), new ActivityResultException("the resultCode is not matching " + expectedResultCode)));
                }
            }

            @Override
            public void onError(@NonNull RouterErrorResult errorResult) {
                callback.onError(errorResult);
            }

            @Override
            public void onCancel(@NonNull RouterRequest originalRequest) {
                callback.onCancel(originalRequest);
            }
        });
    }

    /**
     * ä¸ºäº†æ‹¿åˆ° {@link Intent}
     *
     * @param callback å›žè°ƒæ–¹æ³•
     * @return
     */
    @NonNull
    public NavigationDisposable navigateForIntentAndResultCodeMatch(@NonNull final BiCallback<Intent> callback,
                                                                    final int expectedResultCode) {
        return navigateForResult(new BiCallback.Map<ActivityResult, Intent>(callback) {
            @NonNull
            @Override
            public Intent apply(@NonNull ActivityResult activityResult) throws Exception {
                return activityResult.intentWithResultCodeCheckAndGet(expectedResultCode);
            }
        });
    }

    /**
     * ä¸ºäº†æ‹¿åˆ° {@link Intent}
     *
     * @param callback å›žè°ƒæ–¹æ³•
     * @return
     */
    @NonNull
    public NavigationDisposable navigateForIntent(@NonNull final BiCallback<Intent> callback) {
        return navigateForResult(new BiCallback.Map<ActivityResult, Intent>(callback) {
            @NonNull
            @Override
            public Intent apply(@NonNull ActivityResult activityResult) throws Exception {
                return activityResult.intentCheckAndGet();
            }
        });
    }


    /**
     * ä¸ºäº†æ‹¿ {@link ActivityResult}
     *
     * @param callback è¿™é‡Œæ˜¯ä¸ºäº†æ‹¿è¿”å›žçš„ä¸œè¥¿æ˜¯ä¸?å?¯ä»¥ä¸ºç©ºçš„
     * @return
     */
    @NonNull
    @AnyThread
    public NavigationDisposable navigateForResult(@NonNull final BiCallback<ActivityResult> callback) {
        return realNavigateForResult(callback);
    }

    @NonNull
    @AnyThread
    private NavigationDisposable realNavigateForResult(@NonNull final BiCallback<ActivityResult> callback) {

        final NavigationDisposable.ProxyNavigationDisposableImpl proxyDisposable =
                new NavigationDisposable.ProxyNavigationDisposableImpl();

        // ä¸»çº¿ç¨‹æ‰§è¡Œ
        Utils.postActionToMainThread(new Runnable() {
            @Override
            public void run() {
                // è¿™é‡Œè¿™ä¸ªæƒ…å†µå±žäºŽæ²¡å¼€å§‹å°±è¢«å?–æ¶ˆäº†
                if (proxyDisposable.isCanceled()) {
                    RouterUtil.cancelCallback(null, callback);
                    return;
                }
                final NavigationDisposable realDisposable = doNavigateForResult(callback);
                proxyDisposable.setProxy(realDisposable);

            }
        });

        return proxyDisposable;

    }

    /**
     * å¿…é¡»åœ¨ä¸»çº¿ç¨‹ä¸­è°ƒç”¨,å°±è¿™é‡Œå?¯èƒ½ä¼šå‡ºçŽ°ä¸€ç§?ç‰¹æ®Šçš„æƒ…å†µï¼š
     * ç”¨æˆ·æ”¶åˆ°çš„å›žè°ƒå?¯èƒ½æ˜¯ error,ä½†æ˜¯å…¨å±€çš„ç›‘å?¬å?¯èƒ½æ˜¯ cancel,å…¶å®žè¿™ä¸ªé—®é¢˜ä¹Ÿèƒ½è§£å†³,
     * å°±æ˜¯è·¯ç”±è°ƒç”¨ä¹‹å‰?æ??å‰?é€šè¿‡æ–¹æ³• {@link Navigator#build()} æ??å‰?æž„å»ºä¸€ä¸ª {@link RouterRequest} å‡ºæ?¥åˆ¤æ–­
     * ä½†æ˜¯æ²¡æœ‰é‚£ä¸ªå¿…è¦?åŽ»å?šè¿™ä»¶äº‹æƒ…äº†,ç­‰åˆ°æœ‰å¿…è¦?çš„æ—¶å€™å†?è¯´,åŸºæœ¬ä¸?ä¼šå‡ºçŽ°å¹¶ä¸”å‡ºçŽ°äº†ä¹Ÿä¸?æ˜¯ä»€ä¹ˆé—®é¢˜
     *
     * @param biCallback
     * @return
     */
    @NonNull
    @MainThread
    private NavigationDisposable doNavigateForResult(@NonNull final BiCallback<ActivityResult> biCallback) {
        // ç›´æŽ¥ gg
        Utils.checkNullPointer(biCallback, "callback");
        // å?šä¸€ä¸ªåŒ…è£¹å®žçŽ°è‡³å¤šå?ªèƒ½è°ƒç”¨ä¸€æ¬¡å†…éƒ¨çš„å…¶ä¸­ä¸€ä¸ªæ–¹æ³•
        final BiCallback<ActivityResult> callback = new BiCallbackWrap<>(biCallback);
        NavigationDisposable finalNavigationDisposable = null;
        try {
            // ä¸ºäº†æ‹¿æ•°æ?®å?šçš„æ£€æŸ¥
            onCheckForResult();
            // å£°æ˜Žfragment
            FragmentManager fm = null;
            if (context == null) {
                fm = fragment.getChildFragmentManager();
            } else {
                fm = ((FragmentActivity) Utils.getActivityFromContext(context)).getSupportFragmentManager();
            }
            // å¯»æ‰¾æ˜¯å?¦æ·»åŠ è¿‡ Fragment
            RouterRxFragment findRxFragment = (RouterRxFragment) fm.findFragmentByTag(ComponentUtil.FRAGMENT_TAG);
            if (findRxFragment == null) {
                findRxFragment = new RouterRxFragment();
                fm.beginTransaction()
                        .add(findRxFragment, ComponentUtil.FRAGMENT_TAG)
                        .commitAllowingStateLoss();
            }
            final RouterRxFragment rxFragment = findRxFragment;
            // å¯¼èˆªæ–¹æ³•æ‰§è¡Œå®Œæ¯•ä¹‹å?Ž,å†…éƒ¨çš„æ•°æ?®å°±ä¼šæ¸…ç©º,æ‰€ä»¥ä¹‹å‰?å¿…é¡»ç¼“å­˜
            // å¯¼èˆªæ‹¿åˆ° NavigationDisposable å¯¹è±¡
            // å?¯èƒ½æ˜¯ä¸€ä¸ª ç©ºå®žçŽ°
            finalNavigationDisposable = navigate(new CallbackAdapter() {
                @Override
                @MainThread
                public void onSuccess(@NonNull final RouterResult routerResult) {
                    super.onSuccess(routerResult);
                    // è®¾ç½®ActivityResultå›žè°ƒçš„å?‘å°„å™¨,å›žè°ƒä¸­ä¸€ä¸ªè·¯ç”±æ‹¿æ•°æ?®çš„æµ?ç¨‹ç®—æ˜¯å®Œæ¯•äº†
                    rxFragment.setActivityResultConsumer(routerResult.getOriginalRequest(), new com.xiaojinzi.component.support.Consumer<ActivityResult>() {
                        @Override
                        public void accept(@NonNull ActivityResult result) throws Exception {
                            Help.removeRequestCode(routerResult.getOriginalRequest());
                            callback.onSuccess(routerResult, result);
                        }
                    });
                }

                @Override
                @MainThread
                public void onError(@NonNull RouterErrorResult errorResult) {
                    super.onError(errorResult);
                    Help.removeRequestCode(errorResult.getOriginalRequest());
                    callback.onError(errorResult);
                }

                @Override
                @MainThread
                public void onCancel(@NonNull RouterRequest originalRequest) {
                    super.onCancel(originalRequest);
                    rxFragment.removeActivityResultConsumer(originalRequest);
                    Help.removeRequestCode(originalRequest);
                    callback.onCancel(originalRequest);
                }

            });
            // çŽ°åœ¨å?¯ä»¥æ£€æµ‹ requestCode æ˜¯å?¦é‡?å¤?,é™¤äº† RxRouter ä¹‹å¤–çš„åœ°æ–¹ä½¿ç”¨å?Œä¸€ä¸ª requestCode æ˜¯å?¯ä»¥çš„
            // å› ä¸º RxRouter çš„ requestCode æ˜¯ç›´æŽ¥é…?å?ˆ RouterRxFragment ä½¿ç”¨çš„
            // å…¶ä»–åœ°æ–¹æ˜¯ç”¨ä¸?åˆ° RouterRxFragment,æ‰€ä»¥å?¯ä»¥é‡?å¤?
            boolean isExist = Help.isExist(finalNavigationDisposable.originalRequest());
            if (isExist) { // å¦‚æžœå­˜åœ¨ç›´æŽ¥è¿”å›žé”™è¯¯ç»™ callback
                throw new NavigationFailException("request&result code is " +
                        finalNavigationDisposable.originalRequest().requestCode + " is exist and " +
                        "uri is " + finalNavigationDisposable.originalRequest().uri.toString());
            } else {
                Help.addRequestCode(finalNavigationDisposable.originalRequest());
            }
            return finalNavigationDisposable;
        } catch (Exception e) {
            callback.onError(new RouterErrorResult(e));
            if (finalNavigationDisposable != null) {
                // å?–æ¶ˆè¿™ä¸ªè·¯ç”±
                finalNavigationDisposable.cancel();
                finalNavigationDisposable = null;
            }
            return Router.emptyNavigationDisposable;
        }

    }

    /**
     * @return è¿”å›žçš„å¯¹è±¡æœ‰å?¯èƒ½æ˜¯ä¸€ä¸ªç©ºå®žçŽ°å¯¹è±¡ {@link Router#emptyNavigationDisposable}
     */
    @NonNull
    public NavigationDisposable navigate() {
        return navigate(null);
    }

    /**
     * æ‰§è¡Œè·³è½¬çš„å…·ä½“é€»è¾‘
     * è¿”å›žå€¼ä¸?å?¯ä»¥ä¸ºç©º,æ˜¯ä¸ºäº†ä½¿ç”¨çš„æ—¶å€™æ›´åŠ çš„é¡ºæºœ,ä¸?ç”¨åˆ¤æ–­ç©º
     *
     * @param callback å›žè°ƒ
     * @return è¿”å›žçš„å¯¹è±¡æœ‰å?¯èƒ½æ˜¯ä¸€ä¸ªç©ºå®žçŽ°å¯¹è±¡ {@link Router#emptyNavigationDisposable},å?¯ä»¥å?–æ¶ˆè·¯ç”±æˆ–è€…èŽ·å?–åŽŸå§‹requestå¯¹è±¡
     */
    @AnyThread
    @NonNull
    public synchronized NavigationDisposable navigate(@Nullable final Callback callback) {
        // æž„å»ºè¯·æ±‚å¯¹è±¡
        RouterRequest originalRequest = null;
        try {
            // å¦‚æžœç”¨æˆ·æ²¡å¡«å†™ Context æˆ–è€… Fragment é»˜è®¤ä½¿ç”¨ Application
            useDefaultApplication();
            // è·¯ç”±å‰?çš„æ£€æŸ¥
            onCheck();
            // æ ‡è®°è¿™ä¸ª builder å·²ç»?ä¸?èƒ½ä½¿ç”¨äº†
            isFinish = true;
            // ç”Ÿæˆ?è·¯ç”±è¯·æ±‚å¯¹è±¡
            originalRequest = build();
            // åˆ›å»ºæ•´ä¸ªæ‹¦æˆªå™¨åˆ°æœ€ç»ˆè·³è½¬éœ€è¦?ä½¿ç”¨çš„ Callback
            final InterceptorCallback interceptorCallback = new InterceptorCallback(originalRequest, callback);
            // Fragment çš„é”€æ¯?çš„è‡ªåŠ¨å?–æ¶ˆ
            if (originalRequest.fragment != null) {
                Router.mNavigationDisposableList.add(interceptorCallback);
            }
            // Activity çš„è‡ªåŠ¨å?–æ¶ˆ
            if (Utils.getActivityFromContext(originalRequest.context) != null) {
                Router.mNavigationDisposableList.add(interceptorCallback);
            }
            // çœŸæ­£çš„åŽ»æ‰§è¡Œè·¯ç”±
            realNavigate(originalRequest, customInterceptors, interceptorCallback);
            // è¿”å›žå¯¹è±¡
            return interceptorCallback;
        } catch (Exception e) { // å?‘ç”Ÿè·¯ç”±é”™è¯¯çš„æ—¶å€™
            RouterErrorResult errorResult = new RouterErrorResult(originalRequest, e);
            RouterUtil.errorCallback(callback, errorResult);
        } finally {
            // é‡Šæ”¾èµ„æº?
            context = null;
            fragment = null;
            scheme = null;
            url = null;
            host = null;
            path = null;
            requestCode = null;
            queryMap = null;
            bundle = null;
            intentConsumer = null;
            beforJumpAction = null;
            afterJumpAction = null;
        }
        return Router.emptyNavigationDisposable;
    }

    /**
     * çœŸæ­£çš„æ‰§è¡Œè·¯ç”±
     *
     * @param originalRequest    æœ€åŽŸå§‹çš„è¯·æ±‚å¯¹è±¡
     * @param customInterceptors è‡ªå®šä¹‰çš„æ‹¦æˆªå™¨
     * @param callback           å›žè°ƒå¯¹è±¡
     */
    @AnyThread
    private static void realNavigate(@NonNull final RouterRequest originalRequest,
                                     @Nullable List<Object> customInterceptors,
                                     @NonNull RouterInterceptor.Callback callback) {

        // æ‹¿åˆ°å…±æœ‰çš„æ‹¦æˆªå™¨
        List<RouterInterceptor> publicInterceptors = InterceptorCenter.getInstance()
                .getGlobalInterceptorList();
        // è‡ªå®šä¹‰æ‹¦æˆªå™¨,åˆ?å§‹åŒ–æ‹¦æˆªå™¨çš„ä¸ªæ•° 8 ä¸ªå¤Ÿç”¨åº”è¯¥ä¸?ä¼šç»?å¸¸æ‰©å®¹
        final List<RouterInterceptor> currentInterceptors = new ArrayList(8);
        // æ·»åŠ å†…ç½®æ‹¦æˆªå™¨,ç›®å‰?å°±ä¸€ä¸ªå†…ç½®æ‹¦æˆªå™¨,è€Œä¸”å¿…é¡»åœ¨æœ€å‰?é?¢,å› ä¸ºè¿™ä¸ªæ‹¦æˆªå™¨å†…éƒ¨æœ‰ä¸€ä¸ªæ—¶é—´çš„è®°å½•
        // ä¿?è¯?ä¸€ç§’å†…å°±å?ªèƒ½æ‰“å¼€ä¸€ä¸ªç›¸å?Œçš„ç•Œé?¢
        currentInterceptors.add(OpenOnceInterceptor.getInstance());
        // æ·»åŠ å…±æœ‰æ‹¦æˆªå™¨
        currentInterceptors.addAll(publicInterceptors);
        // æ·»åŠ è‡ªå®šä¹‰æ‹¦æˆªå™¨
        addCustomInterceptors(originalRequest, customInterceptors, currentInterceptors);
        // æ‰«å°¾æ‹¦æˆªå™¨,å†…éƒ¨ä¼šæ·»åŠ ç›®æ ‡è¦?æ±‚æ‰§è¡Œçš„æ‹¦æˆªå™¨å’ŒçœŸæ­£æ‰§è¡Œè·³è½¬çš„æ‹¦æˆªå™¨
        currentInterceptors.add(new RouterInterceptor() {
            @Override
            public void intercept(Chain nextChain) throws Exception {
                // è¿™ä¸ªåœ°å?€è¦?æ‰§è¡Œçš„æ‹¦æˆªå™¨,è¿™é‡Œå?–çš„æ—¶å€™ä¸€å®šè¦?æ³¨æ„?äº†,ä¸?èƒ½æ‹¿æœ€åŽŸå§‹çš„é‚£ä¸ª request,å› ä¸ºä¸Šé?¢çš„æ‹¦æˆªå™¨éƒ½èƒ½æ›´æ”¹ request,
                // å¯¼è‡´æœ€ç»ˆè·³è½¬çš„ç•Œé?¢å’Œä½ æ‹¿åˆ°çš„æ‹¦æˆªå™¨ä¸?åŒ¹é…?,æ‰€ä»¥è¿™é‡Œä¸€å®šæ˜¯æ‹¿ä¸Šä¸€ä¸ªæ‹¦æˆªå™¨ä¼ ç»™ä½ çš„ request å¯¹è±¡
                List<RouterInterceptor> targetInterceptors = RouterCenter.getInstance().interceptors(nextChain.request().uri);
                if (!targetInterceptors.isEmpty()) {
                    currentInterceptors.addAll(targetInterceptors);
                }
                // çœŸæ­£çš„æ‰§è¡Œè·³è½¬çš„æ‹¦æˆªå™¨
                currentInterceptors.add(new RealInterceptor(originalRequest));
                // æ‰§è¡Œä¸‹ä¸€ä¸ªæ‹¦æˆªå™¨,æ­£å¥½æ˜¯ä¸Šé?¢ä»£ç ?æ·»åŠ çš„æ‹¦æˆªå™¨
                nextChain.proceed(nextChain.request());
            }
        });
        // åˆ›å»ºæ‰§è¡Œå™¨
        final RouterInterceptor.Chain chain = new InterceptorChain(currentInterceptors, 0, originalRequest,
                callback);
        // æ‰§è¡Œ
        chain.proceed(originalRequest);

    }

    /**
     * æ·»åŠ è‡ªå®šä¹‰çš„æ‹¦æˆªå™¨
     *
     * @param originalRequest
     * @param customInterceptors
     * @param currentInterceptors
     */
    private static void addCustomInterceptors(@NonNull RouterRequest originalRequest,
                                              @Nullable List<Object> customInterceptors,
                                              List<RouterInterceptor> currentInterceptors) {
        if (customInterceptors == null) {
            return;
        }
        for (Object customInterceptor : customInterceptors) {
            if (customInterceptor instanceof RouterInterceptor) {
                currentInterceptors.add((RouterInterceptor) customInterceptor);
            } else if (customInterceptor instanceof Class) {
                RouterInterceptor interceptor = RouterInterceptorCache.getInterceptorByClass((Class<? extends RouterInterceptor>) customInterceptor);
                if (interceptor == null) {
                    throw new InterceptorNotFoundException("can't find the interceptor and it's className is " + (Class) customInterceptor + ",target url is " + originalRequest.uri.toString());
                } else {
                    currentInterceptors.add(interceptor);
                }
            } else if (customInterceptor instanceof String) {
                RouterInterceptor interceptor = InterceptorCenter.getInstance().getByName((String) customInterceptor);
                if (interceptor == null) {
                    throw new InterceptorNotFoundException("can't find the interceptor and it's name is " + (String) customInterceptor + ",target url is " + originalRequest.uri.toString());
                } else {
                    currentInterceptors.add(interceptor);
                }
            }
        }
    }

    /**
     * è¿™ä¸ªæ‹¦æˆªå™¨çš„ Callback æ˜¯æ‰€æœ‰æ‹¦æˆªå™¨æ‰§è¡Œè¿‡ç¨‹ä¸­ä¼šä½¿ç”¨çš„ä¸€ä¸ª Callback,è¿™æ˜¯å”¯ä¸€çš„ä¸€ä¸ª,æ¯?ä¸ªæ‹¦æˆªå™¨å¯¹è±¡æ‹¿åˆ°çš„æ­¤å¯¹è±¡éƒ½æ˜¯ä¸€æ ·çš„
     */
    private static class InterceptorCallback implements NavigationDisposable, RouterInterceptor.Callback {

        /**
         * ç”¨æˆ·çš„å›žè°ƒ
         */
        @Nullable
        private Callback mCallback;

        /**
         * æœ€åŽŸå§‹çš„è¯·æ±‚,ç”¨æˆ·æž„å»ºçš„,ä¸?ä¼šæ›´æ”¹çš„
         */
        @NonNull
        private final RouterRequest mOriginalRequest;

        /**
         * æ ‡è®°æ˜¯å?¦å®Œæˆ?,å‡ºé”™æˆ–è€…æˆ?åŠŸéƒ½ç®—æ˜¯å®Œæˆ?äº†,ä¸?èƒ½å†?ç»§ç»­è°ƒç”¨äº†
         */
        private boolean isComplete = false;

        /**
         * å?–æ¶ˆ
         */
        private boolean isCanceled;

        /**
         * æ ‡è®°è¿™æ¬¡è·¯ç”±è¯·æ±‚æ˜¯å?¦å®Œæ¯•
         *
         * @return
         */
        private boolean isEnd() {
            return isComplete || isCanceled;
        }

        public InterceptorCallback(@NonNull RouterRequest originalRequest,
                                   @Nullable Callback callback) {
            this.mOriginalRequest = originalRequest;
            this.mCallback = callback;
        }

        @Override
        public void onSuccess(RouterResult result) {
            synchronized (this) {
                if (isEnd()) {
                    return;
                }
                isComplete = true;
                RouterUtil.successCallback(mCallback, result);
            }
        }

        @Override
        public void onError(Throwable error) {
            synchronized (this) {
                if (isEnd()) {
                    return;
                }
                isComplete = true;
                RouterErrorResult errorResult = new RouterErrorResult(mOriginalRequest, error);
                RouterUtil.errorCallback(mCallback, errorResult);
            }
        }

        @Override
        public boolean isComplete() {
            synchronized (this) {
                return isComplete;
            }
        }

        @Override
        public boolean isCanceled() {
            synchronized (this) {
                return isCanceled;
            }
        }

        @NonNull
        @Override
        public RouterRequest originalRequest() {
            return mOriginalRequest;
        }

        @Override
        @AnyThread
        public void cancel() {
            synchronized (this) {
                if (isEnd()) {
                    return;
                }
                // æ ‡è®°å?–æ¶ˆæˆ?åŠŸ
                isCanceled = true;
                RouterUtil.cancelCallback(mOriginalRequest, mCallback);
            }
        }
    }

    /**
     * å®žçŽ°æ‹¦æˆªå™¨åˆ—è¡¨ä¸­çš„æœ€å?Žä¸€çŽ¯,å†…éƒ¨åŽ»æ‰§è¡Œäº†è·³è½¬çš„ä»£ç ?,å¹¶ä¸”åˆ‡æ?¢äº†çº¿ç¨‹æ‰§è¡Œ,å½“å‰?çº¿ç¨‹ä¼šå?œä½?
     */
    private static class RealInterceptor implements RouterInterceptor {

        @NonNull
        private final RouterRequest mOriginalRequest;

        public RealInterceptor(@NonNull RouterRequest originalRequest) {
            mOriginalRequest = originalRequest;
        }

        /**
         * @param chain æ‹¦æˆªå™¨æ‰§è¡Œè¿žæŽ¥å™¨
         * @throws Exception
         */
        @Override
        @MainThread
        public void intercept(final Chain chain) throws Exception {
            try {
                // è¿™ä¸ª request å¯¹è±¡å·²ç»?ä¸?æ˜¯æœ€åŽŸå§‹çš„äº†,ä½†æ˜¯å?¯èƒ½æ˜¯æœ€åŽŸå§‹çš„,å°±çœ‹æ‹¦æˆªå™¨æ˜¯å?¦æ›´æ”¹äº†è¿™ä¸ªå¯¹è±¡äº†
                RouterRequest finalRequest = chain.request();
                if (finalRequest.beforJumpAction != null) {
                    finalRequest.beforJumpAction.run();
                }
                // çœŸæ­£æ‰§è¡Œè·³è½¬çš„é€»è¾‘
                RouterCenter.getInstance().openUri(finalRequest);
                if (finalRequest.afterJumpAction != null) {
                    finalRequest.afterJumpAction.run();
                }
                chain.callback().onSuccess(new RouterResult(mOriginalRequest, finalRequest));
            } catch (Exception e) {
                chain.callback().onError(e);
            }
        }

    }

    /**
     * æ‹¦æˆªå™¨å¤šä¸ªè¿žæŽ¥ç?€èµ°çš„æ‰§è¡Œå™¨,æº?ä»£ç ?æ?¥æº?äºŽ OkHTTP
     * è¿™ä¸ªåŽŸç?†å°±æ˜¯,æœ¬èº«æ˜¯ä¸€ä¸ª æ‰§è¡Œå™¨ (Chain),å½“ä½ è°ƒç”¨ proceed æ–¹æ³•çš„æ—¶å€™,ä¼šåˆ›å»ºä¸‹ä¸€ä¸ªæ‹¦æˆªå™¨çš„æ‰§è¡Œå¯¹è±¡
     * ç„¶å?Žè°ƒç”¨å½“å‰?æ‹¦æˆªå™¨çš„ intercept æ–¹æ³•
     */
    private static class InterceptorChain implements RouterInterceptor.Chain {

        /**
         * æ¯?ä¸€ä¸ªæ‹¦æˆªå™¨æ‰§è¡Œå™¨ {@link RouterInterceptor.Chain}
         * éƒ½ä¼šæœ‰ä¸Šä¸€ä¸ªæ‹¦æˆªå™¨ç»™çš„ request å¯¹è±¡æˆ–è€…åˆ?å§‹åŒ–çš„ä¸€ä¸ª request,ç”¨äºŽåœ¨ä¸‹ä¸€ä¸ªæ‹¦æˆªå™¨
         * ä¸­èŽ·å?–åˆ° request å¯¹è±¡,å¹¶ä¸”æ”¯æŒ?æ‹¦æˆªå™¨è‡ªå®šä¹‰ä¿®æ”¹ request å¯¹è±¡æˆ–è€…ç›´æŽ¥åˆ›å»ºä¸€ä¸ªæ–°çš„ä¼ ç»™ä¸‹ä¸€ä¸ªæ‹¦æˆªå™¨æ‰§è¡Œå™¨
         */
        @NonNull
        private final RouterRequest mRequest;

        /**
         * è¿™ä¸ªæ˜¯æ‹¦æˆªå™¨çš„å›žè°ƒ,è¿™ä¸ªç”¨æˆ·ä¸?èƒ½è‡ªå®šä¹‰,ä¸€ç›´éƒ½æ˜¯ä¸€ä¸ªå¯¹è±¡
         */
        @NonNull
        private final RouterInterceptor.Callback mCallback;

        /**
         * æ‹¦æˆªå™¨åˆ—è¡¨,æ‰€æœ‰è¦?æ‰§è¡Œçš„æ‹¦æˆªå™¨åˆ—è¡¨
         */
        @NonNull
        private final List<RouterInterceptor> mInterceptors;

        /**
         * æ‹¦æˆªå™¨çš„ä¸‹æ ‡
         */
        private final int mIndex;

        /**
         * è°ƒç”¨çš„æ¬¡æ•°,å¦‚æžœè¶…è¿‡1æ¬¡å°±å?šç›¸åº”çš„é”™è¯¯å¤„ç?†
         */
        private int calls;

        /**
         * @param interceptors
         * @param index
         * @param request      ç¬¬ä¸€æ¬¡è¿™ä¸ªå¯¹è±¡æ˜¯ä¸?éœ€è¦?çš„
         * @param callback
         */
        public InterceptorChain(@NonNull List<RouterInterceptor> interceptors, int index,
                                @NonNull RouterRequest request, @NonNull RouterInterceptor.Callback callback) {
            this.mInterceptors = interceptors;
            this.mIndex = index;
            this.mRequest = request;
            this.mCallback = callback;
        }

        @Override
        public RouterRequest request() {
            // ç¬¬ä¸€ä¸ªæ‹¦æˆªå™¨çš„
            return mRequest;
        }

        @Override
        public RouterInterceptor.Callback callback() {
            return mCallback;
        }

        @Override
        public void proceed(final RouterRequest request) {
            proceed(request, mCallback);
        }

        private void proceed(@NonNull final RouterRequest request, @NonNull final RouterInterceptor.Callback callback) {
            // ui çº¿ç¨‹ä¸Šæ‰§è¡Œ
            Utils.postActionToMainThreadAnyway(new Runnable() {
                @Override
                public void run() {
                    try {
                        if (callback().isComplete() || callback().isCanceled()) {
                            return;
                        }
                        if (request == null) {
                            callback().onError(new NavigationFailException("the reqest is null,you can't call 'proceed' method with null reqest,such as 'chain.proceed(null)'"));
                            return;
                        }
                        ++calls;
                        if (mIndex >= mInterceptors.size()) {
                            callback().onError(new NavigationFailException(new IndexOutOfBoundsException(
                                    "size = " + mInterceptors.size() + ",index = " + mIndex)));
                        } else if (calls > 1) { // è°ƒç”¨äº†ä¸¤æ¬¡
                            callback().onError(new NavigationFailException(
                                    "interceptor " + mInterceptors.get(mIndex - 1)
                                            + " must call proceed() exactly once"));
                        } else {
                            // å½“æ‹¦æˆªå™¨æœ€å?Žä¸€ä¸ªçš„æ—¶å€™,å°±ä¸?æ˜¯è¿™ä¸ªç±»äº†,æ˜¯ RealInterceptor äº†
                            InterceptorChain next = new InterceptorChain(mInterceptors, mIndex + 1,
                                    request, callback);
                            // current Interceptor
                            RouterInterceptor interceptor = mInterceptors.get(mIndex);
                            // ç”¨æˆ·è‡ªå®šä¹‰çš„éƒ¨åˆ†,å¿…é¡»åœ¨ä¸»çº¿ç¨‹
                            interceptor.intercept(next);
                        }
                    } catch (Exception e) {
                        callback().onError(e);
                    }
                }
            });
        }
    }

    /**
     * ä¸€äº›å¸®åŠ©æ–¹æ³•
     */
    private static class Help {

        /**
         * å’Œ{@link RouterRxFragment} é…?å¥—ä½¿ç”¨
         */
        private static Set<String> mRequestCodeSet = new HashSet<>();

        private static Random r = new Random();

        /**
         * éš?æœºç”Ÿæˆ?ä¸€ä¸ª requestCode,è°ƒç”¨è¿™ä¸ªæ–¹æ³•çš„ requestCode æ˜¯ {@link Navigator#RANDOM_REQUSET_CODE}
         *
         * @return [1, 256]
         */
        @NonNull
        public static RouterRequest randomlyGenerateRequestCode(@NonNull RouterRequest request) {
            Utils.checkNullPointer(request, "request");
            // å¦‚æžœä¸?æ˜¯æƒ³è¦?éš?æœºç”Ÿæˆ?,å°±ç›´æŽ¥è¿”å›ž
            if (!Navigator.RANDOM_REQUSET_CODE.equals(request.requestCode)) {
                return request;
            }
            // è½¬åŒ–ä¸ºæž„å»ºå¯¹è±¡
            RouterRequest.Builder requestBuilder = request.toBuilder();
            int generateRequestCode = r.nextInt(256) + 1;
            // å¦‚æžœç”Ÿæˆ?çš„è¿™ä¸ª requestCode å­˜åœ¨,å°±é‡?æ–°ç”Ÿæˆ?
            while (isExist(Utils.getActivityFromContext(requestBuilder.context), requestBuilder.fragment, generateRequestCode)) {
                generateRequestCode = r.nextInt(256) + 1;
            }
            return requestBuilder.requestCode(generateRequestCode).build();
        }

        /**
         * æ£€æµ‹å?Œä¸€ä¸ª Fragment æˆ–è€… Activity å?‘èµ·çš„å¤šä¸ªè·¯ç”± request ä¸­çš„ requestCode æ˜¯å?¦å­˜åœ¨äº†
         *
         * @param request è·¯ç”±è¯·æ±‚å¯¹è±¡
         * @return
         */
        public static boolean isExist(@Nullable RouterRequest request) {
            if (request == null || request.requestCode == null) {
                return false;
            }
            // è¿™ä¸ª Context å…³è?”çš„ Activity,ç”¨requestCode åŽ»æ‹¿æ•°æ?®çš„æƒ…å†µä¸‹
            // Context å¿…é¡»æ˜¯ä¸€ä¸ª Activity æˆ–è€… å†…éƒ¨çš„ baseContext æ˜¯ Activity
            Activity act = Utils.getActivityFromContext(request.context);
            // è¿™ä¸ªrequestCodeä¸?ä¼šä¸ºç©º, ç”¨è¿™ä¸ªæ–¹æ³•çš„åœ°æ–¹æ˜¯å¿…é¡»å¡«å†™ requestCode çš„
            return isExist(act, request.fragment, request.requestCode);
        }

        public static boolean isExist(@Nullable Activity act, @Nullable Fragment fragment, @NonNull Integer requestCode) {
            if (act != null) {
                return mRequestCodeSet.contains(act.getClass().getName() + requestCode);
            } else if (fragment != null) {
                return mRequestCodeSet.contains(fragment.getClass().getName() + requestCode);
            }
            return false;
        }

        /**
         * æ·»åŠ ä¸€ä¸ªè·¯ç”±è¯·æ±‚çš„ requestCode
         *
         * @param request è·¯ç”±è¯·æ±‚å¯¹è±¡
         */
        public static void addRequestCode(@Nullable RouterRequest request) {
            if (request == null || request.requestCode == null) {
                return;
            }
            Integer requestCode = request.requestCode;
            // è¿™ä¸ª Context å…³è?”çš„ Activity,ç”¨requestCode åŽ»æ‹¿æ•°æ?®çš„æƒ…å†µä¸‹
            // Context å¿…é¡»æ˜¯ä¸€ä¸ª Activity æˆ–è€… å†…éƒ¨çš„ baseContext æ˜¯ Activity
            Activity act = Utils.getActivityFromContext(request.context);
            if (act != null) {
                mRequestCodeSet.add(act.getClass().getName() + requestCode);
            } else if (request.fragment != null) {
                mRequestCodeSet.add(request.fragment.getClass().getName() + requestCode);
            }
        }

        /**
         * ç§»é™¤ä¸€ä¸ªè·¯ç”±è¯·æ±‚çš„ requestCode
         *
         * @param request è·¯ç”±è¯·æ±‚å¯¹è±¡
         */
        public static void removeRequestCode(@Nullable RouterRequest request) {
            if (request == null || request.requestCode == null) {
                return;
            }
            Integer requestCode = request.requestCode;
            // è¿™ä¸ª Context å…³è?”çš„ Activity,ç”¨requestCode åŽ»æ‹¿æ•°æ?®çš„æƒ…å†µä¸‹
            // Context å¿…é¡»æ˜¯ä¸€ä¸ª Activity æˆ–è€… å†…éƒ¨çš„ baseContext æ˜¯ Activity
            Activity act = Utils.getActivityFromContext(request.context);
            if (act != null) {
                mRequestCodeSet.remove(act.getClass().getName() + requestCode);
            } else if (request.fragment != null) {
                mRequestCodeSet.remove(request.fragment.getClass().getName() + requestCode);
            }
        }

    }


}
