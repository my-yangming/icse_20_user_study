/*
 * <author>Hankcs</author>
 * <email>me@hankcs.com</email>
 * <create-date>2017-11-02 13:42</create-date>
 *
 * <copyright file="AbstractWordVectorModel.java" company="ç ?å†œåœº">
 * Copyright (c) 2017, ç ?å†œåœº. All Right Reserved, http://www.hankcs.com/
 * This source is subject to Hankcs. Please contact Hankcs to get more information.
 * </copyright>
 */
package com.hankcs.hanlp.mining.word2vec;

import com.hankcs.hanlp.algorithm.MaxHeap;

import java.util.*;

/**
 * æŠ½è±¡çš„å?‘é‡?æ¨¡åž‹ï¼Œå°†æŠ½è±¡çš„å¯¹è±¡æ˜ å°„ä¸ºå?‘é‡?
 *
 * @author hankcs
 */
public abstract class AbstractVectorModel<K>
{
    Map<K, Vector> storage;

    public AbstractVectorModel(Map<K, Vector> storage)
    {
        this.storage = storage;
    }

    public AbstractVectorModel()
    {
        storage = new TreeMap<K, Vector>();
    }

    /**
     * èŽ·å?–ä¸€ä¸ªé”®çš„å?‘é‡?ï¼ˆé”®ä¸?ä¼šè¢«é¢„å¤„ç?†ï¼‰
     *
     * @param key é”®
     * @return å?‘é‡?
     */
    final public Vector vector(K key)
    {
        Vector vector = storage.get(key);
        if (vector == null) return null;
        return vector;
    }

    /**
     * ä½™å¼¦ç›¸ä¼¼åº¦
     *
     * @param what ä¸€ä¸ªè¯?
     * @param with å?¦ä¸€ä¸ªè¯?
     * @return ä½™å¼¦ç›¸ä¼¼åº¦
     */
    public float similarity(K what, K with)
    {
        Vector vectorWhat = storage.get(what);
        if (vectorWhat == null)
        {
            return -1f;
        }
        Vector vectorWith = storage.get(with);
        if (vectorWith == null)
        {
            return -1f;
        }
        return vectorWhat.cosineForUnitVector(vectorWith);
    }

    /**
     * æŸ¥è¯¢ä¸Žkeyæœ€ç›¸ä¼¼çš„å…ƒç´ 
     *
     * @param key  é”®
     * @param size topNä¸ª
     * @return é”®å€¼å¯¹åˆ—è¡¨, é”®æ˜¯ç›¸ä¼¼è¯?è¯­, å€¼æ˜¯ç›¸ä¼¼åº¦, æŒ‰ç›¸ä¼¼åº¦é™?åº?æŽ’åˆ—
     */
    public List<Map.Entry<K, Float>> nearest(K key, int size)
    {
        Vector vector = storage.get(key);
        if (vector == null)
        {
            return Collections.emptyList();
        }
        return nearest(key, vector, size);
    }

    /**
     * æŸ¥è¯¢ä¸Žkeyæœ€ç›¸ä¼¼çš„å…ƒç´ 
     *
     * @param key    é”® ç»“æžœå°†æŽ’é™¤è¯¥é”®
     * @param vector å?‘é‡?
     * @param size   topNä¸ª
     * @return é”®å€¼å¯¹åˆ—è¡¨, é”®æ˜¯ç›¸ä¼¼è¯?è¯­, å€¼æ˜¯ç›¸ä¼¼åº¦, æŒ‰ç›¸ä¼¼åº¦é™?åº?æŽ’åˆ—
     */
    private List<Map.Entry<K, Float>> nearest(K key, Vector vector, int size)
    {
        MaxHeap<Map.Entry<K, Float>> maxHeap = new MaxHeap<Map.Entry<K, Float>>(size, new Comparator<Map.Entry<K, Float>>()
        {
            @Override
            public int compare(Map.Entry<K, Float> o1, Map.Entry<K, Float> o2)
            {
                return o1.getValue().compareTo(o2.getValue());
            }
        });

        for (Map.Entry<K, Vector> entry : storage.entrySet())
        {
            if (entry.getKey().equals(key))
            {
                continue;
            }
            maxHeap.add(new AbstractMap.SimpleEntry<K, Float>(entry.getKey(), entry.getValue().cosineForUnitVector(vector)));
        }
        return maxHeap.toList();
    }

    /**
     * èŽ·å?–ä¸Žå?‘é‡?æœ€ç›¸ä¼¼çš„è¯?è¯­
     *
     * @param vector å?‘é‡?
     * @param size   topNä¸ª
     * @return é”®å€¼å¯¹åˆ—è¡¨, é”®æ˜¯ç›¸ä¼¼è¯?è¯­, å€¼æ˜¯ç›¸ä¼¼åº¦, æŒ‰ç›¸ä¼¼åº¦é™?åº?æŽ’åˆ—
     */
    public List<Map.Entry<K, Float>> nearest(Vector vector, int size)
    {
        MaxHeap<Map.Entry<K, Float>> maxHeap = new MaxHeap<Map.Entry<K, Float>>(size, new Comparator<Map.Entry<K, Float>>()
        {
            @Override
            public int compare(Map.Entry<K, Float> o1, Map.Entry<K, Float> o2)
            {
                return o1.getValue().compareTo(o2.getValue());
            }
        });

        for (Map.Entry<K, Vector> entry : storage.entrySet())
        {
            maxHeap.add(new AbstractMap.SimpleEntry<K, Float>(entry.getKey(), entry.getValue().cosineForUnitVector(vector)));
        }
        return maxHeap.toList();
    }

    /**
     * èŽ·å?–ä¸Žå?‘é‡?æœ€ç›¸ä¼¼çš„è¯?è¯­ï¼ˆé»˜è®¤10ä¸ªï¼‰
     *
     * @param vector å?‘é‡?
     * @return é”®å€¼å¯¹åˆ—è¡¨, é”®æ˜¯ç›¸ä¼¼è¯?è¯­, å€¼æ˜¯ç›¸ä¼¼åº¦, æŒ‰ç›¸ä¼¼åº¦é™?åº?æŽ’åˆ—
     */
    public List<Map.Entry<K, Float>> nearest(Vector vector)
    {
        return nearest(vector, 10);
    }

    /**
     * æŸ¥è¯¢ä¸Žè¯?è¯­æœ€ç›¸ä¼¼çš„è¯?è¯­
     *
     * @param key è¯?è¯­
     * @return é”®å€¼å¯¹åˆ—è¡¨, é”®æ˜¯ç›¸ä¼¼è¯?è¯­, å€¼æ˜¯ç›¸ä¼¼åº¦, æŒ‰ç›¸ä¼¼åº¦é™?åº?æŽ’åˆ—
     */
    public List<Map.Entry<K, Float>> nearest(K key)
    {
        return nearest(key, 10);
    }

    /**
     * æ‰§è¡ŒæŸ¥è¯¢æœ€ç›¸ä¼¼çš„å¯¹è±¡ï¼ˆå­?ç±»é€šè¿‡queryæ–¹æ³•å†³å®šå¦‚ä½•è§£æž?queryï¼Œç„¶å?Žé€šè¿‡æ­¤æ–¹æ³•æ‰§è¡ŒæŸ¥è¯¢ï¼‰
     *
     * @param query æŸ¥è¯¢è¯­å?¥ï¼ˆæˆ–è€…è¯´ä¸€ä¸ªå¯¹è±¡çš„å†…å®¹ï¼‰
     * @param size  éœ€è¦?è¿”å›žå‰?å¤šå°‘ä¸ªå¯¹è±¡
     * @return
     */
    final List<Map.Entry<K, Float>> queryNearest(String query, int size)
    {
        if (query == null || query.length() == 0)
        {
            return Collections.emptyList();
        }
        try
        {
            return nearest(query(query), size);
        }
        catch (Exception e)
        {
            return Collections.emptyList();
        }
    }

    /**
     * æŸ¥è¯¢æŠ½è±¡æ–‡æœ¬å¯¹åº”çš„å?‘é‡?ã€‚æ­¤æ–¹æ³•åº”å½“ä¿?è¯?è¿”å›žå?•ä½?å?‘é‡?ã€‚
     *
     * @param query
     * @return
     */
    public abstract Vector query(String query);

    /**
     * æ¨¡åž‹ä¸­çš„è¯?å?‘é‡?æ€»æ•°ï¼ˆè¯?è¡¨å¤§å°?ï¼‰
     *
     * @return
     */
    public int size()
    {
        return storage.size();
    }

    /**
     * æ¨¡åž‹ä¸­çš„è¯?å?‘é‡?ç»´åº¦
     *
     * @return
     */
    public int dimension()
    {
        if (storage == null || storage.isEmpty())
        {
            return 0;
        }
        return storage.values().iterator().next().size();
    }

    /**
     * åˆ é™¤å…ƒç´ 
     *
     * @param key
     * @return
     */
    public Vector remove(K key)
    {
        return storage.remove(key);
    }
}
