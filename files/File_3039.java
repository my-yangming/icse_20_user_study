/*
 * <summary></summary>
 * <author>He Han</author>
 * <email>hankcs.cn@gmail.com</email>
 * <create-date>2014/12/24 12:46</create-date>
 *
 * <copyright file="CoreBiGramDictionary.java" company="ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸">
 * Copyright (c) 2003-2014, ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸. All Right Reserved, http://www.linrunsoft.com/
 * This source is subject to the LinrunSpace License. Please contact ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸ to get more information.
 * </copyright>
 */
package com.hankcs.hanlp.dictionary;

import com.hankcs.hanlp.HanLP;
import com.hankcs.hanlp.corpus.io.IOUtil;
import com.hankcs.hanlp.seg.common.Vertex;
import com.hankcs.hanlp.utility.Predefine;

import java.io.*;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;

import static com.hankcs.hanlp.utility.Predefine.logger;

/**
 * æ ¸å¿ƒè¯?å…¸çš„äºŒå…ƒæŽ¥ç»­è¯?å…¸ï¼Œé‡‡ç”¨æ•´åž‹å‚¨å­˜ï¼Œé«˜æ€§èƒ½
 *
 * @author hankcs
 */
public class CoreBiGramTableDictionary
{
    /**
     * æ??è¿°äº†è¯?åœ¨pairä¸­çš„èŒƒå›´ï¼Œå…·ä½“è¯´æ?¥<br>
     * ç»™å®šä¸€ä¸ªè¯?idAï¼Œä»Žpair[start[idA]]å¼€å§‹çš„start[idA + 1] - start[idA]æ??è¿°äº†ä¸€äº›æŽ¥ç»­çš„é¢‘æ¬¡
     */
    static int start[];
    /**
     * pair[å?¶æ•°n]è¡¨ç¤ºkeyï¼Œpair[n+1]è¡¨ç¤ºfrequency
     */
    static int pair[];

    static
    {
        String path = HanLP.Config.BiGramDictionaryPath;
        logger.info("å¼€å§‹åŠ è½½äºŒå…ƒè¯?å…¸" + path + ".table");
        long start = System.currentTimeMillis();
        if (!load(path))
        {
            throw new IllegalArgumentException("äºŒå…ƒè¯?å…¸åŠ è½½å¤±è´¥");
        }
        else
        {
            logger.info(path + ".table" + "åŠ è½½æˆ?åŠŸï¼Œè€—æ—¶" + (System.currentTimeMillis() - start) + "ms");
        }
    }

    static boolean load(String path)
    {
        String datPath = HanLP.Config.BiGramDictionaryPath + ".table" + Predefine.BIN_EXT;
        if (loadDat(datPath)) return true;
        BufferedReader br;
        TreeMap<Integer, TreeMap<Integer, Integer>> map = new TreeMap<Integer, TreeMap<Integer, Integer>>();
        try
        {
            br = new BufferedReader(new InputStreamReader(IOUtil.newInputStream(path), "UTF-8"));
            String line;
            int total = 0;
            int maxWordId = CoreDictionary.trie.size();
            while ((line = br.readLine()) != null)
            {
                String[] params = line.split("\\s");
                String[] twoWord = params[0].split("@", 2);
                String a = twoWord[0];
                int idA = CoreDictionary.trie.exactMatchSearch(a);
                if (idA == -1)
                {
//                    if (HanLP.Config.DEBUG)
//                        logger.warning(line + " ä¸­çš„ " + a + "ä¸?å­˜åœ¨äºŽæ ¸å¿ƒè¯?å…¸ï¼Œå°†ä¼šå¿½ç•¥è¿™ä¸€è¡Œ");
                    continue;
                }
                String b = twoWord[1];
                int idB = CoreDictionary.trie.exactMatchSearch(b);
                if (idB == -1)
                {
//                    if (HanLP.Config.DEBUG)
//                        logger.warning(line + " ä¸­çš„ " + b + "ä¸?å­˜åœ¨äºŽæ ¸å¿ƒè¯?å…¸ï¼Œå°†ä¼šå¿½ç•¥è¿™ä¸€è¡Œ");
                    continue;
                }
                int freq = Integer.parseInt(params[1]);
                TreeMap<Integer, Integer> biMap = map.get(idA);
                if (biMap == null)
                {
                    biMap = new TreeMap<Integer, Integer>();
                    map.put(idA, biMap);
                }
                biMap.put(idB, freq);
                total += 2;
            }
            br.close();
            start = new int[maxWordId + 1];
            pair = new int[total];  // totalæ˜¯æŽ¥ç»­çš„ä¸ªæ•°*2
            int offset = 0;

            for (int i = 0; i < maxWordId; ++i)
            {
                TreeMap<Integer, Integer> bMap = map.get(i);
                if (bMap != null)
                {
                    for (Map.Entry<Integer, Integer> entry : bMap.entrySet())
                    {
                        int index = offset << 1;
                        pair[index] = entry.getKey();
                        pair[index + 1] = entry.getValue();
                        ++offset;
                    }
                }
                start[i + 1] = offset;
            }

            logger.info("äºŒå…ƒè¯?å…¸è¯»å?–å®Œæ¯•:" + path + "ï¼Œæž„å»ºä¸ºTableBinç»“æž„");
        }
        catch (FileNotFoundException e)
        {
            logger.severe("äºŒå…ƒè¯?å…¸" + path + "ä¸?å­˜åœ¨ï¼?" + e);
            return false;
        }
        catch (IOException e)
        {
            logger.severe("äºŒå…ƒè¯?å…¸" + path + "è¯»å?–é”™è¯¯ï¼?" + e);
            return false;
        }
        logger.info("å¼€å§‹ç¼“å­˜äºŒå…ƒè¯?å…¸åˆ°" + datPath);
        if (!saveDat(datPath))
        {
            logger.warning("ç¼“å­˜äºŒå…ƒè¯?å…¸åˆ°" + datPath + "å¤±è´¥");
        }
        return true;
    }

    static boolean saveDat(String path)
    {
        try
        {
//            DataOutputStream out = new DataOutputStream(new FileOutputStream(path));
//            out.writeInt(start.length);
//            for (int i : start)
//            {
//                out.writeInt(i);
//            }
//            out.writeInt(pair.length);
//            for (int i : pair)
//            {
//                out.writeInt(i);
//            }
//            out.close();
            ObjectOutputStream out = new ObjectOutputStream(IOUtil.newOutputStream(path));
            out.writeObject(start);
            out.writeObject(pair);
            out.close();
        }
        catch (Exception e)
        {
            logger.log(Level.WARNING, "åœ¨ç¼“å­˜" + path + "æ—¶å?‘ç”Ÿå¼‚å¸¸", e);
            return false;
        }

        return true;
    }

    static boolean loadDat(String path)
    {
//        ByteArray byteArray = ByteArray.createByteArray(path);
//        if (byteArray == null) return false;
//
//        int size = byteArray.nextInt(); // è¿™ä¸¤ä¸ªæ•°ç»„ä»Žbyteè½¬ä¸ºintç«Ÿç„¶è¦?èŠ±4ç§’é’Ÿ
//        start = new int[size];
//        for (int i = 0; i < size; ++i)
//        {
//            start[i] = byteArray.nextInt();
//        }
//
//        size = byteArray.nextInt();
//        pair = new int[size];
//        for (int i = 0; i < size; ++i)
//        {
//            pair[i] = byteArray.nextInt();
//        }

        try
        {
            ObjectInputStream in = new ObjectInputStream(IOUtil.newInputStream(path));
            start = (int[]) in.readObject();
            if (CoreDictionary.trie.size() != start.length - 1)     // ç›®å‰?CoreNatureDictionary.ngram.txtçš„ç¼“å­˜ä¾?èµ–äºŽCoreNatureDictionary.txtçš„ç¼“å­˜
            {                                                       // æ‰€ä»¥è¿™é‡Œæ ¡éªŒä¸€ä¸‹äºŒè€…çš„ä¸€è‡´æ€§ï¼Œä¸?ç„¶å?¯èƒ½å¯¼è‡´ä¸‹æ ‡è¶Šç•Œæˆ–è€…ngramé”™ä¹±çš„æƒ…å†µ
                in.close();
                return false;
            }
            pair = (int[]) in.readObject();
            in.close();
        }
        catch (Exception e)
        {
            logger.warning("å°?è¯•è½½å…¥ç¼“å­˜æ–‡ä»¶" + path + "å?‘ç”Ÿå¼‚å¸¸[" + e + "]ï¼Œä¸‹é?¢å°†è½½å…¥æº?æ–‡ä»¶å¹¶è‡ªåŠ¨ç¼“å­˜â€¦â€¦");
            return false;
        }
        return true;
    }

    /**
     * äºŒåˆ†æ?œç´¢ï¼Œç”±äºŽäºŒå…ƒæŽ¥ç»­å‰?ä¸€ä¸ªè¯?å›ºå®šæ—¶ï¼Œå?Žä¸€ä¸ªè¯?æ¯”è¾ƒå°‘ï¼Œæ‰€ä»¥äºŒåˆ†ä¹Ÿèƒ½å?–å¾—å¾ˆé«˜çš„æ€§èƒ½
     * @param a ç›®æ ‡æ•°ç»„
     * @param fromIndex å¼€å§‹ä¸‹æ ‡
     * @param length é•¿åº¦
     * @param key è¯?çš„id
     * @return å…±çŽ°é¢‘æ¬¡
     */
    private static int binarySearch(int[] a, int fromIndex, int length, int key)
    {
        int low = fromIndex;
        int high = fromIndex + length - 1;

        while (low <= high)
        {
            int mid = (low + high) >>> 1;
            int midVal = a[mid << 1];

            if (midVal < key)
                low = mid + 1;
            else if (midVal > key)
                high = mid - 1;
            else
                return mid; // key found
        }
        return -(low + 1);  // key not found.
    }

    /**
     * èŽ·å?–å…±çŽ°é¢‘æ¬¡
     *
     * @param a ç¬¬ä¸€ä¸ªè¯?
     * @param b ç¬¬äºŒä¸ªè¯?
     * @return ç¬¬ä¸€ä¸ªè¯?@ç¬¬äºŒä¸ªè¯?å‡ºçŽ°çš„é¢‘æ¬¡
     */
    public static int getBiFrequency(String a, String b)
    {
        int idA = CoreDictionary.trie.exactMatchSearch(a);
        if (idA == -1)
        {
            return 0;
        }
        int idB = CoreDictionary.trie.exactMatchSearch(b);
        if (idB == -1)
        {
            return 0;
        }
        int index = binarySearch(pair, start[idA], start[idA + 1] - start[idA], idB);
        if (index < 0) return 0;
        index <<= 1;
        return pair[index + 1];
    }

    /**
     * èŽ·å?–å…±çŽ°é¢‘æ¬¡
     * @param idA ç¬¬ä¸€ä¸ªè¯?çš„id
     * @param idB ç¬¬äºŒä¸ªè¯?çš„id
     * @return å…±çŽ°é¢‘æ¬¡
     */
    public static int getBiFrequency(int idA, int idB)
    {
        // è´Ÿæ•°idè¡¨ç¤ºæ?¥è‡ªç”¨æˆ·è¯?å…¸çš„è¯?è¯­çš„è¯?é¢‘ï¼ˆç”¨æˆ·è‡ªå®šä¹‰è¯?è¯­æ²¡æœ‰idï¼‰ï¼Œè¿”å›žæ­£å€¼å¢žåŠ å…¶äº²å’Œåº¦
        if (idA < 0)
        {
            return -idA;
        }
        if (idB < 0)
        {
            return -idB;
        }
        int index = binarySearch(pair, start[idA], start[idA + 1] - start[idA], idB);
        if (index < 0) return 0;
        index <<= 1;
        return pair[index + 1];
    }

    /**
     * èŽ·å?–è¯?è¯­çš„ID
     *
     * @param a è¯?è¯­
     * @return id
     */
    public static int getWordID(String a)
    {
        return CoreDictionary.trie.exactMatchSearch(a);
    }

    /**
     * çƒ­æ›´æ–°äºŒå…ƒæŽ¥ç»­è¯?å…¸<br>
     *     é›†ç¾¤çŽ¯å¢ƒï¼ˆæˆ–å…¶ä»–IOAdapterï¼‰éœ€è¦?è‡ªè¡Œåˆ é™¤ç¼“å­˜æ–‡ä»¶
     * @return æ˜¯å?¦æˆ?åŠŸ
     */
    public static boolean reload()
    {
        String biGramDictionaryPath = HanLP.Config.BiGramDictionaryPath;
        IOUtil.deleteFile(biGramDictionaryPath + ".table" + Predefine.BIN_EXT);

        return load(biGramDictionaryPath);
    }
}
