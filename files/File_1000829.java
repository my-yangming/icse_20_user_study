package org.nutz.validate;

import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.nutz.lang.util.NutMap;
import org.nutz.validate.impl.*;

/**
 * ä¸€ä¸ªç®€ä¾¿çš„éªŒè¯?å·¥å…·ç±»ï¼ŒæŽ¥å?—ä¸€ä¸ª Map
 * 
 * <pre>
 * {
       // é’ˆå¯¹å­—ç¬¦ä¸²åž‹çš„å€¼ï¼Œæ£€æŸ¥å‰?æ˜¯å?¦è¦?é¢„å…ˆåŽ»æŽ‰å·¦å?³ç©ºç™½
       trim : true,
       // æ•°å­—åŒºé—´
       intRange : "(10,20]",
       // æ—¥æœŸèŒƒå›´çš„åŒºé—´
       dateRange : "(2018-12-02,2018-12-31]",
       // éªŒè¯?å€¼çš„å­—ç¬¦ä¸²å½¢å¼?ï¼Œæ”¯æŒ? "!" å¼€å¤´
       regex : "^...$",
       // ç¡®ä¿?å€¼é?ž null
       notNull : true,
       // é’ˆå¯¹å­—ç¬¦ä¸²çš„å€¼ï¼Œæœ€å¤§é•¿åº¦ä¸?è¶…è¿‡å¤šå°‘
       maxLength : 23,
       // é’ˆå¯¹å­—ç¬¦ä¸²çš„å€¼ï¼Œæœ€å°?é•¿åº¦ä¸?èƒ½ä½ŽäºŽå¤šå°‘
       minLength : 5,
   }
 * </pre>
 * 
 * <ul>
 * <li>æ‰€æœ‰é¡¹ç›®éƒ½æ˜¯ `AND`çš„å…³ç³»
 * <li>æ£€æŸ¥çš„é¡ºåº?ä¼šæ˜¯ `trim > notNull > max/minLength > å…¶ä»–`
 * </ul>
 * 
 * @author zozoh(zozohtnt@gmail.com)
 */
public class NutValidate {

    private List<NutValidator> items;

    public NutValidate() {
        items = new LinkedList<NutValidator>();
    }

    public NutValidate(Map<String, Object> map) {
        this();
        items.clear();
        this.addAll(map);
        this.ready();

    }

    /**
     * æ ¹æ?®ä¸€ä¸ªæ??è¿°çš„è¡¨å¢žåŠ è‡ªèº«çš„æ£€æŸ¥é¡¹ï¼Œ
     * 
     * @param map
     *            æ??è¿°æ£€æŸ¥é¡¹çš„ Map
     * @return è‡ªèº«ä»¥ä¾¿é“¾å¼?èµ‹å€¼
     */
    public NutValidate addAll(Map<String, Object> map) {
        NutMap m2 = NutMap.WRAP(map);
        for (String key : m2.keySet()) {
            // é’ˆå¯¹å­—ç¬¦ä¸²åž‹çš„å€¼ï¼Œæ£€æŸ¥å‰?æ˜¯å?¦è¦?é¢„å…ˆåŽ»æŽ‰å·¦å?³ç©ºç™½
            if ("trim".equals(key)) {
                this.items.add(new TrimValidator());
            }
            // æ•°å­—åŒºé—´
            else if ("intRange".equals(key)) {
                String str = m2.getString(key);
                this.items.add(new IntRangeValidator(str));
            }
            // æ—¥æœŸèŒƒå›´çš„åŒºé—´
            else if ("dateRange".equals(key)) {
                String str = m2.getString(key);
                this.items.add(new DateRangeValidator(str));
            }
            // éªŒè¯?å€¼çš„å­—ç¬¦ä¸²å½¢å¼?ï¼Œæ”¯æŒ? "!" å¼€å¤´
            else if ("regex".equals(key)) {
                String str = m2.getString(key);
                this.items.add(new RegexValidator(str));
            }
            // ç¡®ä¿?å€¼é?ž null
            else if ("notNull".equals(key)) {
                this.items.add(new NotNullValidator());
            }
            // é’ˆå¯¹å­—ç¬¦ä¸²çš„å€¼ï¼Œæœ€å¤§é•¿åº¦ä¸?è¶…è¿‡å¤šå°‘
            else if ("maxLength".equals(key)) {
                int len = m2.getInt(key);
                this.items.add(new MaxLengthValidator(len));
            }
            // é’ˆå¯¹å­—ç¬¦ä¸²çš„å€¼ï¼Œæœ€å°?é•¿åº¦ä¸?èƒ½ä½ŽäºŽå¤šå°‘
            else if ("minLength".equals(key)) {
                int len = m2.getInt(key);
                this.items.add(new MinLengthValidator(len));
            }
            // å…¶ä»–çš„æ— è§†
        }
        return this;
    }

    /**
     * å¢žåŠ ä¸€ä¸ªæ£€æŸ¥å™¨
     * 
     * @param nvs
     *            æ£€æŸ¥å™¨åˆ—è¡¨
     * @return è‡ªèº«ä»¥ä¾¿é“¾å¼?èµ‹å€¼
     */
    public NutValidate add(NutValidator... nvs) {
        for (NutValidator nv : nvs)
            this.items.add(nv);
        return this;
    }

    /**
     * æ ¹æ?®æ£€æŸ¥å™¨çš„ä¼˜å…ˆé¡ºåº?ï¼Œé‡?æ–°è°ƒæ•´æ£€æŸ¥åˆ—è¡¨
     * 
     * @return è‡ªèº«ä»¥ä¾¿é“¾å¼?èµ‹å€¼
     */
    public NutValidate ready() {
        Collections.sort(items, new Comparator<NutValidator>() {
            public int compare(NutValidator v1, NutValidator v2) {
                return v1.order() - v2.order();
            }
        });
        return this;
    }

    /**
     * æ¸…é™¤è‡ªèº«çš„æ£€æŸ¥é“¾
     * 
     * @return è‡ªèº«ä»¥ä¾¿é“¾å¼?èµ‹å€¼
     */
    public NutValidate reset() {
        items.clear();
        return this;
    }

    /**
     * æ‰§è¡Œæ£€æŸ¥
     * 
     * @param val
     * @return æ£€æŸ¥å?Žçš„ç»“æžœï¼Œå?¯èƒ½ä¼šè¢«ä¿®æ”¹ï¼Œè­¬å¦‚ `trim` æ“?ä½œ
     * @throws NutValidateException
     *             - å¦‚æžœä»»ä½•ä¸€ä¸ªæ£€æŸ¥å™¨é™¤äº†é”™è¯¯ï¼Œå°±ä¼šæŠ›å‡ºæœ¬é”™è¯¯ï¼Œå¹¶ä¸­æ–­å?Žç»­çš„æ£€æŸ¥
     */
    public Object check(Object val) throws NutValidateException {
        Object re = val;
        for (NutValidator nv : items) {
            re = nv.check(re);
        }
        return re;
    }
}
