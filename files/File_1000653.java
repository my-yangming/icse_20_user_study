package org.nutz.lang.tmpl;

import java.util.LinkedList;

import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.nutz.lang.Lang;
import org.nutz.lang.Strings;
import org.nutz.lang.util.NutBean;
import org.nutz.lang.util.NutMap;

/**
 * å? ä½?ç¬¦æ”¯æŒ? `${è·¯å¾„<ç±»åž‹:æ ¼å¼?>?é»˜è®¤å€¼}` çš„å†™æ³•
 * <p/>
 * æ”¯æŒ?çš„ç±»åž‹ä¸º:
 * <ul>
 * <li><b>int</b> : %d æ ¼å¼?åŒ–å­—ç¬¦ä¸²
 * <li><b>long</b> : %d æ ¼å¼?åŒ–å­—ç¬¦ä¸²
 * <li><b>float</b> : %f æ ¼å¼?åŒ–å­—ç¬¦ä¸²
 * <li><b>double</b>: %f æ ¼å¼?åŒ–å­—ç¬¦ä¸²
 * <li><b>boolean</b>: å?¦/æ˜¯ æ ¼å¼?åŒ–å­—ç¬¦ä¸²
 * <li><b>date</b> : yyyyMMdd æ ¼å¼?åŒ–å­—ç¬¦ä¸²
 * <li><b>string</b>: %s æ ¼å¼?åŒ–å­—ç¬¦ä¸²ã€‚æˆ–è€… (string::A=Apple,B=Banana,C=Cherry) è¡¨æ˜ å°„æ•°æ?®
 * <li><b>json<b> : cqn è¾“å‡ºä¸€æ®µ JSON æ–‡æœ¬,cç´§å‡‘ï¼Œqè¾“å‡ºå¼•å?·,nå¿½ç•¥null
 * </ul>
 * <p/>
 * å¦‚æžœæ²¡æœ‰å£°æ˜Žç±»åž‹ï¼Œåˆ™å½“å?š "string"
 *
 * @author zozoh(zozohtnt@gmail.com)
 */
public class Tmpl {

    // private static final Pattern _P2 =
    // Pattern.compile("([\\w\\d_.\\[\\]'\"-]+)"
    // + "(<(int|long|boolean|float|double|date|string)( *: *([^>]*))?>)?"
    // + "([?] *(.*) *)?");

    private static final Pattern _P2 = Pattern.compile("([^<>()?]+)"
                                                       + "([<(](int|long|boolean|float|double|date|string|json)?( *: *([^>]*))?[>)])?"
                                                       + "([?] *(.*) *)?");

    /**
     * è§£æž?æ¨¡æ?¿å¯¹è±¡
     *
     * @param tmpl
     *            æ¨¡æ?¿å­—ç¬¦ä¸²
     * @return è§£æž?å¥½çš„æ¨¡æ?¿å¯¹è±¡
     *
     * @see #parse(String, Pattern, int, int)
     */
    public static Tmpl parse(String tmpl) {
        if (null == tmpl)
            return null;
        return new Tmpl(tmpl, null, -1, -1, null);
    }

    public static Tmpl parsef(String fmt, Object... args) {
        if (null == fmt)
            return null;
        return new Tmpl(String.format(fmt, args), null, -1, -1, null);
    }

    /**
     * è§£æž?æ¨¡æ?¿å¯¹è±¡ï¼Œå¹¶ç”¨ä¸Šä¸‹æ–‡è¿›è¡Œæ¸²æŸ“ã€‚
     * <p/>
     * ä½ å?¯ä»¥é€šè¿‡å?‚æ•° ptn æŒ‡å®šè‡ªå®šä¹‰çš„æ­£åˆ™è¡¨è¾¾å¼?æ?¥å£°æ˜Žè‡ªå·±çš„æ¨¡æ?¿å? ä½?ç¬¦å½¢å¼?ã€‚ <br>
     * é»˜è®¤çš„æ¨¡æ?¿å? ä½?ç¬¦æ˜¯ <code>(?&lt;![$])[$][{]([^}]+)[}]</code>
     * <p/>
     * å?³ï¼Œå½¢å¼?å¦‚ <code>${xxxx}</code> çš„ä¼šè¢«å½“å?šå? ä½?ç¬¦ï¼Œ å?Œæ—¶ <code>$$</code> å?¯ä»¥é€ƒé€¸
     *
     * @param tmpl
     *            æ¨¡æ?¿å­—ç¬¦ä¸²
     * @param ptn
     *            ä¸€ä¸ªæ­£åˆ™è¡¨è¾¾å¼?ï¼ŒæŒ‡æ˜Žå? ä½?ç¬¦çš„å½¢å¼?ã€‚
     * @param groupIndex
     *            æŒ‡å®šæ­£åˆ™è¡¨è¾¾å¼?ï¼Œå“ªä¸ªåŒ¹é…?ç»„ä½œä¸ºä½ çš„å? ä½?ç¬¦å†…å®¹
     * @param escapeIndex
     *            æŒ‡æ˜Žäº†é€ƒé€¸å­—ç¬¦çš„ç»„ï¼Œå¦‚æžœä¸º -1 åˆ™è¡¨ç¤ºæ²¡æœ‰é€ƒé€¸å­—ç¬¦
     * @param getEscapeStr
     *            ç»™å®šå¦‚ä½•æ˜¾ç¤ºé€ƒé€¸å­—ç¬¦çš„å›žè°ƒ
     * @return æ¨¡æ?¿å¯¹è±¡
     */
    public static Tmpl parse(String tmpl,
                             Pattern ptn,
                             int groupIndex,
                             int escapeIndex,
                             TmplEscapeStr getEscapeStr) {
        if (null == tmpl)
            return null;
        return new Tmpl(tmpl, ptn, groupIndex, escapeIndex, getEscapeStr);
    }

    /**
     * è§£æž?æ¨¡æ?¿å¯¹è±¡, å¹¶ç”¨ä¸Šä¸‹æ–‡è¿›è¡Œæ¸²æŸ“ã€‚
     * 
     * @param tmpl
     *            æ¨¡æ?¿å­—ç¬¦ä¸²
     * @param startChar
     *            å? ä½?ç¬¦èµ·å§‹æ ‡ç¤ºç¬¦
     * @param leftBrace
     *            å·¦ä¾§æ‹¬å?·
     * @param rightBrace
     *            å?³ä¾§æ‹¬å?·
     * @return æ¨¡æ?¿å¯¹è±¡
     */
    public static Tmpl parse(String tmpl,
                             final String startChar,
                             String leftBrace,
                             String rightBrace) {
        if (null == tmpl)
            return null;
        String regex = "((?<!["
                       + startChar
                       + "])["
                       + startChar
                       + "]["
                       + ("[".equals(leftBrace) ? "\\[" : leftBrace)
                       + "]([^"
                       + ("]".equals(rightBrace) ? "\\]" : rightBrace)
                       + "]+)["
                       + rightBrace
                       + "])|(["
                       + startChar
                       + "]["
                       + startChar
                       + "])";
        Pattern ptn = Pattern.compile(regex);
        return new Tmpl(tmpl, ptn, 2, 3, new TmplEscapeStr() {
            public String get(Matcher m) {
                return startChar;
            }
        });
    }

    /**
     * è‡ªå®šä¹‰å? ä½?ç¬¦çš„å¼€å§‹å­—ç¬¦ï¼Œå·¦å?³æ‹¬å?·å?„ä¸º "{" å’Œ "}"
     * 
     * @see #parse(String, String, String, String)
     */
    public static Tmpl parse(String tmpl, final String startChar) {
        return parse(tmpl, startChar, "{", "}");
    }

    /**
     * @see #exec(String, Pattern, int, int, NutBean, boolean)
     */
    public static String exec(String tmpl, NutBean context) {
        return exec(tmpl, null, -1, -1, null, context, true);
    }

    /**
     * @see #exec(String, Pattern, int, int, NutBean, boolean)
     */
    public static String exec(String tmpl, NutBean context, boolean showKey) {
        return exec(tmpl, null, -1, -1, null, context, showKey);
    }

    /**
     * @see #parse(String, Pattern, int, int, TmplEscapeStr)
     */
    public static String exec(String tmpl,
                              Pattern ptn,
                              int groupIndex,
                              int escapeIndex,
                              TmplEscapeStr getEscapeStr,
                              NutBean context,
                              boolean showKey) {
        return parse(tmpl, ptn, groupIndex, escapeIndex, getEscapeStr).render(context, showKey);
    }

    /**
     * @see #parse(String, String, String, String)
     */
    public static String exec(String tmpl,
                              String startChar,
                              String leftBrace,
                              String rightBrace,
                              NutBean context,
                              boolean showKey) {
        return parse(tmpl, startChar, leftBrace, rightBrace).render(context, showKey);
    }

    /**
     * @see #parse(String, String)
     */
    public static String exec(String tmpl, String startChar, NutBean context, boolean showKey) {
        return parse(tmpl, startChar).render(context, showKey);
    }

    private Pattern _P;
    int groupIndex;
    int escapeIndex;
    private TmplEscapeStr getEscapeStr;
    private List<TmplEle> list;
    private List<String> keys;

    private Tmpl() {
        list = new LinkedList<TmplEle>();
        keys = new LinkedList<String>();
    }

    private Tmpl(Pattern ptn, int grpIdx, int escIdx, TmplEscapeStr getEscapeStr) {
        this();
        // é»˜è®¤çš„æ¨¡æ?¿å? ä½?ç¬¦
        if (null == ptn) {
            // _P =
            // Pattern.compile("((?<![$])[$][{]([^}]+)[}])|([$]([$][{][^}]+[}]))");
            // this.groupIndex = 2;
            // this.escapeIndex = 4;

            _P = Pattern.compile("((?<![$])[$][{]([^}]+)[}])|([$][$])");
            this.groupIndex = 2;
            this.escapeIndex = 3;
            this.getEscapeStr = new TmplEscapeStr() {
                public String get(Matcher m) {
                    return "$";
                }
            };
        }
        // è‡ªå®šä¹‰çš„å? ä½?ç¬¦
        else {
            _P = ptn;
            this.groupIndex = grpIdx;
            this.escapeIndex = escIdx;
            this.getEscapeStr = getEscapeStr;
            if (null == this.getEscapeStr) {
                this.getEscapeStr = new TmplEscapeStr() {
                    public String get(Matcher m) {
                        return m.group(escapeIndex).substring(0, 1);
                    }
                };
            }
        }
    }

    private Tmpl(String tmpl,
                 Pattern ptn,
                 int groupIndex,
                 int escapeIndex,
                 TmplEscapeStr getEscapeStr) {
        this(ptn, groupIndex, escapeIndex, getEscapeStr);

        // å¼€å§‹è§£æž?
        Matcher m = _P.matcher(tmpl);
        int lastIndex = 0;

        while (m.find()) {
            int pos = m.start();
            // çœ‹çœ‹æ˜¯å?¦è¦?ç”Ÿæˆ?é?™æ€?å¯¹è±¡
            if (pos > lastIndex) {
                list.add(new TmplStaticEle(tmpl.substring(lastIndex, pos)));
            }

            // çœ‹çœ‹æ˜¯é€ƒé€¸å‘¢ï¼Œè¿˜æ˜¯åŒ¹é…?ä¸Šäº†
            String s_escape = this.escapeIndex > 0 ? m.group(this.escapeIndex) : null;
            String s_match = m.group(this.groupIndex);

            // å¦‚æžœæ˜¯é€ƒé€¸
            if (!Strings.isBlank(s_escape)) {
                String esc_str = this.getEscapeStr.get(m);
                list.add(new TmplStaticEle(esc_str));
            }
            // å?¦åˆ™åˆ†æž?é”®
            else {
                // å¦‚æžœæ˜¯ `=` å¼€å¤´ï¼Œç›´æŽ¥å°±ä½œä¸ºå­—ç¬¦ä¸²å¥½äº†
                // è¿™ä¸ªç‰¹æ®Šå¤„ç?†ï¼Œå?¯ä»¥ç”¨æ?¥æŠŠå? ä½?ç¬¦å’Œ El ç»“å?ˆèµ·æ?¥
                // å¦‚æžœæƒ³è¾“å‡ºä¸€ä¸ªå? ä½?ç¬¦æ˜¯ El è¡¨è¾¾å¼?ï¼Œé‚£ä¹ˆå†™ä¸ª = ï¼Œ å°±ä¼šè¢«è®¤ä¸ºæ˜¯å­—ç¬¦ä¸²é»˜è®¤ä¿?ç•™
                // å¦‚æžœæ¸²æŸ“çš„æ—¶å€™ï¼Œå¯¹ key è¿›è¡Œåˆ¤æ–­ï¼Œå?‘çŽ°æ˜¯ = å¼€å¤´çš„ keyï¼Œç”¨ El é¢„å…ˆæ¸²æŸ“å¹¶å¡«å…¥ä¸Šä¸‹æ–‡å°±å¥½äº†
                // TODO è¿™ä¸ªæ˜¯ä¸?æ˜¯åº”è¯¥æ?žä¸€ä¸ª TmplElEle å‘¢ï¼Ÿ
                if (s_match.startsWith("=")) {
                    keys.add(s_match);
                    list.add(new TmplStringEle(s_match, null, null));
                }
                // å?¦åˆ™æ ¹æ?®å? ä½?ç¬¦è¯­æ³•è§£æž?ä¸€ä¸‹
                else {
                    Matcher m2 = _P2.matcher(s_match);

                    if (!m2.find())
                        throw Lang.makeThrow("Fail to parse tmpl key '%s'", m.group(1));

                    String key = m2.group(1);
                    String type = Strings.sNull(m2.group(3), "string");
                    String fmt = m2.group(5);
                    String dft = m2.group(7);

                    // è®°å½•é”®
                    keys.add(key);

                    // åˆ›å»ºå…ƒç´ 
                    if ("string".equals(type)) {
                        list.add(new TmplStringEle(key, fmt, dft));
                    }
                    // int
                    else if ("int".equals(type)) {
                        list.add(new TmplIntEle(key, fmt, dft));
                    }
                    // long
                    else if ("long".equals(type)) {
                        list.add(new TmplLongEle(key, fmt, dft));
                    }
                    // boolean
                    else if ("boolean".equals(type)) {
                        list.add(new TmplBooleanEle(key, fmt, dft));
                    }
                    // float
                    else if ("float".equals(type)) {
                        list.add(new TmplFloatEle(key, fmt, dft));
                    }
                    // double
                    else if ("double".equals(type)) {
                        list.add(new TmplDoubleEle(key, fmt, dft));
                    }
                    // date
                    else if ("date".equals(type)) {
                        list.add(new TmplDateEle(key, fmt, dft));
                    }
                    // json
                    else if ("json".equals(type)) {
                        list.add(new TmplJsonEle(key, fmt, dft));
                    }
                    // é? ä¸?å?¯èƒ½
                    else {
                        throw Lang.impossible();
                    }
                }
            }
            // è®°å½•
            lastIndex = m.end();
        }

        // æœ€å?Žç»“å°¾æ˜¯å?¦è¦?åŠ å…¥ä¸€ä¸ªå¯¹è±¡
        if (!(lastIndex >= tmpl.length())) {
            list.add(new TmplStaticEle(tmpl.substring(lastIndex)));
        }

    }

    public String render(NutBean context) {
        return render(context, true);
    }

    public String render(NutBean context, boolean showKey) {
        StringBuilder sb = new StringBuilder();
        if (null == context)
            context = new NutMap();
        for (TmplEle ele : list) {
            ele.join(sb, context, showKey);
        }
        return sb.toString();
    }

    public List<String> keys() {
        return this.keys;
    }

    public String toString() {
        StringBuilder sb = new StringBuilder();
        for (TmplEle ele : list) {
            sb.append(ele);
        }
        return sb.toString();
    }

}
