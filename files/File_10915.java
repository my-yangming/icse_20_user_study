package com.vondear.rxtool;

import java.util.Collection;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

/**
 *
 * @author vondear
 * @date 2016/1/24
 *  çº¿ç¨‹æ± ç›¸å…³å·¥å…·ç±»
 */
public class RxThreadPoolTool {

    private ExecutorService exec;
    private ScheduledExecutorService scheduleExec;
    /**
     * ThreadPoolUtilsæž„é€ å‡½æ•°
     *
     * @param type         çº¿ç¨‹æ± ç±»åž‹
     * @param corePoolSize å?ªå¯¹Fixedå’ŒScheduledçº¿ç¨‹æ± èµ·æ•ˆ
     */
    public RxThreadPoolTool(Type type, int corePoolSize) {
        // æž„é€ æœ‰å®šæ—¶åŠŸèƒ½çš„çº¿ç¨‹æ± 
        // ThreadPoolExecutor(corePoolSize, Integer.MAX_VALUE, 10L, TimeUnit.MILLISECONDS, new BlockingQueue<Runnable>)
        scheduleExec = Executors.newScheduledThreadPool(corePoolSize);
        switch (type) {
            case FixedThread:
                // æž„é€ ä¸€ä¸ªå›ºå®šçº¿ç¨‹æ•°ç›®çš„çº¿ç¨‹æ± 
                // ThreadPoolExecutor(corePoolSize, corePoolSize, 0L, TimeUnit.MILLISECONDS, new
                // LinkedBlockingQueue<Runnable>());
                exec = Executors.newFixedThreadPool(corePoolSize);
                break;
            case SingleThread:
                // æž„é€ ä¸€ä¸ªå?ªæ”¯æŒ?ä¸€ä¸ªçº¿ç¨‹çš„çº¿ç¨‹æ± ,ç›¸å½“äºŽnewFixedThreadPool(1)
                // ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>())
                exec = Executors.newSingleThreadExecutor();
                break;
            case CachedThread:
                // æž„é€ ä¸€ä¸ªç¼“å†²åŠŸèƒ½çš„çº¿ç¨‹æ± 
                // ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue<Runnable>());
                exec = Executors.newCachedThreadPool();
                break;
            default:
                exec = scheduleExec;
                break;
        }
    }

    /**
     * åœ¨æœªæ?¥æŸ?ä¸ªæ—¶é—´æ‰§è¡Œç»™å®šçš„å‘½ä»¤
     * <p>è¯¥å‘½ä»¤å?¯èƒ½åœ¨æ–°çš„çº¿ç¨‹ã€?å·²å…¥æ± çš„çº¿ç¨‹æˆ–è€…æ­£è°ƒç”¨çš„çº¿ç¨‹ä¸­æ‰§è¡Œï¼Œè¿™ç”± Executor å®žçŽ°å†³å®šã€‚</p>
     *
     * @param command å‘½ä»¤
     */
    public void execute(Runnable command) {
        exec.execute(command);
    }

    /**
     * åœ¨æœªæ?¥æŸ?ä¸ªæ—¶é—´æ‰§è¡Œç»™å®šçš„å‘½ä»¤é“¾è¡¨
     * <p>è¯¥å‘½ä»¤å?¯èƒ½åœ¨æ–°çš„çº¿ç¨‹ã€?å·²å…¥æ± çš„çº¿ç¨‹æˆ–è€…æ­£è°ƒç”¨çš„çº¿ç¨‹ä¸­æ‰§è¡Œï¼Œè¿™ç”± Executor å®žçŽ°å†³å®šã€‚</p>
     *
     * @param commands å‘½ä»¤é“¾è¡¨
     */
    public void execute(List<Runnable> commands) {
        for (Runnable command : commands) {
            exec.execute(command);
        }
    }

    /**
     * å¾…ä»¥å‰?æ??äº¤çš„ä»»åŠ¡æ‰§è¡Œå®Œæ¯•å?Žå…³é—­çº¿ç¨‹æ± 
     * <p>å?¯åŠ¨ä¸€æ¬¡é¡ºåº?å…³é—­ï¼Œæ‰§è¡Œä»¥å‰?æ??äº¤çš„ä»»åŠ¡ï¼Œä½†ä¸?æŽ¥å?—æ–°ä»»åŠ¡ã€‚
     * å¦‚æžœå·²ç»?å…³é—­ï¼Œåˆ™è°ƒç”¨æ²¡æœ‰ä½œç”¨ã€‚</p>
     */
    public void shutDown() {
        exec.shutdown();
    }

    /**
     * è¯•å›¾å?œæ­¢æ‰€æœ‰æ­£åœ¨æ‰§è¡Œçš„æ´»åŠ¨ä»»åŠ¡
     * <p>è¯•å›¾å?œæ­¢æ‰€æœ‰æ­£åœ¨æ‰§è¡Œçš„æ´»åŠ¨ä»»åŠ¡ï¼Œæš‚å?œå¤„ç?†æ­£åœ¨ç­‰å¾…çš„ä»»åŠ¡ï¼Œå¹¶è¿”å›žç­‰å¾…æ‰§è¡Œçš„ä»»åŠ¡åˆ—è¡¨ã€‚</p>
     * <p>æ— æ³•ä¿?è¯?èƒ½å¤Ÿå?œæ­¢æ­£åœ¨å¤„ç?†çš„æ´»åŠ¨æ‰§è¡Œä»»åŠ¡ï¼Œä½†æ˜¯ä¼šå°½åŠ›å°?è¯•ã€‚</p>
     *
     * @return ç­‰å¾…æ‰§è¡Œçš„ä»»åŠ¡çš„åˆ—è¡¨
     */
    public List<Runnable> shutDownNow() {
        return exec.shutdownNow();
    }

    /**
     * åˆ¤æ–­çº¿ç¨‹æ± æ˜¯å?¦å·²å…³é—­
     *
     * @return {@code true}: æ˜¯<br>{@code false}: å?¦
     */
    public boolean isShutDown() {
        return exec.isShutdown();
    }

    /**
     * å…³é—­çº¿ç¨‹æ± å?Žåˆ¤æ–­æ‰€æœ‰ä»»åŠ¡æ˜¯å?¦éƒ½å·²å®Œæˆ?
     * <p>æ³¨æ„?ï¼Œé™¤é?žé¦–å…ˆè°ƒç”¨ shutdown æˆ– shutdownNowï¼Œå?¦åˆ™ isTerminated æ°¸ä¸?ä¸º trueã€‚</p>
     *
     * @return {@code true}: æ˜¯<br>{@code false}: å?¦
     */
    public boolean isTerminated() {
        return exec.isTerminated();
    }

    /**
     * è¯·æ±‚å…³é—­ã€?å?‘ç”Ÿè¶…æ—¶æˆ–è€…å½“å‰?çº¿ç¨‹ä¸­æ–­
     * <p>æ— è®ºå“ªä¸€ä¸ªé¦–å…ˆå?‘ç”Ÿä¹‹å?Žï¼Œéƒ½å°†å¯¼è‡´é˜»å¡žï¼Œç›´åˆ°æ‰€æœ‰ä»»åŠ¡å®Œæˆ?æ‰§è¡Œã€‚</p>
     *
     * @param timeout æœ€é•¿ç­‰å¾…æ—¶é—´
     * @param unit    æ—¶é—´å?•ä½?
     * @return {@code true}: è¯·æ±‚æˆ?åŠŸ<br>{@code false}: è¯·æ±‚è¶…æ—¶
     * @throws InterruptedException ç»ˆç«¯å¼‚å¸¸
     */
    public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException {
        return exec.awaitTermination(timeout, unit);
    }

    /**
     * æ??äº¤ä¸€ä¸ªCallableä»»åŠ¡ç”¨äºŽæ‰§è¡Œ
     * <p>å¦‚æžœæƒ³ç«‹å?³é˜»å¡žä»»åŠ¡çš„ç­‰å¾…ï¼Œåˆ™å?¯ä»¥ä½¿ç”¨{@code result = exec.submit(aCallable).get();}å½¢å¼?çš„æž„é€ ã€‚</p>
     *
     * @param task ä»»åŠ¡
     * @param <T>  æ³›åž‹
     * @return è¡¨ç¤ºä»»åŠ¡ç­‰å¾…å®Œæˆ?çš„Future, è¯¥Futureçš„{@code get}æ–¹æ³•åœ¨æˆ?åŠŸå®Œæˆ?æ—¶å°†ä¼šè¿”å›žè¯¥ä»»åŠ¡çš„ç»“æžœã€‚
     */
    public <T> Future<T> submit(Callable<T> task) {
        return exec.submit(task);
    }

    /**
     * æ??äº¤ä¸€ä¸ªRunnableä»»åŠ¡ç”¨äºŽæ‰§è¡Œ
     *
     * @param task   ä»»åŠ¡
     * @param result è¿”å›žçš„ç»“æžœ
     * @param <T>    æ³›åž‹
     * @return è¡¨ç¤ºä»»åŠ¡ç­‰å¾…å®Œæˆ?çš„Future, è¯¥Futureçš„{@code get}æ–¹æ³•åœ¨æˆ?åŠŸå®Œæˆ?æ—¶å°†ä¼šè¿”å›žè¯¥ä»»åŠ¡çš„ç»“æžœã€‚
     */
    public <T> Future<T> submit(Runnable task, T result) {
        return exec.submit(task, result);
    }

    /**
     * æ??äº¤ä¸€ä¸ªRunnableä»»åŠ¡ç”¨äºŽæ‰§è¡Œ
     *
     * @param task ä»»åŠ¡
     * @return è¡¨ç¤ºä»»åŠ¡ç­‰å¾…å®Œæˆ?çš„Future, è¯¥Futureçš„{@code get}æ–¹æ³•åœ¨æˆ?åŠŸå®Œæˆ?æ—¶å°†ä¼šè¿”å›žnullç»“æžœã€‚
     */
    public Future<?> submit(Runnable task) {
        return exec.submit(task);
    }

    /**
     * æ‰§è¡Œç»™å®šçš„ä»»åŠ¡
     * <p>å½“æ‰€æœ‰ä»»åŠ¡å®Œæˆ?æ—¶ï¼Œè¿”å›žä¿?æŒ?ä»»åŠ¡çŠ¶æ€?å’Œç»“æžœçš„Futureåˆ—è¡¨ã€‚
     * è¿”å›žåˆ—è¡¨çš„æ‰€æœ‰å…ƒç´ çš„{@link Future#isDone}ä¸º{@code true}ã€‚
     * æ³¨æ„?ï¼Œå?¯ä»¥æ­£å¸¸åœ°æˆ–é€šè¿‡æŠ›å‡ºå¼‚å¸¸æ?¥ç»ˆæ­¢å·²å®Œæˆ?ä»»åŠ¡ã€‚
     * å¦‚æžœæ­£åœ¨è¿›è¡Œæ­¤æ“?ä½œæ—¶ä¿®æ”¹äº†ç»™å®šçš„ collectionï¼Œåˆ™æ­¤æ–¹æ³•çš„ç»“æžœæ˜¯ä¸?ç¡®å®šçš„ã€‚</p>
     *
     * @param tasks ä»»åŠ¡é›†å?ˆ
     * @param <T>   æ³›åž‹
     * @return è¡¨ç¤ºä»»åŠ¡çš„ Future åˆ—è¡¨ï¼Œåˆ—è¡¨é¡ºåº?ä¸Žç»™å®šä»»åŠ¡åˆ—è¡¨çš„è¿­ä»£å™¨æ‰€ç”Ÿæˆ?çš„é¡ºåº?ç›¸å?Œï¼Œæ¯?ä¸ªä»»åŠ¡éƒ½å·²å®Œæˆ?ã€‚
     * @throws InterruptedException å¦‚æžœç­‰å¾…æ—¶å?‘ç”Ÿä¸­æ–­ï¼Œåœ¨è¿™ç§?æƒ…å†µä¸‹å?–æ¶ˆå°šæœªå®Œæˆ?çš„ä»»åŠ¡ã€‚
     */
    public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) throws InterruptedException {
        return exec.invokeAll(tasks);
    }

    /**
     * æ‰§è¡Œç»™å®šçš„ä»»åŠ¡
     * <p>å½“æ‰€æœ‰ä»»åŠ¡å®Œæˆ?æˆ–è¶…æ—¶æœŸæ»¡æ—¶(æ— è®ºå“ªä¸ªé¦–å…ˆå?‘ç”Ÿ)ï¼Œè¿”å›žä¿?æŒ?ä»»åŠ¡çŠ¶æ€?å’Œç»“æžœçš„Futureåˆ—è¡¨ã€‚
     * è¿”å›žåˆ—è¡¨çš„æ‰€æœ‰å…ƒç´ çš„{@link Future#isDone}ä¸º{@code true}ã€‚
     * ä¸€æ—¦è¿”å›žå?Žï¼Œå?³å?–æ¶ˆå°šæœªå®Œæˆ?çš„ä»»åŠ¡ã€‚
     * æ³¨æ„?ï¼Œå?¯ä»¥æ­£å¸¸åœ°æˆ–é€šè¿‡æŠ›å‡ºå¼‚å¸¸æ?¥ç»ˆæ­¢å·²å®Œæˆ?ä»»åŠ¡ã€‚
     * å¦‚æžœæ­¤æ“?ä½œæ­£åœ¨è¿›è¡Œæ—¶ä¿®æ”¹äº†ç»™å®šçš„ collectionï¼Œåˆ™æ­¤æ–¹æ³•çš„ç»“æžœæ˜¯ä¸?ç¡®å®šçš„ã€‚</p>
     *
     * @param tasks   ä»»åŠ¡é›†å?ˆ
     * @param timeout æœ€é•¿ç­‰å¾…æ—¶é—´
     * @param unit    æ—¶é—´å?•ä½?
     * @param <T>     æ³›åž‹
     * @return è¡¨ç¤ºä»»åŠ¡çš„ Future åˆ—è¡¨ï¼Œåˆ—è¡¨é¡ºåº?ä¸Žç»™å®šä»»åŠ¡åˆ—è¡¨çš„è¿­ä»£å™¨æ‰€ç”Ÿæˆ?çš„é¡ºåº?ç›¸å?Œã€‚å¦‚æžœæ“?ä½œæœªè¶…æ—¶ï¼Œåˆ™å·²å®Œæˆ?æ‰€æœ‰ä»»åŠ¡ã€‚å¦‚æžœç¡®å®žè¶…æ—¶äº†ï¼Œåˆ™æŸ?äº›ä»»åŠ¡å°šæœªå®Œæˆ?ã€‚
     * @throws InterruptedException å¦‚æžœç­‰å¾…æ—¶å?‘ç”Ÿä¸­æ–­ï¼Œåœ¨è¿™ç§?æƒ…å†µä¸‹å?–æ¶ˆå°šæœªå®Œæˆ?çš„ä»»åŠ¡
     */
    public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) throws
            InterruptedException {
        return exec.invokeAll(tasks, timeout, unit);
    }

    /**
     * æ‰§è¡Œç»™å®šçš„ä»»åŠ¡
     * <p>å¦‚æžœæŸ?ä¸ªä»»åŠ¡å·²æˆ?åŠŸå®Œæˆ?ï¼ˆä¹Ÿå°±æ˜¯æœªæŠ›å‡ºå¼‚å¸¸ï¼‰ï¼Œåˆ™è¿”å›žå…¶ç»“æžœã€‚
     * ä¸€æ—¦æ­£å¸¸æˆ–å¼‚å¸¸è¿”å›žå?Žï¼Œåˆ™å?–æ¶ˆå°šæœªå®Œæˆ?çš„ä»»åŠ¡ã€‚
     * å¦‚æžœæ­¤æ“?ä½œæ­£åœ¨è¿›è¡Œæ—¶ä¿®æ”¹äº†ç»™å®šçš„collectionï¼Œåˆ™æ­¤æ–¹æ³•çš„ç»“æžœæ˜¯ä¸?ç¡®å®šçš„ã€‚</p>
     *
     * @param tasks ä»»åŠ¡é›†å?ˆ
     * @param <T>   æ³›åž‹
     * @return æŸ?ä¸ªä»»åŠ¡è¿”å›žçš„ç»“æžœ
     * @throws InterruptedException å¦‚æžœç­‰å¾…æ—¶å?‘ç”Ÿä¸­æ–­
     * @throws ExecutionException   å¦‚æžœæ²¡æœ‰ä»»åŠ¡æˆ?åŠŸå®Œæˆ?
     */
    public <T> T invokeAny(Collection<? extends Callable<T>> tasks) throws InterruptedException, ExecutionException {
        return exec.invokeAny(tasks);
    }

    /**
     * æ‰§è¡Œç»™å®šçš„ä»»åŠ¡
     * <p>å¦‚æžœåœ¨ç»™å®šçš„è¶…æ—¶æœŸæ»¡å‰?æŸ?ä¸ªä»»åŠ¡å·²æˆ?åŠŸå®Œæˆ?ï¼ˆä¹Ÿå°±æ˜¯æœªæŠ›å‡ºå¼‚å¸¸ï¼‰ï¼Œåˆ™è¿”å›žå…¶ç»“æžœã€‚
     * ä¸€æ—¦æ­£å¸¸æˆ–å¼‚å¸¸è¿”å›žå?Žï¼Œåˆ™å?–æ¶ˆå°šæœªå®Œæˆ?çš„ä»»åŠ¡ã€‚
     * å¦‚æžœæ­¤æ“?ä½œæ­£åœ¨è¿›è¡Œæ—¶ä¿®æ”¹äº†ç»™å®šçš„collectionï¼Œåˆ™æ­¤æ–¹æ³•çš„ç»“æžœæ˜¯ä¸?ç¡®å®šçš„ã€‚</p>
     *
     * @param tasks   ä»»åŠ¡é›†å?ˆ
     * @param timeout æœ€é•¿ç­‰å¾…æ—¶é—´
     * @param unit    æ—¶é—´å?•ä½?
     * @param <T>     æ³›åž‹
     * @return æŸ?ä¸ªä»»åŠ¡è¿”å›žçš„ç»“æžœ
     * @throws InterruptedException å¦‚æžœç­‰å¾…æ—¶å?‘ç”Ÿä¸­æ–­
     * @throws ExecutionException   å¦‚æžœæ²¡æœ‰ä»»åŠ¡æˆ?åŠŸå®Œæˆ?
     * @throws TimeoutException     å¦‚æžœåœ¨æ‰€æœ‰ä»»åŠ¡æˆ?åŠŸå®Œæˆ?ä¹‹å‰?ç»™å®šçš„è¶…æ—¶æœŸæ»¡
     */
    public <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) throws
            InterruptedException, ExecutionException, TimeoutException {
        return exec.invokeAny(tasks, timeout, unit);
    }

    /**
     * å»¶è¿Ÿæ‰§è¡ŒRunnableå‘½ä»¤
     *
     * @param command å‘½ä»¤
     * @param delay   å»¶è¿Ÿæ—¶é—´
     * @param unit    å?•ä½?
     * @return è¡¨ç¤ºæŒ‚èµ·ä»»åŠ¡å®Œæˆ?çš„ScheduledFutureï¼Œå¹¶ä¸”å…¶{@code get()}æ–¹æ³•åœ¨å®Œæˆ?å?Žå°†è¿”å›ž{@code null}
     */
    public ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit) {
        return scheduleExec.schedule(command, delay, unit);
    }

    /**
     * å»¶è¿Ÿæ‰§è¡ŒCallableå‘½ä»¤
     *
     * @param callable å‘½ä»¤
     * @param delay    å»¶è¿Ÿæ—¶é—´
     * @param unit     æ—¶é—´å?•ä½?
     * @param <V>      æ³›åž‹
     * @return å?¯ç”¨äºŽæ??å?–ç»“æžœæˆ–å?–æ¶ˆçš„ScheduledFuture
     */
    public <V> ScheduledFuture<V> schedule(Callable<V> callable, long delay, TimeUnit unit) {
        return scheduleExec.schedule(callable, delay, unit);
    }

    /**
     * å»¶è¿Ÿå¹¶å¾ªçŽ¯æ‰§è¡Œå‘½ä»¤
     *
     * @param command      å‘½ä»¤
     * @param initialDelay é¦–æ¬¡æ‰§è¡Œçš„å»¶è¿Ÿæ—¶é—´
     * @param period       è¿žç»­æ‰§è¡Œä¹‹é—´çš„å‘¨æœŸ
     * @param unit         æ—¶é—´å?•ä½?
     * @return è¡¨ç¤ºæŒ‚èµ·ä»»åŠ¡å®Œæˆ?çš„ScheduledFutureï¼Œå¹¶ä¸”å…¶{@code get()}æ–¹æ³•åœ¨å?–æ¶ˆå?Žå°†æŠ›å‡ºå¼‚å¸¸
     */
    public ScheduledFuture<?> scheduleWithFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit) {
        return scheduleExec.scheduleAtFixedRate(command, initialDelay, period, unit);
    }

    /**
     * å»¶è¿Ÿå¹¶ä»¥å›ºå®šä¼‘æ?¯æ—¶é—´å¾ªçŽ¯æ‰§è¡Œå‘½ä»¤
     *
     * @param command      å‘½ä»¤
     * @param initialDelay é¦–æ¬¡æ‰§è¡Œçš„å»¶è¿Ÿæ—¶é—´
     * @param delay        æ¯?ä¸€æ¬¡æ‰§è¡Œç»ˆæ­¢å’Œä¸‹ä¸€æ¬¡æ‰§è¡Œå¼€å§‹ä¹‹é—´çš„å»¶è¿Ÿ
     * @param unit         æ—¶é—´å?•ä½?
     * @return è¡¨ç¤ºæŒ‚èµ·ä»»åŠ¡å®Œæˆ?çš„ScheduledFutureï¼Œå¹¶ä¸”å…¶{@code get()}æ–¹æ³•åœ¨å?–æ¶ˆå?Žå°†æŠ›å‡ºå¼‚å¸¸
     */
    public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit) {
        return scheduleExec.scheduleWithFixedDelay(command, initialDelay, delay, unit);
    }

    public enum Type {
        FixedThread,
        CachedThread,
        SingleThread,
    }
}
