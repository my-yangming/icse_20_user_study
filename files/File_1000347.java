package org.nutz.dao;

import java.lang.reflect.Array;
import java.util.Collection;

import org.nutz.dao.entity.Entity;
import org.nutz.dao.entity.MappingField;
import org.nutz.dao.impl.SimpleNesting;
import org.nutz.dao.jdbc.ValueAdaptor;
import org.nutz.dao.pager.Pager;
import org.nutz.dao.sql.Criteria;
import org.nutz.dao.sql.GroupBy;
import org.nutz.dao.sql.OrderBy;
import org.nutz.dao.sql.Pojo;
import org.nutz.dao.util.Daos;
import org.nutz.dao.util.cnd.SimpleCondition;
import org.nutz.dao.util.cri.Exps;
import org.nutz.dao.util.cri.NestExps;
import org.nutz.dao.util.cri.SimpleCriteria;
import org.nutz.dao.util.cri.SqlExpression;
import org.nutz.dao.util.cri.SqlExpressionGroup;
import org.nutz.lang.Lang;
import org.nutz.lang.Strings;
import org.nutz.lang.segment.CharSegment;
import org.nutz.lang.util.Callback2;

/**
 * æ˜¯ Condition çš„ä¸€ä¸ªå®žçŽ°ï¼Œè¿™ä¸ªç±»ç»™ä½ æ¯”è¾ƒæ–¹ä¾¿çš„æ–¹æ³•æ?¥æž„å»º Condition æŽ¥å?£çš„å®žä¾‹ã€‚
 *
 * <h4>åœ¨ Dao æŽ¥å?£ä¸­ä½¿ç”¨</h4><br>
 *
 * æ¯”å¦‚ä¸€ä¸ªé€šå¸¸çš„æŸ¥è¯¢:
 * <p>
 * List<Pet> pets = dao.query(Pet.class,
 * Cnd.where("name","LIKE","B%").asc("name"), null);
 *
 * <h4>é“¾å¼?èµ‹å€¼ç¤ºä¾‹</h4><br>
 * Cnd.where("id", ">", 34).and("name","LIKE","T%").asc("name"); <br>
 * ç›¸å½“äºŽ<br>
 * WHERE id>34 AND name LIKE 'T%' ORDER BY name ASC
 * <p>
 * Cnd.orderBy().desc("id"); <br>
 * ç›¸å½“äºŽ<br>
 * ORDER BY id DESC
 *
 * <p/> <b>å¸¦æ‹¬å?·çš„æ?¡ä»¶è¯­å?¥<b/> where (name="wendal" or age<18) and location != "åœ°ç?ƒ" <p/>
 * <code>Cnd.where(Cnd.exps("name", "=", "wendal").or("age", "<", 18)).and("location", "!=", "åœ°ç?ƒ")</code>
 *
 * <p/><b>é?™æ€?æ?¡ä»¶,ç›´æŽ¥æ‹¼å…¥sql,ä¸?å?šä»»ä½•è½¬ä¹‰. Oracleçš„æ—¥æœŸä¼ Dateå¯¹è±¡,è€Œé?žç”¨to_dateç­‰æ•°æ?®åº“æ–¹æ³•</b><p/>
 * <code>Cnd.where(new Static("ct < to_date('2015-06-26')")).and(...........) </code>
 * <p/>
 *
 * <p/><b>betweenç”¨æ³•</b><p/>
 * <code>Cnd.where("age", "between", new Object[]{19,29}).and(...........) </code>
 * <p/>
 *
 * <h4 style=color:red>ä½ è¿˜éœ€è¦?çŸ¥é?“çš„æ˜¯:</h4><br>
 * <ul>
 * <li>ä½ è®¾ç½®çš„å­—æ®µå??ï¼Œæ˜¯ java çš„å­—æ®µå?? -- å¦‚æžœ Entity é‡Œæœ‰ï¼Œé‚£ä¹ˆä¼šè¢«è½¬æ?¢æˆ?æ•°æ?®åº“å­—æ®µå??
 * <li>å¦‚æžœä½ è®¾ç½®çš„æ˜¯ entity ä¸­ä¸?å­˜åœ¨çš„ java å­—æ®µå??ï¼Œåˆ™è¢«è®¤ä¸ºæ˜¯æ•°æ?®åº“å­—æ®µå??ï¼Œå°†ç›´æŽ¥ä½¿ç”¨
 * <li>ä½ çš„å€¼ï¼Œå¦‚æžœæ˜¯å­—ç¬¦ä¸²ï¼Œæˆ–è€…å…¶ä»–ç±»å­—ç¬¦ä¸²å¯¹è±¡ï¼ˆæŸ?ç§? CharSequenceï¼‰ï¼Œé‚£ä¹ˆåœ¨è½¬æ?¢æˆ? SQL æ—¶ï¼Œä¼šæ­£ç¡®è¢«å?•å¼•å?·åŒ…è£¹
 * <li>ä½ çš„å€¼å¦‚æžœæ˜¯ä¸?å?¯ç?†è§£çš„è‡ªå®šä¹‰å¯¹è±¡ï¼Œä¼šè¢«è½¬åŒ–æˆ?å­—ç¬¦ä¸²å¤„ç?†
 * </ul>
 *
 * @author zozoh(zozohtnt@gmail.com)
 * @author è›‹è›‹ [TopCoderMyDream@gmail.com]
 * @see org.nutz.dao.Condition
 */
public class Cnd implements OrderBy, Criteria, GroupBy {

    private static final long serialVersionUID = 1L;

    /**
     * ç”¨å­—ç¬¦ä¸²å’Œå?‚æ•°æ ¼å¼?åŒ–å‡ºä¸€ä¸ªæ?¡ä»¶è¯­å?¥,æ³¨æ„?,ä¸?ä¼šæŠ¹é™¤ç‰¹æ®Šå­—ç¬¦
     * @param format sqlæ?¡ä»¶
     * @param args å?‚æ•°
     * @return æ?¡ä»¶å¯¹è±¡
     */
    public static Condition format(String format, Object... args) {
        return Strings.isBlank(format) ? null : new SimpleCondition(format,
                args);
    }

    /***
     * ç›´æŽ¥ç”¨å­—ç¬¦ä¸²ç”Ÿæˆ?ä¸€ä¸ªæ?¡ä»¶å¯¹è±¡
     * @param str sqlæ?¡ä»¶
     * @return æ?¡ä»¶å¯¹è±¡
     */
    public static Condition wrap(String str) {
        return Strings.isBlank(str) ? null : new SimpleCondition((Object) str);
    }

    /**
     * ä½¿ç”¨CharSegmentæ‹¼è£…ä¸€ä¸ªæ?¡ä»¶å¯¹è±¡
     * @param sql sqlæ¨¡æ?¿
     * @param value å?‚æ•°
     * @return æ?¡ä»¶å¯¹è±¡
     * @see org.nutz.lang.segment.CharSegment
     */
    public static Condition wrap(String sql, Object value) {
        return Strings.isBlank(sql) ? null
                : new SimpleCondition(new CharSegment(sql).setBy(value));
    }

    /**
     * ç”Ÿæˆ?ä¸€ä¸ªæ?¡ä»¶è¡¨è¾¾å¼?
     * @param name Javaå±žæ€§æˆ–å­—æ®µå??ç§°
     * @param op   æ“?ä½œç¬¦,å?¯ä»¥æ˜¯ = like ç­‰ç­‰
     * @param value å?‚æ•°å€¼.
     * @return æ?¡ä»¶è¡¨è¾¾å¼?
     */
    public static SqlExpression exp(String name, String op, Object value) {
        if(value!=null && value instanceof Nesting){
            return NestExps.create(name, op, (Nesting) value);
        }
        return Exps.create(name, op, value);
    }

    /**
     * ç”Ÿæˆ?ä¸€ä¸ªæ?¡ä»¶è¡¨è¾¾å¼?ç»„
     * @param name Javaå±žæ€§æˆ–å­—æ®µå??ç§°
     * @param op   æ“?ä½œç¬¦,å?¯ä»¥æ˜¯ = like ç­‰ç­‰
     * @param value å?‚æ•°å€¼.
     * @return æ?¡ä»¶è¡¨è¾¾å¼?ç»„
     */
    public static SqlExpressionGroup exps(String name, String op, Object value) {
        return exps(exp(name, op, value));
    }

    /**
     * å°†ä¸€ä¸ªæ?¡ä»¶è¡¨è¾¾å¼?å°?è£…ä¸ºæ?¡ä»¶è¡¨è¾¾å¼?ç»„
     * @param exp åŽŸæœ¬çš„æ?¡ä»¶è¡¨è¾¾å¼?
     * @return æ?¡ä»¶è¡¨è¾¾å¼?ç»„
     */
    public static SqlExpressionGroup exps(SqlExpression exp) {
        return new SqlExpressionGroup().and(exp);
    }

    /**
     * ç”Ÿæˆ?ä¸€ä¸ªæ–°çš„Cndå®žä¾‹
     * @param name javaå±žæ€§æˆ–å­—æ®µå??ç§°, æŽ¨è??ç”¨Javaå±žæ€§
     * @param op æ“?ä½œç¬¦,å?¯ä»¥æ˜¯= likeç­‰ç­‰
     * @param value å?‚æ•°å€¼. å¦‚æžœæ“?ä½œç¬¦æ˜¯between,å?‚æ•°å€¼éœ€è¦?æ˜¯new Object[]{12,39}å½¢å¼?
     * @return Cndå®žä¾‹
     */
    public static Cnd where(String name, String op, Object value) {
        return new Cnd(Cnd.exp(name, op, value));
    }

    /**
     * ç”¨ä¸€ä¸ªæ?¡ä»¶è¡¨è¾¾å¼?æž„å»ºä¸€ä¸ªCndå®žä¾‹
     * @param e æ?¡ä»¶è¡¨è¾¾å¼?
     * @return Cndå®žä¾‹
     */
    public static Cnd where(SqlExpression e) {
        return new Cnd(e);
    }

    /**
     * ç”Ÿæˆ?ä¸€ä¸ªç®€å?•æ?¡ä»¶å¯¹è±¡
     */
    public static SimpleCriteria cri() {
        return new SimpleCriteria();
    }

    /**
     * å?•çº¯ç”Ÿæˆ?ä¸€ä¸ªOrderbyæ?¡ä»¶
     * @return OrderByå®žä¾‹
     */
    public static OrderBy orderBy() {
        return new Cnd();
    }

    /**
     * @return ä¸€ä¸ª Cnd çš„å®žä¾‹
     * @deprecated Since 1.b.50 ä¸?æŽ¨è??ä½¿ç”¨è¿™ä¸ªå‡½æ•°æž„å»º Cnd çš„å®žä¾‹ï¼Œå› ä¸ºçœ‹èµ·æ?¥è¯­æ„?ä¸?æ˜Žçš„æ ·å­?
     */
    public static Cnd limit() {
        return new Cnd();
    }

    /**
     * @return ä¸€ä¸ª Cnd çš„å®žä¾‹
     */
    public static Cnd NEW() {
        return new Cnd();
    }

    /**
     * ç”¨SimpleCriteriaç”Ÿæˆ?ä¸€ä¸ªCndå®žä¾‹
     * @param cri SimpleCriteriaå®žä¾‹
     * @return Cndå®žä¾‹
     */
    public static Cnd byCri(SimpleCriteria cri) {
        return new Cnd().setCri(cri);
    }

    /*------------------------------------------------------------------*/

    protected SimpleCriteria cri;

    protected Cnd() {
        cri = new SimpleCriteria();
    }

    private Cnd setCri(SimpleCriteria cri) {
        this.cri = cri;
        return this;
    }

    /**
     * èŽ·å?–å†…éƒ¨çš„whereå±žæ€§
     * @return SimpleCriteriaå®žä¾‹
     */
    public SimpleCriteria getCri() {
        return cri;
    }

    protected Cnd(SqlExpression exp) {
        this();
        cri.where().and(exp);
    }

    /**
     * æŒ‰Javaå±žæ€§/å­—æ®µå±žæ€§è¿›è¡Œå?‡åº?. <b>ä¸?è¿›è¡ŒSQLç‰¹æ®Šå­—ç¬¦æŠ¹é™¤<b/>  cnd.asc("age")
     * @param name Javaå±žæ€§/å­—æ®µå±žæ€§
     */
    public OrderBy asc(String name) {
        cri.asc(name);
        return this;
    }

    /**
     * æŒ‰Javaå±žæ€§/å­—æ®µå±žæ€§è¿›è¡Œé™?åº?. <b>ä¸?è¿›è¡ŒSQLç‰¹æ®Šå­—ç¬¦æŠ¹é™¤<b/> cnd.desc("age")
     * @param name Javaå±žæ€§/å­—æ®µå±žæ€§
     */
    public OrderBy desc(String name) {
        cri.desc(name);
        return this;
    }

    /**
     * å½“dirä¸ºascæ—¶åˆ¤æ–­ä¸ºå?‡åº?,å?¦åˆ™åˆ¤å®šä¸ºé™?åº?. cnd.orderBy("age", "asc")
     * @param name Javaå±žæ€§/å­—æ®µå±žæ€§
     * @param dir ascæˆ–å…¶ä»–
     * @return OrderByå®žä¾‹,äº‹å®žä¸Šå°±æ˜¯å½“å‰?å¯¹è±¡
     */
    public OrderBy orderBy(String name, String dir) {
        if ("asc".equalsIgnoreCase(dir)) {
            this.asc(name);
        } else {
            this.desc(name);
        }
        return this;
    }

    /**
     * Cnd.where(...).and(Cnd.exp(.........)) æˆ– Cnd.where(...).and(Cnd.exps(.........))
     * @param exp æ?¡ä»¶è¡¨è¾¾å¼?
     * @return å½“å‰?å¯¹è±¡,ç”¨äºŽé“¾å¼?è°ƒç”¨
     */
    public Cnd and(SqlExpression exp) {
        cri.where().and(exp);
        return this;
    }

    /**
     * Cnd.where(...).and("age", "<", 40)
     * @param name Javaå±žæ€§æˆ–å­—æ®µå??ç§°,æŽ¨è??ç”¨Javaå±žæ€§,å¦‚æžœæœ‰çš„è¯?
     * @param op æ“?ä½œç¬¦,å?¯ä»¥æ˜¯ = likeç­‰
     * @param value å?‚æ•°å€¼, å¦‚æžœæ˜¯betweençš„è¯?éœ€è¦?ä¼ å…¥new Object[]{19,28}
     * @return å½“å‰?å¯¹è±¡,ç”¨äºŽé“¾å¼?è°ƒç”¨
     */
    public Cnd and(String name, String op, Object value) {
        return and(Cnd.exp(name, op, value));
    }

    /**
     * Cnd.where(...).or(Cnd.exp(.........)) æˆ– Cnd.where(...).or(Cnd.exps(.........))
     * @param exp æ?¡ä»¶è¡¨è¾¾å¼?
     * @return å½“å‰?å¯¹è±¡,ç”¨äºŽé“¾å¼?è°ƒç”¨
     */
    public Cnd or(SqlExpression exp) {
        cri.where().or(exp);
        return this;
    }

    /**
     * Cnd.where(...).or("age", "<", 40)
     * @param name Javaå±žæ€§æˆ–å­—æ®µå??ç§°,æŽ¨è??ç”¨Javaå±žæ€§,å¦‚æžœæœ‰çš„è¯?
     * @param op æ“?ä½œç¬¦,å?¯ä»¥æ˜¯ = likeç­‰
     * @param value å?‚æ•°å€¼, å¦‚æžœæ˜¯betweençš„è¯?éœ€è¦?ä¼ å…¥new Object[]{19,28}
     * @return å½“å‰?å¯¹è±¡,ç”¨äºŽé“¾å¼?è°ƒç”¨
     */
    public Cnd or(String name, String op, Object value) {
        return or(Cnd.exp(name, op, value));
    }

    /**
     * andä¸€ä¸ªæ?¡ä»¶è¡¨è¾¾å¼?å¹¶ä¸”å?–é?ž
     * @param exp æ?¡ä»¶è¡¨è¾¾å¼?
     * @return å½“å‰?å¯¹è±¡,ç”¨äºŽé“¾å¼?è°ƒç”¨
     */
    public Cnd andNot(SqlExpression exp) {
        cri.where().and(exp.setNot(true));
        return this;
    }

    /**
     * andä¸€ä¸ªæ?¡ä»¶,å¹¶ä¸”å?–é?ž
     * @param name Javaå±žæ€§æˆ–å­—æ®µå??ç§°,æŽ¨è??ç”¨Javaå±žæ€§,å¦‚æžœæœ‰çš„è¯?
     * @param op æ“?ä½œç¬¦,å?¯ä»¥æ˜¯ = likeç­‰
     * @param value å?‚æ•°å€¼, å¦‚æžœæ˜¯betweençš„è¯?éœ€è¦?ä¼ å…¥new Object[]{19,28}
     * @return å½“å‰?å¯¹è±¡,ç”¨äºŽé“¾å¼?è°ƒç”¨
     */
    public Cnd andNot(String name, String op, Object value) {
        return andNot(Cnd.exp(name, op, value));
    }

    /**
     * @see Cnd#andNot(SqlExpression)
     */
    public Cnd orNot(SqlExpression exp) {
        cri.where().or(exp.setNot(true));
        return this;
    }

    /**
     * @see Cnd#andNot(String, String, Object)
     */
    public Cnd orNot(String name, String op, Object value) {
        return orNot(Cnd.exp(name, op, value));
    }

    /**
     * èŽ·å?–åˆ†é¡µå¯¹è±¡,é»˜è®¤æ˜¯null
     */
    public Pager getPager() {
        return cri.getPager();
    }

    /**
     * æ ¹æ?®å®žä½“Entityå°†æœ¬å¯¹è±¡è½¬åŒ–ä¸ºsqlè¯­å?¥, æ?¡ä»¶è¡¨è¾¾å¼?ä¸­çš„nameå±žæ€§å°†è½¬åŒ–ä¸ºæ•°æ?®åº“å­—æ®µå??ç§°
     */
    public String toSql(Entity<?> en) {
        return cri.toSql(en);
    }

    /**
     * åˆ¤æ–­ä¸¤ä¸ªCndæ˜¯å?¦ç›¸ç­‰
     */
    public boolean equals(Object obj) {
        return cri.equals(obj);
    }

    /**
     * ç›´æŽ¥è½¬ä¸ºSQLè¯­å?¥, å¦‚æžœsetPojoæœªæ›¾è°ƒç”¨, æ?¡ä»¶è¡¨è¾¾å¼?ä¸­çš„nameå±žæ€§æœªæ˜ å°„ä¸ºæ•°æ?®åº“å­—æ®µ
     */
    public String toString() {
        return cri.toString();
    }

    /**
     * å…³è?”çš„Pojo,å?¯ä»¥ç”¨äºŽtoStringæ—¶çš„nameå±žæ€§æ˜ å°„
     */
    public void setPojo(Pojo pojo) {
        cri.setPojo(pojo);
    }

    /**
     * èŽ·å?–å·²è®¾ç½®çš„Pojo, é»˜è®¤ä¸ºnull
     */
    public Pojo getPojo() {
        return cri.getPojo();
    }

    public void joinSql(Entity<?> en, StringBuilder sb) {
        cri.joinSql(en, sb);
    }

    public int joinAdaptor(Entity<?> en, ValueAdaptor[] adaptors, int off) {
        return cri.joinAdaptor(en, adaptors, off);
    }

    public int joinParams(Entity<?> en, Object obj, Object[] params, int off) {
        return cri.joinParams(en, obj, params, off);
    }

    public int paramCount(Entity<?> en) {
        return cri.paramCount(en);
    }

    /**
     * èŽ·å?–Cndä¸­çš„whereéƒ¨åˆ†,æ³¨æ„?,å¯¹SqlExpressionGroupçš„ä¿®æ”¹ä¹Ÿä¼šå??æ˜ åˆ°Cndä¸­,å› ä¸ºæ˜¯å?Œä¸€ä¸ªå¯¹è±¡
     */
    public SqlExpressionGroup where() {
        return cri.where();
    }

    /**
     * åˆ†ç»„
     * @param names javaå±žæ€§æˆ–æ•°æ?®åº“å­—æ®µå??ç§°
     */
    public GroupBy groupBy(String... names) {
        cri.groupBy(names);
        return this;
    }

    /**
     * åˆ†ç»„ä¸­çš„havingæ?¡ä»¶
     * @param cnd æ?¡ä»¶è¯­å?¥
     */
    public GroupBy having(Condition cnd) {
        cri.having(cnd);
        return this;
    }

    /**
     * å?•ç‹¬èŽ·å?–æŽ’åº?æ?¡ä»¶,å»ºè®®ä½¿ç”¨ascæˆ–desc,è€Œé?žç›´æŽ¥å?–å‡ºæŽ’åº?æ?¡ä»¶. å?–å‡ºçš„å¯¹è±¡ä»…åŒ…å?«åˆ†ç»„æ?¡ä»¶, ä¸?åŒ…å?«whereç­‰éƒ¨åˆ†
     */
    public OrderBy getOrderBy() {
        return cri.getOrderBy();
    }

    /**
     * åˆ†é¡µ
     * @param pageNumber é¡µæ•°, è‹¥å°?äºŽ1åˆ™ä»£è¡¨å…¨éƒ¨è®°å½•
     * @param pageSize æ¯?é¡µæ•°é‡?
     * @return å½“å‰?å¯¹è±¡,ç”¨äºŽé“¾å¼?è°ƒç”¨
     */
    public Cnd limit(int pageNumber, int pageSize) {
        cri.setPager(pageNumber, pageSize);
        return this;
    }

    /**
     * è®¾ç½®æ¯?é¡µå¤§å°?,å¹¶è®¾ç½®é¡µæ•°ä¸º1
     * @param pageSize æ¯?é¡µå¤§å°?
     * @return å½“å‰?å¯¹è±¡,ç”¨äºŽé“¾å¼?è°ƒç”¨
     */
    @Deprecated
    public Cnd limit(int pageSize) {
        cri.setPager(1, pageSize);
        return this;
    }

    /**
     * ç›´æŽ¥è®¾ç½®åˆ†é¡µå¯¹è±¡, å?¯ä»¥new Pageræˆ–dao.createPagerå¾—åˆ°
     * @param pager åˆ†é¡µå¯¹è±¡
     * @return å½“å‰?å¯¹è±¡,ç”¨äºŽé“¾å¼?è°ƒç”¨
     */
    public Cnd limit(Pager pager) {
        cri.setPager(pager);
        return this;
    }

    protected static FieldMatcher dftFromFieldMatcher = new FieldMatcher().setIgnoreNull(true).setIgnoreZero(true);

    /**
     * ç”¨é»˜è®¤è§„åˆ™(å¿½ç•¥é›¶å€¼å’Œç©ºå€¼)ç”Ÿæˆ?Cndå®žä¾‹
     * @param dao Daoå®žä¾‹,ä¸?èƒ½ä¸ºnull
     * @param obj å¯¹è±¡, è‹¥ä¸ºnull,åˆ™è¿”å›žå€¼ä¸ºnull, ä¸?å?¯ä»¥æ˜¯Class/å­—ç¬¦ä¸²/æ•°å€¼/å¸ƒå°”ç±»åž‹
     * @return Cndå®žä¾‹
     */
    public static Cnd from(Dao dao, Object obj) {
        return from(dao, obj, dftFromFieldMatcher);
    }

    /**
     * æ ¹æ?®ä¸€ä¸ªå¯¹è±¡ç”Ÿæˆ?Cndæ?¡ä»¶, FieldMatcherè¯¦ç»†æŽ§åˆ¶.<p/>
     * <code>assertEquals(" WHERE name='wendal' AND age=0", Cnd.from(dao, pet, FieldMatcher.make("age|name", null, true).setIgnoreDate(true)).toString());</code>
     * @param dao Daoå®žä¾‹
     * @param obj åŸºå¯¹è±¡,ä¸?å?¯ä»¥æ˜¯Class,å­—ç¬¦ä¸²,æ•°å€¼å’ŒBoolean
     * @param matcher è¿‡æ»¤å­—æ®µå±žæ€§, å?¯é…?ç½®å“ªäº›å­—æ®µå?¯ç”¨/ä¸?å?¯ç”¨/æ˜¯å?¦å¿½ç•¥ç©ºå€¼/æ˜¯å?¦å¿½ç•¥0å€¼/æ˜¯å?¦å¿½ç•¥java.util.Dateç±»å?Šå…¶å­?ç±»çš„å¯¹è±¡/æ˜¯å?¦å¿½ç•¥@Idæ‰€æ ‡æ³¨çš„ä¸»é”®å±žæ€§/æ˜¯å?¦å¿½ç•¥ \@Name æ‰€æ ‡æ³¨çš„ä¸»é”®å±žæ€§/æ˜¯å?¦å¿½ç•¥ \@Pk æ‰€å¼•ç”¨çš„å¤?å?ˆä¸»é”®
     * @return Cndæ?¡ä»¶
     */
    public static Cnd from(Dao dao, Object obj, FieldMatcher matcher) {
        final SqlExpressionGroup exps = new SqlExpressionGroup();
        boolean re = Daos.filterFields(obj, matcher, dao, new Callback2<MappingField, Object>() {
            public void invoke(MappingField mf, Object val) {
                exps.and(mf.getName(), "=", val);
            }
        });
        if (re)
            return Cnd.where(exps);
        return null;
    }

    /**
     * è‹¥valueä¸ºnull/ç©ºç™½å­—ç¬¦ä¸²/ç©ºé›†å?ˆ/ç©ºæ•°ç»„,åˆ™æœ¬æ?¡ä»¶ä¸?æ·»åŠ .
     * @see Cnd#and(String, String, Object)
     */
    public Cnd andEX(String name, String op, Object value) {
        return and(Cnd.expEX(name, op, value));
    }

    /**
     * è‹¥valueä¸ºnull/ç©ºç™½å­—ç¬¦ä¸²/ç©ºé›†å?ˆ/ç©ºæ•°ç»„,åˆ™æœ¬æ?¡ä»¶ä¸?æ·»åŠ .
     * @see Cnd#or(String, String, Object)
     */
    public Cnd orEX(String name, String op, Object value) {
        return or(Cnd.expEX(name, op, value));
    }

    public static SqlExpression expEX(String name, String op, Object value) {
        if (_ex(value))
            return null;
        return Cnd.exp(name, op, value);
    }

    @SuppressWarnings("rawtypes")
    public static boolean _ex(Object value) {
        return value == null
                || (value instanceof CharSequence && Strings.isBlank((CharSequence)value))
                || (value instanceof Collection && ((Collection)value).isEmpty())
                || (value.getClass().isArray() && Array.getLength(value) == 0);
    }

    public GroupBy getGroupBy() {
        return cri.getGroupBy();
    }

    /**
     * æž„é€ ä¸€ä¸ªå?¯åµŒå¥—æ?¡ä»¶ï¼Œéœ€è¦?daoæ”¯æŒ?æ‰?èƒ½æ˜ å°„ç±»ä¸Žè¡¨å’Œå±žæ€§ä¸Žåˆ—
     */
    public static Nesting nst(Dao dao){
        return new SimpleNesting(dao);
    }

    /**
     * å…‹éš†å½“å‰?Cndå®žä¾‹
     * @return ä¸€æ¨¡ä¸€æ ·çš„å…„å¼Ÿ
     */
    public Cnd clone() {
        return Lang.fromBytes(Lang.toBytes(this),Cnd.class);
    }
    
    /**
     * ä»…æ‹·è´?whereæ?¡ä»¶, ä¸?æ‹·è´?æŽ’åº?/åˆ†ç»„/åˆ†é¡µ
     */
    public Cnd cloneWhere() {
        return Cnd.where(this.cri.where().clone());
    }
}
