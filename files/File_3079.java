/*
 * <summary></summary>
 * <author>He Han</author>
 * <email>hankcs.cn@gmail.com</email>
 * <create-date>2014/11/12 14:45</create-date>
 *
 * <copyright file="TranslatedPersonDictionary.java" company="ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸">
 * Copyright (c) 2003-2014, ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸. All Right Reserved, http://www.linrunsoft.com/
 * This source is subject to the LinrunSpace License. Please contact ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸ to get more information.
 * </copyright>
 */
package com.hankcs.hanlp.dictionary.nr;

import com.hankcs.hanlp.HanLP;
import com.hankcs.hanlp.collection.trie.DoubleArrayTrie;
import com.hankcs.hanlp.corpus.io.IOUtil;
import com.hankcs.hanlp.utility.Predefine;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Map;
import java.util.TreeMap;

import static com.hankcs.hanlp.utility.Predefine.logger;

/**
 * ç¿»è¯‘äººå??è¯?å…¸ï¼Œå‚¨å­˜å’Œè¯†åˆ«ç¿»è¯‘äººå??
 * @author hankcs
 */
public class TranslatedPersonDictionary
{
    static String path = HanLP.Config.TranslatedPersonDictionaryPath;
    static DoubleArrayTrie<Boolean> trie;

    static
    {
        long start = System.currentTimeMillis();
        if (!load())
        {
            throw new IllegalArgumentException("éŸ³è¯‘äººå??è¯?å…¸" + path + "åŠ è½½å¤±è´¥");
        }

        logger.info("éŸ³è¯‘äººå??è¯?å…¸" + path + "åŠ è½½æˆ?åŠŸï¼Œè€—æ—¶" + (System.currentTimeMillis() - start) + "ms");
    }

    static boolean load()
    {
        trie = new DoubleArrayTrie<Boolean>();
        if (loadDat()) return true;
        try
        {
            BufferedReader br = new BufferedReader(new InputStreamReader(IOUtil.newInputStream(path), "UTF-8"));
            String line;
            TreeMap<String, Boolean> map = new TreeMap<String, Boolean>();
            TreeMap<Character, Integer> charFrequencyMap = new TreeMap<Character, Integer>();
            while ((line = br.readLine()) != null)
            {
                map.put(line, true);
                // éŸ³è¯‘äººå??å¸¸ç”¨å­—è¯?å…¸è‡ªåŠ¨ç”Ÿæˆ?
                for (char c : line.toCharArray())
                {
                    // æŽ’é™¤ä¸€äº›è¿‡äºŽå¸¸ç”¨çš„å­—
                    if ("ä¸?èµž".indexOf(c) >= 0) continue;
                    Integer f = charFrequencyMap.get(c);
                    if (f == null) f = 0;
                    charFrequencyMap.put(c, f + 1);
                }
            }
            br.close();
            map.put(String.valueOf('Â·'), true);
//            map.put(String.valueOf('-'), true);
//            map.put(String.valueOf('â€”'), true);
            // å°†å¸¸ç”¨å­—ä¹ŸåŠ è¿›åŽ»
            for (Map.Entry<Character, Integer> entry : charFrequencyMap.entrySet())
            {
                if (entry.getValue() < 10) continue;
                map.put(String.valueOf(entry.getKey()), true);
            }
            logger.info("éŸ³è¯‘äººå??è¯?å…¸" + path + "å¼€å§‹æž„å»ºå?Œæ•°ç»„â€¦â€¦");
            trie.build(map);
            logger.info("éŸ³è¯‘äººå??è¯?å…¸" + path + "å¼€å§‹ç¼–è¯‘DATæ–‡ä»¶â€¦â€¦");
            logger.info("éŸ³è¯‘äººå??è¯?å…¸" + path + "ç¼–è¯‘ç»“æžœï¼š" + saveDat());
        }
        catch (Exception e)
        {
            logger.severe("è‡ªå®šä¹‰è¯?å…¸" + path + "è¯»å?–é”™è¯¯ï¼?" + e);
            return false;
        }

        return true;
    }

    /**
     * ä¿?å­˜datåˆ°ç£?ç›˜
     * @return
     */
    static boolean saveDat()
    {
        return trie.save(path + Predefine.TRIE_EXT);
    }

    static boolean loadDat()
    {
        return trie.load(path + Predefine.TRIE_EXT);
    }

    /**
     * æ˜¯å?¦åŒ…å?«key
     * @param key
     * @return
     */
    public static boolean containsKey(String key)
    {
        return trie.containsKey(key);
    }

    /**
     * æ—¶æŠ¥åŒ…å?«keyï¼Œä¸”keyè‡³å°‘é•¿length
     * @param key
     * @param length
     * @return
     */
    public static boolean containsKey(String key, int length)
    {
        if (!trie.containsKey(key)) return false;
        return key.length() >= length;
    }
}
