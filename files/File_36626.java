package command.later.good;

import command.later.good.command.Command;
import command.later.good.command.NoCommand;
import java.util.Stack;

//æŽ§åˆ¶ç±»
public class Control {
    private Command[] onCommands; //ä¸€åˆ—çš„ å¼€å?¯æŒ‰é’®
    private Command[] offCommands; //ä¸€åˆ— å…³é—­æŒ‰é’®
    private final int slotNum = 10;

    //ä¸ºäº†å®žçŽ°undoæ“?ä½œ
    private Stack<Command> stack = new Stack<>();

    public Control() {
        //åˆ?å§‹åŒ–
        offCommands = new Command[slotNum]; //10æŽ’
        onCommands = new Command[slotNum];

        //ä¸‹é?¢å°±æ˜¯NoCommandçš„ä½œç”¨, å¹¶ä¸?æ˜¯æ¯?ä¸€ä¸ªæŒ‰é’®éƒ½å¯¹åº”ç?€å®¶ç”µï¼Œæœ‰å?¯èƒ½æ˜¯ç©ºçš„,è¿™æ ·ä¸‹é?¢å°±ä¸?è¦?åˆ¤æ–­æ˜¯ä¸?æ˜¯ç©ºäº†
        Command noCommand = new NoCommand();
        for (int i = 0; i < onCommands.length; i++) {
            onCommands[i] = noCommand;
            offCommands[i] = noCommand;
        }
    }

    //é?¥æŽ§å™¨å¹¶ä¸?çŸ¥é?“ç»‘å®šçš„æ˜¯ä»€ä¹ˆå®¶å…·   è§£è€¦å?ˆ
    //æŠŠå‘½ä»¤å¯¹è±¡è®¾ç½®åˆ°é?¥æŽ§å™¨ä¸Š : å¾ˆé‡?è¦? , æŠŠå‘½ä»¤å°?è£…æˆ?ç±» ä½œä¸ºå?‚æ•°å‘½ä»¤ä¼ è¿›æ?¥ï¼Œç»‘å®šåˆ°æŸ?ä¸ªæ?’æ§½
    public void setOnCommand(int slot, Command onCommand) {
        onCommands[slot] = onCommand;
    }
    public void setOffCommand(int slot,Command offCommand) {
        offCommands[slot] = offCommand;
    }

    // ä¸‹é?¢æ˜¯ä¸‰ä¸ªæŽ§åˆ¶å™¨æ‰§è¡Œçš„æ–¹æ³•
    public void on(int slot){
        onCommands[slot].execute();
        stack.push(onCommands[slot]);//è®°å½•
    }
    public void off(int slot){
        offCommands[slot].execute();
        stack.push(offCommands[slot]);
    }
    public void undo(){
        stack.pop().undo(); //å…·ä½“çš„å›žé€€   è¦?å›žé€€çš„è¯?ï¼Œé¦–å…ˆè¦?è®°ä½?æŒ‰äº†å“ªäº›æŒ‰é’®ï¼Œ å?¯ä»¥ä½¿ç”¨æ ˆçš„ç»“æž„
    }
}
