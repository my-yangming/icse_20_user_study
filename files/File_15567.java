/*Copyright Â©2016 TommyLemon(https://github.com/TommyLemon/APIJSON)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.*/

package zuo.biao.apijson.server;

import static zuo.biao.apijson.RequestMethod.DELETE;
import static zuo.biao.apijson.RequestMethod.GET;
import static zuo.biao.apijson.RequestMethod.GETS;
import static zuo.biao.apijson.RequestMethod.HEAD;
import static zuo.biao.apijson.RequestMethod.HEADS;
import static zuo.biao.apijson.RequestMethod.POST;
import static zuo.biao.apijson.RequestMethod.PUT;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.activation.UnsupportedDataTypeException;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;

import zuo.biao.apijson.JSON;
import zuo.biao.apijson.JSONResponse;
import zuo.biao.apijson.Log;
import zuo.biao.apijson.MethodAccess;
import zuo.biao.apijson.NotNull;
import zuo.biao.apijson.RequestMethod;
import zuo.biao.apijson.RequestRole;
import zuo.biao.apijson.StringUtil;
import zuo.biao.apijson.server.exception.ConflictException;
import zuo.biao.apijson.server.exception.NotLoggedInException;
import zuo.biao.apijson.server.model.Access;
import zuo.biao.apijson.server.model.Column;
import zuo.biao.apijson.server.model.Document;
import zuo.biao.apijson.server.model.Function;
import zuo.biao.apijson.server.model.PgAttribute;
import zuo.biao.apijson.server.model.PgClass;
import zuo.biao.apijson.server.model.Request;
import zuo.biao.apijson.server.model.Response;
import zuo.biao.apijson.server.model.Table;
import zuo.biao.apijson.server.model.Test;
import zuo.biao.apijson.server.model.TestRecord;

/**æ?ƒé™?éªŒè¯?
 * @author Lemon
 * @param <T> id ä¸Ž userId çš„ç±»åž‹ï¼Œä¸€èˆ¬ä¸º Long
 */
public abstract class AbstractVerifier<T> implements Verifier<T> {
	private static final String TAG = "AbstractVerifier";


	// <TableName, <METHOD, allowRoles>>
	// <User, <GET, [OWNER, ADMIN]>>
	public static final Map<String, Map<RequestMethod, RequestRole[]>> ACCESS_MAP;
	static {
		ACCESS_MAP = new HashMap<String, Map<RequestMethod, RequestRole[]>>();

		if (Log.DEBUG) {
			ACCESS_MAP.put(Table.class.getSimpleName(), getAccessMap(Table.class.getAnnotation(MethodAccess.class)));
			ACCESS_MAP.put(Column.class.getSimpleName(), getAccessMap(Column.class.getAnnotation(MethodAccess.class)));
			ACCESS_MAP.put(PgAttribute.class.getSimpleName(), getAccessMap(PgAttribute.class.getAnnotation(MethodAccess.class)));
			ACCESS_MAP.put(PgClass.class.getSimpleName(), getAccessMap(PgClass.class.getAnnotation(MethodAccess.class)));
			
			ACCESS_MAP.put(Test.class.getSimpleName(), getAccessMap(Test.class.getAnnotation(MethodAccess.class)));
			ACCESS_MAP.put(Request.class.getSimpleName(), getAccessMap(Request.class.getAnnotation(MethodAccess.class)));
			ACCESS_MAP.put(Response.class.getSimpleName(), getAccessMap(Response.class.getAnnotation(MethodAccess.class)));
			ACCESS_MAP.put(Document.class.getSimpleName(), getAccessMap(Document.class.getAnnotation(MethodAccess.class)));
			ACCESS_MAP.put(TestRecord.class.getSimpleName(), getAccessMap(TestRecord.class.getAnnotation(MethodAccess.class)));
			ACCESS_MAP.put(Function.class.getSimpleName(), getAccessMap(Function.class.getAnnotation(MethodAccess.class)));
			ACCESS_MAP.put(Access.class.getSimpleName(), getAccessMap(Access.class.getAnnotation(MethodAccess.class)));
		}
	}

	/**èŽ·å?–æ?ƒé™?Mapï¼Œæ¯?ç§?æ“?ä½œéƒ½å?ªå…?è®¸å¯¹åº”çš„è§’è‰²
	 * @param access
	 * @return
	 */
	public static HashMap<RequestMethod, RequestRole[]> getAccessMap(MethodAccess access) {
		if (access == null) {
			return null;
		}

		HashMap<RequestMethod, RequestRole[]> map = new HashMap<>();
		map.put(GET, access.GET());
		map.put(HEAD, access.HEAD());
		map.put(GETS, access.GETS());
		map.put(HEADS, access.HEADS());
		map.put(POST, access.POST());
		map.put(PUT, access.PUT());
		map.put(DELETE, access.DELETE());

		return map;
	}


	@Override
	public String getVisitorIdKey(SQLConfig config) {
		return config.getUserIdKey();
	}



	@NotNull
	protected Visitor<T> visitor;
	protected Object visitorId;
	@NotNull
	@Override
	public Visitor<T> getVisitor() {
		return visitor;
	}
	@Override
	public AbstractVerifier<T> setVisitor(Visitor<T> visitor) {
		this.visitor = visitor;
		this.visitorId = visitor == null ? null : visitor.getId();

		//å¯¼è‡´å†…éƒ¨è°ƒç”¨ä¸”æ”¾è¡Œæ ¡éªŒ(noVerifyLogin, noVerifyRole)ä¹ŸæŠ›å¼‚å¸¸
		//		if (visitorId == null) {
		//			throw new NullPointerException(TAG + ".setVisitor visitorId == null !!! å?¯èƒ½å¯¼è‡´æ?ƒé™?æ ¡éªŒå¤±æ•ˆï¼Œå¼•å?‘å®‰å…¨é—®é¢˜ï¼?");
		//		}

		return this;
	}


	/**éªŒè¯?æ?ƒé™?æ˜¯å?¦é€šè¿‡
	 * @param config
	 * @param visitor
	 * @return
	 * @throws Exception
	 */
	public boolean verify(SQLConfig config) throws Exception {
		String table = config == null ? null : config.getTable();
		if (table == null) {
			return true;
		}
		RequestRole role = config.getRole();
		if (role == null) {
			role = RequestRole.UNKNOWN;
		}

		if (role != RequestRole.UNKNOWN) {//æœªç™»å½•çš„è§’è‰²
			verifyLogin();
		}

		RequestMethod method = config.getMethod();

		verifyRole(table, method, role);//éªŒè¯?å…?è®¸çš„è§’è‰²


		//éªŒè¯?è§’è‰²ï¼Œå?‡å®šçœŸå®žå¼ºåˆ¶åŒ¹é…?<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

		String visitorIdkey = getVisitorIdKey(config);

		Object requestId;
		switch (role) {
		case LOGIN://verifyRoleé€šè¿‡å°±è¡Œ
			break;
		case CONTACT:
		case CIRCLE:
			//TODO å?šä¸€ä¸ªç¼“å­˜contactMap<visitorId, contactArray>ï¼Œæ??é«˜[]:{}æŸ¥è¯¢æ€§èƒ½ï¼Œ removeAccessInfoæ—¶map.remove(visitorId)
			//ä¸?èƒ½åœ¨Visitorå†…null -> [] ! å?¦åˆ™ä¼šå¯¼è‡´æŸ?äº›æŸ¥è¯¢åŠ ä¸Šä¸?éœ€è¦?çš„æ?¡ä»¶ï¼?
			List<Object> list = visitor.getContactIdList() == null
			? new ArrayList<Object>() : new ArrayList<Object>(visitor.getContactIdList());
			if (role == RequestRole.CIRCLE) {
				list.add(visitorId);
			}

			//key!{}:[] æˆ– å…¶å®ƒæ²¡æœ‰æ˜Žç¡®idçš„æ?¡ä»¶ ç­‰ å?¯ä»¥å’Œkey{}:listç»„å?ˆã€‚ç±»åž‹é”™è¯¯å°±æŠ¥é”™
			requestId = (Number) config.getWhere(visitorIdkey, true);//JSONé‡Œæ•°å€¼ä¸?èƒ½ä¿?è¯?æ˜¯Longï¼Œå?¯èƒ½æ˜¯Integer
			JSONArray requestIdArray = (JSONArray) config.getWhere(visitorIdkey + "{}", true);//ä¸?èƒ½æ˜¯ &{}ï¼Œ |{} ä¸?è¦?ä¼ ï¼Œç›´æŽ¥{}
			if (requestId != null) {
				if (requestIdArray == null) {
					requestIdArray = new JSONArray();
				}
				requestIdArray.add(requestId);
			}

			if (requestIdArray == null) {//å?¯èƒ½æ˜¯@å¾—åˆ° || requestIdArray.isEmpty()) {//è¯·æ±‚æœªå£°æ˜Žkey:idæˆ–key{}:[...]æ?¡ä»¶ï¼Œè‡ªåŠ¨è¡¥å…¨
				config.putWhere(visitorIdkey+"{}", JSON.parseArray(list), true); //key{}:[]æœ‰æ•ˆï¼ŒSQLConfigé‡Œthrow NotExistException
			} 
			else {//è¯·æ±‚å·²å£°æ˜Žkey:idæˆ–key{}:[]æ?¡ä»¶ï¼Œç›´æŽ¥éªŒè¯?
				for (Object id : requestIdArray) {
					if (id == null) {
						continue;
					}
					if (id instanceof Number == false) {//ä¸?èƒ½å‡†ç¡®åœ°åˆ¤æ–­Longï¼Œå?¯èƒ½æ˜¯Integer
						throw new UnsupportedDataTypeException(table + ".idç±»åž‹é”™è¯¯ï¼Œidç±»åž‹å¿…é¡»æ˜¯Longï¼?");
					}
					if (list.contains(new Long("" + id)) == false) {//Integerç­‰è½¬ä¸ºLongæ‰?èƒ½æ­£ç¡®åˆ¤æ–­ã€‚å¼ºè½¬å´©æºƒ
						throw new IllegalAccessException(visitorIdkey + " = " + id + " çš„ " + table
								+ " ä¸?å…?è®¸ " + role.name() + " ç”¨æˆ·çš„ " + method.name() + " è¯·æ±‚ï¼?");
					}
				}
			}
			break;
		case OWNER:
			if (config.getMethod() == RequestMethod.POST) {
				List<String> c = config.getColumn();
				List<List<Object>> ovs = config.getValues();
				if ( (c == null || c.isEmpty()) || (ovs == null || ovs.isEmpty()) ) {
					throw new IllegalArgumentException("POST è¯·æ±‚å¿…é¡»åœ¨Tableå†…è®¾ç½®è¦?ä¿?å­˜çš„ key:value ï¼?");
				}

				int index = c.indexOf(visitorIdkey);
				if (index >= 0) {
					Object oid;
					for (List<Object> ovl : ovs) {
						oid = ovl == null || index >= ovl.size() ? null : ovl.get(index);
						if (oid == null || StringUtil.getString(oid).equals("" + visitorId) == false) {
							throw new IllegalAccessException(visitorIdkey + " = " + oid + " çš„ " + table
									+ " ä¸?å…?è®¸ " + role.name() + " ç”¨æˆ·çš„ " + method.name() + " è¯·æ±‚ï¼?");
						}
					}
				}
				else {
					List<String> nc = new ArrayList<>(c);
					nc.add(visitorIdkey);
					config.setColumn(nc);

					List<List<Object>> nvs = new ArrayList<>();
					List<Object> nvl;
					for (List<Object> ovl : ovs) {
						nvl = ovl == null || ovl.isEmpty() ? new ArrayList<>() : new ArrayList<>(ovl);
						nvl.add(visitorId);
						nvs.add(nvl);
					}

					config.setValues(nvs);
				}
			}
			else {
				requestId = config.getWhere(visitorIdkey, true);//JSONé‡Œæ•°å€¼ä¸?èƒ½ä¿?è¯?æ˜¯Longï¼Œå?¯èƒ½æ˜¯Integer
				if (requestId != null && StringUtil.getString(requestId).equals(StringUtil.getString(visitorId)) == false) {
					throw new IllegalAccessException(visitorIdkey + " = " + requestId + " çš„ " + table
							+ " ä¸?å…?è®¸ " + role.name() + " ç”¨æˆ·çš„ " + method.name() + " è¯·æ±‚ï¼?");
				}

				config.putWhere(visitorIdkey, visitorId, true);
			}
			break;
		case ADMIN://è¿™é‡Œä¸?å¥½å?šï¼Œåœ¨ç‰¹å®šæŽ¥å?£å†…éƒ¨åˆ¤ã€‚ å?¯ä»¥æ˜¯  /get/admin + å›ºå®šç§˜é’¥  Parser#noVerifyï¼Œä¹‹å?Žå…¨å±€è·³è¿‡éªŒè¯?
			verifyAdmin();
			break;
		default://unknownï¼ŒverifyRoleé€šè¿‡å°±è¡Œ
			break;
		}

		//éªŒè¯?è§’è‰²ï¼Œå?‡å®šçœŸå®žå¼ºåˆ¶åŒ¹é…?>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


		return true;
	}





	/**å…?è®¸è¯·æ±‚ï¼Œè§’è‰²ä¸?å¥½åˆ¤æ–­ï¼Œè®©è®¿é—®è€…å?‘è¿‡æ?¥è§’è‰²å??ï¼ŒOWNER,CONTACT,ADMINç­‰
	 * @param table
	 * @param method
	 * @param role
	 * @return
	 * @throws Exception 
	 * @see {@link zuo.biao.apijson.JSONObject#KEY_ROLE} 
	 */
	public void verifyRole(String table, RequestMethod method, RequestRole role) throws Exception {
		Log.d(TAG, "verifyRole  table = " + table + "; method = " + method + "; role = " + role);
		if (table != null) {
			if (method == null) {
				method = GET;
			}
			if (role == null) {
				role = RequestRole.UNKNOWN;
			}
			Map<RequestMethod, RequestRole[]> map = ACCESS_MAP.get(table);

			if (map == null || Arrays.asList(map.get(method)).contains(role) == false) {
				throw new IllegalAccessException(table + " ä¸?å…?è®¸ " + role.name() + " ç”¨æˆ·çš„ " + method.name() + " è¯·æ±‚ï¼?");
			}
		}
	}


	/**ç™»å½•æ ¡éªŒ
	 * @author Lemon
	 * @param visitorId
	 * @throws Exception
	 */
	@Override
	public void verifyLogin() throws Exception {
		//æœªç™»å½•æ²¡æœ‰æ?ƒé™?æ“?ä½œ
		if (visitorId == null) {
			throw new NotLoggedInException("æœªç™»å½•ï¼Œè¯·ç™»å½•å?Žå†?æ“?ä½œï¼?");
		}

		if (visitorId instanceof Number) {
			if (((Number) visitorId).longValue() <= 0) {
				throw new NotLoggedInException("æœªç™»å½•ï¼Œè¯·ç™»å½•å?Žå†?æ“?ä½œï¼?");
			}
		} 
		else if (visitorId instanceof String) {
			if (StringUtil.isEmpty(visitorId, true)) {
				throw new NotLoggedInException("æœªç™»å½•ï¼Œè¯·ç™»å½•å?Žå†?æ“?ä½œï¼?");
			}
		}
		else {
			throw new UnsupportedDataTypeException("visitorId å?ªèƒ½æ˜¯ Long æˆ– String ç±»åž‹ï¼?");
		}

	}

	@Override
	public void verifyAdmin() throws Exception {
		throw new UnsupportedOperationException("ä¸?æ”¯æŒ? ADMIN è§’è‰²ï¼?å¦‚æžœè¦?æ”¯æŒ?å°±åœ¨å­?ç±»é‡?å†™è¿™ä¸ªæ–¹æ³•æ?¥æ ¡éªŒ ADMIN è§’è‰²ï¼Œä¸?é€šè¿‡åˆ™ throw IllegalAccessException!");
	}


	/**éªŒè¯?æ˜¯å?¦é‡?å¤?
	 * @param table
	 * @param key
	 * @param value
	 * @throws Exception
	 */
	@Override
	public void verifyRepeat(String table, String key, Object value) throws Exception {
		verifyRepeat(table, key, value, 0);
	}
	/**éªŒè¯?æ˜¯å?¦é‡?å¤?
	 * @param table
	 * @param key
	 * @param value
	 * @param exceptId ä¸?åŒ…å?«id
	 * @throws Exception
	 */
	@Override
	public void verifyRepeat(String table, String key, Object value, long exceptId) throws Exception {
		if (key == null || value == null) {
			Log.e(TAG, "verifyRepeat  key == null || value == null >> return;");
			return;
		}
		if (value instanceof JSON) {
			throw new UnsupportedDataTypeException(key + ":value ä¸­valueçš„ç±»åž‹ä¸?èƒ½ä¸ºJSONï¼?");
		}

		JSONRequest request = new JSONRequest(key, value);
		if (exceptId > 0) {//å…?è®¸ä¿®æ”¹è‡ªå·±çš„å±žæ€§ä¸ºè¯¥å±žæ€§åŽŸæ?¥çš„å€¼
			request.put(JSONRequest.KEY_ID + "!", exceptId);
		}
		JSONObject repeat = createParser().setMethod(HEAD).setNoVerify(true).parseResponse(
				new JSONRequest(table, request)
				);
		repeat = repeat == null ? null : repeat.getJSONObject(table);
		if (repeat == null) {
			throw new Exception("æœ?åŠ¡å™¨å†…éƒ¨é”™è¯¯  verifyRepeat  repeat == null");
		}
		if (repeat.getIntValue(JSONResponse.KEY_COUNT) > 0) {
			throw new ConflictException(key + ": " + value + " å·²ç»?å­˜åœ¨ï¼Œä¸?èƒ½é‡?å¤?ï¼?");
		}
	}

}
