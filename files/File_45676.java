/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.alipay.sofa.rpc.common.cache;

import com.alipay.sofa.rpc.common.annotation.VisibleForTesting;
import com.alipay.sofa.rpc.common.utils.ClassLoaderUtils;

import java.lang.reflect.Method;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

/**
 * ä¸šåŠ¡è¦?æ”¯æŒ?å¤šClassLoaderï¼Œéœ€è¦?ç¼“å­˜ClassLoaderæˆ–è€…æ–¹æ³•ç­‰ç›¸å…³ä¿¡æ?¯
 * <p>
 * // TODO ç»Ÿä¸€çš„å›žæ”¶å®žæ•ˆç­–ç•¥ï¼Œä¾‹å¦‚å¤§å°?é™?åˆ¶ã€?æ—¶é—´é™?åˆ¶ã€?å“ªäº›å?¯ä»¥è¢«å›žæ”¶
 *
 * @author <a href="mailto:zhanggeng.zg@antfin.com">GengZhang</a>
 */
public final class ReflectCache {

    /*----------- ClassLoader Cache ------------*/
    /**
     * åº”ç”¨å¯¹åº”çš„ClassLoader
     */
    @VisibleForTesting
    static final ConcurrentMap<String, ClassLoader> APPNAME_CLASSLOADER_MAP = new ConcurrentHashMap<String, ClassLoader>();

    /**
     * æœ?åŠ¡å¯¹åº”çš„ClassLoader
     */
    @VisibleForTesting
    static final ConcurrentMap<String, ClassLoader> SERVICE_CLASSLOADER_MAP = new ConcurrentHashMap<String, ClassLoader>();

    /**
     * æ³¨å†Œæœ?åŠ¡æ‰€åœ¨çš„ClassLoader
     *
     * @param appName     åº”ç”¨å??
     * @param classloader åº”ç”¨çº§åˆ«ClassLoader
     */
    public static void registerAppClassLoader(String appName, ClassLoader classloader) {
        APPNAME_CLASSLOADER_MAP.put(appName, classloader);
    }

    /**
     * å¾—åˆ°æœ?åŠ¡çš„è‡ªå®šä¹‰ClassLoader
     *
     * @param appName åº”ç”¨å??
     * @return åº”ç”¨çº§åˆ«ClassLoader
     */
    public static ClassLoader getAppClassLoader(String appName) {
        ClassLoader appClassLoader = APPNAME_CLASSLOADER_MAP.get(appName);
        if (appClassLoader == null) {
            return ClassLoaderUtils.getCurrentClassLoader();
        } else {
            return appClassLoader;
        }
    }

    /**
     * æ³¨å†Œæœ?åŠ¡æ‰€åœ¨çš„ClassLoader
     *
     * @param serviceUniqueName æœ?åŠ¡å”¯ä¸€å??ç§°
     * @param classloader       æœ?åŠ¡çº§åˆ«ClassLoader
     */
    public static void registerServiceClassLoader(String serviceUniqueName, ClassLoader classloader) {
        SERVICE_CLASSLOADER_MAP.put(serviceUniqueName, classloader);
    }

    /**
     * å?‘æ³¨å†Œæœ?åŠ¡çš„ ClassLoader
     * @param serviceUniqueName
     * @return
     */
    public static ClassLoader unRegisterServiceClassLoader(String serviceUniqueName) {
        return SERVICE_CLASSLOADER_MAP.remove(serviceUniqueName);
    }

    /**
     * å¾—åˆ°æœ?åŠ¡çš„è‡ªå®šä¹‰ClassLoader
     *
     * @param serviceUniqueName æœ?åŠ¡å”¯ä¸€å??ç§°
     * @return æœ?åŠ¡çº§åˆ«ClassLoader
     */
    public static ClassLoader getServiceClassLoader(String serviceUniqueName) {
        ClassLoader appClassLoader = SERVICE_CLASSLOADER_MAP.get(serviceUniqueName);
        if (appClassLoader == null) {
            return ClassLoaderUtils.getCurrentClassLoader();
        } else {
            return appClassLoader;
        }
    }

    /*----------- Class Cache ------------*/
    /**
     * String-->Class ç¼“å­˜
     */
    @VisibleForTesting
    static final ConcurrentMap<String, WeakHashMap<ClassLoader, Class>> CLASS_CACHE    = new ConcurrentHashMap<String, WeakHashMap<ClassLoader, Class>>();

    /**
     * Class-->String ç¼“å­˜
     */
    @VisibleForTesting
    static final ConcurrentMap<Class, String>                           TYPE_STR_CACHE = new ConcurrentHashMap<Class, String>();

    /**
     * æ”¾å…¥Classç¼“å­˜
     *
     * @param typeStr å¯¹è±¡æ??è¿°
     * @param clazz   ç±»
     */
    public static void putClassCache(String typeStr, Class clazz) {
        CLASS_CACHE.putIfAbsent(typeStr, new WeakHashMap<ClassLoader, Class>());
        CLASS_CACHE.get(typeStr).put(clazz.getClassLoader(), clazz);
    }

    /**
     * å¾—åˆ°Classç¼“å­˜
     *
     * @param typeStr å¯¹è±¡æ??è¿°
     * @return ç±»
     */
    public static Class getClassCache(String typeStr) {
        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
        if (classLoader == null) {
            return null;
        } else {
            Map<ClassLoader, Class> temp = CLASS_CACHE.get(typeStr);
            return temp == null ? null : temp.get(classLoader);
        }
    }

    /**
     * æ”¾å…¥ç±»æ??è¿°ç¼“å­˜
     *
     * @param clazz   ç±»
     * @param typeStr å¯¹è±¡æ??è¿°
     */
    public static void putTypeStrCache(Class clazz, String typeStr) {
        TYPE_STR_CACHE.put(clazz, typeStr);
    }

    /**
     * å¾—åˆ°ç±»æ??è¿°ç¼“å­˜
     *
     * @param clazz ç±»
     * @return ç±»æ??è¿°
     */
    public static String getTypeStrCache(Class clazz) {
        return TYPE_STR_CACHE.get(clazz);
    }

    /*----------- Method Cache NOT support overload ------------*/

    /**
     * ä¸?æ”¯æŒ?é‡?è½½çš„æ–¹æ³•å¯¹è±¡ç¼“å­˜ {service:{æ–¹æ³•å??:Method}}
     */
    @VisibleForTesting
    static final ConcurrentMap<String, ConcurrentHashMap<String, Method>>   NOT_OVERLOAD_METHOD_CACHE      = new ConcurrentHashMap<String, ConcurrentHashMap<String, Method>>();

    /**
     * ä¸?æ”¯æŒ?é‡?è½½çš„æ–¹æ³•å¯¹è±¡å?‚æ•°ç­¾å??ç¼“å­˜ {service:{æ–¹æ³•å??:å¯¹è±¡å?‚æ•°ç­¾å??}}
     */
    @VisibleForTesting
    static final ConcurrentMap<String, ConcurrentHashMap<String, String[]>> NOT_OVERLOAD_METHOD_SIGS_CACHE = new ConcurrentHashMap<String, ConcurrentHashMap<String, String[]>>();

    /**
     * å¾€ç¼“å­˜é‡Œæ”¾å…¥æ–¹æ³•
     *
     * @param serviceName æœ?åŠ¡å??ï¼ˆé?žæŽ¥å?£å??ï¼‰
     * @param method      æ–¹æ³•
     */
    public static void putMethodCache(String serviceName, Method method) {
        ConcurrentHashMap<String, Method> cache = NOT_OVERLOAD_METHOD_CACHE.get(serviceName);
        if (cache == null) {
            cache = new ConcurrentHashMap<String, Method>();
            ConcurrentHashMap<String, Method> old = NOT_OVERLOAD_METHOD_CACHE.putIfAbsent(serviceName, cache);
            if (old != null) {
                cache = old;
            }
        }
        cache.putIfAbsent(method.getName(), method);
    }

    /**
     * ä»Žç¼“å­˜é‡ŒèŽ·å?–æ–¹æ³•
     *
     * @param serviceName æœ?åŠ¡å??ï¼ˆé?žæŽ¥å?£å??ï¼‰
     * @param methodName  æ–¹æ³•å??
     * @return æ–¹æ³•
     */
    public static Method getMethodCache(String serviceName, String methodName) {
        ConcurrentHashMap<String, Method> methods = NOT_OVERLOAD_METHOD_CACHE.get(serviceName);
        return methods == null ? null : methods.get(methodName);
    }

    /**
     * æ ¹æ?®æœ?åŠ¡å??ä½¿æ–¹æ³•ç¼“å­˜å¤±æ•ˆ
     *
     * @param serviceName æœ?åŠ¡å??ï¼ˆé?žæŽ¥å?£å??ï¼‰
     */
    public static void invalidateMethodCache(String serviceName) {
        NOT_OVERLOAD_METHOD_CACHE.remove(serviceName);
    }

    /**
     * å¾€ç¼“å­˜é‡Œæ”¾å…¥æ–¹æ³•å?‚æ•°ç­¾å??
     *
     * @param serviceName æœ?åŠ¡å??ï¼ˆé?žæŽ¥å?£å??ï¼‰
     * @param methodName  æ–¹æ³•å??
     * @param argSigs     æ–¹æ³•å?‚æ•°ç­¾å??
     */
    public static void putMethodSigsCache(String serviceName, String methodName, String[] argSigs) {
        ConcurrentHashMap<String, String[]> cacheSigs = NOT_OVERLOAD_METHOD_SIGS_CACHE.get(serviceName);
        if (cacheSigs == null) {
            cacheSigs = new ConcurrentHashMap<String, String[]>();
            ConcurrentHashMap<String, String[]> old = NOT_OVERLOAD_METHOD_SIGS_CACHE
                .putIfAbsent(serviceName, cacheSigs);
            if (old != null) {
                cacheSigs = old;
            }
        }
        cacheSigs.putIfAbsent(methodName, argSigs);
    }

    /**
     * ä»Žç¼“å­˜é‡ŒèŽ·å?–æ–¹æ³•å?‚æ•°ç­¾å??
     *
     * @param serviceName æœ?åŠ¡å??ï¼ˆé?žæŽ¥å?£å??ï¼‰
     * @param methodName  æ–¹æ³•å??
     * @return æ–¹æ³•å?‚æ•°ç­¾å??
     */
    public static String[] getMethodSigsCache(String serviceName, String methodName) {
        ConcurrentHashMap<String, String[]> methods = NOT_OVERLOAD_METHOD_SIGS_CACHE.get(serviceName);
        return methods == null ? null : methods.get(methodName);
    }

    /**
     * æ ¹æ?®æœ?åŠ¡å??ä½¿æ–¹æ³•ç¼“å­˜å¤±æ•ˆ
     *
     * @param serviceName æœ?åŠ¡å??ï¼ˆé?žæŽ¥å?£å??ï¼‰
     */
    public static void invalidateMethodSigsCache(String serviceName) {
        NOT_OVERLOAD_METHOD_SIGS_CACHE.remove(serviceName);
    }

    /*----------- Method Cache support overload ------------*/

    /**
     * æ–¹æ³•å¯¹è±¡ç¼“å­˜ {service:{æ–¹æ³•å??#(å?‚æ•°åˆ—è¡¨):Method}} <br>
     * ç”¨äºŽç¼“å­˜å?‚æ•°åˆ—è¡¨ï¼Œä¸?æ˜¯æŒ‰æŽ¥å?£ï¼Œæ˜¯æŒ‰ServiceUniqueName
     */
    @VisibleForTesting
    final static ConcurrentMap<String, ConcurrentHashMap<String, Method>> OVERLOAD_METHOD_CACHE = new ConcurrentHashMap<String, ConcurrentHashMap<String, Method>>();

    /**
     * å¾€ç¼“å­˜é‡Œæ”¾å…¥æ–¹æ³•
     *
     * @param serviceName æœ?åŠ¡å??ï¼ˆé?žæŽ¥å?£å??ï¼‰
     * @param method      æ–¹æ³•
     */
    public static void putOverloadMethodCache(String serviceName, Method method) {
        ConcurrentHashMap<String, Method> cache = OVERLOAD_METHOD_CACHE.get(serviceName);
        if (cache == null) {
            cache = new ConcurrentHashMap<String, Method>();
            ConcurrentHashMap<String, Method> old = OVERLOAD_METHOD_CACHE.putIfAbsent(serviceName, cache);
            if (old != null) {
                cache = old;
            }
        }
        StringBuilder mSigs = new StringBuilder(128);
        mSigs.append(method.getName());
        for (Class<?> paramType : method.getParameterTypes()) {
            mSigs.append(paramType.getName());
        }
        cache.putIfAbsent(mSigs.toString(), method);
    }

    /**
     * ä»Žç¼“å­˜é‡ŒèŽ·å?–æ–¹æ³•
     *
     * @param serviceName æœ?åŠ¡å??ï¼ˆé?žæŽ¥å?£å??ï¼‰
     * @param methodName  æ–¹æ³•å??
     * @param methodSigs  æ–¹æ³•æ??è¿°
     * @return æ–¹æ³•
     */
    public static Method getOverloadMethodCache(String serviceName, String methodName, String[] methodSigs) {
        ConcurrentHashMap<String, Method> methods = OVERLOAD_METHOD_CACHE.get(serviceName);
        if (methods == null) {
            return null;
        }
        StringBuilder mSigs = new StringBuilder(128);
        mSigs.append(methodName);
        for (String methodSign : methodSigs) {
            mSigs.append(methodSign);
        }
        return methods.get(mSigs.toString());
    }

    /**
     * å?–æ¶ˆç¼“å­˜æœ?åŠ¡çš„å…¬å…±æ–¹æ³•
     *
     * @param serviceName æœ?åŠ¡å??ï¼ˆé?žæŽ¥å?£å??ï¼‰
     */
    public static void invalidateOverloadMethodCache(String serviceName) {
        OVERLOAD_METHOD_CACHE.remove(serviceName);
    }

    /*----------- Cache Management ------------*/
    /**
     * æ¸…ç?†æ–¹æ³•
     */
    static void clearAll() {
        CLASS_CACHE.clear();
        TYPE_STR_CACHE.clear();
        APPNAME_CLASSLOADER_MAP.clear();
        SERVICE_CLASSLOADER_MAP.clear();
        NOT_OVERLOAD_METHOD_CACHE.clear();
        NOT_OVERLOAD_METHOD_SIGS_CACHE.clear();
        OVERLOAD_METHOD_CACHE.clear();
    }

}
