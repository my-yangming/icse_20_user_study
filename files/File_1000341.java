package org.nutz.conf;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.nutz.el.opt.custom.CustomMake;
import org.nutz.json.Json;
import org.nutz.lang.Lang;
import org.nutz.lang.util.NutType;
import org.nutz.log.Log;
import org.nutz.log.Logs;
import org.nutz.mapl.Mapl;
import org.nutz.repo.org.objectweb.asm.Opcodes;
import org.nutz.resource.NutResource;
import org.nutz.resource.Scans;

/**
 * é…?ç½®åŠ è½½å™¨<br/>
 * ä¸€ä¸ªé€šç”¨çš„é…?ç½®åŠ è½½å™¨, å…¨å±€çš„åŠ è½½é…?ç½®æ–‡ä»¶, è¿™æ ·, åœ¨æ‰€æœ‰åœ°æ–¹éƒ½å?¯ä»¥ä½¿ç”¨è¿™äº›é…?ç½®ä¿¡æ?¯äº†. è§„åˆ™:<br/>
 * <ul>
 * <li>é…?ç½®æ–‡ä»¶ä½¿ç”¨JSONæ ¼å¼?.
 * <li>JSONç¬¬ä¸€å±‚ä¸ºé…?ç½®é¡¹é”®å€¼å¯¹, KEY ä¸ºé…?ç½®é¡¹å??ç§°, å€¼ä¸ºé…?ç½®ä¿¡æ?¯.
 * <li>ä½¿ç”¨æ–‡ä»¶æ•°ç»„, æˆ–è€…æ–‡ä»¶ç›®å½•çš„å½¢å¼?, å?¯ä»¥åŠ è½½å¤šä¸ªé…?ç½®æ–‡ä»¶
 * <li>å?¯ä»¥ä½¿ç”¨ include å…³é”®å­—æ?¥å¼•ç”¨å…¶å®ƒé…?ç½®æ–‡ä»¶, å€¼ä»¥æ•°ç»„å½¢å¼?.
 * <li>å¤šé…?ç½®æ–‡ä»¶çš„æƒ…å†µä¸‹å?ŽåŠ è½½çš„é…?ç½®ä¼šè¦†ç›–ä¹‹å‰?åŠ è½½çš„é…?ç½®,includeå¼•ç”¨çš„é…?ç½®ä¼šè¦†ç›–å¼•ç”¨å‰?çš„é…?ç½®.
 * <li>ä¸ŽJSON ç›¸å?Œ, é…?ç½®é¡¹çš„å€¼ä½ å?¯ä»¥è½¬æ?¢æˆ?ä»»æ„?ä½ æƒ³è¦?çš„ç±»åž‹. åŒ…æ‹¬æ³›åž‹, å?¯ä»¥ä½¿ç”¨ {@link NutType}
 * </ul>
 * 
 * @author juqkai(juqkai@gmail.com)
 * 
 */
public class NutConf {

    private static final Log log = Logs.get();

    private static final String DEFAULT_CONFIG = "org/nutz/conf/NutzDefaultConfig.js";

    // æ‰€æœ‰çš„é…?ç½®ä¿¡æ?¯
    private Map<String, Object> map = new HashMap<String, Object>();

    // zozoh å?•åˆ©çš„è¯?ï¼Œæ²¡å¿…è¦?ç”¨è¿™ä¸ªå?§ ...
    // private static final Lock lock = new ReentrantLock();

    private volatile static NutConf conf;

    private static NutConf me() {
        if (null == conf) {
            synchronized (NutConf.class) {
                if (null == conf)
                    conf = new NutConf();
            }
        }
        return conf;
    }

    private NutConf() {
        // åŠ è½½æ¡†æž¶è‡ªå·±çš„ä¸€äº›é…?ç½®
        loadResource(DEFAULT_CONFIG);
    }

    public static void load(String... paths) {
        me().loadResource(paths);
        CustomMake.me().init();
    }

    /**
     * åŠ è½½èµ„æº?
     */
    @SuppressWarnings({"unchecked", "rawtypes"})
    private void loadResource(String... paths) {
        for (String path : paths) {
            List<NutResource> resources = Scans.me().scan(path, "\\.(js|json)$");

            for (NutResource nr : resources) {
                try {
                    Object obj = Json.fromJson(nr.getReader());
                    if (obj instanceof Map) {
                        Map m = (Map) obj;
                        map = (Map) Mapl.merge(map, m);
                        for (Object key : m.keySet()) {
                            if (key.equals("include")) {
                                map.remove("include");
                                List<String> include = (List) m.get("include");
                                loadResource(include.toArray(new String[include.size()]));
                            }
                        }
                    }
                }
                catch (Throwable e) {
                    if (log.isWarnEnabled())
                        log.warn("Fail to load config?! for " + nr.getName(), e);
                }
            }
        }
    }

    /**
     * è¯»å?–ä¸€ä¸ªé…?ç½®é¡¹, å¹¶è½¬æ?¢æˆ?ç›¸åº”çš„ç±»åž‹.
     */
    public static Object get(String key, Type type) {
        return me().getItem(key, type);
    }

    /**
     * è¯»å?–é…?ç½®é¡¹, è¿”å›žMap, Listæˆ–è€… Object. å…·ä½“è¿”å›žä»€ä¹ˆ, è¯·å?‚è€ƒ JSON è§„åˆ™
     */
    public static Object get(String key) {
        return me().getItem(key, null);
    }

    /**
     * è¯»å?–ä¸€ä¸ªé…?ç½®é¡¹, å¹¶è½¬æ?¢æˆ?ç›¸åº”çš„ç±»åž‹.
     * 
     * @param key
     * @param type
     * @return
     */
    private Object getItem(String key, Type type) {
        if (null == map) {
            return null;
        }
        if (null == type) {
            return map.get(key);
        }
        return Mapl.maplistToObj(map.get(key), type);
    }

    /**
     * æ¸…ç?†æ‰€æœ‰é…?ç½®ä¿¡æ?¯
     */
    public static void clear() {
        conf = null;
    }
    
    /**
     * æ˜¯å?¦å?¯ç”¨FastClassæœºåˆ¶,ä¼šæ??é«˜å??å°„çš„æ€§èƒ½,å¦‚æžœéœ€è¦?çƒ­éƒ¨ç½²,åº”å…³é—­. æ€§èƒ½å½±å“?ä½ŽäºŽ10%
     */
    public static boolean USE_FASTCLASS = !Lang.isAndroid && Lang.JdkTool.getMajorVersion() <= 8;
    /**
     * æ˜¯å?¦ç¼“å­˜Mirror,é…?å?ˆFastClassæœºåˆ¶ä½¿ç”¨,ä¼šæ??é«˜å??å°„çš„æ€§èƒ½,å¦‚æžœéœ€è¦?çƒ­éƒ¨ç½²,åº”å…³é—­.  æ€§èƒ½å½±å“?ä½ŽäºŽ10%
     */
    public static boolean USE_MIRROR_CACHE = true;
    /**
     * Map.map2objectæ—¶çš„ELæ”¯æŒ?,å¾ˆå°‘ä¼šç”¨åˆ°,æ‰€ä»¥é»˜è®¤å…³é—­. è‹¥å?¯ç”¨, Json.fromJsonä¼šæœ‰30%å·¦å?³çš„æ€§èƒ½æ?Ÿå¤±
     */
    public static boolean USE_EL_IN_OBJECT_CONVERT = false;
    /**
     * è°ƒè¯•Scansç±»çš„å¼€å…³.é‰´äºŽScanså·²ç»?é?žå¸¸é? è°±,è¿™ä¸ªå¼€å…³åŸºæœ¬ä¸Šæ²¡ç”¨å¤„äº†
     */
    public static boolean RESOURCE_SCAN_TRACE = false;
    /**
     * æ˜¯å?¦å…?è®¸é?žæ³•çš„Jsonè½¬ä¹‰ç¬¦,å±žäºŽå…¼å®¹æ€§é…?ç½®
     */
    public static boolean JSON_ALLOW_ILLEGAL_ESCAPE = true;
    /**
     * è‹¥å…?è®¸é?žæ³•çš„Jsonè½¬ä¹‰ç¬¦,æ˜¯å?¦æŠŠè½¬ä¹‰ç¬¦é™„åŠ è¿›ç›®æ ‡å­—ç¬¦ä¸²
     */
    public static boolean JSON_APPEND_ILLEGAL_ESCAPE = false;
    /**
     * Aopç±»æ˜¯å?¦æ¯?ä¸ªIocå®¹å™¨éƒ½å”¯ä¸€,è®¾ç½®è¿™ä¸ªå¼€å…³æ˜¯å› ä¸ºwendalè¿˜ä¸?ç¡®å®šä¼šæœ‰ä»€ä¹ˆå½±å“?,æš‚æ—¶å…³é—­çŠ¶æ€?.
     */
    public static boolean AOP_USE_CLASS_ID = false;

    public static int AOP_CLASS_LEVEL = Opcodes.V1_6;

    public static boolean HAS_LOCAL_DATE_TIME;
    static {
        try {
            Class.forName("java.time.temporal.TemporalAccessor");
            HAS_LOCAL_DATE_TIME = true;
        }
        catch (Throwable e) {
        }
    }
    
    public static boolean AOP_ENABLED = !"false".equals(System.getProperty("nutz.aop.enable"));
    
    public static void set(String key, Object value) {
        if (value == null)
            me().map.remove(key);
        else
            me().map.put(key, value);
    }
    
    public static Object getOrDefault(String key, Object defaultValue) {
        Object re = me().map.get(key);
        if (re == null)
            return defaultValue;
        return re;
    }

    public static boolean SQLSERVER_USE_NVARCHAR = true;
    
    public static boolean DAO_USE_POJO_INTERCEPTOR = true;
}
