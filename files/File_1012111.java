package jetbrains.mps.baseLanguage.lightweightdsl.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.part.ApplicationPluginPart;
import jetbrains.mps.smodel.language.LanguageRegistryListener;
import jetbrains.mps.smodel.language.LanguageRuntime;
import org.jetbrains.mps.util.Condition;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SLanguage;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.smodel.ModelAccessHelper;
import jetbrains.mps.util.Computable;
import jetbrains.mps.internal.collections.runtime.ISequence;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.NotNullWhereFilter;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.adapter.MetaAdapterByDeclaration;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import java.util.Set;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.ide.projectPane.CreateRootFilterEP;

public class ClassLikeMenuAdjustment_AppPluginPart extends ApplicationPluginPart {
  private LanguageRegistryListener myReloadListener = new LanguageRegistryListener() {
    @Override
    public void beforeLanguagesUnloaded(Iterable<LanguageRuntime> iterable) {
      ClassLikeMenuAdjustment_AppPluginPart.this.myClassLikeConcepts = null;
    }
    @Override
    public void afterLanguagesLoaded(Iterable<LanguageRuntime> iterable) {
      ClassLikeMenuAdjustment_AppPluginPart.this.myClassLikeConcepts = null;
    }
  };
  private Condition<SAbstractConcept> myCondition = new Condition<SAbstractConcept>() {
    public boolean met(final SAbstractConcept c) {
      if (ClassLikeMenuAdjustment_AppPluginPart.this.myClassLikeConcepts == null) {
        final Iterable<SLanguage> allLanguages = ClassLikeMenuAdjustment_AppPluginPart.this.myLangRegistry.getAllLanguages();
        final SRepository repo = ClassLikeMenuAdjustment_AppPluginPart.this.myDeploymentRepo;
        Iterable<SAbstractConcept> nonTrivialClassLikes = new ModelAccessHelper(repo).runReadAction(new Computable<ISequence<SAbstractConcept>>() {
          public ISequence<SAbstractConcept> compute() {
            Iterable<Language> languages = Sequence.fromIterable(allLanguages).select(new ISelector<SLanguage, SModule>() {
              public SModule select(SLanguage it) {
                return it.getSourceModuleReference().resolve(repo);
              }
            }).ofType(Language.class);
            return Sequence.fromIterable(languages).translate(new ITranslator2<Language, SModel>() {
              public Iterable<SModel> translate(Language it) {
                return it.getAccessoryModels();
              }
            }).where(new NotNullWhereFilter<SModel>()).translate(new ITranslator2<SModel, SNode>() {
              public Iterable<SNode> translate(SModel it) {
                return SModelOperations.roots(((SModel) it), MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x340eb2bd2e03d160L, "jetbrains.mps.baseLanguage.lightweightdsl.structure.DSLDescriptor"));
              }
            }).select(new ISelector<SNode, SNode>() {
              public SNode select(SNode it) {
                return SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x340eb2bd2e03d160L, 0x1955e1ca83e5ed92L, "preferredConcept"));
              }
            }).where(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return it != null && !(SNodeOperations.is(it, new SNodePointer("r:00000000-0000-4000-0000-011c895902ca(jetbrains.mps.baseLanguage.structure)", "1068390468198")));
              }
            }).select(new ISelector<SNode, SAbstractConcept>() {
              public SAbstractConcept select(SNode it) {
                return MetaAdapterByDeclaration.getConcept(it);
              }
            });
          }
        });
        ClassLikeMenuAdjustment_AppPluginPart.this.myClassLikeConcepts = SetSequence.fromSetWithValues(new HashSet<SAbstractConcept>(), nonTrivialClassLikes);
      }
      return SetSequence.fromSet(ClassLikeMenuAdjustment_AppPluginPart.this.myClassLikeConcepts).any(new IWhereFilter<SAbstractConcept>() {
        public boolean accept(SAbstractConcept it) {
          return c.equals(it);
        }
      });
    }
  };
  private Set<SAbstractConcept> myClassLikeConcepts = null;
  private LanguageRegistry myLangRegistry;
  private SRepository myDeploymentRepo;
  public ClassLikeMenuAdjustment_AppPluginPart() {
  }
  @Override
  public void init() {
    // todo actually this whole thing should be replaced by a custom concept aspect, so that 
    // the filter is like SAbstractConcept.getAspect(ClassLike).isClassLike() 
    ClassLikeMenuAdjustment_AppPluginPart.this.myLangRegistry = getPlatform().findComponent(LanguageRegistry.class);
    ClassLikeMenuAdjustment_AppPluginPart.this.myLangRegistry.addRegistryListener(ClassLikeMenuAdjustment_AppPluginPart.this.myReloadListener);
    ClassLikeMenuAdjustment_AppPluginPart.this.myDeploymentRepo = getPlatform().findComponent(MPSModuleRepository.class);
    CreateRootFilterEP.getInstance().addFilter(ClassLikeMenuAdjustment_AppPluginPart.this.myCondition);
  }
  @Override
  public void dispose() {
    CreateRootFilterEP.getInstance().removeFilter(ClassLikeMenuAdjustment_AppPluginPart.this.myCondition);
    ClassLikeMenuAdjustment_AppPluginPart.this.myLangRegistry.removeRegistryListener(ClassLikeMenuAdjustment_AppPluginPart.this.myReloadListener);
    ClassLikeMenuAdjustment_AppPluginPart.this.myDeploymentRepo = null;
    ClassLikeMenuAdjustment_AppPluginPart.this.myClassLikeConcepts = null;
  }
}
