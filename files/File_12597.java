/**
 * IK ä¸­æ–‡åˆ†è¯?  ç‰ˆæœ¬ 5.0
 * IK Analyzer release 5.0
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * æº?ä»£ç ?ç”±æž—è‰¯ç›Š(linliangyi2005@gmail.com)æ??ä¾›
 * ç‰ˆæ?ƒå£°æ˜Ž 2012ï¼Œä¹Œé¾™èŒ¶å·¥ä½œå®¤
 * provided by Linliangyi and copyright 2012 by Oolong studio
 * 
 */
package org.wltea.analyzer.core;

import java.io.IOException;
import java.io.Reader;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;

import org.wltea.analyzer.cfg.Configuration;
import org.wltea.analyzer.dic.Dictionary;

/**
 * 
 * åˆ†è¯?å™¨ä¸Šä¸‹æ–‡çŠ¶æ€?
 * 
 */
class AnalyzeContext {
	
	//é»˜è®¤ç¼“å†²åŒºå¤§å°?
	private static final int BUFF_SIZE = 4096;
	//ç¼“å†²åŒºè€—å°½çš„ä¸´ç•Œå€¼
	private static final int BUFF_EXHAUST_CRITICAL = 100;	
	
 
	//å­—ç¬¦ä¸²è¯»å?–ç¼“å†²
    private char[] segmentBuff;
    //å­—ç¬¦ç±»åž‹æ•°ç»„
    private int[] charTypes;
    
    
    //è®°å½•Readerå†…å·²åˆ†æž?çš„å­—ä¸²æ€»é•¿åº¦
    //åœ¨åˆ†å¤šæ®µåˆ†æž?è¯?å…ƒæ—¶ï¼Œè¯¥å?˜é‡?ç´¯è®¡å½“å‰?çš„segmentBuffç›¸å¯¹äºŽreaderèµ·å§‹ä½?ç½®çš„ä½?ç§»
	private int buffOffset;	
    //å½“å‰?ç¼“å†²åŒºä½?ç½®æŒ‡é’ˆ
    private int cursor;
    //æœ€è¿‘ä¸€æ¬¡è¯»å…¥çš„,å?¯å¤„ç?†çš„å­—ä¸²é•¿åº¦
	private int available;

	
	//å­?åˆ†è¯?å™¨é”?
    //è¯¥é›†å?ˆé?žç©ºï¼Œè¯´æ˜Žæœ‰å­?åˆ†è¯?å™¨åœ¨å? ç”¨segmentBuff
    private Set<String> buffLocker;
    
    //åŽŸå§‹åˆ†è¯?ç»“æžœé›†å?ˆï¼Œæœªç»?æ­§ä¹‰å¤„ç?†
    private QuickSortSet orgLexemes;    
    //LexemePathä½?ç½®ç´¢å¼•è¡¨
    private Map<Integer , LexemePath> pathMap;    
    //æœ€ç»ˆåˆ†è¯?ç»“æžœé›†
    private LinkedList<Lexeme> results;
	//åˆ†è¯?å™¨é…?ç½®é¡¹
	private Configuration cfg;

    public AnalyzeContext(Configuration configuration){
        this.cfg = configuration;
    	this.segmentBuff = new char[BUFF_SIZE];
    	this.charTypes = new int[BUFF_SIZE];
    	this.buffLocker = new HashSet<String>();
    	this.orgLexemes = new QuickSortSet();
    	this.pathMap = new HashMap<Integer , LexemePath>();    	
    	this.results = new LinkedList<Lexeme>();
    }
    
    int getCursor(){
    	return this.cursor;
    }
    
    char[] getSegmentBuff(){
    	return this.segmentBuff;
    }
    
    char getCurrentChar(){
    	return this.segmentBuff[this.cursor];
    }
    
    int getCurrentCharType(){
    	return this.charTypes[this.cursor];
    }
    
    int getBufferOffset(){
    	return this.buffOffset;
    }
	
    /**
     * æ ¹æ?®contextçš„ä¸Šä¸‹æ–‡æƒ…å†µï¼Œå¡«å……segmentBuff 
     * @param reader
     * @return è¿”å›žå¾…åˆ†æž?çš„ï¼ˆæœ‰æ•ˆçš„ï¼‰å­—ä¸²é•¿åº¦
     * @throws java.io.IOException
     */
    int fillBuffer(Reader reader) throws IOException{
    	int readCount = 0;
    	if(this.buffOffset == 0){
    		//é¦–æ¬¡è¯»å?–reader
    		readCount = reader.read(segmentBuff);
    	}else{
    		int offset = this.available - this.cursor;
    		if(offset > 0){
    			//æœ€è¿‘ä¸€æ¬¡è¯»å?–çš„>æœ€è¿‘ä¸€æ¬¡å¤„ç?†çš„ï¼Œå°†æœªå¤„ç?†çš„å­—ä¸²æ‹·è´?åˆ°segmentBuffå¤´éƒ¨
    			System.arraycopy(this.segmentBuff , this.cursor , this.segmentBuff , 0 , offset);
    			readCount = offset;
    		}
    		//ç»§ç»­è¯»å?–reader ï¼Œä»¥onceReadIn - onceAnalyzedä¸ºèµ·å§‹ä½?ç½®ï¼Œç»§ç»­å¡«å……segmentBuffå‰©ä½™çš„éƒ¨åˆ†
    		readCount += reader.read(this.segmentBuff , offset , BUFF_SIZE - offset);
    	}            	
    	//è®°å½•æœ€å?Žä¸€æ¬¡ä»ŽReaderä¸­è¯»å…¥çš„å?¯ç”¨å­—ç¬¦é•¿åº¦
    	this.available = readCount;
    	//é‡?ç½®å½“å‰?æŒ‡é’ˆ
    	this.cursor = 0;
    	return readCount;
    }

    /**
     * åˆ?å§‹åŒ–buffæŒ‡é’ˆï¼Œå¤„ç?†ç¬¬ä¸€ä¸ªå­—ç¬¦
     */
    void initCursor(){
    	this.cursor = 0;
    	this.segmentBuff[this.cursor] = CharacterUtil.regularize(this.segmentBuff[this.cursor],cfg.isEnableLowercase());
    	this.charTypes[this.cursor] = CharacterUtil.identifyCharType(this.segmentBuff[this.cursor]);
    }
    
    /**
     * æŒ‡é’ˆ+1
     * æˆ?åŠŸè¿”å›ž trueï¼› æŒ‡é’ˆå·²ç»?åˆ°äº†buffå°¾éƒ¨ï¼Œä¸?èƒ½å‰?è¿›ï¼Œè¿”å›žfalse
     * å¹¶å¤„ç?†å½“å‰?å­—ç¬¦
     */
    boolean moveCursor(){
    	if(this.cursor < this.available - 1){
    		this.cursor++;
        	this.segmentBuff[this.cursor] = CharacterUtil.regularize(this.segmentBuff[this.cursor],cfg.isEnableLowercase());
        	this.charTypes[this.cursor] = CharacterUtil.identifyCharType(this.segmentBuff[this.cursor]);
    		return true;
    	}else{
    		return false;
    	}
    }
	
    /**
     * è®¾ç½®å½“å‰?segmentBuffä¸ºé”?å®šçŠ¶æ€?
     * åŠ å…¥å? ç”¨segmentBuffçš„å­?åˆ†è¯?å™¨å??ç§°ï¼Œè¡¨ç¤ºå? ç”¨segmentBuff
     * @param segmenterName
     */
	void lockBuffer(String segmenterName){
		this.buffLocker.add(segmenterName);
	}
	
	/**
	 * ç§»é™¤æŒ‡å®šçš„å­?åˆ†è¯?å™¨å??ï¼Œé‡Šæ”¾å¯¹segmentBuffçš„å? ç”¨
	 * @param segmenterName
	 */
	void unlockBuffer(String segmenterName){
		this.buffLocker.remove(segmenterName);
	}
	
	/**
	 * å?ªè¦?buffLockerä¸­å­˜åœ¨segmenterName
	 * åˆ™bufferè¢«é”?å®š
	 * @return boolean ç¼“å†²åŽ»æ˜¯å?¦è¢«é”?å®š
	 */
	boolean isBufferLocked(){
		return this.buffLocker.size() > 0;
	}

	/**
	 * åˆ¤æ–­å½“å‰?segmentBuffæ˜¯å?¦å·²ç»?ç”¨å®Œ
	 * å½“å‰?æ‰§é’ˆcursorç§»è‡³segmentBuffæœ«ç«¯this.available - 1
	 * @return
	 */
	boolean isBufferConsumed(){
		return this.cursor == this.available - 1;
	}
	
	/**
	 * åˆ¤æ–­segmentBuffæ˜¯å?¦éœ€è¦?è¯»å?–æ–°æ•°æ?®
	 * 
	 * æ»¡è¶³ä¸€ä¸‹æ?¡ä»¶æ—¶ï¼Œ
	 * 1.available == BUFF_SIZE è¡¨ç¤ºbufferæ»¡è½½
	 * 2.buffIndex < available - 1 && buffIndex > available - BUFF_EXHAUST_CRITICALè¡¨ç¤ºå½“å‰?æŒ‡é’ˆå¤„äºŽä¸´ç•ŒåŒºå†…
	 * 3.!context.isBufferLocked()è¡¨ç¤ºæ²¡æœ‰segmenteråœ¨å? ç”¨buffer
	 * è¦?ä¸­æ–­å½“å‰?å¾ªçŽ¯ï¼ˆbufferè¦?è¿›è¡Œç§»ä½?ï¼Œå¹¶å†?è¯»å?–æ•°æ?®çš„æ“?ä½œï¼‰
	 * @return
	 */
	boolean needRefillBuffer(){
		return this.available == BUFF_SIZE 
			&& this.cursor < this.available - 1   
			&& this.cursor  > this.available - BUFF_EXHAUST_CRITICAL
			&& !this.isBufferLocked();
	}
	
	/**
	 * ç´¯è®¡å½“å‰?çš„segmentBuffç›¸å¯¹äºŽreaderèµ·å§‹ä½?ç½®çš„ä½?ç§»
	 */
	void markBufferOffset(){
		this.buffOffset += this.cursor;
	}
	
	/**
	 * å?‘åˆ†è¯?ç»“æžœé›†æ·»åŠ è¯?å…ƒ
	 * @param lexeme
	 */
	void addLexeme(Lexeme lexeme){
		this.orgLexemes.addLexeme(lexeme);
	}
	
	/**
	 * æ·»åŠ åˆ†è¯?ç»“æžœè·¯å¾„
	 * è·¯å¾„èµ·å§‹ä½?ç½® ---> è·¯å¾„ æ˜ å°„è¡¨
	 * @param path
	 */
	void addLexemePath(LexemePath path){
		if(path != null){
			this.pathMap.put(path.getPathBegin(), path);
		}
	}
	
	
	/**
	 * è¿”å›žåŽŸå§‹åˆ†è¯?ç»“æžœ
	 * @return
	 */
	QuickSortSet getOrgLexemes(){
		return this.orgLexemes;
	}
	
	/**
	 * æŽ¨é€?åˆ†è¯?ç»“æžœåˆ°ç»“æžœé›†å?ˆ
	 * 1.ä»Žbuffå¤´éƒ¨é??åŽ†åˆ°this.cursorå·²å¤„ç?†ä½?ç½®
	 * 2.å°†mapä¸­å­˜åœ¨çš„åˆ†è¯?ç»“æžœæŽ¨å…¥results
	 * 3.å°†mapä¸­ä¸?å­˜åœ¨çš„CJDKå­—ç¬¦ä»¥å?•å­—æ–¹å¼?æŽ¨å…¥results
	 */
	void outputToResult(){
		int index = 0;
		for( ; index <= this.cursor ;){
			//è·³è¿‡é?žCJKå­—ç¬¦
			if(CharacterUtil.CHAR_USELESS == this.charTypes[index]){
				index++;
				continue;
			}
			//ä»ŽpathMapæ‰¾å‡ºå¯¹åº”indexä½?ç½®çš„LexemePath
			LexemePath path = this.pathMap.get(index);
			if(path != null){
				//è¾“å‡ºLexemePathä¸­çš„lexemeåˆ°resultsé›†å?ˆ
				Lexeme l = path.pollFirst();
				while(l != null){
					this.results.add(l);
					//å­—å…¸ä¸­æ— å?•å­—ï¼Œä½†æ˜¯è¯?å…ƒå†²çª?äº†ï¼Œåˆ‡åˆ†å‡ºç›¸äº¤è¯?å…ƒçš„å‰?ä¸€ä¸ªè¯?å…ƒä¸­çš„å?•å­—
					/*int innerIndex = index + 1;
					for (; innerIndex < index + l.getLength(); innerIndex++) {
						Lexeme innerL = path.peekFirst();
						if (innerL != null && innerIndex == innerL.getBegin()) {
							this.outputSingleCJK(innerIndex - 1);
						}
					}*/
					
					//å°†indexç§»è‡³lexemeå?Ž
					index = l.getBegin() + l.getLength();					
					l = path.pollFirst();
					if(l != null){
						//è¾“å‡ºpathå†…éƒ¨ï¼Œè¯?å…ƒé—´é?—æ¼?çš„å?•å­—
						for(;index < l.getBegin();index++){
							this.outputSingleCJK(index);
						}
					}
				}
			}else{//pathMapä¸­æ‰¾ä¸?åˆ°indexå¯¹åº”çš„LexemePath
				//å?•å­—è¾“å‡º
				this.outputSingleCJK(index);
				index++;
			}
		}
		//æ¸…ç©ºå½“å‰?çš„Map
		this.pathMap.clear();
	}
	
	/**
	 * å¯¹CJKå­—ç¬¦è¿›è¡Œå?•å­—è¾“å‡º
	 * @param index
	 */
	private void outputSingleCJK(int index){
		if(CharacterUtil.CHAR_CHINESE == this.charTypes[index]){			
			Lexeme singleCharLexeme = new Lexeme(this.buffOffset , index , 1 , Lexeme.TYPE_CNCHAR);
			this.results.add(singleCharLexeme);
		}else if(CharacterUtil.CHAR_OTHER_CJK == this.charTypes[index]){
			Lexeme singleCharLexeme = new Lexeme(this.buffOffset , index , 1 , Lexeme.TYPE_OTHER_CJK);
			this.results.add(singleCharLexeme);
		}
	}
		
	/**
	 * è¿”å›žlexeme 
	 * 
	 * å?Œæ—¶å¤„ç?†å?ˆå¹¶
	 * @return
	 */
	Lexeme getNextLexeme(){
		//ä»Žç»“æžœé›†å?–å‡ºï¼Œå¹¶ç§»é™¤ç¬¬ä¸€ä¸ªLexme
		Lexeme result = this.results.pollFirst();
		while(result != null){
    		//æ•°é‡?è¯?å?ˆå¹¶
    		this.compound(result);
    		if(Dictionary.getSingleton().isStopWord(this.segmentBuff ,  result.getBegin() , result.getLength())){
       			//æ˜¯å?œæ­¢è¯?ç»§ç»­å?–åˆ—è¡¨çš„ä¸‹ä¸€ä¸ª
    			result = this.results.pollFirst(); 				
    		}else{
	 			//ä¸?æ˜¯å?œæ­¢è¯?, ç”Ÿæˆ?lexemeçš„è¯?å…ƒæ–‡æœ¬,è¾“å‡º
	    		result.setLexemeText(String.valueOf(segmentBuff , result.getBegin() , result.getLength()));
	    		break;
    		}
		}
		return result;
	}
	
	/**
	 * é‡?ç½®åˆ†è¯?ä¸Šä¸‹æ–‡çŠ¶æ€?
	 */
	void reset(){		
		this.buffLocker.clear();
        this.orgLexemes = new QuickSortSet();
        this.available =0;
        this.buffOffset = 0;
    	this.charTypes = new int[BUFF_SIZE];
    	this.cursor = 0;
    	this.results.clear();
    	this.segmentBuff = new char[BUFF_SIZE];
    	this.pathMap.clear();
	}
	
	/**
	 * ç»„å?ˆè¯?å…ƒ
	 */
	private void compound(Lexeme result){

		if(!this.cfg.isUseSmart()){
			return ;
		}
   		//æ•°é‡?è¯?å?ˆå¹¶å¤„ç?†
		if(!this.results.isEmpty()){

			if(Lexeme.TYPE_ARABIC == result.getLexemeType()){
				Lexeme nextLexeme = this.results.peekFirst();
				boolean appendOk = false;
				if(Lexeme.TYPE_CNUM == nextLexeme.getLexemeType()){
					//å?ˆå¹¶è‹±æ–‡æ•°è¯?+ä¸­æ–‡æ•°è¯?
					appendOk = result.append(nextLexeme, Lexeme.TYPE_CNUM);
				}else if(Lexeme.TYPE_COUNT == nextLexeme.getLexemeType()){
					//å?ˆå¹¶è‹±æ–‡æ•°è¯?+ä¸­æ–‡é‡?è¯?
					appendOk = result.append(nextLexeme, Lexeme.TYPE_CQUAN);
				}
				if(appendOk){
					//å¼¹å‡º
					this.results.pollFirst(); 
				}
			}
			
			//å?¯èƒ½å­˜åœ¨ç¬¬äºŒè½®å?ˆå¹¶
			if(Lexeme.TYPE_CNUM == result.getLexemeType() && !this.results.isEmpty()){
				Lexeme nextLexeme = this.results.peekFirst();
				boolean appendOk = false;
				 if(Lexeme.TYPE_COUNT == nextLexeme.getLexemeType()){
					 //å?ˆå¹¶ä¸­æ–‡æ•°è¯?+ä¸­æ–‡é‡?è¯?
 					appendOk = result.append(nextLexeme, Lexeme.TYPE_CQUAN);
 				}  
				if(appendOk){
					//å¼¹å‡º
					this.results.pollFirst();   				
				}
			}

		}
	}
	
}
