/*Copyright Â©2016 TommyLemon(https://github.com/TommyLemon/APIJSON)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.*/

package apijson.demo.server;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;
import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;

import zuo.biao.apijson.Log;


/**SpringBootApplication
 * å?³é”®è¿™ä¸ªç±» > Run As > Java Application
 * @author Lemon
 */
@Configuration
@SpringBootApplication
public class APIJSONApplication {

	public static void main(String[] args) throws Exception {
		SpringApplication.run(APIJSONApplication.class, args);

		Log.DEBUG = true; //ä¸Šçº¿ç”Ÿäº§çŽ¯å¢ƒå‰?æ”¹ä¸º falseï¼Œå?¯ä¸?è¾“å‡º APIJSONORM çš„æ—¥å¿— ä»¥å?Š SQLException çš„åŽŸå§‹(æ•?æ„Ÿ)ä¿¡æ?¯
		
		System.out.println("\n\n\n\n\n<<<<<<<<<<<<<<<<<<<<<<<<< APIJSON >>>>>>>>>>>>>>>>>>>>>>>>\n");
		System.out.println("å¼€å§‹æµ‹è¯•:è¿œç¨‹å‡½æ•° <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");
		try {
			DemoFunction.test();
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println("\nå®Œæˆ?æµ‹è¯•:è¿œç¨‹å‡½æ•° >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");


		System.out.println("\n\n\nå¼€å§‹æµ‹è¯•:è¯·æ±‚æ ¡éªŒ <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");
		try {
			StructureUtil.test();
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println("\nå®Œæˆ?æµ‹è¯•:è¯·æ±‚æ ¡éªŒ >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");

		System.out.println("\n\n<<<<<<<<<<<<<<<<<<<<<<<<< APIJSONå·²å?¯åŠ¨ >>>>>>>>>>>>>>>>>>>>>>>>\n");
	}


	@Bean
	public EmbeddedServletContainerCustomizer containerCustomizer() {
		return new EmbeddedServletContainerCustomizer() {

			@Override
			public void customize(ConfigurableEmbeddedServletContainer container) {
				container.setPort(8080); //è‡ªå®šä¹‰ç«¯å?£å?·ï¼Œå¦‚æžœå’Œ TiDB ç­‰å…¶å®ƒç¨‹åº?ç«¯å?£æœ‰å†²çª?ï¼Œå?¯æ”¹ä¸º 8081, 9090, 9091 ç­‰æœªè¢«å? ç”¨çš„ç«¯å?£ 	
			}
		};
	}

	//æ”¯æŒ?JavaScriptè·¨åŸŸè¯·æ±‚<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	/** 
	 * è·¨åŸŸè¿‡æ»¤å™¨ 
	 * @return 
	 */  
	@Bean  
	public CorsFilter corsFilter() {  
		UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();  
		source.registerCorsConfiguration("/**", buildConfig());
		return new CorsFilter(source);  
	}  
	/**CORSè·¨åŸŸé…?ç½®
	 * @return
	 */
	private CorsConfiguration buildConfig() {  
		CorsConfiguration corsConfiguration = new CorsConfiguration();  
		corsConfiguration.addAllowedOrigin("*"); //å…?è®¸çš„åŸŸå??æˆ–IPåœ°å?€
		corsConfiguration.addAllowedHeader("*"); //å…?è®¸çš„è¯·æ±‚å¤´
		corsConfiguration.addAllowedMethod("*"); //å…?è®¸çš„HTTPè¯·æ±‚æ–¹æ³•
		corsConfiguration.setAllowCredentials(true); //å…?è®¸å?‘é€?è·¨åŸŸå‡­æ?®ï¼Œå‰?ç«¯Axioså­˜å?–JSESSIONIDå¿…é¡»è¦?
		return corsConfiguration;  
	}  
	//æ”¯æŒ?JavaScriptè·¨åŸŸè¯·æ±‚ >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

}
