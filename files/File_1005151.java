package org.jeecgframework.core.util;

import java.beans.PropertyEditorSupport;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import org.springframework.util.StringUtils;

/**
 * 
 * ç±»æ??è¿°ï¼šæ—¶é—´æ“?ä½œå®šä¹‰ç±»
 * 
 * @author:  å¼ ä»£æµ©
 * @dateï¼š æ—¥æœŸï¼š2012-12-8 æ—¶é—´ï¼šä¸‹å?ˆ12:15:03
 * @version 1.0
 */
public class DateUtils extends PropertyEditorSupport {
	// å?„ç§?æ—¶é—´æ ¼å¼?
	public static final SimpleDateFormat date_sdf = new SimpleDateFormat(
			"yyyy-MM-dd");
	// å?„ç§?æ—¶é—´æ ¼å¼?
	public static final SimpleDateFormat yyyyMMdd = new SimpleDateFormat(
			"yyyyMMdd");
	// å?„ç§?æ—¶é—´æ ¼å¼?
	public static final SimpleDateFormat date_sdf_wz = new SimpleDateFormat(
			"yyyyå¹´MMæœˆddæ—¥");
	public static final SimpleDateFormat time_sdf = new SimpleDateFormat(
			"yyyy-MM-dd HH:mm");
	public static final SimpleDateFormat yyyymmddhhmmss = new SimpleDateFormat(
	"yyyyMMddHHmmss");
	public static final SimpleDateFormat short_time_sdf = new SimpleDateFormat(
			"HH:mm");
	public static final  SimpleDateFormat datetimeFormat = new SimpleDateFormat(
	"yyyy-MM-dd HH:mm:ss");
	// ä»¥æ¯«ç§’è¡¨ç¤ºçš„æ—¶é—´
	private static final long DAY_IN_MILLIS = 24 * 3600 * 1000;
	private static final long HOUR_IN_MILLIS = 3600 * 1000;
	private static final long MINUTE_IN_MILLIS = 60 * 1000;
	private static final long SECOND_IN_MILLIS = 1000;
	// æŒ‡å®šæ¨¡å¼?çš„æ—¶é—´æ ¼å¼?
	private static SimpleDateFormat getSDFormat(String pattern) {
		return new SimpleDateFormat(pattern);
	}

	/**
	 * å½“å‰?æ—¥åŽ†ï¼Œè¿™é‡Œç”¨ä¸­å›½æ—¶é—´è¡¨ç¤º
	 * 
	 * @return ä»¥å½“åœ°æ—¶åŒºè¡¨ç¤ºçš„ç³»ç»Ÿå½“å‰?æ—¥åŽ†
	 */
	public static Calendar getCalendar() {
		return Calendar.getInstance();
	}

	/**
	 * æŒ‡å®šæ¯«ç§’æ•°è¡¨ç¤ºçš„æ—¥åŽ†
	 * 
	 * @param millis
	 *            æ¯«ç§’æ•°
	 * @return æŒ‡å®šæ¯«ç§’æ•°è¡¨ç¤ºçš„æ—¥åŽ†
	 */
	public static Calendar getCalendar(long millis) {
		Calendar cal = Calendar.getInstance();
		cal.setTime(new Date(millis));
		return cal;
	}

	// ////////////////////////////////////////////////////////////////////////////
	// getDate
	// å?„ç§?æ–¹å¼?èŽ·å?–çš„Date
	// ////////////////////////////////////////////////////////////////////////////

	/**
	 * å½“å‰?æ—¥æœŸ
	 * 
	 * @return ç³»ç»Ÿå½“å‰?æ—¶é—´
	 */
	public static Date getDate() {
		return new Date();
	}

	/**
	 * æŒ‡å®šæ¯«ç§’æ•°è¡¨ç¤ºçš„æ—¥æœŸ
	 * 
	 * @param millis
	 *            æ¯«ç§’æ•°
	 * @return æŒ‡å®šæ¯«ç§’æ•°è¡¨ç¤ºçš„æ—¥æœŸ
	 */
	public static Date getDate(long millis) {
		return new Date(millis);
	}

	/**
	 * æ—¶é—´æˆ³è½¬æ?¢ä¸ºå­—ç¬¦ä¸²
	 * 
	 * @param time
	 * @return
	 */
	public static String timestamptoStr(Timestamp time) {
		Date date = null;
		if (null != time) {
			date = new Date(time.getTime());
		}
		return date2Str(date_sdf);
	}

	/**
	 * å­—ç¬¦ä¸²è½¬æ?¢æ—¶é—´æˆ³
	 * 
	 * @param str
	 * @return
	 */
	public static Timestamp str2Timestamp(String str) {
		Date date = str2Date(str, date_sdf);
		return new Timestamp(date.getTime());
	}
	/**
	 * å­—ç¬¦ä¸²è½¬æ?¢æˆ?æ—¥æœŸ
	 * @param str
	 * @param sdf
	 * @return
	 */
	public static Date str2Date(String str, SimpleDateFormat sdf) {
		if (null == str || "".equals(str)) {
			return null;
		}
		Date date = null;
		try {
			date = sdf.parse(str);
			return date;
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * æ—¥æœŸè½¬æ?¢ä¸ºå­—ç¬¦ä¸²
	 * 
	 * @param date
	 *            æ—¥æœŸ
	 * @param format
	 *            æ—¥æœŸæ ¼å¼?
	 * @return å­—ç¬¦ä¸²
	 */
	public static String date2Str(SimpleDateFormat date_sdf) {
		Date date=getDate();
		if (null == date) {
			return null;
		}
		return date_sdf.format(date);
	}
	/**
	 * æ ¼å¼?åŒ–æ—¶é—´
	 * @param date
	 * @param format
	 * @return
	 */
	public static String dateformat(String date,String format)
	{
		SimpleDateFormat sformat = new SimpleDateFormat(format);
		Date _date=null;
		try {
			 _date=sformat.parse(date);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return sformat.format(_date);
	}
	/**
	 * æ—¥æœŸè½¬æ?¢ä¸ºå­—ç¬¦ä¸²
	 * 
	 * @param date
	 *            æ—¥æœŸ
	 * @param format
	 *            æ—¥æœŸæ ¼å¼?
	 * @return å­—ç¬¦ä¸²
	 */
	public static String date2Str(Date date, SimpleDateFormat date_sdf) {
		if (null == date) {
			return null;
		}
		return date_sdf.format(date);
	}
	/**
	 * æ—¥æœŸè½¬æ?¢ä¸ºå­—ç¬¦ä¸²
	 * 
	 * @param date
	 *            æ—¥æœŸ
	 * @param format
	 *            æ—¥æœŸæ ¼å¼?
	 * @return å­—ç¬¦ä¸²
	 */
	public static String getDate(String format) {
		Date date=new Date();
		if (null == date) {
			return null;
		}
		SimpleDateFormat sdf = new SimpleDateFormat(format);
		return sdf.format(date);
	}

	/**
	 * æŒ‡å®šæ¯«ç§’æ•°çš„æ—¶é—´æˆ³
	 * 
	 * @param millis
	 *            æ¯«ç§’æ•°
	 * @return æŒ‡å®šæ¯«ç§’æ•°çš„æ—¶é—´æˆ³
	 */
	public static Timestamp getTimestamp(long millis) {
		return new Timestamp(millis);
	}

	/**
	 * ä»¥å­—ç¬¦å½¢å¼?è¡¨ç¤ºçš„æ—¶é—´æˆ³
	 * 
	 * @param time
	 *            æ¯«ç§’æ•°
	 * @return ä»¥å­—ç¬¦å½¢å¼?è¡¨ç¤ºçš„æ—¶é—´æˆ³
	 */
	public static Timestamp getTimestamp(String time) {
		return new Timestamp(Long.parseLong(time));
	}

	/**
	 * ç³»ç»Ÿå½“å‰?çš„æ—¶é—´æˆ³
	 * 
	 * @return ç³»ç»Ÿå½“å‰?çš„æ—¶é—´æˆ³
	 */
	public static Timestamp getTimestamp() {
		return new Timestamp(new Date().getTime());
	}

	/**
	 * æŒ‡å®šæ—¥æœŸçš„æ—¶é—´æˆ³
	 * 
	 * @param date
	 *            æŒ‡å®šæ—¥æœŸ
	 * @return æŒ‡å®šæ—¥æœŸçš„æ—¶é—´æˆ³
	 */
	public static Timestamp getTimestamp(Date date) {
		return new Timestamp(date.getTime());
	}

	/**
	 * æŒ‡å®šæ—¥åŽ†çš„æ—¶é—´æˆ³
	 * 
	 * @param cal
	 *            æŒ‡å®šæ—¥åŽ†
	 * @return æŒ‡å®šæ—¥åŽ†çš„æ—¶é—´æˆ³
	 */
	public static Timestamp getCalendarTimestamp(Calendar cal) {
		return new Timestamp(cal.getTime().getTime());
	}

	public static Timestamp gettimestamp() {
		Date dt = new Date();
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String nowTime = df.format(dt);
		java.sql.Timestamp buydate = java.sql.Timestamp.valueOf(nowTime);
		return buydate;
	}

	// ////////////////////////////////////////////////////////////////////////////
	// getMillis
	// å?„ç§?æ–¹å¼?èŽ·å?–çš„Millis
	// ////////////////////////////////////////////////////////////////////////////

	/**
	 * ç³»ç»Ÿæ—¶é—´çš„æ¯«ç§’æ•°
	 * 
	 * @return ç³»ç»Ÿæ—¶é—´çš„æ¯«ç§’æ•°
	 */
	public static long getMillis() {
		return new Date().getTime();
	}

	/**
	 * æŒ‡å®šæ—¥åŽ†çš„æ¯«ç§’æ•°
	 * 
	 * @param cal
	 *            æŒ‡å®šæ—¥åŽ†
	 * @return æŒ‡å®šæ—¥åŽ†çš„æ¯«ç§’æ•°
	 */
	public static long getMillis(Calendar cal) {
		return cal.getTime().getTime();
	}

	/**
	 * æŒ‡å®šæ—¥æœŸçš„æ¯«ç§’æ•°
	 * 
	 * @param date
	 *            æŒ‡å®šæ—¥æœŸ
	 * @return æŒ‡å®šæ—¥æœŸçš„æ¯«ç§’æ•°
	 */
	public static long getMillis(Date date) {
		return date.getTime();
	}

	/**
	 * æŒ‡å®šæ—¶é—´æˆ³çš„æ¯«ç§’æ•°
	 * 
	 * @param ts
	 *            æŒ‡å®šæ—¶é—´æˆ³
	 * @return æŒ‡å®šæ—¶é—´æˆ³çš„æ¯«ç§’æ•°
	 */
	public static long getMillis(Timestamp ts) {
		return ts.getTime();
	}

	// ////////////////////////////////////////////////////////////////////////////
	// formatDate
	// å°†æ—¥æœŸæŒ‰ç…§ä¸€å®šçš„æ ¼å¼?è½¬åŒ–ä¸ºå­—ç¬¦ä¸²
	// ////////////////////////////////////////////////////////////////////////////

	/**
	 * é»˜è®¤æ–¹å¼?è¡¨ç¤ºçš„ç³»ç»Ÿå½“å‰?æ—¥æœŸï¼Œå…·ä½“æ ¼å¼?ï¼šå¹´-æœˆ-æ—¥
	 * 
	 * @return é»˜è®¤æ—¥æœŸæŒ‰â€œå¹´-æœˆ-æ—¥â€œæ ¼å¼?æ˜¾ç¤º
	 */
	public static String formatDate() {
		return date_sdf.format(getCalendar().getTime());
	}
	
	/**
	 * é»˜è®¤æ–¹å¼?è¡¨ç¤ºçš„ç³»ç»Ÿå½“å‰?æ—¥æœŸï¼Œå…·ä½“æ ¼å¼?ï¼šyyyy-MM-dd HH:mm:ss
	 * 
	 * @return é»˜è®¤æ—¥æœŸæŒ‰â€œyyyy-MM-dd HH:mm:ssâ€œæ ¼å¼?æ˜¾ç¤º
	 */
	public static String formatDateTime() {
		return datetimeFormat.format(getCalendar().getTime());
	}
	/**
	 * èŽ·å?–æ—¶é—´å­—ç¬¦ä¸²
	 */
	public static String getDataString(SimpleDateFormat formatstr) {
		return formatstr.format(getCalendar().getTime());
	}
	/**
	 * æŒ‡å®šæ—¥æœŸçš„é»˜è®¤æ˜¾ç¤ºï¼Œå…·ä½“æ ¼å¼?ï¼šå¹´-æœˆ-æ—¥
	 * 
	 * @param cal
	 *            æŒ‡å®šçš„æ—¥æœŸ
	 * @return æŒ‡å®šæ—¥æœŸæŒ‰â€œå¹´-æœˆ-æ—¥â€œæ ¼å¼?æ˜¾ç¤º
	 */
	public static String formatDate(Calendar cal) {
		return date_sdf.format(cal.getTime());
	}

	/**
	 * æŒ‡å®šæ—¥æœŸçš„é»˜è®¤æ˜¾ç¤ºï¼Œå…·ä½“æ ¼å¼?ï¼šå¹´-æœˆ-æ—¥
	 * 
	 * @param date
	 *            æŒ‡å®šçš„æ—¥æœŸ
	 * @return æŒ‡å®šæ—¥æœŸæŒ‰â€œå¹´-æœˆ-æ—¥â€œæ ¼å¼?æ˜¾ç¤º
	 */
	public static String formatDate(Date date) {
		return date_sdf.format(date);
	}

	/**
	 * æŒ‡å®šæ¯«ç§’æ•°è¡¨ç¤ºæ—¥æœŸçš„é»˜è®¤æ˜¾ç¤ºï¼Œå…·ä½“æ ¼å¼?ï¼šå¹´-æœˆ-æ—¥
	 * 
	 * @param millis
	 *            æŒ‡å®šçš„æ¯«ç§’æ•°
	 * @return æŒ‡å®šæ¯«ç§’æ•°è¡¨ç¤ºæ—¥æœŸæŒ‰â€œå¹´-æœˆ-æ—¥â€œæ ¼å¼?æ˜¾ç¤º
	 */
	public static String formatDate(long millis) {
		return date_sdf.format(new Date(millis));
	}

	/**
	 * é»˜è®¤æ—¥æœŸæŒ‰æŒ‡å®šæ ¼å¼?æ˜¾ç¤º
	 * 
	 * @param pattern
	 *            æŒ‡å®šçš„æ ¼å¼?
	 * @return é»˜è®¤æ—¥æœŸæŒ‰æŒ‡å®šæ ¼å¼?æ˜¾ç¤º
	 */
	public static String formatDate(String pattern) {
		return getSDFormat(pattern).format(getCalendar().getTime());
	}

	/**
	 * æŒ‡å®šæ—¥æœŸæŒ‰æŒ‡å®šæ ¼å¼?æ˜¾ç¤º
	 * 
	 * @param cal
	 *            æŒ‡å®šçš„æ—¥æœŸ
	 * @param pattern
	 *            æŒ‡å®šçš„æ ¼å¼?
	 * @return æŒ‡å®šæ—¥æœŸæŒ‰æŒ‡å®šæ ¼å¼?æ˜¾ç¤º
	 */
	public static String formatDate(Calendar cal, String pattern) {
		return getSDFormat(pattern).format(cal.getTime());
	}

	/**
	 * æŒ‡å®šæ—¥æœŸæŒ‰æŒ‡å®šæ ¼å¼?æ˜¾ç¤º
	 * 
	 * @param date
	 *            æŒ‡å®šçš„æ—¥æœŸ
	 * @param pattern
	 *            æŒ‡å®šçš„æ ¼å¼?
	 * @return æŒ‡å®šæ—¥æœŸæŒ‰æŒ‡å®šæ ¼å¼?æ˜¾ç¤º
	 */
	public static String formatDate(Date date, String pattern) {
		return getSDFormat(pattern).format(date);
	}

	// ////////////////////////////////////////////////////////////////////////////
	// formatTime
	// å°†æ—¥æœŸæŒ‰ç…§ä¸€å®šçš„æ ¼å¼?è½¬åŒ–ä¸ºå­—ç¬¦ä¸²
	// ////////////////////////////////////////////////////////////////////////////

	/**
	 * é»˜è®¤æ–¹å¼?è¡¨ç¤ºçš„ç³»ç»Ÿå½“å‰?æ—¥æœŸï¼Œå…·ä½“æ ¼å¼?ï¼šå¹´-æœˆ-æ—¥ æ—¶ï¼šåˆ†
	 * 
	 * @return é»˜è®¤æ—¥æœŸæŒ‰â€œå¹´-æœˆ-æ—¥ æ—¶ï¼šåˆ†â€œæ ¼å¼?æ˜¾ç¤º
	 */
	public static String formatTime() {
		return time_sdf.format(getCalendar().getTime());
	}

	/**
	 * æŒ‡å®šæ¯«ç§’æ•°è¡¨ç¤ºæ—¥æœŸçš„é»˜è®¤æ˜¾ç¤ºï¼Œå…·ä½“æ ¼å¼?ï¼šå¹´-æœˆ-æ—¥ æ—¶ï¼šåˆ†
	 * 
	 * @param millis
	 *            æŒ‡å®šçš„æ¯«ç§’æ•°
	 * @return æŒ‡å®šæ¯«ç§’æ•°è¡¨ç¤ºæ—¥æœŸæŒ‰â€œå¹´-æœˆ-æ—¥ æ—¶ï¼šåˆ†â€œæ ¼å¼?æ˜¾ç¤º
	 */
	public static String formatTime(long millis) {
		return time_sdf.format(new Date(millis));
	}

	/**
	 * æŒ‡å®šæ—¥æœŸçš„é»˜è®¤æ˜¾ç¤ºï¼Œå…·ä½“æ ¼å¼?ï¼šå¹´-æœˆ-æ—¥ æ—¶ï¼šåˆ†
	 * 
	 * @param cal
	 *            æŒ‡å®šçš„æ—¥æœŸ
	 * @return æŒ‡å®šæ—¥æœŸæŒ‰â€œå¹´-æœˆ-æ—¥ æ—¶ï¼šåˆ†â€œæ ¼å¼?æ˜¾ç¤º
	 */
	public static String formatTime(Calendar cal) {
		return time_sdf.format(cal.getTime());
	}

	/**
	 * æŒ‡å®šæ—¥æœŸçš„é»˜è®¤æ˜¾ç¤ºï¼Œå…·ä½“æ ¼å¼?ï¼šå¹´-æœˆ-æ—¥ æ—¶ï¼šåˆ†
	 * 
	 * @param date
	 *            æŒ‡å®šçš„æ—¥æœŸ
	 * @return æŒ‡å®šæ—¥æœŸæŒ‰â€œå¹´-æœˆ-æ—¥ æ—¶ï¼šåˆ†â€œæ ¼å¼?æ˜¾ç¤º
	 */
	public static String formatTime(Date date) {
		return time_sdf.format(date);
	}

	// ////////////////////////////////////////////////////////////////////////////
	// formatShortTime
	// å°†æ—¥æœŸæŒ‰ç…§ä¸€å®šçš„æ ¼å¼?è½¬åŒ–ä¸ºå­—ç¬¦ä¸²
	// ////////////////////////////////////////////////////////////////////////////

	/**
	 * é»˜è®¤æ–¹å¼?è¡¨ç¤ºçš„ç³»ç»Ÿå½“å‰?æ—¥æœŸï¼Œå…·ä½“æ ¼å¼?ï¼šæ—¶ï¼šåˆ†
	 * 
	 * @return é»˜è®¤æ—¥æœŸæŒ‰â€œæ—¶ï¼šåˆ†â€œæ ¼å¼?æ˜¾ç¤º
	 */
	public static String formatShortTime() {
		return short_time_sdf.format(getCalendar().getTime());
	}

	/**
	 * æŒ‡å®šæ¯«ç§’æ•°è¡¨ç¤ºæ—¥æœŸçš„é»˜è®¤æ˜¾ç¤ºï¼Œå…·ä½“æ ¼å¼?ï¼šæ—¶ï¼šåˆ†
	 * 
	 * @param millis
	 *            æŒ‡å®šçš„æ¯«ç§’æ•°
	 * @return æŒ‡å®šæ¯«ç§’æ•°è¡¨ç¤ºæ—¥æœŸæŒ‰â€œæ—¶ï¼šåˆ†â€œæ ¼å¼?æ˜¾ç¤º
	 */
	public static String formatShortTime(long millis) {
		return short_time_sdf.format(new Date(millis));
	}

	/**
	 * æŒ‡å®šæ—¥æœŸçš„é»˜è®¤æ˜¾ç¤ºï¼Œå…·ä½“æ ¼å¼?ï¼šæ—¶ï¼šåˆ†
	 * 
	 * @param cal
	 *            æŒ‡å®šçš„æ—¥æœŸ
	 * @return æŒ‡å®šæ—¥æœŸæŒ‰â€œæ—¶ï¼šåˆ†â€œæ ¼å¼?æ˜¾ç¤º
	 */
	public static String formatShortTime(Calendar cal) {
		return short_time_sdf.format(cal.getTime());
	}

	/**
	 * æŒ‡å®šæ—¥æœŸçš„é»˜è®¤æ˜¾ç¤ºï¼Œå…·ä½“æ ¼å¼?ï¼šæ—¶ï¼šåˆ†
	 * 
	 * @param date
	 *            æŒ‡å®šçš„æ—¥æœŸ
	 * @return æŒ‡å®šæ—¥æœŸæŒ‰â€œæ—¶ï¼šåˆ†â€œæ ¼å¼?æ˜¾ç¤º
	 */
	public static String formatShortTime(Date date) {
		return short_time_sdf.format(date);
	}

	// ////////////////////////////////////////////////////////////////////////////
	// parseDate
	// parseCalendar
	// parseTimestamp
	// å°†å­—ç¬¦ä¸²æŒ‰ç…§ä¸€å®šçš„æ ¼å¼?è½¬åŒ–ä¸ºæ—¥æœŸæˆ–æ—¶é—´
	// ////////////////////////////////////////////////////////////////////////////

	/**
	 * æ ¹æ?®æŒ‡å®šçš„æ ¼å¼?å°†å­—ç¬¦ä¸²è½¬æ?¢æˆ?Date å¦‚è¾“å…¥ï¼š2003-11-19 11:20:20å°†æŒ‰ç…§è¿™ä¸ªè½¬æˆ?æ—¶é—´
	 * 
	 * @param src
	 *            å°†è¦?è½¬æ?¢çš„åŽŸå§‹å­—ç¬¦çªœ
	 * @param pattern
	 *            è½¬æ?¢çš„åŒ¹é…?æ ¼å¼?
	 * @return å¦‚æžœè½¬æ?¢æˆ?åŠŸåˆ™è¿”å›žè½¬æ?¢å?Žçš„æ—¥æœŸ
	 * @throws ParseException
	 * @throws AIDateFormatException
	 */
	public static Date parseDate(String src, String pattern)
			throws ParseException {
		return getSDFormat(pattern).parse(src);

	}

	/**
	 * æ ¹æ?®æŒ‡å®šçš„æ ¼å¼?å°†å­—ç¬¦ä¸²è½¬æ?¢æˆ?Date å¦‚è¾“å…¥ï¼š2003-11-19 11:20:20å°†æŒ‰ç…§è¿™ä¸ªè½¬æˆ?æ—¶é—´
	 * 
	 * @param src
	 *            å°†è¦?è½¬æ?¢çš„åŽŸå§‹å­—ç¬¦çªœ
	 * @param pattern
	 *            è½¬æ?¢çš„åŒ¹é…?æ ¼å¼?
	 * @return å¦‚æžœè½¬æ?¢æˆ?åŠŸåˆ™è¿”å›žè½¬æ?¢å?Žçš„æ—¥æœŸ
	 * @throws ParseException
	 * @throws AIDateFormatException
	 */
	public static Calendar parseCalendar(String src, String pattern)
			throws ParseException {

		Date date = parseDate(src, pattern);
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		return cal;
	}

	public static String formatAddDate(String src, String pattern, int amount)
			throws ParseException {
		Calendar cal;
		cal = parseCalendar(src, pattern);
		cal.add(Calendar.DATE, amount);
		return formatDate(cal);
	}

	/**
	 * æ ¹æ?®æŒ‡å®šçš„æ ¼å¼?å°†å­—ç¬¦ä¸²è½¬æ?¢æˆ?Date å¦‚è¾“å…¥ï¼š2003-11-19 11:20:20å°†æŒ‰ç…§è¿™ä¸ªè½¬æˆ?æ—¶é—´
	 * 
	 * @param src
	 *            å°†è¦?è½¬æ?¢çš„åŽŸå§‹å­—ç¬¦çªœ
	 * @param pattern
	 *            è½¬æ?¢çš„åŒ¹é…?æ ¼å¼?
	 * @return å¦‚æžœè½¬æ?¢æˆ?åŠŸåˆ™è¿”å›žè½¬æ?¢å?Žçš„æ—¶é—´æˆ³
	 * @throws ParseException
	 * @throws AIDateFormatException
	 */
	public static Timestamp parseTimestamp(String src, String pattern)
			throws ParseException {
		Date date = parseDate(src, pattern);
		return new Timestamp(date.getTime());
	}

	// ////////////////////////////////////////////////////////////////////////////
	// dateDiff
	// è®¡ç®—ä¸¤ä¸ªæ—¥æœŸä¹‹é—´çš„å·®å€¼
	// ////////////////////////////////////////////////////////////////////////////

	/**
	 * è®¡ç®—ä¸¤ä¸ªæ—¶é—´ä¹‹é—´çš„å·®å€¼ï¼Œæ ¹æ?®æ ‡å¿—çš„ä¸?å?Œè€Œä¸?å?Œ
	 * 
	 * @param flag
	 *            è®¡ç®—æ ‡å¿—ï¼Œè¡¨ç¤ºæŒ‰ç…§å¹´/æœˆ/æ—¥/æ—¶/åˆ†/ç§’ç­‰è®¡ç®—
	 * @param calSrc
	 *            å‡?æ•°
	 * @param calDes
	 *            è¢«å‡?æ•°
	 * @return ä¸¤ä¸ªæ—¥æœŸä¹‹é—´çš„å·®å€¼
	 */
	public static int dateDiff(char flag, Calendar calSrc, Calendar calDes) {

		long millisDiff = getMillis(calSrc) - getMillis(calDes);

		if (flag == 'y') {
			return (calSrc.get(calSrc.YEAR) - calDes.get(calDes.YEAR));
		}

		if (flag == 'd') {
			return (int) (millisDiff / DAY_IN_MILLIS);
		}

		if (flag == 'h') {
			return (int) (millisDiff / HOUR_IN_MILLIS);
		}

		if (flag == 'm') {
			return (int) (millisDiff / MINUTE_IN_MILLIS);
		}

		if (flag == 's') {
			return (int) (millisDiff / SECOND_IN_MILLIS);
		}

		return 0;
	}
    /**
     * Stringç±»åž‹ è½¬æ?¢ä¸ºDate,
     * å¦‚æžœå?‚æ•°é•¿åº¦ä¸º10 è½¬æ?¢æ ¼å¼?â€?yyyy-MM-ddâ€œ
     *å¦‚æžœå?‚æ•°é•¿åº¦ä¸º19 è½¬æ?¢æ ¼å¼?â€?yyyy-MM-dd HH:mm:ssâ€œ
     * * @param text
	 *             Stringç±»åž‹çš„æ—¶é—´å€¼
     */
	public void setAsText(String text) throws IllegalArgumentException {
		if (StringUtils.hasText(text)) {
			try {
				if (text.indexOf(":") == -1 && text.length() == 10) {
					setValue(this.date_sdf.parse(text));
				} else if (text.indexOf(":") > 0 && text.length() == 19) {
					setValue(this.datetimeFormat.parse(text));
				} else {
					throw new IllegalArgumentException(
							"Could not parse date, date format is error ");
				}
			} catch (ParseException ex) {
				IllegalArgumentException iae = new IllegalArgumentException(
						"Could not parse date: " + ex.getMessage());
				iae.initCause(ex);
				throw iae;
			}
		} else {
			setValue(null);
		}
	}
	public static int getYear(){
	    GregorianCalendar calendar=new GregorianCalendar();
	    calendar.setTime(getDate());
	    return calendar.get(Calendar.YEAR);
	  }

}
