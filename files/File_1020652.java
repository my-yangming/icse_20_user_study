package com.github.vole.mq.rocket.config;

import lombok.extern.slf4j.Slf4j;
import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;
import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
import org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyContext;
import org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;
import org.apache.rocketmq.client.exception.MQClientException;
import org.apache.rocketmq.client.producer.DefaultMQProducer;
import org.apache.rocketmq.client.producer.TransactionMQProducer;
import org.apache.rocketmq.common.message.MessageExt;
import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;
import java.util.stream.Collectors;

@Slf4j
@Configuration
@EnableConfigurationProperties(RocketmqProperties.class)
@ConditionalOnProperty(prefix = RocketmqProperties.PREFIX, value = "namesrvAddr")
public class RocketmqAutoConfiguration {
    @Autowired
    private RocketmqProperties properties;
    @Autowired
    private ApplicationEventPublisher publisher;

    private static boolean isFirstSub = true;

    private static long startTime = System.currentTimeMillis();

    /**
     * åˆ?å§‹åŒ–å?‘rocketmqå?‘é€?æ™®é€šæ¶ˆæ?¯çš„ç”Ÿäº§è€…
     */
    @Bean
    @ConditionalOnProperty(prefix = RocketmqProperties.PREFIX, value = "producerInstanceName")
//    @ConditionalOnBean(EtcdClient.class)
    public DefaultMQProducer defaultProducer() throws MQClientException {
        /**
         * ä¸€ä¸ªåº”ç”¨åˆ›å»ºä¸€ä¸ªProducerï¼Œç”±åº”ç”¨æ?¥ç»´æŠ¤æ­¤å¯¹è±¡ï¼Œå?¯ä»¥è®¾ç½®ä¸ºå…¨å±€å¯¹è±¡æˆ–è€…å?•ä¾‹<br>
         * æ³¨æ„?ï¼šProducerGroupNameéœ€è¦?ç”±åº”ç”¨æ?¥ä¿?è¯?å”¯ä¸€<br>
         * ProducerGroupè¿™ä¸ªæ¦‚å¿µå?‘é€?æ™®é€šçš„æ¶ˆæ?¯æ—¶ï¼Œä½œç”¨ä¸?å¤§ï¼Œä½†æ˜¯å?‘é€?åˆ†å¸ƒå¼?äº‹åŠ¡æ¶ˆæ?¯æ—¶ï¼Œæ¯”è¾ƒå…³é”®ï¼Œ
         * å› ä¸ºæœ?åŠ¡å™¨ä¼šå›žæŸ¥è¿™ä¸ªGroupä¸‹çš„ä»»æ„?ä¸€ä¸ªProducer
         */
        DefaultMQProducer producer = new DefaultMQProducer(properties.getProducerGroupName());
        producer.setNamesrvAddr(properties.getNamesrvAddr());
        producer.setInstanceName(properties.getProducerInstanceName());
        producer.setVipChannelEnabled(false);
        producer.setRetryTimesWhenSendAsyncFailed(10);

        /**
         * Producerå¯¹è±¡åœ¨ä½¿ç”¨ä¹‹å‰?å¿…é¡»è¦?è°ƒç”¨startåˆ?å§‹åŒ–ï¼Œåˆ?å§‹åŒ–ä¸€æ¬¡å?³å?¯<br>
         * æ³¨æ„?ï¼šåˆ‡è®°ä¸?å?¯ä»¥åœ¨æ¯?æ¬¡å?‘é€?æ¶ˆæ?¯æ—¶ï¼Œéƒ½è°ƒç”¨startæ–¹æ³•
         */
        producer.start();
        log.info("RocketMq defaultProducer Started.");
        return producer;
    }

    /**
     * åˆ?å§‹åŒ–å?‘rocketmqå?‘é€?äº‹åŠ¡æ¶ˆæ?¯çš„ç”Ÿäº§è€…
     */
    @Bean
    @ConditionalOnProperty(prefix = RocketmqProperties.PREFIX, value = "producerTranInstanceName")
//    @ConditionalOnBean(EtcdClient.class)
    public TransactionMQProducer transactionProducer() throws MQClientException {
        /**
         * ä¸€ä¸ªåº”ç”¨åˆ›å»ºä¸€ä¸ªProducerï¼Œç”±åº”ç”¨æ?¥ç»´æŠ¤æ­¤å¯¹è±¡ï¼Œå?¯ä»¥è®¾ç½®ä¸ºå…¨å±€å¯¹è±¡æˆ–è€…å?•ä¾‹<br>
         * æ³¨æ„?ï¼šProducerGroupNameéœ€è¦?ç”±åº”ç”¨æ?¥ä¿?è¯?å”¯ä¸€<br>
         * ProducerGroupè¿™ä¸ªæ¦‚å¿µå?‘é€?æ™®é€šçš„æ¶ˆæ?¯æ—¶ï¼Œä½œç”¨ä¸?å¤§ï¼Œä½†æ˜¯å?‘é€?åˆ†å¸ƒå¼?äº‹åŠ¡æ¶ˆæ?¯æ—¶ï¼Œæ¯”è¾ƒå…³é”®ï¼Œ
         * å› ä¸ºæœ?åŠ¡å™¨ä¼šå›žæŸ¥è¿™ä¸ªGroupä¸‹çš„ä»»æ„?ä¸€ä¸ªProducer
         */
        TransactionMQProducer producer = new TransactionMQProducer(properties.getTransactionProducerGroupName());
        producer.setNamesrvAddr(properties.getNamesrvAddr());
        producer.setInstanceName(properties.getProducerTranInstanceName());
        producer.setRetryTimesWhenSendAsyncFailed(10);

        // äº‹åŠ¡å›žæŸ¥æœ€å°?å¹¶å?‘æ•°
        producer.setCheckThreadPoolMinSize(2);
        // äº‹åŠ¡å›žæŸ¥æœ€å¤§å¹¶å?‘æ•°
        producer.setCheckThreadPoolMaxSize(2);
        // é˜Ÿåˆ—æ•°
        producer.setCheckRequestHoldMax(2000);

        // TODO ç”±äºŽç¤¾åŒºç‰ˆæœ¬çš„æœ?åŠ¡å™¨é˜‰å‰²è°ƒäº†æ¶ˆæ?¯å›žæŸ¥çš„åŠŸèƒ½ï¼Œæ‰€ä»¥è¿™ä¸ªåœ°æ–¹æ²¡æœ‰æ„?ä¹‰
        // TransactionCheckListener transactionCheckListener = new
        // TransactionCheckListenerImpl();
        // producer.setTransactionCheckListener(transactionCheckListener);

        /**
         * Producerå¯¹è±¡åœ¨ä½¿ç”¨ä¹‹å‰?å¿…é¡»è¦?è°ƒç”¨startåˆ?å§‹åŒ–ï¼Œåˆ?å§‹åŒ–ä¸€æ¬¡å?³å?¯<br>
         * æ³¨æ„?ï¼šåˆ‡è®°ä¸?å?¯ä»¥åœ¨æ¯?æ¬¡å?‘é€?æ¶ˆæ?¯æ—¶ï¼Œéƒ½è°ƒç”¨startæ–¹æ³•
         */
        producer.start();

        log.info("RocketMq TransactionMQProducer Started.");
        return producer;
    }

    /**
     * åˆ?å§‹åŒ–rocketmqæ¶ˆæ?¯ç›‘å?¬æ–¹å¼?çš„æ¶ˆè´¹è€…
     */
    @Bean
    @ConditionalOnProperty(prefix = RocketmqProperties.PREFIX, value = "consumerInstanceName")
//    @ConditionalOnBean(EtcdClient.class)
    public DefaultMQPushConsumer pushConsumer() throws MQClientException {
        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(properties.getConsumerGroupName());
        consumer.setNamesrvAddr(properties.getNamesrvAddr());
        consumer.setInstanceName(properties.getConsumerInstanceName());
        if (properties.isConsumerBroadcasting()) {
            consumer.setMessageModel(MessageModel.BROADCASTING);
        }
        consumer.setConsumeMessageBatchMaxSize(
            properties.getConsumerBatchMaxSize() == 0 ? 1 : properties.getConsumerBatchMaxSize());// è®¾ç½®æ‰¹é‡?æ¶ˆè´¹ï¼Œä»¥æ??å?‡æ¶ˆè´¹å?žå??é‡?ï¼Œé»˜è®¤æ˜¯1
        /**
         * è®¢é˜…æŒ‡å®štopicä¸‹tags
         */
        List<String> subscribeList = properties.getSubscribe();
        for (String sunscribe : subscribeList) {
            consumer.subscribe(sunscribe.split(":")[0], sunscribe.split(":")[1]);
        }
        if (properties.isEnableOrderConsumer()) {
            consumer.registerMessageListener((List<MessageExt> msgs, ConsumeOrderlyContext context) -> {
                try {
                    context.setAutoCommit(true);
                    msgs =filter(msgs);
                    if(msgs.size()==0) return ConsumeOrderlyStatus.SUCCESS;
                    this.publisher.publishEvent(new RocketmqEvent(msgs, consumer));
                } catch (Exception e) {
                    e.printStackTrace();
                    return ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT;
                }
                // å¦‚æžœæ²¡æœ‰return successï¼Œconsumerä¼šé‡?å¤?æ¶ˆè´¹æ­¤ä¿¡æ?¯ï¼Œç›´åˆ°successã€‚
                return ConsumeOrderlyStatus.SUCCESS;
            });
        } else {
            consumer.registerMessageListener((List<MessageExt> msgs, ConsumeConcurrentlyContext context) -> {
                try {
                    msgs=filter(msgs);
                    if(msgs.size()==0) return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
                    this.publisher.publishEvent(new RocketmqEvent(msgs, consumer));
                } catch (Exception e) {
                    e.printStackTrace();
                    return ConsumeConcurrentlyStatus.RECONSUME_LATER;
                }
                // å¦‚æžœæ²¡æœ‰return successï¼Œconsumerä¼šé‡?å¤?æ¶ˆè´¹æ­¤ä¿¡æ?¯ï¼Œç›´åˆ°successã€‚
                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
            });
        }
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    Thread.sleep(5000);// å»¶è¿Ÿ5ç§’å†?å?¯åŠ¨ï¼Œä¸»è¦?æ˜¯ç­‰å¾…springäº‹ä»¶ç›‘å?¬ç›¸å…³ç¨‹åº?åˆ?å§‹åŒ–å®Œæˆ?ï¼Œå?¦åˆ™ï¼Œå›žå‡ºçŽ°å¯¹RocketMQçš„æ¶ˆæ?¯è¿›è¡Œæ¶ˆè´¹å?Žç«‹å?³å?‘å¸ƒæ¶ˆæ?¯åˆ°è¾¾çš„äº‹ä»¶ï¼Œç„¶è€Œæ­¤äº‹ä»¶çš„ç›‘å?¬ç¨‹åº?è¿˜æœªåˆ?å§‹åŒ–ï¼Œä»Žè€Œé€ æˆ?æ¶ˆæ?¯çš„ä¸¢å¤±
                    /**
                     * Consumerå¯¹è±¡åœ¨ä½¿ç”¨ä¹‹å‰?å¿…é¡»è¦?è°ƒç”¨startåˆ?å§‹åŒ–ï¼Œåˆ?å§‹åŒ–ä¸€æ¬¡å?³å?¯<br>
                     */
                    try {
                        consumer.start();
                    } catch (Exception e) {
                        log.info("RocketMq pushConsumer Start failure!!!.");
                        log.error(e.getMessage(), e);
                    }
                    log.info("RocketMq pushConsumer Started.");
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

        }).start();

        return consumer;
    }

    private List<MessageExt> filter(List<MessageExt> msgs){
        if(isFirstSub&&!properties.isEnableHisConsumer()){
            msgs =msgs.stream().filter(item ->startTime - item.getBornTimestamp() < 0).collect(Collectors.toList());
        }
        if(isFirstSub && msgs.size()>0){
            isFirstSub = false;
        }
        return msgs;
    }
}
