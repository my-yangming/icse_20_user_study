package org.nutz.lang.socket;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.Socket;
import java.net.SocketException;

import org.nutz.lang.Strings;
import org.nutz.lang.util.Context;
import org.nutz.log.Log;
import org.nutz.log.Logs;
import org.nutz.trans.Atom;

public class SocketAtom implements Atom {

    private static final Log log = Logs.get();

    protected Socket socket;

    protected OutputStream ops;

    protected BufferedReader br;

    protected String line;

    protected SocketActionTable saTable;

    protected Context context;

    public SocketAtom(Context context, Socket socket, SocketActionTable saTable) {
        this.context = context;
        this.socket = socket;
        this.saTable = saTable;
    }

    public void run() {
        if (this.context.getBoolean("stop")) {
            if (log.isInfoEnabled())
                log.info("stop=true, so, exit ...."); //çº¿ç¨‹æ± é‡Œé?¢å?¯èƒ½è¿˜æœ‰æœ‰å°šæœªå?¯åŠ¨çš„ä»»åŠ¡
                                                      //æ‰€ä»¥,è¿™é‡Œè¿˜éœ€è¦?åˆ¤æ–­ä¸€ä¸‹
            Sockets.safeClose(socket);
            return;
        }
        
        if (log.isDebugEnabled())
            log.debugf("connect with '%s'", socket.getRemoteSocketAddress().toString());

        try {
            br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            ops = socket.getOutputStream();
        }
        catch (IOException e1) {
            return;
        }

        // å¼€å§‹äº¤äº’
        try {
            doRun();
        }
        catch (SocketException e) {}
        // è¦?å…³é—­ socket ç›‘å?¬ ...
        catch (CloseSocketException e) {
            if (log.isInfoEnabled())
                log.info("Catch CloseSocketException , set lock stop");
            context.set("stop", true);
        }
        catch (IOException e) {
            log.error("Error!! ", e);
        }
        // æœ€å?Žä¿?è¯?å…³é—­
        finally {
            if (log.isDebugEnabled())
                log.debug("Close socket");
            Sockets.safeClose(socket);
        }
    }

    protected void doRun() throws IOException {
        // é¢„å…ˆè¯»å?–ä¸€è¡Œ
        line = br.readLine();

        // åœ¨è¿™ä¸ª socket ä¸­é€?è¡Œè¯»å?– ...
        while (null != line) {
            if (log.isDebugEnabled())
                log.debug("  <<socket<<: " + line);

            SocketAction action = saTable.get(Strings.trim(line));
            if (null != action) {
                SocketContext context = new SocketContext(this);
                // action.run æŠ›å‡ºçš„å¼‚å¸¸ä¼šè¢«åŽŸæ±?åŽŸå‘³çš„æŠ›åˆ°å¤–é?¢ï¼Œ
                // è€Œæœ¬å‡½æ•°çš„å¼‚å¸¸åˆ™åœ¨å?„ä¸ªè¯­å?¥è¢«å¤„ç?†äº† ^_^
                action.run(context);
            }
            // ç»§ç»­è¯»å?–
            line = br.readLine();
        }
    }

    public Socket getSocket() {
        return socket;
    }

}
