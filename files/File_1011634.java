package jetbrains.mps.build.mps.util;

/*Generated by MPS */

import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.messages.IMessageHandler;
import jetbrains.mps.messages.LogHandler;
import org.apache.log4j.LogManager;
import java.util.Queue;
import jetbrains.mps.internal.collections.runtime.QueueSequence;
import java.util.LinkedList;
import java.util.Set;
import org.jetbrains.mps.openapi.model.SNodeId;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.messages.Message;
import jetbrains.mps.messages.MessageKind;
import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.project.ModuleId;
import jetbrains.mps.smodel.adapter.ids.MetaIdHelper;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.mps.openapi.model.SModelReference;

public class VisibleModules {
  private List<SNode> myModules = new ArrayList<SNode>();
  private Map<String, SNode> myName2Module = new HashMap<String, SNode>();
  private Map<String, SNode> myId2Module = new HashMap<String, SNode>();
  private final SNode myProject;
  private final IMessageHandler myMsgHandler;

  public VisibleModules(SNode project) {
    myProject = project;
    myMsgHandler = new LogHandler(LogManager.getLogger(VisibleModules.class));
  }

  public VisibleModules(SNode project, IMessageHandler msgHandler) {
    myProject = project;
    myMsgHandler = msgHandler;
  }

  public void collect() {
    Queue<SNode> queue = QueueSequence.fromQueue(new LinkedList<SNode>());
    QueueSequence.fromQueue(queue).addLastElement(myProject);
    Set<SNodeId> seen = SetSequence.fromSet(new HashSet<SNodeId>());
    while (QueueSequence.fromQueue(queue).isNotEmpty()) {
      SNode project = QueueSequence.fromQueue(queue).removeFirstElement();
      if (seen.contains(project.getNodeId())) {
        continue;
      }
      seen.add(project.getNodeId());
      for (SNode dep : SLinkOperations.getChildren(project, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4df58c6f18f84a13L, 0x4df58c6f18f84a25L, "dependencies"))) {
        SNode projectDependency = SNodeOperations.as(dep, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x454b730dd908c220L, "jetbrains.mps.build.structure.BuildProjectDependency"));
        if (projectDependency == null) {
          continue;
        }

        SNode depproj = SLinkOperations.getTarget(projectDependency, MetaAdapterFactory.getReferenceLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x454b730dd908c220L, 0x4df58c6f18f84a24L, "script"));
        if ((depproj == null)) {
          SReference ref = SNodeOperations.getReference(projectDependency, MetaAdapterFactory.getReferenceLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x454b730dd908c220L, 0x4df58c6f18f84a24L, "script"));
          report("Cannot find the build project dependency " + SLinkOperations.getResolveInfo(ref) + " in the model " + check_xuwpka_a0a1a4a3a3a01(ref.getTargetSModelReference()), projectDependency);
        }
        if (depproj != null && !(seen.contains(depproj.getNodeId()))) {
          QueueSequence.fromQueue(queue).addLastElement(depproj);
        }
      }
      for (SNode newModule : ListSequence.fromList(SNodeOperations.getNodeDescendants(project, MetaAdapterFactory.getConcept(0xcf935df46994e9cL, 0xa132fa109541cba3L, 0x4780308f5d333ebL, "jetbrains.mps.build.mps.structure.BuildMps_AbstractModule"), false, new SAbstractConcept[]{}))) {
        checkId(newModule, project);
        checkName(newModule, project);
        ListSequence.fromList(myModules).addElement(newModule);
      }
    }
    fillByIdAndByNameMaps();
  }

  private void checkId(final SNode newModule, SNode project) {
    SNode existing = ListSequence.fromList(myModules).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return Objects.equals(SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(0xcf935df46994e9cL, 0xa132fa109541cba3L, 0x4780308f5d333ebL, 0x4780308f5d3868bL, "uuid")), SPropertyOperations.getString(newModule, MetaAdapterFactory.getProperty(0xcf935df46994e9cL, 0xa132fa109541cba3L, 0x4780308f5d333ebL, 0x4780308f5d3868bL, "uuid")));
      }
    });
    if (existing != null) {
      report("There are two modules visible from the project [" + myProject + "] with the id '" + SPropertyOperations.getString(newModule, MetaAdapterFactory.getProperty(0xcf935df46994e9cL, 0xa132fa109541cba3L, 0x4780308f5d333ebL, 0x4780308f5d3868bL, "uuid")) + "'. The first module is '" + SPropertyOperations.getString(existing, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + "'[" + SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getContainingRoot(existing), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + "]" + " from the model " + SNodeOperations.getModel(existing) + ", the second module is '" + SPropertyOperations.getString(newModule, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + "'[" + project + "]" + " from the model " + SNodeOperations.getModel(newModule), existing);
    }
  }

  private void checkName(final SNode newModule, SNode project) {
    SNode existing = ListSequence.fromList(myModules).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return Objects.equals(SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")), SPropertyOperations.getString(newModule, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
      }
    });
    if (existing != null) {
      report("There are two modules visible from the project [" + myProject + "] with the name '" + SPropertyOperations.getString(newModule, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + "'. The first module is '" + SPropertyOperations.getString(existing, MetaAdapterFactory.getProperty(0xcf935df46994e9cL, 0xa132fa109541cba3L, 0x4780308f5d333ebL, 0x4780308f5d3868bL, "uuid")) + "'[" + SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getContainingRoot(existing), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + "], the second module is '" + SPropertyOperations.getString(newModule, MetaAdapterFactory.getProperty(0xcf935df46994e9cL, 0xa132fa109541cba3L, 0x4780308f5d333ebL, 0x4780308f5d3868bL, "uuid")) + "'[" + project + "]", existing);
    }
  }

  private void fillByIdAndByNameMaps() {
    for (SNode module : myModules) {
      SNode currProj = SNodeOperations.getNodeAncestor(module, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4df58c6f18f84a13L, "jetbrains.mps.build.structure.BuildProject"), false, false);
      if (myId2Module.containsKey(SPropertyOperations.getString(module, MetaAdapterFactory.getProperty(0xcf935df46994e9cL, 0xa132fa109541cba3L, 0x4780308f5d333ebL, 0x4780308f5d3868bL, "uuid")))) {
        SNode other = myId2Module.get(SPropertyOperations.getString(module, MetaAdapterFactory.getProperty(0xcf935df46994e9cL, 0xa132fa109541cba3L, 0x4780308f5d333ebL, 0x4780308f5d3868bL, "uuid")));
        SNode otherProj = SNodeOperations.getNodeAncestor(other, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4df58c6f18f84a13L, "jetbrains.mps.build.structure.BuildProject"), false, false);
        report("There are two visible modules with the id '" + SPropertyOperations.getString(module, MetaAdapterFactory.getProperty(0xcf935df46994e9cL, 0xa132fa109541cba3L, 0x4780308f5d333ebL, 0x4780308f5d3868bL, "uuid")) + "'. The first module is '" + SPropertyOperations.getString(module, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + "'[" + currProj + "] from the model " + SNodeOperations.getModel(module) + ", the second module is '" + SPropertyOperations.getString(other, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + "'[" + otherProj + "] from the model " + SNodeOperations.getModel(other), module);
      }
      myId2Module.put(SPropertyOperations.getString(module, MetaAdapterFactory.getProperty(0xcf935df46994e9cL, 0xa132fa109541cba3L, 0x4780308f5d333ebL, 0x4780308f5d3868bL, "uuid")), module);
      if (myName2Module.containsKey(SPropertyOperations.getString(module, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")))) {
        SNode other = myName2Module.get(SPropertyOperations.getString(module, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
        SNode otherProj = SNodeOperations.getNodeAncestor(other, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4df58c6f18f84a13L, "jetbrains.mps.build.structure.BuildProject"), false, false);
        report("There are two visible modules with the name '" + SPropertyOperations.getString(module, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + "'. The first module is '" + SPropertyOperations.getString(module, MetaAdapterFactory.getProperty(0xcf935df46994e9cL, 0xa132fa109541cba3L, 0x4780308f5d333ebL, 0x4780308f5d3868bL, "uuid")) + "'[" + currProj + "]" + ", the second module is '" + SPropertyOperations.getString(other, MetaAdapterFactory.getProperty(0xcf935df46994e9cL, 0xa132fa109541cba3L, 0x4780308f5d333ebL, 0x4780308f5d3868bL, "uuid")) + "'[" + otherProj + "]", other);
      }
      myName2Module.put(SPropertyOperations.getString(module, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")), module);
    }
  }

  private void report(String message, SNode anchor) {
    myMsgHandler.handle(Message.createMessage(MessageKind.ERROR, this.getClass().getName(), message, anchor.getReference()));
  }

  public SNode resolve(SLanguage language) {
    // FIXME need a better fix, shall record language modules using their id separately from 
    // solutions and generators, so that I can find by SLanguageId object 
    // i.e. take SLanguageId from SModuleReference from module descriptor, and use it as a map key instead of string 
    ModuleId langModuleId = ModuleId.regular(MetaIdHelper.getLanguage(language).getIdValue());
    return SNodeOperations.as(resolve(language.getQualifiedName(), langModuleId.toString()), MetaAdapterFactory.getConcept(0xcf935df46994e9cL, 0xa132fa109541cba3L, 0x2c446791464290f8L, "jetbrains.mps.build.mps.structure.BuildMps_Language"));
  }

  public SNode resolve(SModuleReference moduleRef) {
    String targetName = moduleRef.getModuleName();
    return this.resolve(targetName, moduleRef.getModuleId().toString());
  }

  public SNode resolveLanguage(SModuleReference moduleRef) {
    return SNodeOperations.as(resolve(moduleRef), MetaAdapterFactory.getConcept(0xcf935df46994e9cL, 0xa132fa109541cba3L, 0x2c446791464290f8L, "jetbrains.mps.build.mps.structure.BuildMps_Language"));
  }

  public SNode resolveGenerator(SModuleReference moduleRef) {
    return SNodeOperations.as(resolve(moduleRef), MetaAdapterFactory.getConcept(0xcf935df46994e9cL, 0xa132fa109541cba3L, 0x4c6db07d2e56a8b4L, "jetbrains.mps.build.mps.structure.BuildMps_Generator"));
  }

  public SNode resolve(String moduleName, String moduleId) {
    SNode result = null;
    if (moduleId != null) {
      result = myId2Module.get(moduleId);
    }
    if (result == null && moduleName != null) {
      result = myName2Module.get(moduleName);
    }
    return result;
  }
  private static String check_xuwpka_a0a1a4a3a3a01(SModelReference checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModelName();
    }
    return null;
  }
}
