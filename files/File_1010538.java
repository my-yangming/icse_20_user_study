package jetbrains.mps.project.io;

/*Generated by MPS */

import jetbrains.mps.components.CoreComponent;
import jetbrains.mps.util.MacrosFactory;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.project.MPSExtentions;
import jetbrains.mps.util.MacroHelper;

public class DescriptorIOFacade implements CoreComponent {
  private static DescriptorIOFacade INSTANCE;
  private final StandardDescriptorIOProvider STANDARD_FACTORY;

  public DescriptorIOFacade() {
    this(new MacrosFactory());
  }
  public DescriptorIO<? extends ModuleDescriptor> fromFileType(IFile file) {
    return fromExtension(standardProvider(), file.getPath());
  }
  public DescriptorIOProvider standardProvider() {
    return STANDARD_FACTORY;
  }
  private static DescriptorIO<? extends ModuleDescriptor> fromExtension(DescriptorIOProvider standardProvider, String path) {
    if (path.endsWith(MPSExtentions.DOT_LANGUAGE)) {
      return standardProvider.languageDescriptorIO();
    } else if (path.endsWith(MPSExtentions.DOT_SOLUTION)) {
      return standardProvider.solutionDescriptorIO();
    } else if (path.endsWith(MPSExtentions.DOT_DEVKIT)) {
      return standardProvider.devkitDescriptorIO();
    }
    return null;
  }

  /**
   * 
   * @deprecated It's {@code CoreComponent}, obtain proper instance though platform
   */
  @Deprecated
  public static DescriptorIOFacade getInstance() {
    return INSTANCE;
  }

  public DescriptorIOFacade(MacroHelper.Source macroHelperSource) {
    STANDARD_FACTORY = new StandardDescriptorIOProvider(macroHelperSource);
  }

  /**
   * FIXME it's odd to declare DescriptorIOException provided ModuleDescriptor keeps loadException in case of load failure. 
   * Have to align exception handling, i.e. either throw them as regular Java exception, or keep it within the ModuleDescriptor object and get clean read/write methods then.
   * 
   * 
   * @throws DescriptorIOException now, only in case {@code moduleFile} argument is not a recognized module file (use {@link #isModuleDescriptorFile(IFile) to tell good from bad}
   */
  public ModuleDescriptor readFromModuleFile(MacroHelper macroHelper, IFile moduleFile) throws DescriptorIOException {
    DescriptorIOProvider sp = new StandardDescriptorIOProvider(macroHelper);
    DescriptorIO<? extends ModuleDescriptor> io = fromExtension(sp, moduleFile.getPath());
    if (io == null) {
      throw new DescriptorIOException(String.format("File %s is not a recognized module descriptor", moduleFile));
    }
    return io.readFromFile(moduleFile);
  }

  public boolean isModuleDescriptorFile(IFile file) {
    return fromExtension(standardProvider(), file.getPath()) != null;
  }

  @Override
  public void init() {
    INSTANCE = new DescriptorIOFacade();
  }
  @Override
  public void dispose() {
    INSTANCE = null;
  }
}
