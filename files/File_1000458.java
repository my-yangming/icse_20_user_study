package org.nutz.dao;

import org.nutz.castor.Castors;
import org.nutz.dao.impl.sql.NutSql;
import org.nutz.dao.impl.sql.ValueEscaper;
import org.nutz.dao.impl.sql.callback.*;
import org.nutz.dao.sql.Sql;
import org.nutz.dao.sql.SqlCallback;
import org.nutz.lang.Mirror;
import org.nutz.lang.born.Borning;

/**
 * æ??ä¾›äº† Sql ç›¸å…³çš„å¸®åŠ©å‡½æ•°
 * 
 * @author zozoh(zozohtnt@gmail.com)
 */
public abstract class Sqls {

    private static final ValueEscaper ES_FLD_VAL = new ValueEscaper();
    private static final ValueEscaper ES_SQL_FLD = new ValueEscaper();
    private static final ValueEscaper ES_CND_VAL = new ValueEscaper();

    private static Borning<? extends Sql> sqlBorning;

    static {
        ES_FLD_VAL.add('\'', "''").add('\\', "\\\\").ready();
        ES_SQL_FLD.add('\'', "''").add('\\', "\\\\").add('$', "$$").add('@', "@@").ready();
        ES_CND_VAL.add('\'', "''").add('\\', "\\\\").add('_', "\\_").add('%', "\\%").ready();

        setSqlBorning(NutSql.class);
    }

    /**
     * æ”¹å?˜ Sql æŽ¥å?£çš„å®žçŽ°ç±»ï¼Œå¦‚æžœä½ è°ƒç”¨äº†è¿™ä¸ªæ–¹æ³•ï¼Œä»¥å?Žä½ å†?è°ƒç”¨æœ¬ç±»å…¶ä»–å¸®åŠ©å‡½æ•°åˆ›å»ºçš„ SQL å°±æ˜¯ä½ æ??ä¾›çš„è¿™ä¸ªå®žçŽ°ç±»
     * <p>
     * é»˜è®¤çš„ï¼Œå°†ç”¨ org.nutz.dao.sql.impl.sql.NutSql ä½œä¸ºå®žçŽ°ç±»
     * <p>
     * ä½ ç»™å‡ºçš„ Sql å®žçŽ°ç±»å¿…é¡»æœ‰ä¸€ä¸ªå?¯è®¿é—®çš„æž„é€ å‡½æ•°ï¼ŒæŽ¥å?—ä¸€ä¸ªå­—ç¬¦ä¸²åž‹å?‚æ•°
     * 
     * @param type
     *            ä½ çš„ Sql æŽ¥å?£å®žçŽ°ç±»
     */
    public static <T extends Sql> void setSqlBorning(Class<T> type) {
        sqlBorning = Mirror.me(type).getBorningByArgTypes(String.class);
    }

    /**
     * åˆ›å»ºäº†ä¸€ä¸ª Sql å¯¹è±¡ã€‚
     * <p>
     * ä¼ å…¥çš„ Sql è¯­å?¥æ”¯æŒ?å?˜é‡?å’Œå?‚æ•°å? ä½?ç¬¦ï¼š
     * <ul>
     * <li>å?˜é‡?ï¼š æ ¼å¼?ä¸º <b>$XXXX</b>ï¼Œåœ¨æ‰§è¡Œå‰?ï¼Œä¼šè¢«é¢„å…ˆæ›¿æ?¢
     * <li>å?‚æ•°ï¼š æ ¼å¼?ä¸º<b>@XXXX</b>ï¼Œåœ¨æ‰§è¡Œå‰?ï¼Œä¼šæ›¿æ?¢ä¸º '?'ï¼Œç”¨ä»¥æž„å»º PreparedStatement
     * </ul>
     * 
     * @param sql
     *            Sql è¯­å?¥
     * @return Sql å¯¹è±¡
     * 
     * @see org.nutz.dao.sql.Sql
     */
    public static Sql create(String sql) {
        return sqlBorning.born(sql);
    }

    /**
     * åˆ›å»ºäº†ä¸€ä¸ª Sql å¯¹è±¡ã€‚
     * <p>
     * ä¼ å…¥çš„ Sql è¯­å?¥æ”¯æŒ?å?˜é‡?å’Œå?‚æ•°å? ä½?ç¬¦ï¼š
     * <ul>
     * <li>å?˜é‡?ï¼š æ ¼å¼?ä¸º <b>$XXXX</b>ï¼Œåœ¨æ‰§è¡Œå‰?ï¼Œä¼šè¢«é¢„å…ˆæ›¿æ?¢
     * <li>å?‚æ•°ï¼š æ ¼å¼?ä¸º<b>@XXXX</b>ï¼Œåœ¨æ‰§è¡Œå‰?ï¼Œä¼šæ›¿æ?¢ä¸º '?'ï¼Œç”¨ä»¥æž„å»º PreparedStatement
     * </ul>
     * 
     * @param fmt
     *            æ ¼å¼?å­—ç¬¦ï¼Œæ ¼å¼?å?‚çœ‹ String.format å‡½æ•°
     * @param args
     *            æ ¼å¼?å­—ç¬¦ä¸²çš„å?‚æ•°
     * @return Sql å¯¹è±¡
     */
    public static Sql createf(String fmt, Object... args) {
        return create(String.format(fmt, args));
    }

    /**
     * åˆ›å»ºä¸€ä¸ªèŽ·å?–å?•ä¸ªå®žä½“å¯¹è±¡çš„ Sqlã€‚
     * <p>
     * è¿™ä¸ªå‡½æ•°é™¤äº†æ‰§è¡Œ create(String)å¤–ï¼Œè¿˜ä¼šä¸ºè¿™ä¸ª Sql è¯­å?¥è®¾ç½®å›žè°ƒï¼Œç”¨æ?¥èŽ·å?–å®žä½“å¯¹è±¡ã€‚
     * <p>
     * <b style=color:red>æ³¨æ„?ï¼š</b>è¿”å›žçš„ Sql å¯¹è±¡åœ¨æ‰§è¡Œå‰?ï¼Œä¸€å®šè¦?é€šè¿‡ setEntity è®¾ç½®
     * ä¸€ä¸ªæœ‰æ•ˆçš„å®žä½“ï¼Œå?¦åˆ™ï¼Œä¼šæŠ›å‡ºå¼‚å¸¸ã€‚
     * 
     * @param sql
     *            Sql è¯­å?¥
     * @return Sql å¯¹è±¡
     * 
     * @see org.nutz.dao.sql.Sql
     * @see org.nutz.dao.entity.Entity
     */
    public static Sql fetchEntity(String sql) {
        return create(sql).setCallback(callback.entity());
    }

    /**
     * åˆ›å»ºä¸€ä¸ªèŽ·å?–å?•ä¸ª Record å¯¹è±¡çš„ Sqlã€‚
     * <p>
     * è¿™ä¸ªå‡½æ•°é™¤äº†æ‰§è¡Œ create(String)å¤–ï¼Œè¿˜ä¼šä¸ºè¿™ä¸ª Sql è¯­å?¥è®¾ç½®å›žè°ƒï¼Œç”¨æ?¥èŽ·å?–å®žä½“å¯¹è±¡ã€‚
     * 
     * @param sql
     *            Sql è¯­å?¥
     * @return Sql å¯¹è±¡
     * 
     * @see org.nutz.dao.sql.Sql
     * @see org.nutz.dao.entity.Entity
     */
    public static Sql fetchRecord(String sql) {
        return create(sql).setCallback(callback.record());
    }

    /**
     * åˆ›å»ºä¸€ä¸ªèŽ·å?–æ•´æ•°çš„ Sqlã€‚
     * <p>
     * è¿™ä¸ªå‡½æ•°é™¤äº†æ‰§è¡Œ create(String)å¤–ï¼Œè¿˜ä¼šä¸ºè¿™ä¸ª Sql è¯­å?¥è®¾ç½®å›žè°ƒï¼Œç”¨æ?¥èŽ·å?–æ•´æ•°å€¼ã€‚
     * <p>
     * <b style=color:red>æ³¨æ„?ï¼š</b>ä½ çš„ Sql è¯­å?¥è¿”å›žçš„ ResultSet çš„ç¬¬ä¸€åˆ—å¿…é¡»æ˜¯æ•°å­—
     * 
     * @param sql
     *            Sql è¯­å?¥
     * @return Sql å¯¹è±¡
     * 
     * @see org.nutz.dao.sql.Sql
     */
    public static Sql fetchInt(String sql) {
        return create(sql).setCallback(callback.integer());
    }

    /**
     * @see #fetchInt(String)
     */
    public static Sql fetchLong(String sql) {
        return create(sql).setCallback(callback.longValue());
    }

    /**
     * @see #fetchInt(String)
     */
    public static Sql fetchFloat(String sql) {
        return create(sql).setCallback(callback.floatValue());
    }

    /**
     * @see #fetchInt(String)
     */
    public static Sql fetchDouble(String sql) {
        return create(sql).setCallback(callback.doubleValue());
    }

    /**
     * @see #fetchInt(String)
     */
    public static Sql fetchTimestamp(String sql) {
        return create(sql).setCallback(callback.timestamp());
    }

    /**
     * åˆ›å»ºä¸€ä¸ªèŽ·å?–å­—ç¬¦ä¸²çš„ Sqlã€‚
     * <p>
     * è¿™ä¸ªå‡½æ•°é™¤äº†æ‰§è¡Œ create(String)å¤–ï¼Œè¿˜ä¼šä¸ºè¿™ä¸ª Sql è¯­å?¥è®¾ç½®å›žè°ƒï¼Œç”¨æ?¥èŽ·å?–å­—ç¬¦ä¸²ã€‚
     * <p>
     * <b style=color:red>æ³¨æ„?ï¼š</b>ä½ çš„ Sql è¯­å?¥è¿”å›žçš„ ResultSet çš„ç¬¬ä¸€åˆ—å¿…é¡»æ˜¯å­—ç¬¦ä¸²
     * 
     * @param sql
     *            Sql è¯­å?¥
     * @return Sql å¯¹è±¡
     * 
     * @see org.nutz.dao.sql.Sql
     */
    public static Sql fetchString(String sql) {
        return create(sql).setCallback(callback.str());
    }

    public static Sql queryString(String sql) {
        return create(sql).setCallback(callback.strs());
    }

    /**
     * åˆ›å»ºä¸€ä¸ªèŽ·å?–ä¸€ç»„å®žä½“å¯¹è±¡çš„ Sqlã€‚
     * <p>
     * è¿™ä¸ªå‡½æ•°é™¤äº†æ‰§è¡Œ create(String)å¤–ï¼Œè¿˜ä¼šä¸ºè¿™ä¸ª Sql è¯­å?¥è®¾ç½®å›žè°ƒï¼Œç”¨æ?¥èŽ·å?–ä¸€ç»„å®žä½“å¯¹è±¡ã€‚
     * <p>
     * <b style=color:red>æ³¨æ„?ï¼š</b>è¿”å›žçš„ Sql å¯¹è±¡åœ¨æ‰§è¡Œå‰?ï¼Œä¸€å®šè¦?é€šè¿‡ setEntity è®¾ç½®
     * ä¸€ä¸ªæœ‰æ•ˆçš„å®žä½“ï¼Œå?¦åˆ™ï¼Œä¼šæŠ›å‡ºå¼‚å¸¸ã€‚
     * 
     * @param sql
     *            Sql è¯­å?¥
     * @return Sql å¯¹è±¡
     * 
     * @see org.nutz.dao.sql.Sql
     * @see org.nutz.dao.entity.Entity
     */
    public static Sql queryEntity(String sql) {
        return create(sql).setCallback(callback.entities());
    }

    /**
     * åˆ›å»ºä¸€ä¸ªèŽ·å?–ä¸€ç»„ Record å®žä½“å¯¹è±¡çš„ Sqlã€‚
     * <p>
     * è¿™ä¸ªå‡½æ•°é™¤äº†æ‰§è¡Œ create(String)å¤–ï¼Œè¿˜ä¼šä¸ºè¿™ä¸ª Sql è¯­å?¥è®¾ç½®å›žè°ƒï¼Œç”¨æ?¥èŽ·å?–ä¸€ç»„å®žä½“å¯¹è±¡ã€‚
     * 
     * @param sql
     *            Sql è¯­å?¥
     * @return Sql å¯¹è±¡
     */
    public static Sql queryRecord(String sql) {
        return create(sql).setCallback(callback.records());
    }

    /**
     * ä¸€äº›å†…ç½®çš„å›žè°ƒå¯¹è±¡
     */
    public static CallbackFactory callback = new CallbackFactory();

    public static class CallbackFactory {
        /**
         * @return ä»Ž ResultSetèŽ·å?–ä¸€ä¸ªå¯¹è±¡çš„å›žè°ƒå¯¹è±¡
         */
        public SqlCallback entity() {
            return entity(null);
        }
        

        public SqlCallback entity(String prefix) {
            return new FetchEntityCallback(prefix);
        }

        /**
         * @return ä»Ž ResultSet èŽ·å?–ä¸€ä¸ª Record çš„å›žè°ƒå¯¹è±¡
         */
        public SqlCallback record() {
            return new FetchRecordCallback();
        }

        /**
         * @return ä»Ž ResultSet èŽ·å?–ä¸€ä¸ªæ•´æ•°çš„å›žè°ƒå¯¹è±¡
         */
        public SqlCallback integer() {
            return new FetchIntegerCallback();
        }

        /**
         * @return ä»Ž ResultSet èŽ·å?–ä¸€ä¸ªé•¿æ•´åž‹æ•°çš„å›žè°ƒå¯¹è±¡
         */
        public SqlCallback longValue() {
            return new FetchLongCallback();
        }

        /**
         * @return ä»Ž ResultSet èŽ·å?–ä¸€ä¸ªæµ®ç‚¹æ•°çš„å›žè°ƒå¯¹è±¡
         */
        public SqlCallback floatValue() {
            return new FetchFloatCallback();
        }

        /**
         * @return ä»Ž ResultSet èŽ·å?–ä¸€ä¸ªå?Œç²¾åº¦æµ®ç‚¹æ•°çš„å›žè°ƒå¯¹è±¡
         */
        public SqlCallback doubleValue() {
            return new FetchDoubleCallback();
        }

        /**
         * @return ä»Ž ResultSet èŽ·å?–ä¸€ä¸ªæ—¶é—´æˆ³å¯¹è±¡çš„å›žè°ƒå¯¹è±¡
         */
        public SqlCallback timestamp() {
            return new FetchTimestampCallback();
        }

        /**
         * @return ä»Ž ResultSet èŽ·å?–ä¸€ä¸ªå­—ç¬¦ä¸²çš„å›žè°ƒå¯¹è±¡
         */
        public SqlCallback str() {
            return new FetchStringCallback();
        }

        /**
         * @return ä»Ž ResultSet èŽ·å¾—ä¸€ä¸ªæ•´æ•°æ•°ç»„çš„å›žè°ƒå¯¹è±¡
         */
        public SqlCallback ints() {
            return new QueryIntCallback();
        }

        /**
         * @return ä»Ž ResultSet èŽ·å¾—ä¸€ä¸ªé•¿æ•´åž‹æ•°ç»„çš„å›žè°ƒå¯¹è±¡
         */
        public SqlCallback longs() {
            return new QueryLongCallback();
        }

        /**
         * @return ä»Ž ResultSet èŽ·å¾—ä¸€ä¸ªå­—ç¬¦ä¸²æ•°ç»„çš„å›žè°ƒå¯¹è±¡
         */
        public SqlCallback strs() {
            return new QueryStringArrayCallback();
        }

        /**
         * @return ä»Ž ResultSet èŽ·å¾—ä¸€ä¸ªå­—ç¬¦ä¸²åˆ—è¡¨çš„å›žè°ƒå¯¹è±¡
         */
        public SqlCallback strList() {
            return new QueryStringCallback();
        }

        /**
         * @return ä»Ž ResultSetèŽ·å?–ä¸€ç»„å¯¹è±¡çš„å›žè°ƒå¯¹è±¡
         */
        public SqlCallback entities() {
            return entities(null);
        }
        
        public SqlCallback entities(String prefix) {
            return new QueryEntityCallback(prefix);
        }

        /**
         * @return ä»Ž ResultSet èŽ·å?–ä¸€ç»„ Record çš„å›žè°ƒå¯¹è±¡
         */
        public SqlCallback records() {
            return new QueryRecordCallback();
        }

        public SqlCallback bool() {
            return new FetchBooleanCallback();
        }

        public SqlCallback bools() {
            return new QueryBooleanCallback();
        }
        
        /**
         * ä¸Žrecord()ç±»ä¼¼,ä½†åŒºåˆ†å¤§å°?å†™
         */
        public SqlCallback map() {
            return FetchMapCallback.me;
        }
        /**
         * ä¸Žrecords()ç±»ä¼¼,ä½†åŒºåˆ†å¤§å°?å†™
         * @return List<Map>å›žè°ƒ
         */
        public SqlCallback maps() {
        	return QueryMapCallback.me;
        }

        /**
         * @return ä»Ž ResultSet èŽ·å¾—ä¸€ä¸ªblobçš„å›žè°ƒå¯¹è±¡
         */
        public SqlCallback blob() {
            return new FetchBlobCallback();
        }
    }

    /**
     * æ ¼å¼?åŒ–å€¼ï¼Œæ ¹æ?®å€¼çš„ç±»åž‹ï¼Œç”Ÿæˆ? SQL å­—æ®µå€¼çš„éƒ¨åˆ†ï¼Œå®ƒä¼šè€ƒè™‘ SQL æ³¨å…¥
     * 
     * @param v
     *            å­—æ®µå€¼
     * @return æ ¼å¼?åŒ–å?Žçš„ Sql å­—æ®µå€¼ï¼Œå?¯ä»¥ç›´æŽ¥æ‹¼è£…åœ¨ SQL é‡Œé?¢
     */
    public static CharSequence formatFieldValue(Object v) {
        if (null == v)
            return "NULL";
        else if (Sqls.isNotNeedQuote(v.getClass()))
            return Sqls.escapeFieldValue(v.toString());
        else
            return new StringBuilder("'").append(Sqls.escapeFieldValue(Castors.me().castToString(v)))
                                         .append('\'');
    }

    /**
     * æ ¼å¼?åŒ–å€¼ï¼Œæ ¹æ?®å€¼çš„ç±»åž‹ï¼Œç”Ÿæˆ? SQL å­—æ®µå€¼çš„éƒ¨åˆ†ï¼Œå®ƒä¼šè€ƒè™‘ SQL æ³¨å…¥ï¼Œä»¥å?Š SQL çš„ '$' å’Œ '@' è½¬ä¹‰
     * 
     * @param v
     *            å­—æ®µå€¼
     * @return æ ¼å¼?åŒ–å?Žçš„ Sql å­—æ®µå€¼ï¼Œå?¯ä»¥ç›´æŽ¥æ‹¼è£…åœ¨ SQL é‡Œé?¢
     */
    public static CharSequence formatSqlFieldValue(Object v) {
        if (null == v)
            return "NULL";
        else if (Sqls.isNotNeedQuote(v.getClass()))
            return Sqls.escapeSqlFieldValue(v.toString());
        else
            return new StringBuilder("'").append(Sqls.escapeSqlFieldValue(v.toString()))
                                         .append('\'');
    }

    /**
     * å°† SQL çš„å­—æ®µå€¼è¿›è¡Œè½¬æ„?ï¼Œå?¯ä»¥ç”¨æ?¥é˜²æ­¢ SQL æ³¨å…¥æ”»å‡»
     * 
     * @param s
     *            å­—æ®µå€¼
     * @return æ ¼å¼?åŒ–å?Žçš„ Sql å­—æ®µå€¼ï¼Œå?¯ä»¥ç›´æŽ¥æ‹¼è£…åœ¨ SQL é‡Œé?¢
     */
    public static CharSequence escapeFieldValue(CharSequence s) {
        if (null == s)
            return null;
        return ES_FLD_VAL.escape(s);
    }

    /**
     * å°† SQL çš„å­—æ®µå€¼è¿›è¡Œè½¬æ„?ï¼Œå?¯ä»¥ç”¨æ?¥é˜²æ­¢ SQL æ³¨å…¥æ”»å‡»ï¼Œ<br>
     * å?Œæ—¶ï¼Œå®ƒä¹Ÿä¼šå°† Sql çš„ç‰¹æ®Šæ ‡è®° '$' å’Œ '@' è¿›è¡Œè½¬è¯‘
     * 
     * @param s
     *            å­—æ®µå€¼
     * @return æ ¼å¼?åŒ–å?Žçš„ Sql å­—æ®µå€¼ï¼Œå?¯ä»¥ç›´æŽ¥æ‹¼è£…åœ¨ SQL é‡Œé?¢
     */
    public static CharSequence escapeSqlFieldValue(CharSequence s) {
        if (null == s)
            return null;
        return ES_SQL_FLD.escape(s);
    }

    /**
     * å°† SQL çš„ WHERE æ?¡ä»¶å€¼è¿›è¡Œè½¬æ„?ï¼Œå?¯ä»¥ç”¨æ?¥é˜²æ­¢ SQL æ³¨å…¥æ”»å‡»
     * 
     * @param s
     *            å­—æ®µå€¼
     * @return æ ¼å¼?åŒ–å?Žçš„ Sql å­—æ®µå€¼ï¼Œå?¯ä»¥ç›´æŽ¥æ‹¼è£…åœ¨ SQL é‡Œé?¢
     */
    public static CharSequence escapteConditionValue(CharSequence s) {
        if (null == s)
            return null;
        return ES_CND_VAL.escape(s);
    }

    /**
     * åˆ¤æ–­ä¸€ä¸ªå€¼ï¼Œåœ¨ SQL ä¸­æ˜¯å?¦éœ€è¦?å?•å¼•å?·
     * 
     * @param type
     *            ç±»åž‹
     * @return æ˜¯å?¦éœ€è¦?åŠ ä¸Šå?•å¼•å?·
     */
    public static boolean isNotNeedQuote(Class<?> type) {
        Mirror<?> me = Mirror.me(type);
        return me.isBoolean() || me.isPrimitiveNumber();
    }

}
