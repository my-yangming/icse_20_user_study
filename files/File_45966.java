/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.alipay.sofa.rpc.common;

import com.alipay.sofa.rpc.base.Sortable;
import com.alipay.sofa.rpc.common.struct.OrderedComparator;
import com.alipay.sofa.rpc.common.utils.CommonUtils;
import com.alipay.sofa.rpc.common.utils.StringUtils;
import com.alipay.sofa.rpc.log.LogCodes;
import com.alipay.sofa.rpc.log.Logger;
import com.alipay.sofa.rpc.log.LoggerFactory;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

/**
 * Sofa RPC ä¸Žé…?ç½®ç›¸å…³çš„å·¥å…·ç±»ï¼Œä¸?ä¾?èµ–äºŽ Sofa æ¡†æž¶çš„é…?ç½® <br>
 * <p>
 * å¤§éƒ¨åˆ†å?‚æ•°å?¯é…?ç½®ï¼Œä¼˜å…ˆçº§ï¼šSystem.setProperty() > å¤–éƒ¨åŠ è½½å™¨(ä¾‹å¦‚å?¯èƒ½æ¯?ä¸ªåº”ç”¨ç‹¬ç«‹çš„sofa-config.propertiesï¼‰ > rpc-config.propertirs
 * </p>
 *
 * @author <a href=mailto:zhanggeng.zg@antfin.com>GengZhang</a>
 */
public final class SofaConfigs {

    /**
     * æ—¥å¿—
     */
    private static final Logger                     LOGGER         = LoggerFactory.getLogger(SofaConfigs.class);

    /**
     * å¤–éƒ¨åŠ è½½å™¨
     */
    private static final List<ExternalConfigLoader> CONFIG_LOADERS = new ArrayList<ExternalConfigLoader>();
    /**
     * loaderå?˜åŒ–çš„é”?
     */
    private static ReentrantReadWriteLock           lock           = new ReentrantReadWriteLock();
    /**
     * è¯»é”?ï¼Œå…?è®¸å¹¶å?‘è¯» 
     */
    private static Lock                             rLock          = lock.readLock();
    /**
     * å†™é”?ï¼Œå†™çš„æ—¶å€™ä¸?å…?è®¸è¯» 
     */
    private static Lock                             wLock          = lock.writeLock();

    /**
     * rpc-config.properties
     */
    private static Properties                       config;

    /**
     * åˆ?å§‹åŒ– config/rpc-config.properties
     * åˆ?å§‹åŒ–å¤±è´¥æ—¶ï¼Œç›´æŽ¥æŠ¥é”™
     *
     * @return é…?ç½®å†…å®¹
     */
    public static synchronized Properties getConfig() {
        if (config == null) {
            try {
                String rpcConfig = "config/rpc-config.properties";
                InputStream ins = SofaConfigs.class.getClassLoader().getResourceAsStream(rpcConfig);
                if (ins == null) {
                    ins = Thread.currentThread().getContextClassLoader()
                        .getResourceAsStream(rpcConfig);
                }

                config = new Properties();
                config.load(ins);
            } catch (Exception e) {
                config = new Properties();
                if (LOGGER.isDebugEnabled()) {
                    LOGGER.debug(LogCodes.getLog(LogCodes.ERROR_RPC_CONFIG_LOAD));
                }
            }
        }

        return config;
    }

    /**
     * è§£æž?æ•°å­—åž‹é…?ç½®
     *
     * @param key          é…?ç½®é¡¹
     * @param defaultValue é»˜è®¤å€¼
     * @return é…?ç½®
     */
    public static int getIntegerValue(String key, int defaultValue) {
        return getIntegerValue(null, key, defaultValue);
    }

    /**
     * è§£æž?æ•°å­—åž‹é…?ç½®
     *
     * @param appName      åº”ç”¨å??
     * @param key          é…?ç½®é¡¹
     * @param defaultValue é»˜è®¤å€¼
     * @return é…?ç½®
     */
    public static int getIntegerValue(String appName, String key, int defaultValue) {
        String ret = getStringValue0(appName, key);
        return StringUtils.isEmpty(ret) ? defaultValue : CommonUtils.parseInt(ret, defaultValue);
    }

    /**
     * èŽ·å?–Booleanæ ¼å¼?çš„Config
     *
     * @param key          é…?ç½®é¡¹
     * @param defaultValue é»˜è®¤å€¼
     * @return é…?ç½®
     */
    public static boolean getBooleanValue(String key, boolean defaultValue) {
        return getBooleanValue(null, key, defaultValue);
    }

    /**
     * èŽ·å?–Booleanæ ¼å¼?çš„Config
     *
     * @param appName      åº”ç”¨å??
     * @param key          é…?ç½®é¡¹
     * @param defaultValue é»˜è®¤å€¼
     * @return é…?ç½®
     */
    public static boolean getBooleanValue(String appName, String key, boolean defaultValue) {
        String ret = getStringValue0(appName, key);
        return StringUtils.isEmpty(ret) ? defaultValue : CommonUtils.parseBoolean(ret, defaultValue);
    }

    /**
     * é€šç”¨ èŽ·å?–æ–¹æ³•
     * <p>
     * ä¸Žæ²¡æœ‰ appName çš„æ–¹æ³•ç›¸æ¯”ï¼Œè¯¥æ–¹æ³•ä¸?éœ€è¦?ä¼ å…¥ appName
     * <p>
     *
     * @param key          é…?ç½®é¡¹
     * @param defaultValue é»˜è®¤å€¼
     * @return é…?ç½®
     */
    public static String getStringValue(String key, String defaultValue) {
        return getStringValue(null, key, defaultValue);
    }

    /**
     * èŽ·å?–é…?ç½®å€¼
     *
     * @param appName      åº”ç”¨å??
     * @param key          é…?ç½®é¡¹
     * @param defaultValue é»˜è®¤å€¼
     * @return é…?ç½®
     */
    public static String getStringValue(String appName, String key, String defaultValue) {
        String ret = getStringValue0(appName, key);
        return StringUtils.isEmpty(ret) ? defaultValue : ret.trim();
    }

    /**
     * System.getProperty() > å¤–éƒ¨é…?ç½® > rpc-config.properties
     *
     * @param appName åº”ç”¨å??
     * @param key     é…?ç½®é¡¹
     * @return é…?ç½®
     */
    private static String getStringValue0(String appName, String key) {
        String ret = System.getProperty(key);
        if (StringUtils.isNotEmpty(ret)) {
            return ret;
        }
        rLock.lock();
        try {
            for (ExternalConfigLoader configLoader : CONFIG_LOADERS) {
                ret = appName == null ? configLoader.getValue(key)
                    : configLoader.getValue(appName, key);
                if (StringUtils.isNotEmpty(ret)) {
                    return ret;
                }
            }
        } finally {
            rLock.unlock();
        }
        return getConfig().getProperty(key);
    }

    /**
     * æ³¨å†Œå¤–éƒ¨é…?ç½®åŠ è½½å™¨
     *
     * @param configLoader é…?ç½®åŠ è½½å™¨
     */
    public static void registerExternalConfigLoader(ExternalConfigLoader configLoader) {
        wLock.lock();
        try {
            CONFIG_LOADERS.add(configLoader);
            Collections.sort(CONFIG_LOADERS, new OrderedComparator<ExternalConfigLoader>());
        } finally {
            wLock.unlock();
        }
    }

    /**
     * å??æ³¨å†Œå¤–éƒ¨é…?ç½®åŠ è½½å™¨
     *
     * @param configLoader é…?ç½®åŠ è½½å™¨
     */
    public static void unRegisterExternalConfigLoader(ExternalConfigLoader configLoader) {
        wLock.lock();
        try {
            CONFIG_LOADERS.remove(configLoader);
            Collections.sort(CONFIG_LOADERS, new OrderedComparator<ExternalConfigLoader>());
        } finally {
            wLock.unlock();
        }
    }

    /**
     * å¤–éƒ¨é…?ç½®åŠ è½½å™¨
     */
    public static abstract class ExternalConfigLoader implements Sortable {

        /**
         * é¡ºåº?
         *
         * @return é¡ºåº?ï¼Œä»Žå°?åˆ°å¤§æ‰§è¡Œ
         */
        @Override
        public int getOrder() {
            return 0;
        }

        /**
         * èŽ·å?–é…?ç½®
         *
         * @param key é”®
         * @return å€¼
         */
        public abstract String getValue(String key);

        /**
         * æŒ‰åº”ç”¨èŽ·å?–é…?ç½®
         *
         * @param appName åº”ç”¨å??
         * @param key     é”®
         * @return å€¼
         */
        public abstract String getValue(String appName, String key);
    }
}
