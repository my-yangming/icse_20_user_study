/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.alipay.sofa.rpc.codec;

import com.alipay.sofa.rpc.common.struct.TwoWayMap;
import com.alipay.sofa.rpc.core.exception.SofaRpcRuntimeException;
import com.alipay.sofa.rpc.ext.ExtensionClass;
import com.alipay.sofa.rpc.ext.ExtensionLoader;
import com.alipay.sofa.rpc.ext.ExtensionLoaderFactory;
import com.alipay.sofa.rpc.ext.ExtensionLoaderListener;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

/**
 * åº?åˆ—åŒ–å·¥åŽ‚
 *
 * @author <a href=mailto:zhanggeng.zg@antfin.com>GengZhang</a>
 */
public final class SerializerFactory {

    /**
     * é™¤äº†æ‰˜ç®¡ç»™æ‰©å±•åŠ è½½å™¨çš„å·¥åŽ‚æ¨¡å¼?ï¼ˆä¿?ç•™aliasï¼šå®žä¾‹ï¼‰å¤–<br>
     * è¿˜éœ€è¦?é¢?å¤–ä¿?ç•™ç¼–ç ?å’Œå®žä¾‹çš„æ˜ å°„ï¼š{ç¼–ç ?ï¼šåº?åˆ—åŒ–å™¨}
     */
    private final static ConcurrentMap<Byte, Serializer> TYPE_SERIALIZER_MAP = new ConcurrentHashMap<Byte, Serializer>();

    /**
     * é™¤äº†æ‰˜ç®¡ç»™æ‰©å±•åŠ è½½å™¨çš„å·¥åŽ‚æ¨¡å¼?ï¼ˆä¿?ç•™aliasï¼šå®žä¾‹ï¼‰å¤–ï¼Œè¿˜éœ€è¦?é¢?å¤–ä¿?ç•™ç¼–ç ?å’Œå®žä¾‹çš„æ˜ å°„ï¼š{åˆ«å??ï¼šç¼–ç ?}
     */
    private final static TwoWayMap<String, Byte>         TYPE_CODE_MAP       = new TwoWayMap<String, Byte>();

    /**
     * æ‰©å±•åŠ è½½å™¨
     */
    private final static ExtensionLoader<Serializer>     EXTENSION_LOADER    = buildLoader();

    private static ExtensionLoader<Serializer> buildLoader() {
        return ExtensionLoaderFactory.getExtensionLoader(Serializer.class,
            new ExtensionLoaderListener<Serializer>() {
                @Override
                public void onLoad(ExtensionClass<Serializer> extensionClass) {
                    // é™¤äº†ä¿?ç•™ tagï¼šSerializerå¤–ï¼Œ éœ€è¦?ä¿?ç•™ codeï¼šSerializer
                    TYPE_SERIALIZER_MAP.put(extensionClass.getCode(), extensionClass.getExtInstance());
                    TYPE_CODE_MAP.put(extensionClass.getAlias(), extensionClass.getCode());
                }
            });
    }

    /**
     * æŒ‰åº?åˆ—åŒ–å??ç§°è¿”å›žå??è®®å¯¹è±¡
     *
     * @param alias åº?åˆ—åŒ–å??ç§°
     * @return åº?åˆ—åŒ–å™¨
     */
    public static Serializer getSerializer(String alias) {
        // å·¥åŽ‚æ¨¡å¼?  æ‰˜ç®¡ç»™ExtensionLoader
        return EXTENSION_LOADER.getExtension(alias);
    }

    /**
     * æŒ‰åº?åˆ—åŒ–å??ç§°è¿”å›žå??è®®å¯¹è±¡
     *
     * @param type åº?åˆ—å?·ç¼–ç ?
     * @return åº?åˆ—åŒ–å™¨
     */
    public static Serializer getSerializer(byte type) {
        Serializer serializer = TYPE_SERIALIZER_MAP.get(type);
        if (serializer == null) {
            throw new SofaRpcRuntimeException("Serializer Not Found :\"" + type + "\"!");
        }
        return serializer;
    }

    /**
     * é€šè¿‡åˆ«å??èŽ·å?–Code
     *
     * @param serializer åº?åˆ—åŒ–çš„å??å­—
     * @return åº?åˆ—åŒ–ç¼–ç ?
     */
    public static Byte getCodeByAlias(String serializer) {
        return TYPE_CODE_MAP.get(serializer);
    }

    /**
     * é€šè¿‡CodeèŽ·å?–åˆ«å??
     *
     * @param code åº?åˆ—åŒ–çš„Code
     * @return åº?åˆ—åŒ–åˆ«å??
     */
    public static String getAliasByCode(byte code) {
        return TYPE_CODE_MAP.getKey(code);
    }

}
