package com.crossoverjie.red;

import java.util.LinkedList;
import java.util.List;

/**
 * Function: æ¨¡æ‹Ÿå¾®ä¿¡çº¢åŒ…ç”Ÿæˆ?ï¼Œä»¥åˆ†ä¸ºå?•ä½?
 *
 * @author crossoverJie
 *         Date: 03/01/2018 16:52
 * @since JDK 1.8
 */
public class RedPacket {

    /**
     * ç”Ÿæˆ?çº¢åŒ…æœ€å°?å€¼ 1åˆ†
     */
    private static final int MIN_MONEY = 1;

    /**
     * ç”Ÿæˆ?çº¢åŒ…æœ€å¤§å€¼ 200äººæ°‘å¸?
     */
    private static final int MAX_MONEY = 200 * 100;

    /**
     * å°?äºŽæœ€å°?å€¼
     */
    private static final int LESS = -1;
    /**
     * å¤§äºŽæœ€å¤§å€¼
     */
    private static final int MORE = -2;

    /**
     * æ­£å¸¸å€¼
     */
    private static final int OK = 1;

    /**
     * æœ€å¤§çš„çº¢åŒ…æ˜¯å¹³å?‡å€¼çš„ TIMES å€?ï¼Œé˜²æ­¢æŸ?ä¸€æ¬¡åˆ†é…?çº¢åŒ…è¾ƒå¤§
     */
    private static final double TIMES = 2.1F;

    private int recursiveCount = 0;

    public List<Integer> splitRedPacket(int money, int count) {
        List<Integer> moneys = new LinkedList<>();

        //é‡‘é¢?æ£€æŸ¥ï¼Œå¦‚æžœæœ€å¤§çº¢åŒ… * ä¸ªæ•° < æ€»é‡‘é¢?ï¼›åˆ™éœ€è¦?è°ƒå¤§æœ€å°?çº¢åŒ… MAX_MONEY
        if (MAX_MONEY * count <= money) {
            System.err.println("è¯·è°ƒå¤§æœ€å°?çº¢åŒ…é‡‘é¢? MAX_MONEY=[" + MAX_MONEY + "]");
            return moneys ;
        }


        //è®¡ç®—å‡ºæœ€å¤§çº¢åŒ…
        int max = (int) ((money / count) * TIMES);
        max = max > MAX_MONEY ? MAX_MONEY : max;

        for (int i = 0; i < count; i++) {
            //éš?æœºèŽ·å?–çº¢åŒ…
            int redPacket = randomRedPacket(money, MIN_MONEY, max, count - i);
            moneys.add(redPacket);
            //æ€»é‡‘é¢?æ¯?æ¬¡å‡?å°‘
            money -= redPacket;
        }

        return moneys;
    }

    private int randomRedPacket(int totalMoney, int minMoney, int maxMoney, int count) {
        //å?ªæœ‰ä¸€ä¸ªçº¢åŒ…ç›´æŽ¥è¿”å›ž
        if (count == 1) {
            return totalMoney;
        }

        if (minMoney == maxMoney) {
            return minMoney;
        }

        //å¦‚æžœæœ€å¤§é‡‘é¢?å¤§äºŽäº†å‰©ä½™é‡‘é¢? åˆ™ç”¨å‰©ä½™é‡‘é¢? å› ä¸ºè¿™ä¸ª money æ¯?åˆ†é…?ä¸€æ¬¡éƒ½ä¼šå‡?å°?
        maxMoney = maxMoney > totalMoney ? totalMoney : maxMoney;

        //åœ¨ minMoneyåˆ°maxMoney ç”Ÿæˆ?ä¸€ä¸ªéš?æœºçº¢åŒ…
        int redPacket = (int) (Math.random() * (maxMoney - minMoney) + minMoney);

        int lastMoney = totalMoney - redPacket;

        int status = checkMoney(lastMoney, count - 1);

        //æ­£å¸¸é‡‘é¢?
        if (OK == status) {
            return redPacket;
        }

        //å¦‚æžœç”Ÿæˆ?çš„é‡‘é¢?ä¸?å?ˆæ³• åˆ™é€’å½’é‡?æ–°ç”Ÿæˆ?
        if (LESS == status) {
            recursiveCount++;
            System.out.println("recursiveCount==" + recursiveCount);
            return randomRedPacket(totalMoney, minMoney, redPacket, count);
        }

        if (MORE == status) {
            recursiveCount++;
            System.out.println("recursiveCount===" + recursiveCount);
            return randomRedPacket(totalMoney, redPacket, maxMoney, count);
        }

        return redPacket;
    }

    /**
     * æ ¡éªŒå‰©ä½™çš„é‡‘é¢?çš„å¹³å?‡å€¼æ˜¯å?¦åœ¨ æœ€å°?å€¼å’Œæœ€å¤§å€¼è¿™ä¸ªèŒƒå›´å†…
     *
     * @param lastMoney
     * @param count
     * @return
     */
    private int checkMoney(int lastMoney, int count) {
        double avg = lastMoney / count;
        if (avg < MIN_MONEY) {
            return LESS;
        }

        if (avg > MAX_MONEY) {
            return MORE;
        }

        return OK;
    }


    public static void main(String[] args) {
        RedPacket redPacket = new RedPacket();
        List<Integer> redPackets = redPacket.splitRedPacket(20000, 100);
        System.out.println(redPackets);

        int sum = 0;
        for (Integer red : redPackets) {
            sum += red;
        }
        System.out.println(sum);
    }

}
