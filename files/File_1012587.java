import java.util.TreeMap;
import java.util.Stack;


public class Trie {

    private class Node{

        public boolean isWord;
        public TreeMap<Character, Node> next;

        public Node(boolean isWord){
            this.isWord = isWord;
            next = new TreeMap<>();
        }

        public Node(){
            this(false);
        }
    }

    private Node root;
    private int size;

    public Trie(){
        root = new Node();
        size = 0;
    }

    // èŽ·å¾—Trieä¸­å­˜å‚¨çš„å?•è¯?æ•°é‡?
    public int getSize(){
        return size;
    }

    // å?‘Trieä¸­æ·»åŠ ä¸€ä¸ªæ–°çš„å?•è¯?word
    public void add(String word){

        Node cur = root;
        for(int i = 0 ; i < word.length() ; i ++){
            char c = word.charAt(i);
            if(cur.next.get(c) == null)
                cur.next.put(c, new Node());
            cur = cur.next.get(c);
        }

        if(!cur.isWord){
            cur.isWord = true;
            size ++;
        }
    }

    // æŸ¥è¯¢å?•è¯?wordæ˜¯å?¦åœ¨Trieä¸­
    public boolean contains(String word){

        Node cur = root;
        for(int i = 0 ; i < word.length() ; i ++){
            char c = word.charAt(i);
            if(cur.next.get(c) == null)
                return false;
            cur = cur.next.get(c);
        }
        return cur.isWord;
    }

    // æŸ¥è¯¢æ˜¯å?¦åœ¨Trieä¸­æœ‰å?•è¯?ä»¥prefixä¸ºå‰?ç¼€
    public boolean isPrefix(String prefix){

        Node cur = root;
        for(int i = 0 ; i < prefix.length() ; i ++){
            char c = prefix.charAt(i);
            if(cur.next.get(c) == null)
                return false;
            cur = cur.next.get(c);
        }

        return true;
    }

    // åˆ é™¤word, è¿”å›žæ˜¯å?¦åˆ é™¤æˆ?åŠŸ
    public boolean remove(String word){

        // å°†æ?œç´¢æ²¿è·¯çš„èŠ‚ç‚¹æ”¾å…¥æ ˆä¸­
        Stack<Node> stack = new Stack<>();
        stack.push(root);
        for(int i = 0; i < word.length(); i ++){
            if(!stack.peek().next.containsKey(word.charAt(i)))
                return false;
            stack.push(stack.peek().next.get(word.charAt(i)));
        }

        if(!stack.peek().isWord)
            return false;

        // å°†è¯¥å?•è¯?ç»“å°¾isWordç½®ç©º
        stack.peek().isWord = false;
        size --;

        // å¦‚æžœå?•è¯?æœ€å?Žä¸€ä¸ªå­—æ¯?çš„èŠ‚ç‚¹çš„nexté?žç©ºï¼Œ
        // è¯´æ˜Žtrieä¸­è¿˜å­˜å‚¨äº†å…¶ä»–ä»¥è¯¥å?•è¯?ä¸ºå‰?ç¼€çš„å?•è¯?ï¼Œç›´æŽ¥è¿”å›ž
        if(stack.peek().next.size() > 0)
            return true;
        else
            stack.pop();

        // è‡ªåº•å?‘ä¸Šåˆ é™¤
        for(int i = word.length() - 1; i >= 0; i --){
            stack.peek().next.remove(word.charAt(i));
            // å¦‚æžœä¸€ä¸ªèŠ‚ç‚¹çš„isWordä¸ºtrueï¼Œæˆ–è€…æ˜¯å…¶ä»–å?•è¯?çš„å‰?ç¼€ï¼Œåˆ™ç›´æŽ¥è¿”å›ž
            if(stack.peek().isWord || stack.peek().next.size() > 0)
                return true;
            stack.pop();
        }
        return true;
    }
}

