package com.vondear.rxtool;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Hashtable;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static com.vondear.rxtool.RxConstTool.REGEX_CHZ;
import static com.vondear.rxtool.RxConstTool.REGEX_DATE;
import static com.vondear.rxtool.RxConstTool.REGEX_EMAIL;
import static com.vondear.rxtool.RxConstTool.REGEX_IDCARD;
import static com.vondear.rxtool.RxConstTool.REGEX_IDCARD15;
import static com.vondear.rxtool.RxConstTool.REGEX_IDCARD18;
import static com.vondear.rxtool.RxConstTool.REGEX_IP;
import static com.vondear.rxtool.RxConstTool.REGEX_MOBILE_EXACT;
import static com.vondear.rxtool.RxConstTool.REGEX_MOBILE_SIMPLE;
import static com.vondear.rxtool.RxConstTool.REGEX_TEL;
import static com.vondear.rxtool.RxConstTool.REGEX_URL;
import static com.vondear.rxtool.RxConstTool.REGEX_USERNAME;
import static com.vondear.rxtool.RxDataTool.isNullString;

/**
 * @author Vondear
 * @date 2017/3/15
 */

public class RxRegTool {
    //--------------------------------------------æ­£åˆ™è¡¨è¾¾å¼?-----------------------------------------
    /**
     * åŽŸæ–‡é“¾æŽ¥ï¼šhttp://caibaojian.com/regexp-example.html
     * æ??å?–ä¿¡æ?¯ä¸­çš„ç½‘ç»œé“¾æŽ¥:(h|H)(r|R)(e|E)(f|F) *= *('|")?(\w|\\|\/|\.)+('|"| *|>)?
     * æ??å?–ä¿¡æ?¯ä¸­çš„é‚®ä»¶åœ°å?€:\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*
     * æ??å?–ä¿¡æ?¯ä¸­çš„å›¾ç‰‡é“¾æŽ¥:(s|S)(r|R)(c|C) *= *('|")?(\w|\\|\/|\.)+('|"| *|>)?
     * æ??å?–ä¿¡æ?¯ä¸­çš„IPåœ°å?€:(\d+)\.(\d+)\.(\d+)\.(\d+)
     * æ??å?–ä¿¡æ?¯ä¸­çš„ä¸­å›½ç”µè¯?å?·ç ?ï¼ˆåŒ…æ‹¬ç§»åŠ¨å’Œå›ºå®šç”µè¯?ï¼‰:(\(\d{3,4}\)|\d{3,4}-|\s)?\d{7,14}
     * æ??å?–ä¿¡æ?¯ä¸­çš„ä¸­å›½é‚®æ”¿ç¼–ç ?:[1-9]{1}(\d+){5}
     * æ??å?–ä¿¡æ?¯ä¸­çš„ä¸­å›½èº«ä»½è¯?å?·ç ?:\d{18}|\d{15}
     * æ??å?–ä¿¡æ?¯ä¸­çš„æ•´æ•°ï¼š\d+
     * æ??å?–ä¿¡æ?¯ä¸­çš„æµ®ç‚¹æ•°ï¼ˆå?³å°?æ•°ï¼‰ï¼š(-?\d*)\.?\d+
     * æ??å?–ä¿¡æ?¯ä¸­çš„ä»»ä½•æ•°å­— ï¼š(-?\d*)(\.\d+)?
     * æ??å?–ä¿¡æ?¯ä¸­çš„ä¸­æ–‡å­—ç¬¦ä¸²ï¼š[\u4e00-\u9fa5]*
     * æ??å?–ä¿¡æ?¯ä¸­çš„å?Œå­—èŠ‚å­—ç¬¦ä¸² (æ±‰å­—)ï¼š[^\x00-\xff]*
     */


    /**
     * åˆ¤æ–­æ˜¯å?¦ä¸ºçœŸå®žæ‰‹æœºå?·
     *
     * @param mobiles
     * @return
     */
    public static boolean isMobile(String mobiles) {
        Pattern p = Pattern.compile("^(13[0-9]|15[012356789]|17[03678]|18[0-9]|14[57])[0-9]{8}$");
        Matcher m = p.matcher(mobiles);
        return m.matches();
    }

    /**
     * éªŒè¯?é“¶å?¡å?¡å?·
     *
     * @param cardNo
     * @return
     */
    public static boolean isBankCard(String cardNo) {
        Pattern p = Pattern.compile("^\\d{16,19}$|^\\d{6}[- ]\\d{10,13}$|^\\d{4}[- ]\\d{4}[- ]\\d{4}[- ]\\d{4,7}$");
        Matcher m = p.matcher(cardNo);
        return m.matches();
    }

    /**
     * 15ä½?å’Œ18ä½?èº«ä»½è¯?å?·ç ?çš„æ­£åˆ™è¡¨è¾¾å¼? èº«ä»½è¯?éªŒè¯?
     *
     * @param idCard
     * @return
     */
    public static boolean validateIdCard(String idCard) {
        // 15ä½?å’Œ18ä½?èº«ä»½è¯?å?·ç ?çš„æ­£åˆ™è¡¨è¾¾å¼?
        String regIdCard = "^(^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$)|(^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])((\\d{4})|\\d{3}[Xx])$)$";
        Pattern p = Pattern.compile(regIdCard);
        return p.matcher(idCard).matches();
    }
    //=========================================æ­£åˆ™è¡¨è¾¾å¼?=============================================

    /**
     * éªŒè¯?æ‰‹æœºå?·ï¼ˆç®€å?•ï¼‰
     *
     * @param string å¾…éªŒè¯?æ–‡æœ¬
     * @return {@code true}: åŒ¹é…?<br>{@code false}: ä¸?åŒ¹é…?
     */
    public static boolean isMobileSimple(String string) {
        return isMatch(REGEX_MOBILE_SIMPLE, string);
    }

    /**
     * éªŒè¯?æ‰‹æœºå?·ï¼ˆç²¾ç¡®ï¼‰
     *
     * @param string å¾…éªŒè¯?æ–‡æœ¬
     * @return {@code true}: åŒ¹é…?<br>{@code false}: ä¸?åŒ¹é…?
     */
    public static boolean isMobileExact(String string) {
        return isMatch(REGEX_MOBILE_EXACT, string);
    }

    /**
     * éªŒè¯?ç”µè¯?å?·ç ?
     *
     * @param string å¾…éªŒè¯?æ–‡æœ¬
     * @return {@code true}: åŒ¹é…?<br>{@code false}: ä¸?åŒ¹é…?
     */
    public static boolean isTel(String string) {
        return isMatch(REGEX_TEL, string);
    }

    /**
     * éªŒè¯?èº«ä»½è¯?å?·ç ?15ä½?
     *
     * @param string å¾…éªŒè¯?æ–‡æœ¬
     * @return {@code true}: åŒ¹é…?<br>{@code false}: ä¸?åŒ¹é…?
     */
    public static boolean isIDCard15(String string) {
        return isMatch(REGEX_IDCARD15, string);
    }

    /**
     * éªŒè¯?èº«ä»½è¯?å?·ç ?18ä½?
     *
     * @param string å¾…éªŒè¯?æ–‡æœ¬
     * @return {@code true}: åŒ¹é…?<br>{@code false}: ä¸?åŒ¹é…?
     */
    public static boolean isIDCard18(String string) {
        return isMatch(REGEX_IDCARD18, string);
    }

    /**
     * éªŒè¯?èº«ä»½è¯?å?·ç ?15æˆ–18ä½? åŒ…å?«ä»¥xç»“å°¾
     *
     * @param string å¾…éªŒè¯?æ–‡æœ¬
     * @return {@code true}: åŒ¹é…?<br>{@code false}: ä¸?åŒ¹é…?
     */
    public static boolean isIDCard(String string) {
        return isMatch(REGEX_IDCARD, string);
    }


    /*********************************** èº«ä»½è¯?éªŒè¯?å¼€å§‹ ****************************************/
    /**
     * èº«ä»½è¯?å?·ç ?éªŒè¯? 1ã€?å?·ç ?çš„ç»“æž„ å…¬æ°‘èº«ä»½å?·ç ?æ˜¯ç‰¹å¾?ç»„å?ˆç ?ï¼Œç”±å??ä¸ƒä½?æ•°å­—æœ¬ä½“ç ?å’Œä¸€ä½?æ ¡éªŒç ?ç»„æˆ?ã€‚æŽ’åˆ—é¡ºåº?ä»Žå·¦è‡³å?³ä¾?æ¬¡ä¸ºï¼šå…­ä½?æ•°å­—åœ°å?€ç ?ï¼Œ
     * å…«ä½?æ•°å­—å‡ºç”Ÿæ—¥æœŸç ?ï¼Œä¸‰ä½?æ•°å­—é¡ºåº?ç ?å’Œä¸€ä½?æ•°å­—æ ¡éªŒç ?ã€‚ 2ã€?åœ°å?€ç ?(å‰?å…­ä½?æ•°ï¼‰
     * è¡¨ç¤ºç¼–ç ?å¯¹è±¡å¸¸ä½?æˆ·å?£æ‰€åœ¨åŽ¿(å¸‚ã€?æ——ã€?åŒº)çš„è¡Œæ”¿åŒºåˆ’ä»£ç ?ï¼ŒæŒ‰GB/T2260çš„è§„å®šæ‰§è¡Œã€‚ 3ã€?å‡ºç”Ÿæ—¥æœŸç ?ï¼ˆç¬¬ä¸ƒä½?è‡³å??å››ä½?ï¼‰
     * è¡¨ç¤ºç¼–ç ?å¯¹è±¡å‡ºç”Ÿçš„å¹´ã€?æœˆã€?æ—¥ï¼ŒæŒ‰GB/T7408çš„è§„å®šæ‰§è¡Œï¼Œå¹´ã€?æœˆã€?æ—¥ä»£ç ?ä¹‹é—´ä¸?ç”¨åˆ†éš”ç¬¦ã€‚ 4ã€?é¡ºåº?ç ?ï¼ˆç¬¬å??äº”ä½?è‡³å??ä¸ƒä½?ï¼‰
     * è¡¨ç¤ºåœ¨å?Œä¸€åœ°å?€ç ?æ‰€æ ‡è¯†çš„åŒºåŸŸèŒƒå›´å†…ï¼Œå¯¹å?Œå¹´ã€?å?Œæœˆã€?å?Œæ—¥å‡ºç”Ÿçš„äººç¼–å®šçš„é¡ºåº?å?·ï¼Œ é¡ºåº?ç ?çš„å¥‡æ•°åˆ†é…?ç»™ç”·æ€§ï¼Œå?¶æ•°åˆ†é…?ç»™å¥³æ€§ã€‚ 5ã€?æ ¡éªŒç ?ï¼ˆç¬¬å??å…«ä½?æ•°ï¼‰
     * ï¼ˆ1ï¼‰å??ä¸ƒä½?æ•°å­—æœ¬ä½“ç ?åŠ æ?ƒæ±‚å’Œå…¬å¼? S = Sum(Ai * Wi), i = 0, ... , 16 ï¼Œå…ˆå¯¹å‰?17ä½?æ•°å­—çš„æ?ƒæ±‚å’Œ
     * Ai:è¡¨ç¤ºç¬¬iä½?ç½®ä¸Šçš„èº«ä»½è¯?å?·ç ?æ•°å­—å€¼ Wi:è¡¨ç¤ºç¬¬iä½?ç½®ä¸Šçš„åŠ æ?ƒå› å­? Wi: 7 9 10 5 8 4 2 1 6 3 7 9 10 5 8 4 2
     * ï¼ˆ2ï¼‰è®¡ç®—æ¨¡ Y = mod(S, 11) ï¼ˆ3ï¼‰é€šè¿‡æ¨¡å¾—åˆ°å¯¹åº”çš„æ ¡éªŒç ? Y: 0 1 2 3 4 5 6 7 8 9 10 æ ¡éªŒç ?: 1 0 X 9 8 7 6 5 4 3 2
     */

    /**
     * åŠŸèƒ½ï¼šèº«ä»½è¯?çš„æœ‰æ•ˆéªŒè¯?
     *
     * @param IDStr èº«ä»½è¯?å?·
     * @return æœ‰æ•ˆï¼šè¿”å›ž"æœ‰æ•ˆ" æ— æ•ˆï¼šè¿”å›žStringä¿¡æ?¯
     * @throws ParseException
     */
    @SuppressWarnings("unchecked")
    public static String IDCardValidate(String IDStr) {
        String errorInfo = "";// è®°å½•é”™è¯¯ä¿¡æ?¯
        String[] ValCodeArr = {"1", "0", "x", "9", "8", "7", "6", "5", "4",
                "3", "2"};
        String[] Wi = {"7", "9", "10", "5", "8", "4", "2", "1", "6", "3", "7",
                "9", "10", "5", "8", "4", "2"};
        String Ai = "";
        // ================ å?·ç ?çš„é•¿åº¦ 15ä½?æˆ–18ä½? ================
        if (IDStr.length() != 15 && IDStr.length() != 18) {
            errorInfo = "èº«ä»½è¯?å?·ç ?é•¿åº¦åº”è¯¥ä¸º15ä½?æˆ–18ä½?ã€‚";
            return errorInfo;
        }
        // =======================(end)========================

        // ================ æ•°å­— é™¤æœ€å?Žä»¥ä¸ºéƒ½ä¸ºæ•°å­— ================
        if (IDStr.length() == 18) {
            Ai = IDStr.substring(0, 17);
        } else if (IDStr.length() == 15) {
            Ai = IDStr.substring(0, 6) + "19" + IDStr.substring(6, 15);
        }
        if (isNumeric(Ai) == false) {
            errorInfo = "èº«ä»½è¯?15ä½?å?·ç ?éƒ½åº”ä¸ºæ•°å­— ; 18ä½?å?·ç ?é™¤æœ€å?Žä¸€ä½?å¤–ï¼Œéƒ½åº”ä¸ºæ•°å­—ã€‚";
            return errorInfo;
        }
        // =======================(end)========================

        // ================ å‡ºç”Ÿå¹´æœˆæ˜¯å?¦æœ‰æ•ˆ ================
        String strYear = Ai.substring(6, 10);// å¹´ä»½
        String strMonth = Ai.substring(10, 12);// æœˆä»½
        String strDay = Ai.substring(12, 14);// æœˆä»½
        if (isDate(strYear + "-" + strMonth + "-" + strDay) == false) {
            errorInfo = "èº«ä»½è¯?ç”Ÿæ—¥æ— æ•ˆã€‚";
            return errorInfo;
        }
        GregorianCalendar gc = new GregorianCalendar();
        SimpleDateFormat s = new SimpleDateFormat("yyyy-MM-dd");
        try {
            if ((gc.get(Calendar.YEAR) - Integer.parseInt(strYear)) > 150
                    || (gc.getTime().getTime() - s.parse(
                    strYear + "-" + strMonth + "-" + strDay).getTime()) < 0) {
                errorInfo = "èº«ä»½è¯?ç”Ÿæ—¥ä¸?åœ¨æœ‰æ•ˆèŒƒå›´ã€‚";
                return errorInfo;
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        } catch (java.text.ParseException e) {
            e.printStackTrace();
        }
        if (Integer.parseInt(strMonth) > 12 || Integer.parseInt(strMonth) == 0) {
            errorInfo = "èº«ä»½è¯?æœˆä»½æ— æ•ˆ";
            return errorInfo;
        }
        if (Integer.parseInt(strDay) > 31 || Integer.parseInt(strDay) == 0) {
            errorInfo = "èº«ä»½è¯?æ—¥æœŸæ— æ•ˆ";
            return errorInfo;
        }
        // =====================(end)=====================

        // ================ åœ°åŒºç ?æ—¶å€™æœ‰æ•ˆ ================
        Hashtable h = GetAreaCode();
        if (h.get(Ai.substring(0, 2)) == null) {
            errorInfo = "èº«ä»½è¯?åœ°åŒºç¼–ç ?é”™è¯¯ã€‚";
            return errorInfo;
        }
        // ==============================================

        // ================ åˆ¤æ–­æœ€å?Žä¸€ä½?çš„å€¼ ================
        int TotalmulAiWi = 0;
        for (int i = 0; i < 17; i++) {
            TotalmulAiWi = TotalmulAiWi
                    + Integer.parseInt(String.valueOf(Ai.charAt(i)))
                    * Integer.parseInt(Wi[i]);
        }
        int modValue = TotalmulAiWi % 11;
        String strVerifyCode = ValCodeArr[modValue];
        Ai = Ai + strVerifyCode;

        if (IDStr.length() == 18) {
            if (Ai.equals(IDStr) == false) {
                errorInfo = "èº«ä»½è¯?æ— æ•ˆï¼Œä¸?æ˜¯å?ˆæ³•çš„èº«ä»½è¯?å?·ç ?";
                return errorInfo;
            }
        } else {
            return "æœ‰æ•ˆ";
        }
        // =====================(end)=====================
        return "æœ‰æ•ˆ";
    }

    /**
     * åŠŸèƒ½ï¼šè®¾ç½®åœ°åŒºç¼–ç ?
     *
     * @return Hashtable å¯¹è±¡
     */
    @SuppressWarnings("unchecked")
    private static Hashtable GetAreaCode() {
        Hashtable hashtable = new Hashtable();
        hashtable.put("11", "åŒ—äº¬");
        hashtable.put("12", "å¤©æ´¥");
        hashtable.put("13", "æ²³åŒ—");
        hashtable.put("14", "å±±è¥¿");
        hashtable.put("15", "å†…è’™å?¤");
        hashtable.put("21", "è¾½å®?");
        hashtable.put("22", "å?‰æž—");
        hashtable.put("23", "é»‘é¾™æ±Ÿ");
        hashtable.put("31", "ä¸Šæµ·");
        hashtable.put("32", "æ±Ÿè‹?");
        hashtable.put("33", "æµ™æ±Ÿ");
        hashtable.put("34", "å®‰å¾½");
        hashtable.put("35", "ç¦?å»º");
        hashtable.put("36", "æ±Ÿè¥¿");
        hashtable.put("37", "å±±ä¸œ");
        hashtable.put("41", "æ²³å?—");
        hashtable.put("42", "æ¹–åŒ—");
        hashtable.put("43", "æ¹–å?—");
        hashtable.put("44", "å¹¿ä¸œ");
        hashtable.put("45", "å¹¿è¥¿");
        hashtable.put("46", "æµ·å?—");
        hashtable.put("50", "é‡?åº†");
        hashtable.put("51", "å››å·?");
        hashtable.put("52", "è´µå·ž");
        hashtable.put("53", "äº‘å?—");
        hashtable.put("54", "è¥¿è—?");
        hashtable.put("61", "é™•è¥¿");
        hashtable.put("62", "ç”˜è‚ƒ");
        hashtable.put("63", "é?’æµ·");
        hashtable.put("64", "å®?å¤?");
        hashtable.put("65", "æ–°ç–†");
        hashtable.put("71", "å?°æ¹¾");
        hashtable.put("81", "é¦™æ¸¯");
        hashtable.put("82", "æ¾³é—¨");
        hashtable.put("91", "å›½å¤–");
        return hashtable;
    }

    /**
     * åŠŸèƒ½ï¼šåˆ¤æ–­å­—ç¬¦ä¸²æ˜¯å?¦ä¸ºæ•°å­—
     *
     * @param str
     * @return
     */
    private static boolean isNumeric(String str) {
        Pattern pattern = Pattern.compile("[0-9]*");
        Matcher isNum = pattern.matcher(str);
        return isNum.matches();
    }

    /**
     * éªŒè¯?é‚®ç®±
     *
     * @param string å¾…éªŒè¯?æ–‡æœ¬
     * @return {@code true}: åŒ¹é…?<br>{@code false}: ä¸?åŒ¹é…?
     */
    public static boolean isEmail(String string) {
        return isMatch(REGEX_EMAIL, string);
    }

    /**
     * éªŒè¯?URL
     *
     * @param string å¾…éªŒè¯?æ–‡æœ¬
     * @return {@code true}: åŒ¹é…?<br>{@code false}: ä¸?åŒ¹é…?
     */
    public static boolean isURL(String string) {
        return isMatch(REGEX_URL, string);
    }

    /**
     * éªŒè¯?æ±‰å­—
     *
     * @param string å¾…éªŒè¯?æ–‡æœ¬
     * @return {@code true}: åŒ¹é…?<br>{@code false}: ä¸?åŒ¹é…?
     */
    public static boolean isChz(String string) {
        return isMatch(REGEX_CHZ, string);
    }

    /**
     * éªŒè¯?ç”¨æˆ·å??
     * <p>å?–å€¼èŒƒå›´ä¸ºa-z,A-Z,0-9,"_",æ±‰å­—ï¼Œä¸?èƒ½ä»¥"_"ç»“å°¾,ç”¨æˆ·å??å¿…é¡»æ˜¯6-20ä½?</p>
     *
     * @param string å¾…éªŒè¯?æ–‡æœ¬
     * @return {@code true}: åŒ¹é…?<br>{@code false}: ä¸?åŒ¹é…?
     */
    public static boolean isUsername(String string) {
        return isMatch(REGEX_USERNAME, string);
    }

    /**
     * éªŒè¯?yyyy-MM-ddæ ¼å¼?çš„æ—¥æœŸæ ¡éªŒï¼Œå·²è€ƒè™‘å¹³é—°å¹´
     *
     * @param string å¾…éªŒè¯?æ–‡æœ¬
     * @return {@code true}: åŒ¹é…?<br>{@code false}: ä¸?åŒ¹é…?
     */
    public static boolean isDate(String string) {
        return isMatch(REGEX_DATE, string);
    }

    /**
     * éªŒè¯?IPåœ°å?€
     *
     * @param string å¾…éªŒè¯?æ–‡æœ¬
     * @return {@code true}: åŒ¹é…?<br>{@code false}: ä¸?åŒ¹é…?
     */
    public static boolean isIP(String string) {
        return isMatch(REGEX_IP, string);
    }

    /**
     * stringæ˜¯å?¦åŒ¹é…?regexæ­£åˆ™è¡¨è¾¾å¼?å­—ç¬¦ä¸²
     *
     * @param regex  æ­£åˆ™è¡¨è¾¾å¼?å­—ç¬¦ä¸²
     * @param string è¦?åŒ¹é…?çš„å­—ç¬¦ä¸²
     * @return {@code true}: åŒ¹é…?<br>{@code false}: ä¸?åŒ¹é…?
     */
    public static boolean isMatch(String regex, String string) {
        return !isNullString(string) && Pattern.matches(regex, string);
    }

    /**
     * éªŒè¯?å›ºå®šç”µè¯?å?·ç ?
     *
     * @param phone ç”µè¯?å?·ç ?ï¼Œæ ¼å¼?ï¼šå›½å®¶ï¼ˆåœ°åŒºï¼‰ç”µè¯?ä»£ç ? + åŒºå?·ï¼ˆåŸŽå¸‚ä»£ç ?ï¼‰ + ç”µè¯?å?·ç ?ï¼Œå¦‚ï¼š+8602085588447
     *              <p><b>å›½å®¶ï¼ˆåœ°åŒºï¼‰ ä»£ç ? ï¼š</b>æ ‡è¯†ç”µè¯?å?·ç ?çš„å›½å®¶ï¼ˆåœ°åŒºï¼‰çš„æ ‡å‡†å›½å®¶ï¼ˆåœ°åŒºï¼‰ä»£ç ?ã€‚å®ƒåŒ…å?«ä»Ž 0 åˆ° 9 çš„ä¸€ä½?æˆ–å¤šä½?æ•°å­—ï¼Œ
     *              æ•°å­—ä¹‹å?Žæ˜¯ç©ºæ ¼åˆ†éš”çš„å›½å®¶ï¼ˆåœ°åŒºï¼‰ä»£ç ?ã€‚</p>
     *              <p><b>åŒºå?·ï¼ˆåŸŽå¸‚ä»£ç ?ï¼‰ï¼š</b>è¿™å?¯èƒ½åŒ…å?«ä¸€ä¸ªæˆ–å¤šä¸ªä»Ž 0 åˆ° 9 çš„æ•°å­—ï¼Œåœ°åŒºæˆ–åŸŽå¸‚ä»£ç ?æ”¾åœ¨åœ†æ‹¬å?·â€”â€”
     *              å¯¹ä¸?ä½¿ç”¨åœ°åŒºæˆ–åŸŽå¸‚ä»£ç ?çš„å›½å®¶ï¼ˆåœ°åŒºï¼‰ï¼Œåˆ™çœ?ç•¥è¯¥ç»„ä»¶ã€‚</p>
     *              <p><b>ç”µè¯?å?·ç ?ï¼š</b>è¿™åŒ…å?«ä»Ž 0 åˆ° 9 çš„ä¸€ä¸ªæˆ–å¤šä¸ªæ•°å­— </p>
     * @return éªŒè¯?æˆ?åŠŸè¿”å›žtrueï¼ŒéªŒè¯?å¤±è´¥è¿”å›žfalse
     */
    public static boolean checkPhone(String phone) {
        String regex = "(\\+\\d+)?(\\d{3,4}\\-?)?\\d{7,8}$";
        return Pattern.matches(regex, phone);
    }

    /**
     * éªŒè¯?æ•´æ•°ï¼ˆæ­£æ•´æ•°å’Œè´Ÿæ•´æ•°ï¼‰
     *
     * @param digit ä¸€ä½?æˆ–å¤šä½?0-9ä¹‹é—´çš„æ•´æ•°
     * @return éªŒè¯?æˆ?åŠŸè¿”å›žtrueï¼ŒéªŒè¯?å¤±è´¥è¿”å›žfalse
     */
    public static boolean checkDigit(String digit) {
        String regex = "\\-?[1-9]\\d+";
        return Pattern.matches(regex, digit);
    }

    /**
     * éªŒè¯?æ•´æ•°å’Œæµ®ç‚¹æ•°ï¼ˆæ­£è´Ÿæ•´æ•°å’Œæ­£è´Ÿæµ®ç‚¹æ•°ï¼‰
     *
     * @param decimals ä¸€ä½?æˆ–å¤šä½?0-9ä¹‹é—´çš„æµ®ç‚¹æ•°ï¼Œå¦‚ï¼š1.23ï¼Œ233.30
     * @return éªŒè¯?æˆ?åŠŸè¿”å›žtrueï¼ŒéªŒè¯?å¤±è´¥è¿”å›žfalse
     */
    public static boolean checkDecimals(String decimals) {
        String regex = "\\-?[1-9]\\d+(\\.\\d+)?";
        return Pattern.matches(regex, decimals);
    }

    /**
     * éªŒè¯?ç©ºç™½å­—ç¬¦
     *
     * @param blankSpace ç©ºç™½å­—ç¬¦ï¼ŒåŒ…æ‹¬ï¼šç©ºæ ¼ã€?\tã€?\nã€?\rã€?\fã€?\x0B
     * @return éªŒè¯?æˆ?åŠŸè¿”å›žtrueï¼ŒéªŒè¯?å¤±è´¥è¿”å›žfalse
     */
    public static boolean checkBlankSpace(String blankSpace) {
        String regex = "\\s+";
        return Pattern.matches(regex, blankSpace);
    }

    /**
     * éªŒè¯?æ—¥æœŸï¼ˆå¹´æœˆæ—¥ï¼‰
     *
     * @param birthday æ—¥æœŸï¼Œæ ¼å¼?ï¼š1992-09-03ï¼Œæˆ–1992.09.03
     * @return éªŒè¯?æˆ?åŠŸè¿”å›žtrueï¼ŒéªŒè¯?å¤±è´¥è¿”å›žfalse
     */
    public static boolean checkBirthday(String birthday) {
        String regex = "[1-9]{4}([-./])\\d{1,2}\\1\\d{1,2}";
        return Pattern.matches(regex, birthday);
    }

    /**
     * åŒ¹é…?ä¸­å›½é‚®æ”¿ç¼–ç ?
     *
     * @param postcode é‚®æ”¿ç¼–ç ?
     * @return éªŒè¯?æˆ?åŠŸè¿”å›žtrueï¼ŒéªŒè¯?å¤±è´¥è¿”å›žfalse
     */
    public static boolean checkPostcode(String postcode) {
        String regex = "[1-9]\\d{5}";
        return Pattern.matches(regex, postcode);
    }
}
