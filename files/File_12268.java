package com.geekq.miaosha.service.rpchander;

import com.geekq.miaosha.common.SnowflakeIdWorker;
import com.geekq.miaosha.common.resultbean.ResultGeekQ;
import com.geekq.miaosha.service.rpchander.enums.PlanStepStatus;
import com.geekq.miaosha.service.rpchander.enums.PlanStepType;
import com.geekq.miaosha.service.rpchander.vo.HandlerParam;
import com.geekq.miaosha.service.rpchander.vo.PlanOrder;
import com.geekq.miaosha.service.rpchander.vo.PlanStep;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Service
public class RpcCompensateService {


    public ResultGeekQ<String> recharge(){
        ResultGeekQ<String> result =  ResultGeekQ.build();
        /**
         * å?„ç§?æ ¡éªŒcheck
         */


        /**
         * éœ€è¦?å?¯åŠ redisåˆ†å¸ƒå¼?é”?
         */

        /**
         * æ‹¦æˆª
         * æ ¡éªŒçŠ¶æ€? -- init æˆ– ROLLING_BACKåˆ™ è¿”å›ž
         *
         * æˆ?åŠŸåˆ™è¿”å›žå·²å¤„ç?†çŠ¶æ€?
         */

        /**
         * ç”Ÿæˆ?è®¢å?•å’Œå¤„ç?†æ­¥éª¤
         */

        /**
         * èŽ·å?–è®¢å?•
         */
        long orderId = SnowflakeIdWorker.getOrderId(1,1);

        /**
         * åˆ›å»ºè®¢å?•æ­¥éª¤ å?¯å®šä¹‰ä¸€ä¸ªVO
         * ä¸€ä¸ªplanorder å¯¹åº”å¤šä¸ªplanstep
         * åˆ›å»º PlanOrder åˆ›å»º planStep
         *   createOrderStep(vo);
         */


//        PlanOrder planOrder = new PlanOrder();
//        planOrder.setCreateTime(new Date());
//        planOrder.setVersion(0);
//        planOrder.setUserId(inputVo.getUserId());
//        planOrder.setOrderNo(inputVo.getOrderNo());
//        planOrder.setType(PlanOrderType.X_RECHARGE.name());
//        planOrder.setParams(params);
//        planOrder.setStatus(PlanOrderStatus.INIT.name());
//        planOrderDao.insertSelective(planOrder);
//
//        List<PlanStep> steps = new ArrayList<>();
//        //ç¬¬ä¸€æ­¥è¯·æ±‚æ°‘ç”Ÿ
//        steps.add(planStepLogic.buildStep(planOrder.getId(), PlanStepType.X_RECHARGE_CMBC, PlanStepStatus.INIT));
//        if (inputVo.getCouponId() != null) {
//            //ç¬¬äºŒæ­¥ä½¿ç”¨ä¼˜æƒ åˆ¸
//            steps.add(planStepLogic.buildStep(planOrder.getId(), PlanStepType.X_RECHARGE_USE_COUPON, PlanStepStatus.INIT));
//        }
//        //ç¬¬ä¸‰æ­¥å‡?æ‰£ä¸»è´¦æˆ·
//        steps.add(planStepLogic.buildStep(planOrder.getId(), PlanStepType.X_RECHARGE_POINT, PlanStepStatus.INIT));
//        //ç¬¬å››éƒ¨å‡?æ‰£å­?è´¦æˆ·
//        steps.add(planStepLogic.buildStep(planOrder.getId(), PlanStepType.X_RECHARGE_SUB_POINT, PlanStepStatus.INIT));
//        //ç¬¬äº”æ­¥å?‘é€?é€šçŸ¥
//        steps.add(planStepLogic.buildStep(planOrder.getId(), PlanStepType.X_RECHARGE_NOTIFY, PlanStepStatus.INIT));
//
//        planStepDao.batchInsert(steps);

        /**
         *
         * è°ƒç”¨RpcæŽ¥å?£ ç¬¬å‡ æ­¥é”™è¯¯åˆ™å›žæ»šå‰?å‡ æ­¥
         * å¹¶æ›´æ–°stepçŠ¶æ€?
         *
         * ç„¶å?Žå®šæ—¶ä»»åŠ¡åŽ»å¤„ç?† çŠ¶æ€?ä¸ºINITä¸ŽROLLBACKçš„ çŠ¶æ€?è®¢å?•
         *
         *
         */
//        HandlerParam handlerParam = new HandlerParam();
//        handlerParam.setPlanOrder(planOrder);
//        AutoInvestPlanRechargeOrderInputVo inputVo = JsonUtil.jsonToBean(planOrder.getParams(), AutoInvestPlanRechargeOrderInputVo.class);
//        handlerParam.setInputVo(inputVo);
//        for (int i = 0; i < planStepList.size(); i++) {
//            PlanStep planStep = planStepList.get(i);
//            PlanStepType stepType = PlanStepType.valueOf(planStep.getType());
//            xxx handler = (xxx) xxxx.getApplicationContext().getBean(stepType.getHandler());
//            boolean handlerResult = handler.handle(handlerParam);
//            if (!handlerResult) {
//                break;
//            }
//        }
        return result;
    }

}
