package com.xiaolyuh.redis.lock;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.redis.core.StringRedisTemplate;

import java.util.Random;
import java.util.concurrent.TimeUnit;

/**
 * Redisåˆ†å¸ƒå¼?é”?ï¼ˆè¿™ç§?æ–¹å¼?æœ?åŠ¡å™¨æ—¶é—´ä¸€å®šè¦?å?Œæ­¥ï¼Œå?¦åˆ™ä¼šå‡ºé—®é¢˜ï¼‰
 * <p>
 * æ‰§è¡Œæ­¥éª¤
 * 1. setnx(lockkey, å½“å‰?æ—¶é—´+è¿‡æœŸè¶…æ—¶æ—¶é—´) ï¼Œå¦‚æžœè¿”å›ž1ï¼Œåˆ™èŽ·å?–é”?æˆ?åŠŸï¼›å¦‚æžœè¿”å›ž0åˆ™æ²¡æœ‰èŽ·å?–åˆ°é”?ï¼Œè½¬å?‘2ã€‚
 * <p>
 * 2. get(lockkey)èŽ·å?–å€¼oldExpireTime ï¼Œå¹¶å°†è¿™ä¸ªvalueå€¼ä¸Žå½“å‰?çš„ç³»ç»Ÿæ—¶é—´è¿›è¡Œæ¯”è¾ƒï¼Œå¦‚æžœå°?äºŽå½“å‰?ç³»ç»Ÿæ—¶é—´ï¼Œåˆ™è®¤ä¸ºè¿™ä¸ªé”?å·²ç»?è¶…æ—¶ï¼Œå?¯ä»¥å…?è®¸åˆ«çš„è¯·æ±‚é‡?æ–°èŽ·å?–ï¼Œè½¬å?‘3ã€‚
 * <p>
 * 3. è®¡ç®—newExpireTime=å½“å‰?æ—¶é—´+è¿‡æœŸè¶…æ—¶æ—¶é—´ï¼Œç„¶å?Žgetset(lockkey, newExpireTime) ä¼šè¿”å›žå½“å‰?lockkeyçš„å€¼currentExpireTimeã€‚
 * <p>
 * 4. åˆ¤æ–­currentExpireTimeä¸ŽoldExpireTime æ˜¯å?¦ç›¸ç­‰ï¼Œå¦‚æžœç›¸ç­‰ï¼Œè¯´æ˜Žå½“å‰?getsetè®¾ç½®æˆ?åŠŸï¼ŒèŽ·å?–åˆ°äº†é”?ã€‚å¦‚æžœä¸?ç›¸ç­‰ï¼Œè¯´æ˜Žè¿™ä¸ªé”?å?ˆè¢«åˆ«çš„è¯·æ±‚èŽ·å?–èµ°äº†ï¼Œé‚£ä¹ˆå½“å‰?è¯·æ±‚å?¯ä»¥ç›´æŽ¥è¿”å›žå¤±è´¥ï¼Œæˆ–è€…ç»§ç»­é‡?è¯•ã€‚
 * <p>
 * 5. åœ¨èŽ·å?–åˆ°é”?ä¹‹å?Žï¼Œå½“å‰?çº¿ç¨‹å?¯ä»¥å¼€å§‹è‡ªå·±çš„ä¸šåŠ¡å¤„ç?†ï¼Œå½“å¤„ç?†å®Œæ¯•å?Žï¼Œæ¯”è¾ƒè‡ªå·±çš„å¤„ç?†æ—¶é—´å’Œå¯¹äºŽé”?è®¾ç½®çš„è¶…æ—¶æ—¶é—´ï¼Œå¦‚æžœå°?äºŽé”?è®¾ç½®çš„è¶…æ—¶æ—¶é—´ï¼Œåˆ™ç›´æŽ¥æ‰§è¡Œdeleteé‡Šæ”¾é”?ï¼›å¦‚æžœå¤§äºŽé”?è®¾ç½®çš„è¶…æ—¶æ—¶é—´ï¼Œåˆ™ä¸?éœ€è¦?å†?é”?è¿›è¡Œå¤„ç?†ã€‚
 *
 * @author yuhao.wangwang
 * @version 1.0
 * @date 2017å¹´11æœˆ3æ—¥ ä¸Šå?ˆ10:21:27
 */
public class RedisLock2 {

    /**
     * é»˜è®¤è¯·æ±‚é”?çš„è¶…æ—¶æ—¶é—´(ms æ¯«ç§’)
     */
    private static final long TIME_OUT = 100;

    /**
     * é»˜è®¤é”?çš„æœ‰æ•ˆæ—¶é—´(s)
     */
    public static final int EXPIRE = 60;

    private static Logger logger = LoggerFactory.getLogger(RedisLock2.class);

    private StringRedisTemplate redisTemplate;

    /**
     * é”?æ ‡å¿—å¯¹åº”çš„key
     */
    private String lockKey;
    /**
     * é”?çš„æœ‰æ•ˆæ—¶é—´(s)
     */
    private int expireTime = EXPIRE;

    /**
     * è¯·æ±‚é”?çš„è¶…æ—¶æ—¶é—´(ms)
     */
    private long timeOut = TIME_OUT;

    /**
     * é”?çš„æœ‰æ•ˆæ—¶é—´
     */
    private long expires = 0;

    /**
     * é”?æ ‡è®°
     */
    private volatile boolean locked = false;

    final Random random = new Random();

    /**
     * ä½¿ç”¨é»˜è®¤çš„é”?è¿‡æœŸæ—¶é—´å’Œè¯·æ±‚é”?çš„è¶…æ—¶æ—¶é—´
     *
     * @param redisTemplate
     * @param lockKey       é”?çš„keyï¼ˆRedisçš„Keyï¼‰
     */
    public RedisLock2(StringRedisTemplate redisTemplate, String lockKey) {
        this.redisTemplate = redisTemplate;
        this.lockKey = lockKey + "_lock";
    }

    /**
     * ä½¿ç”¨é»˜è®¤çš„è¯·æ±‚é”?çš„è¶…æ—¶æ—¶é—´ï¼ŒæŒ‡å®šé”?çš„è¿‡æœŸæ—¶é—´
     *
     * @param redisTemplate
     * @param lockKey       é”?çš„keyï¼ˆRedisçš„Keyï¼‰
     * @param expireTime    é”?çš„è¿‡æœŸæ—¶é—´(å?•ä½?ï¼šç§’)
     */
    public RedisLock2(StringRedisTemplate redisTemplate, String lockKey, int expireTime) {
        this(redisTemplate, lockKey);
        this.expireTime = expireTime;
    }

    /**
     * ä½¿ç”¨é»˜è®¤çš„é”?çš„è¿‡æœŸæ—¶é—´ï¼ŒæŒ‡å®šè¯·æ±‚é”?çš„è¶…æ—¶æ—¶é—´
     *
     * @param redisTemplate
     * @param lockKey       é”?çš„keyï¼ˆRedisçš„Keyï¼‰
     * @param timeOut       è¯·æ±‚é”?çš„è¶…æ—¶æ—¶é—´(å?•ä½?ï¼šæ¯«ç§’)
     */
    public RedisLock2(StringRedisTemplate redisTemplate, String lockKey, long timeOut) {
        this(redisTemplate, lockKey);
        this.timeOut = timeOut;
    }

    /**
     * é”?çš„è¿‡æœŸæ—¶é—´å’Œè¯·æ±‚é”?çš„è¶…æ—¶æ—¶é—´éƒ½æ˜¯ç”¨æŒ‡å®šçš„å€¼
     *
     * @param redisTemplate
     * @param lockKey       é”?çš„keyï¼ˆRedisçš„Keyï¼‰
     * @param expireTime    é”?çš„è¿‡æœŸæ—¶é—´(å?•ä½?ï¼šç§’)
     * @param timeOut       è¯·æ±‚é”?çš„è¶…æ—¶æ—¶é—´(å?•ä½?ï¼šæ¯«ç§’)
     */
    public RedisLock2(StringRedisTemplate redisTemplate, String lockKey, int expireTime, long timeOut) {
        this(redisTemplate, lockKey, expireTime);
        this.timeOut = timeOut;
    }

    /**
     * @return èŽ·å?–é”?çš„key
     */
    public String getLockKey() {
        return lockKey;
    }

    /**
     * èŽ·å¾— lock.
     * å®žçŽ°æ€?è·¯: ä¸»è¦?æ˜¯ä½¿ç”¨äº†redis çš„setnxå‘½ä»¤,ç¼“å­˜äº†é”?.
     * reidsç¼“å­˜çš„keyæ˜¯é”?çš„key,æ‰€æœ‰çš„å…±äº«, valueæ˜¯é”?çš„åˆ°æœŸæ—¶é—´(æ³¨æ„?:è¿™é‡ŒæŠŠè¿‡æœŸæ—¶é—´æ”¾åœ¨valueäº†,æ²¡æœ‰æ—¶é—´ä¸Šè®¾ç½®å…¶è¶…æ—¶æ—¶é—´)
     * æ‰§è¡Œè¿‡ç¨‹:
     * 1.é€šè¿‡setnxå°?è¯•è®¾ç½®æŸ?ä¸ªkeyçš„å€¼,æˆ?åŠŸ(å½“å‰?æ²¡æœ‰è¿™ä¸ªé”?)åˆ™è¿”å›ž,æˆ?åŠŸèŽ·å¾—é”?
     * 2.é”?å·²ç»?å­˜åœ¨åˆ™èŽ·å?–é”?çš„åˆ°æœŸæ—¶é—´,å’Œå½“å‰?æ—¶é—´æ¯”è¾ƒ,è¶…æ—¶çš„è¯?,åˆ™è®¾ç½®æ–°çš„å€¼
     *
     * @return true if lock is acquired, false acquire timeouted
     * @throws InterruptedException in case of thread interruption
     */
    public boolean lock() {
        // è¯·æ±‚é”?è¶…æ—¶æ—¶é—´ï¼Œçº³ç§’
        long timeout = timeOut * 1000000;
        // ç³»ç»Ÿå½“å‰?æ—¶é—´ï¼Œçº³ç§’
        long nowTime = System.nanoTime();

        while ((System.nanoTime() - nowTime) < timeout) {
            // åˆ†å¸ƒå¼?æœ?åŠ¡å™¨æœ‰æ—¶å·®ï¼Œè¿™é‡Œç»™1ç§’çš„è¯¯å·®å€¼
            expires = System.currentTimeMillis() + expireTime * 1000 + 1 * 1000;
            String expiresStr = String.valueOf(expires); //é”?åˆ°æœŸæ—¶é—´

            if (redisTemplate.opsForValue().setIfAbsent(lockKey, expiresStr)) {
                locked = true;
                // è®¾ç½®é”?çš„æœ‰æ•ˆæœŸï¼Œä¹Ÿæ˜¯é”?çš„è‡ªåŠ¨é‡Šæ”¾æ—¶é—´ï¼Œä¹Ÿæ˜¯ä¸€ä¸ªå®¢æˆ·ç«¯åœ¨å…¶ä»–å®¢æˆ·ç«¯èƒ½æŠ¢å? é”?ä¹‹å‰?å?¯ä»¥æ‰§è¡Œä»»åŠ¡çš„æ—¶é—´
                // å?¯ä»¥é˜²æ­¢å› å¼‚å¸¸æƒ…å†µæ— æ³•é‡Šæ”¾é”?è€Œé€ æˆ?æ­»é”?æƒ…å†µçš„å?‘ç”Ÿ
                redisTemplate.expire(lockKey, expireTime, TimeUnit.SECONDS);

                // ä¸Šé”?æˆ?åŠŸç»“æ?Ÿè¯·æ±‚
                return true;
            }

            String currentValueStr = redisTemplate.opsForValue().get(lockKey); //redisé‡Œçš„æ—¶é—´
            if (currentValueStr != null && Long.parseLong(currentValueStr) < System.currentTimeMillis()) {
                //åˆ¤æ–­æ˜¯å?¦ä¸ºç©ºï¼Œä¸?ä¸ºç©ºçš„æƒ…å†µä¸‹ï¼Œå¦‚æžœè¢«å…¶ä»–çº¿ç¨‹è®¾ç½®äº†å€¼ï¼Œåˆ™ç¬¬äºŒä¸ªæ?¡ä»¶åˆ¤æ–­æ˜¯è¿‡ä¸?åŽ»çš„
                // lock is expired

                String oldValueStr = redisTemplate.opsForValue().getAndSet(lockKey, expiresStr);
                //èŽ·å?–ä¸Šä¸€ä¸ªé”?åˆ°æœŸæ—¶é—´ï¼Œå¹¶è®¾ç½®çŽ°åœ¨çš„é”?åˆ°æœŸæ—¶é—´ï¼Œ
                //å?ªæœ‰ä¸€ä¸ªçº¿ç¨‹æ‰?èƒ½èŽ·å?–ä¸Šä¸€ä¸ªçº¿ä¸Šçš„è®¾ç½®æ—¶é—´ï¼Œå› ä¸ºjedis.getSetæ˜¯å?Œæ­¥çš„
                if (oldValueStr != null && oldValueStr.equals(currentValueStr)) {
                    //é˜²æ­¢è¯¯åˆ ï¼ˆè¦†ç›–ï¼Œå› ä¸ºkeyæ˜¯ç›¸å?Œçš„ï¼‰äº†ä»–äººçš„é”?â€”â€”è¿™é‡Œè¾¾ä¸?åˆ°æ•ˆæžœï¼Œè¿™é‡Œå€¼ä¼šè¢«è¦†ç›–ï¼Œä½†æ˜¯å› ä¸ºä»€ä¹ˆç›¸å·®äº†å¾ˆå°‘çš„æ—¶é—´ï¼Œæ‰€ä»¥å?¯ä»¥æŽ¥å?—

                    //[åˆ†å¸ƒå¼?çš„æƒ…å†µä¸‹]:å¦‚è¿‡è¿™ä¸ªæ—¶å€™ï¼Œå¤šä¸ªçº¿ç¨‹æ?°å¥½éƒ½åˆ°äº†è¿™é‡Œï¼Œä½†æ˜¯å?ªæœ‰ä¸€ä¸ªçº¿ç¨‹çš„è®¾ç½®å€¼å’Œå½“å‰?å€¼ç›¸å?Œï¼Œä»–æ‰?æœ‰æ?ƒåˆ©èŽ·å?–é”?
                    // lock acquired
                    locked = true;
                    return true;
                }
            }

            /*
                å»¶è¿Ÿ10 æ¯«ç§’,  è¿™é‡Œä½¿ç”¨éš?æœºæ—¶é—´å?¯èƒ½ä¼šå¥½ä¸€ç‚¹,å?¯ä»¥é˜²æ­¢é¥¥é¥¿è¿›ç¨‹çš„å‡ºçŽ°,å?³,å½“å?Œæ—¶åˆ°è¾¾å¤šä¸ªè¿›ç¨‹,
                å?ªä¼šæœ‰ä¸€ä¸ªè¿›ç¨‹èŽ·å¾—é”?,å…¶ä»–çš„éƒ½ç”¨å?Œæ ·çš„é¢‘çŽ‡è¿›è¡Œå°?è¯•,å?Žé?¢æœ‰æ?¥äº†ä¸€äº›è¿›è¡Œ,ä¹Ÿä»¥å?Œæ ·çš„é¢‘çŽ‡ç”³è¯·é”?,è¿™å°†å?¯èƒ½å¯¼è‡´å‰?é?¢æ?¥çš„é”?å¾—ä¸?åˆ°æ»¡è¶³.
                ä½¿ç”¨éš?æœºçš„ç­‰å¾…æ—¶é—´å?¯ä»¥ä¸€å®šç¨‹åº¦ä¸Šä¿?è¯?å…¬å¹³æ€§
             */
            try {
                Thread.sleep(10, random.nextInt(50000));
            } catch (InterruptedException e) {
                logger.error("èŽ·å?–åˆ†å¸ƒå¼?é”?ä¼‘çœ è¢«ä¸­æ–­ï¼š", e);
            }

        }
        return locked;
    }


    /**
     * è§£é”?
     */
    public void unlock() {
        // å?ªæœ‰åŠ é”?æˆ?åŠŸå¹¶ä¸”é”?è¿˜æœ‰æ•ˆæ‰?åŽ»é‡Šæ”¾é”?
        if (locked && expires > System.currentTimeMillis()) {
            redisTemplate.delete(lockKey);
            locked = false;
        }
    }

}
