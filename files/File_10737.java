package com.vondear.rxtool;

import android.Manifest;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.KeyguardManager;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.res.Configuration;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.net.Uri;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.SystemClock;
import android.provider.Settings;
import android.support.v4.app.ActivityCompat;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.util.Log;
import android.util.Xml;
import android.view.Surface;
import android.view.View;
import android.view.WindowManager;

import com.vondear.rxtool.view.RxToast;

import org.xmlpull.v1.XmlSerializer;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 * è®¾å¤‡å·¥å…·ç±»
 *
 * @author vondear
 * @date 2016/1/24
 */

public class RxDeviceTool {

    /**
     * å¾—åˆ°å±?å¹•çš„é«˜
     *
     * @param context å®žä½“
     * @return è®¾å¤‡å±?å¹•çš„é«˜åº¦
     */
    public static int getScreenHeight(Context context) {
        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        assert wm != null;
        return wm.getDefaultDisplay().getHeight();
    }

    /**
     * å¾—åˆ°å±?å¹•çš„å®½
     *
     * @param context å®žä½“
     * @return è®¾å¤‡å±?å¹•çš„å®½åº¦
     */
    public static int getScreenWidth(Context context) {
        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        assert wm != null;
        return wm.getDefaultDisplay().getWidth();
    }

    /**
     * å¾—åˆ°è®¾å¤‡å±?å¹•çš„å®½åº¦
     */
    public static int getScreenWidths(Context context) {
        return context.getResources().getDisplayMetrics().widthPixels;
    }

    /**
     * å¾—åˆ°è®¾å¤‡å±?å¹•çš„é«˜åº¦
     */
    public static int getScreenHeights(Context context) {
        return context.getResources().getDisplayMetrics().heightPixels;
    }

    /**
     * å¾—åˆ°è®¾å¤‡çš„å¯†åº¦
     */
    public static float getScreenDensity(Context context) {
        return context.getResources().getDisplayMetrics().density;
    }


    /**
     * èŽ·å?–æ‰‹æœºå”¯ä¸€æ ‡è¯†åº?åˆ—å?·
     *
     * @return æ‰‹æœºå”¯ä¸€æ ‡è¯†åº?åˆ—å?·
     */
    public static String getUniqueSerialNumber() {
        //å“?ç‰Œç±»åž‹ ä¾‹å¦‚ï¼š Galaxy nexus
        String phoneName = Build.MODEL;
        //å“?ç‰Œ ä¾‹å¦‚ï¼šsamsung
        String manuFacturer = Build.MANUFACTURER;
        Log.d("è¯¦ç»†åº?åˆ—å?·", manuFacturer + "-" + phoneName + "-" + getSerialNumber());
        return manuFacturer + "-" + phoneName + "-" + getSerialNumber();
    }

    /**
     * IMEI ï¼ˆå”¯ä¸€æ ‡è¯†åº?åˆ—å?·ï¼‰
     * <p>éœ€ä¸Ž{@link #isPhone(Context)}ä¸€èµ·ä½¿ç”¨</p>
     * <p>éœ€æ·»åŠ æ?ƒé™? {@code <uses-permission android:name="android.permission.READ_PHONE_STATE"/>}</p>
     *
     * @param context ä¸Šä¸‹æ–‡
     * @return IMEI
     */
    public static String getIMEI(Context context) {
        String deviceId;
        if (isPhone(context)) {
            deviceId = getDeviceIdIMEI(context);
        } else {
            deviceId = getAndroidId(context);
        }
        return deviceId;
    }

    /**
     * èŽ·å?–è®¾å¤‡çš„IMSI
     *
     * @param context
     * @return
     */
    public static String getIMSI(Context context) {
        return getSubscriberId(context);
    }

    /**
     * èŽ·å?–è®¾å¤‡çš„IMEI
     *
     * @param context
     * @return
     */
    @SuppressLint("HardwareIds")
    public static String getDeviceIdIMEI(Context context) {
        String id;
        //android.telephony.TelephonyManager
        TelephonyManager mTelephony = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
        if (ActivityCompat.checkSelfPermission(context, Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) {
            RxToast.error("è¯·å…ˆèŽ·å?–è¯»å?–æ‰‹æœºè®¾å¤‡æ?ƒé™?");
            return null;
        }
        if (mTelephony.getDeviceId() != null) {
            id = mTelephony.getDeviceId();
        } else {
            //android.provider.Settings;
            id = Settings.Secure.getString(context.getApplicationContext().getContentResolver(), Settings.Secure.ANDROID_ID);
        }
        return id;
    }

    /**
     * èŽ·å?–è®¾å¤‡çš„è½¯ä»¶ç‰ˆæœ¬å?·
     *
     * @param context
     * @return
     */
    public static String getDeviceSoftwareVersion(Context context) {
        TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
        if (ActivityCompat.checkSelfPermission(context, Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) {
            RxToast.error("è¯·å…ˆèŽ·å?–è¯»å?–æ‰‹æœºè®¾å¤‡æ?ƒé™?");
            return null;
        }
        return tm.getDeviceSoftwareVersion();
    }

    /**
     * èŽ·å?–æ‰‹æœºå?·
     *
     * @param context
     * @return
     */
    public static String getLine1Number(Context context) {
        TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
        if (ActivityCompat.checkSelfPermission(context, Manifest.permission.READ_SMS) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(context, Manifest.permission.READ_PHONE_NUMBERS) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(context, Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) {
            RxToast.error("è¯·å…ˆèŽ·å?–è¯»å?–æ‰‹æœºè®¾å¤‡æ?ƒé™?");
            return null;
        }
        return tm.getLine1Number();
    }

    /**
     * èŽ·å?–ISOæ ‡å‡†çš„å›½å®¶ç ?ï¼Œå?³å›½é™…é•¿é€”åŒºå?·
     *
     * @param context
     * @return
     */
    public static String getNetworkCountryIso(Context context) {
        TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
        return tm.getNetworkCountryIso();
    }

    /**
     * èŽ·å?–è®¾å¤‡çš„ MCC + MNC
     *
     * @param context
     * @return
     */
    public static String getNetworkOperator(Context context) {
        TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
        return tm.getNetworkOperator();
    }

    /**
     * èŽ·å?–(å½“å‰?å·²æ³¨å†Œçš„ç”¨æˆ·)çš„å??å­—
     *
     * @param context
     * @return
     */
    public static String getNetworkOperatorName(Context context) {
        TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
        return tm.getNetworkOperatorName();
    }

    /**
     * èŽ·å?–å½“å‰?ä½¿ç”¨çš„ç½‘ç»œç±»åž‹
     *
     * @param context
     * @return
     */
    public static int getNetworkType(Context context) {
        TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
        return tm.getNetworkType();
    }

    /**
     * èŽ·å?–æ‰‹æœºç±»åž‹
     *
     * @param context
     * @return
     */
    public static int getPhoneType(Context context) {
        TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
        return tm.getPhoneType();
    }

    /**
     * èŽ·å?–SIMå?¡çš„å›½å®¶ç ?
     *
     * @param context
     * @return
     */
    public static String getSimCountryIso(Context context) {
        TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
        return tm.getSimCountryIso();
    }

    /**
     * èŽ·å?–SIMå?¡æ??ä¾›çš„ç§»åŠ¨å›½å®¶ç ?å’Œç§»åŠ¨ç½‘ç»œç ?.5æˆ–6ä½?çš„å??è¿›åˆ¶æ•°å­—
     *
     * @param context
     * @return
     */
    public static String getSimOperator(Context context) {
        TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
        return tm.getSimOperator();
    }

    /**
     * èŽ·å?–æœ?åŠ¡å•†å??ç§°
     *
     * @param context
     * @return
     */
    public static String getSimOperatorName(Context context) {
        TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
        return tm.getSimOperatorName();
    }

    /**
     * èŽ·å?–SIMå?¡çš„åº?åˆ—å?·
     *
     * @param context
     * @return
     */
    public static String getSimSerialNumber(Context context) {
        TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
        if (ActivityCompat.checkSelfPermission(context, Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) {
            RxToast.error("è¯·å…ˆèŽ·å?–è¯»å?–æ‰‹æœºè®¾å¤‡ä¿¡æ?¯æ?ƒé™?");
            return null;
        }
        return tm.getSimSerialNumber();
    }

    /**
     * èŽ·å?–SIMçš„çŠ¶æ€?ä¿¡æ?¯
     *
     * @param context
     * @return
     */
    public static int getSimState(Context context) {
        TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
        return tm.getSimState();
    }

    /**
     * èŽ·å?–å”¯ä¸€çš„ç”¨æˆ·ID
     *
     * @param context
     * @return
     */
    public static String getSubscriberId(Context context) {
        TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
        if (ActivityCompat.checkSelfPermission(context, Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) {
            RxToast.error("è¯·å…ˆèŽ·å?–è¯»å?–æ‰‹æœºè®¾å¤‡ä¿¡æ?¯æ?ƒé™?");
            return null;
        }
        return tm.getSubscriberId();
    }

    /**
     * èŽ·å?–è¯­éŸ³é‚®ä»¶å?·ç ?
     *
     * @param context
     * @return
     */
    public static String getVoiceMailNumber(Context context) {
        TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
        if (ActivityCompat.checkSelfPermission(context, Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) {
            RxToast.error("è¯·å…ˆèŽ·å?–è¯»å?–æ‰‹æœºè®¾å¤‡ä¿¡æ?¯æ?ƒé™?");
            return null;
        }
        return tm.getVoiceMailNumber();
    }

    /**
     * èŽ·å?–ANDROID ID
     *
     * @param context
     * @return
     */
    public static String getAndroidId(Context context) {
        return Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID);
    }

    /**
     * èŽ·å?–è®¾å¤‡åž‹å?·ï¼Œå¦‚MI2SC
     *
     * @return è®¾å¤‡åž‹å?·
     */
    public static String getBuildBrandModel() {
        return Build.MODEL;// Galaxy nexus å“?ç‰Œç±»åž‹
    }

    public static String getBuildBrand() {
        return Build.BRAND;//google
    }

    /**
     * èŽ·å?–è®¾å¤‡åŽ‚å•†ï¼Œå¦‚Xiaomi
     *
     * @return è®¾å¤‡åŽ‚å•†
     */
    public static String getBuildMANUFACTURER() {
        return Build.MANUFACTURER;// samsung å“?ç‰Œ
    }

    /**
     * åº?åˆ—å?·
     *
     * @return
     */
    public static String getSerialNumber() {
        String serial = null;
        try {
            Class<?> c = Class.forName("android.os.SystemProperties");
            Method get = c.getMethod("get", String.class);
            serial = (String) get.invoke(c, "ro.serialno");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return serial;
    }

    public static String getAppPackageName() {
        return RxTool.getContext().getPackageName();
    }

    /**
     * èŽ·å?–Appç‰ˆæœ¬å??ç§°
     *
     * @param context
     * @return
     */
    public static String getAppVersionName(Context context) {
        // èŽ·å?–packagemanagerçš„å®žä¾‹
        PackageManager packageManager = context.getPackageManager();
        // getPackageName()æ˜¯ä½ å½“å‰?ç±»çš„åŒ…å??ï¼Œ0ä»£è¡¨æ˜¯èŽ·å?–ç‰ˆæœ¬ä¿¡æ?¯
        PackageInfo packInfo = null;
        try {
            packInfo = packageManager.getPackageInfo(context.getPackageName(), 0);
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        }
        String version = packInfo.versionName;
        return version;
    }

    /**
     * èŽ·å?–Appç‰ˆæœ¬å?·
     *
     * @param context
     * @return
     */
    public static int getAppVersionNo(Context context) {
        // èŽ·å?–packagemanagerçš„å®žä¾‹
        PackageManager packageManager = context.getPackageManager();
        // getPackageName()æ˜¯ä½ å½“å‰?ç±»çš„åŒ…å??ï¼Œ0ä»£è¡¨æ˜¯èŽ·å?–ç‰ˆæœ¬ä¿¡æ?¯
        PackageInfo packInfo = null;
        try {
            packInfo = packageManager.getPackageInfo(context.getPackageName(), 0);
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        }
        int version = packInfo.versionCode;
        return version;
    }

    /**
     * æ£€æŸ¥æ?ƒé™?
     *
     * @param context
     * @param permission ä¾‹å¦‚ Manifest.permission.READ_PHONE_STATE
     * @return
     */
    public static boolean checkPermission(Context context, String permission) {
        boolean result = false;
        if (Build.VERSION.SDK_INT >= 23) {
            try {
                Class clazz = Class.forName("android.content.Context");
                Method method = clazz.getMethod("checkSelfPermission", String.class);
                int rest = (Integer) method.invoke(context, permission);
                result = rest == PackageManager.PERMISSION_GRANTED;
            } catch (Exception e) {
                result = false;
            }
        } else {
            PackageManager pm = context.getPackageManager();
            if (pm.checkPermission(permission, context.getPackageName()) == PackageManager.PERMISSION_GRANTED) {
                result = true;
            }
        }
        return result;
    }

    /**
     * èŽ·å?–è®¾å¤‡ä¿¡æ?¯
     *
     * @param context
     * @return
     */
    public static String getDeviceInfo(Context context) {
        try {
            org.json.JSONObject json = new org.json.JSONObject();
            TelephonyManager tm = (TelephonyManager) context
                    .getSystemService(Context.TELEPHONY_SERVICE);
            String device_id = null;
            if (checkPermission(context, Manifest.permission.READ_PHONE_STATE)) {
                device_id = getDeviceIdIMEI(context);
            }
            String mac = null;
            FileReader fstream = null;
            try {
                fstream = new FileReader("/sys/class/net/wlan0/address");
            } catch (FileNotFoundException e) {
                fstream = new FileReader("/sys/class/net/eth0/address");
            }
            BufferedReader in = null;
            if (fstream != null) {
                try {
                    in = new BufferedReader(fstream, 1024);
                    mac = in.readLine();
                } catch (IOException e) {
                } finally {
                    if (fstream != null) {
                        try {
                            fstream.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                    if (in != null) {
                        try {
                            in.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
            json.put("mac", mac);
            if (TextUtils.isEmpty(device_id)) {
                device_id = mac;
            }
            if (TextUtils.isEmpty(device_id)) {
                device_id = Settings.Secure.getString(context.getContentResolver(),
                        Settings.Secure.ANDROID_ID);
            }
            json.put("device_id", device_id);
            return json.toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    /**
     * é??åŽ†LOGè¾“å‡ºHashMap
     *
     * @param res
     */
    public static void ThroughArray(HashMap res) {
        Iterator ite = res.entrySet().iterator();
        while (ite.hasNext()) {
            Map.Entry entry = (Map.Entry) ite.next();
            Object key = entry.getKey();
            Object value = entry.getValue();
            Log.d("MSG_AUTH_COMPLETE", (key + "ï¼š " + value));
        }
    }


    /**
     * èŽ·å?–è®¾å¤‡MACåœ°å?€
     * <p>éœ€æ·»åŠ æ?ƒé™? {@code <uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/>}</p>
     *
     * @param context ä¸Šä¸‹æ–‡
     * @return MACåœ°å?€
     */
    public static String getMacAddress(Context context) {
        WifiManager wifi = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
        WifiInfo info = wifi.getConnectionInfo();
        if (info != null) {
            String macAddress = info.getMacAddress();
            if (macAddress != null) {
                return macAddress.replace(":", "");
            }
        }
        return null;
    }

    /**
     * èŽ·å?–è®¾å¤‡MACåœ°å?€
     * <p>éœ€æ·»åŠ æ?ƒé™? {@code <uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/>}</p>
     *
     * @return MACåœ°å?€
     */

    public static String getMacAddress() {
        String macAddress = null;
        LineNumberReader lnr = null;
        InputStreamReader isr = null;
        try {
            Process pp = Runtime.getRuntime().exec("cat /sys/class/net/wlan0/address");
            isr = new InputStreamReader(pp.getInputStream());
            lnr = new LineNumberReader(isr);
            macAddress = lnr.readLine().replace(":", "");
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            RxFileTool.closeIO(lnr, isr);
        }
        return macAddress == null ? "" : macAddress;
    }


    /**
     * åˆ¤æ–­è®¾å¤‡æ˜¯å?¦æ˜¯æ‰‹æœº
     *
     * @param context ä¸Šä¸‹æ–‡
     * @return {@code true}: æ˜¯<br>{@code false}: å?¦
     */
    public static boolean isPhone(Context context) {
        TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
        return tm.getPhoneType() != TelephonyManager.PHONE_TYPE_NONE;
    }


    /**
     * èŽ·å?–æ‰‹æœºçŠ¶æ€?ä¿¡æ?¯
     * <p>éœ€æ·»åŠ æ?ƒé™? {@code <uses-permission android:name="android.permission.READ_PHONE_STATE"/>}</p>
     *
     * @param context ä¸Šä¸‹æ–‡
     * @return DeviceId(IMEI) = 99000311726612<br>
     * DeviceSoftwareVersion = 00<br>
     * Line1Number =<br>
     * NetworkCountryIso = cn<br>
     * NetworkOperator = 46003<br>
     * NetworkOperatorName = ä¸­å›½ç”µä¿¡<br>
     * NetworkType = 6<br>
     * honeType = 2<br>
     * SimCountryIso = cn<br>
     * SimOperator = 46003<br>
     * SimOperatorName = ä¸­å›½ç”µä¿¡<br>
     * SimSerialNumber = 89860315045710604022<br>
     * SimState = 5<br>
     * SubscriberId(IMSI) = 460030419724900<br>
     * VoiceMailNumber = *86<br>
     */
    public static String getPhoneStatus(Context context) {
        if (ActivityCompat.checkSelfPermission(context, Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) {
            RxToast.error("è¯·å…ˆèŽ·å?–è¯»å?–æ‰‹æœºè®¾å¤‡ä¿¡æ?¯æ?ƒé™?");
            return null;
        }
        TelephonyManager tm = (TelephonyManager) context
                .getSystemService(Context.TELEPHONY_SERVICE);
        String str = "";
        str += "DeviceId(IMEI) = " + getDeviceIdIMEI(context) + "\n";
        str += "DeviceSoftwareVersion = " + tm.getDeviceSoftwareVersion() + "\n";
        str += "Line1Number = " + tm.getLine1Number() + "\n";
        str += "NetworkCountryIso = " + tm.getNetworkCountryIso() + "\n";
        str += "NetworkOperator = " + tm.getNetworkOperator() + "\n";
        str += "NetworkOperatorName = " + tm.getNetworkOperatorName() + "\n";
        str += "NetworkType = " + tm.getNetworkType() + "\n";
        str += "honeType = " + tm.getPhoneType() + "\n";
        str += "SimCountryIso = " + tm.getSimCountryIso() + "\n";
        str += "SimOperator = " + tm.getSimOperator() + "\n";
        str += "SimOperatorName = " + tm.getSimOperatorName() + "\n";
        str += "SimSerialNumber = " + tm.getSimSerialNumber() + "\n";
        str += "SimState = " + tm.getSimState() + "\n";
        str += "SubscriberId(IMSI) = " + tm.getSubscriberId() + "\n";
        str += "VoiceMailNumber = " + tm.getVoiceMailNumber() + "\n";
        return str;
    }

    /**
     * è·³è‡³å¡«å……å¥½phoneNumberçš„æ‹¨å?·ç•Œé?¢
     *
     * @param context     ä¸Šä¸‹æ–‡
     * @param phoneNumber ç”µè¯?å?·ç ?
     */
    public static void dial(Context context, String phoneNumber) {
        context.startActivity(new Intent(Intent.ACTION_DIAL, Uri.parse("tel:" + phoneNumber)));
    }

    /**
     * æ‹¨æ‰“ç”µè¯?
     * éœ€æ·»åŠ æ?ƒé™? {@code <uses-permission android:name="android.permission.CALL_PHONE"/>}
     *
     * @param context     ä¸Šä¸‹æ–‡
     * @param phoneNumber ç”µè¯?å?·ç ?
     */
    public static void callPhone(final Context context, String phoneNumber) {
        if (!RxDataTool.isNullString(phoneNumber)) {
            final String phoneNumber1 = phoneNumber.trim();// åˆ é™¤å­—ç¬¦ä¸²é¦–éƒ¨å’Œå°¾éƒ¨çš„ç©ºæ ¼
            // è°ƒç”¨ç³»ç»Ÿçš„æ‹¨å?·æœ?åŠ¡å®žçŽ°ç”µè¯?æ‹¨æ‰“åŠŸèƒ½
            // å°?è£…ä¸€ä¸ªæ‹¨æ‰“ç”µè¯?çš„intentï¼Œå¹¶ä¸”å°†ç”µè¯?å?·ç ?åŒ…è£…æˆ?ä¸€ä¸ªUriå¯¹è±¡ä¼ å…¥

            Intent intent = new Intent(Intent.ACTION_CALL, Uri.parse("tel:" + phoneNumber1));
            if (ActivityCompat.checkSelfPermission(context, Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) {
                return;
            }
            context.startActivity(intent);// å†…éƒ¨ç±»
        }
    }

    /**
     * å?‘é€?çŸ­ä¿¡
     *
     * @param context     ä¸Šä¸‹æ–‡
     * @param phoneNumber ç”µè¯?å?·ç ?
     * @param content     å†…å®¹
     */
    public static void sendSms(Context context, String phoneNumber, String content) {
        Uri uri = Uri.parse("smsto:" + (RxDataTool.isNullString(phoneNumber) ? "" : phoneNumber));
        Intent intent = new Intent(Intent.ACTION_SENDTO, uri);
        intent.putExtra("sms_body", RxDataTool.isNullString(content) ? "" : content);
        context.startActivity(intent);
    }

    /**
     * èŽ·å?–æ‰‹æœºè?”ç³»äºº
     * <p>éœ€æ·»åŠ æ?ƒé™? {@code <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>}</p>
     * <p>éœ€æ·»åŠ æ?ƒé™? {@code <uses-permission android:name="android.permission.READ_CONTACTS"/>}</p>
     *
     * @param context ä¸Šä¸‹æ–‡;
     * @return è?”ç³»äººé“¾è¡¨
     */
    public static List<HashMap<String, String>> getAllContactInfo(Context context) {
        SystemClock.sleep(3000);
        ArrayList<HashMap<String, String>> list = new ArrayList<HashMap<String, String>>();
        // 1.èŽ·å?–å†…å®¹è§£æž?è€…
        ContentResolver resolver = context.getContentResolver();
        // 2.èŽ·å?–å†…å®¹æ??ä¾›è€…çš„åœ°å?€:com.android.contacts
        // raw_contactsè¡¨çš„åœ°å?€ :raw_contacts
        // view_dataè¡¨çš„åœ°å?€ : data
        // 3.ç”Ÿæˆ?æŸ¥è¯¢åœ°å?€
        Uri raw_uri = Uri.parse("content://com.android.contacts/raw_contacts");
        Uri date_uri = Uri.parse("content://com.android.contacts/data");
        // 4.æŸ¥è¯¢æ“?ä½œ,å…ˆæŸ¥è¯¢raw_contacts,æŸ¥è¯¢contact_id
        // projection : æŸ¥è¯¢çš„å­—æ®µ
        Cursor cursor = resolver.query(raw_uri, new String[]{"contact_id"},
                null, null, null);
        // 5.è§£æž?cursor
        while (cursor.moveToNext()) {
            // 6.èŽ·å?–æŸ¥è¯¢çš„æ•°æ?®
            String contact_id = cursor.getString(0);
            // cursor.getString(cursor.getColumnIndex("contact_id"));//getColumnIndex
            // : æŸ¥è¯¢å­—æ®µåœ¨cursorä¸­ç´¢å¼•å€¼,ä¸€èˆ¬éƒ½æ˜¯ç”¨åœ¨æŸ¥è¯¢å­—æ®µæ¯”è¾ƒå¤šçš„æ—¶å€™
            // åˆ¤æ–­contact_idæ˜¯å?¦ä¸ºç©º
            if (!RxDataTool.isNullString(contact_id)) {//null   ""
                // 7.æ ¹æ?®contact_idæŸ¥è¯¢view_dataè¡¨ä¸­çš„æ•°æ?®
                // selection : æŸ¥è¯¢æ?¡ä»¶
                // selectionArgs :æŸ¥è¯¢æ?¡ä»¶çš„å?‚æ•°
                // sortOrder : æŽ’åº?
                // ç©ºæŒ‡é’ˆ: 1.null.æ–¹æ³• 2.å?‚æ•°ä¸ºnull
                Cursor c = resolver.query(date_uri, new String[]{"data1",
                                "mimetype"}, "raw_contact_id=?",
                        new String[]{contact_id}, null);
                HashMap<String, String> map = new HashMap<String, String>();
                // 8.è§£æž?c
                while (c.moveToNext()) {
                    // 9.èŽ·å?–æ•°æ?®
                    String data1 = c.getString(0);
                    String mimetype = c.getString(1);
                    // 10.æ ¹æ?®ç±»åž‹åŽ»åˆ¤æ–­èŽ·å?–çš„data1æ•°æ?®å¹¶ä¿?å­˜
                    if (mimetype.equals("vnd.android.cursor.item/phone_v2")) {
                        // ç”µè¯?
                        map.put("phone", data1);
                    } else if (mimetype.equals("vnd.android.cursor.item/name")) {
                        // å§“å??
                        map.put("name", data1);
                    }
                }
                // 11.æ·»åŠ åˆ°é›†å?ˆä¸­æ•°æ?®
                list.add(map);
                // 12.å…³é—­cursor
                c.close();
            }
        }
        // 12.å…³é—­cursor
        cursor.close();
        return list;
    }

    /**
     * æ‰“å¼€æ‰‹æœºè?”ç³»äººç•Œé?¢ç‚¹å‡»è?”ç³»äººå?Žä¾¿èŽ·å?–è¯¥å?·ç ?
     * <p>å?‚ç…§ä»¥ä¸‹æ³¨é‡Šä»£ç ?</p>
     */
    public static void getContantNum(Activity context) {
        Log.i("tips", "U should copy the following code.");
        Intent intent = new Intent();
        intent.setAction("android.intent.action.PICK");
        intent.setType("vnd.android.cursor.dir/phone_v2");
        context.startActivityForResult(intent, 0);

        /*@Override
        protected void onActivityResult ( int requestCode, int resultCode, Intent data){
            super.onActivityResult(requestCode, resultCode, data);
            if (data != null) {
                Uri uri = data.getData();
                String num = null;
                // åˆ›å»ºå†…å®¹è§£æž?è€…
                ContentResolver contentResolver = getContentResolver();
                Cursor cursor = contentResolver.query(uri,
                        null, null, null, null);
                while (cursor.moveToNext()) {
                    num = cursor.getString(cursor.getColumnIndex("data1"));
                }
                cursor.close();
                num = num.replaceAll("-", "");//æ›¿æ?¢çš„æ“?ä½œ,555-6 -> 5556
            }
        }*/
    }

    /**
     * èŽ·å?–æ‰‹æœºçŸ­ä¿¡å¹¶ä¿?å­˜åˆ°xmlä¸­
     * <p>éœ€æ·»åŠ æ?ƒé™? {@code <uses-permission android:name="android.permission.READ_SMS"/>}</p>
     * <p>éœ€æ·»åŠ æ?ƒé™? {@code <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>}</p>
     *
     * @param context ä¸Šä¸‹æ–‡
     */
    public static void getAllSMS(Context context) {
        // 1.èŽ·å?–çŸ­ä¿¡
        // 1.1èŽ·å?–å†…å®¹è§£æž?è€…
        ContentResolver resolver = context.getContentResolver();
        // 1.2èŽ·å?–å†…å®¹æ??ä¾›è€…åœ°å?€   sms,smsè¡¨çš„åœ°å?€:null  ä¸?å†™
        // 1.3èŽ·å?–æŸ¥è¯¢è·¯å¾„
        Uri uri = Uri.parse("content://sms");
        // 1.4.æŸ¥è¯¢æ“?ä½œ
        // projection : æŸ¥è¯¢çš„å­—æ®µ
        // selection : æŸ¥è¯¢çš„æ?¡ä»¶
        // selectionArgs : æŸ¥è¯¢æ?¡ä»¶çš„å?‚æ•°
        // sortOrder : æŽ’åº?
        Cursor cursor = resolver.query(uri, new String[]{"address", "date", "type", "body"}, null, null, null);
        // è®¾ç½®æœ€å¤§è¿›åº¦
        int count = cursor.getCount();//èŽ·å?–çŸ­ä¿¡çš„ä¸ªæ•°
        // 2.å¤‡ä»½çŸ­ä¿¡
        // 2.1èŽ·å?–xmlåº?åˆ—å™¨
        XmlSerializer xmlSerializer = Xml.newSerializer();
        try {
            // 2.2è®¾ç½®xmlæ–‡ä»¶ä¿?å­˜çš„è·¯å¾„
            // os : ä¿?å­˜çš„ä½?ç½®
            // encoding : ç¼–ç ?æ ¼å¼?
            xmlSerializer.setOutput(new FileOutputStream(new File("/mnt/sdcard/backupsms.xml")), "utf-8");
            // 2.3è®¾ç½®å¤´ä¿¡æ?¯
            // standalone : æ˜¯å?¦ç‹¬ç«‹ä¿?å­˜
            xmlSerializer.startDocument("utf-8", true);
            // 2.4è®¾ç½®æ ¹æ ‡ç­¾
            xmlSerializer.startTag(null, "smss");
            // 1.5.è§£æž?cursor
            while (cursor.moveToNext()) {
                SystemClock.sleep(1000);
                // 2.5è®¾ç½®çŸ­ä¿¡çš„æ ‡ç­¾
                xmlSerializer.startTag(null, "sms");
                // 2.6è®¾ç½®æ–‡æœ¬å†…å®¹çš„æ ‡ç­¾
                xmlSerializer.startTag(null, "address");
                String address = cursor.getString(0);
                // 2.7è®¾ç½®æ–‡æœ¬å†…å®¹
                xmlSerializer.text(address);
                xmlSerializer.endTag(null, "address");
                xmlSerializer.startTag(null, "date");
                String date = cursor.getString(1);
                xmlSerializer.text(date);
                xmlSerializer.endTag(null, "date");
                xmlSerializer.startTag(null, "type");
                String type = cursor.getString(2);
                xmlSerializer.text(type);
                xmlSerializer.endTag(null, "type");
                xmlSerializer.startTag(null, "body");
                String body = cursor.getString(3);
                xmlSerializer.text(body);
                xmlSerializer.endTag(null, "body");
                xmlSerializer.endTag(null, "sms");
                System.out.println("address:" + address + "   date:" + date + "  type:" + type + "  body:" + body);
            }
            xmlSerializer.endTag(null, "smss");
            xmlSerializer.endDocument();
            // 2.8å°†æ•°æ?®åˆ·æ–°åˆ°æ–‡ä»¶ä¸­
            xmlSerializer.flush();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    /**
     * è®¾ç½®å±?å¹•ä¸ºæ¨ªå±?
     * <p>è¿˜æœ‰ä¸€ç§?å°±æ˜¯åœ¨Activityä¸­åŠ å±žæ€§android:screenOrientation="landscape"</p>
     * <p>ä¸?è®¾ç½®Activityçš„android:configChangesæ—¶ï¼Œåˆ‡å±?ä¼šé‡?æ–°è°ƒç”¨å?„ä¸ªç”Ÿå‘½å‘¨æœŸï¼Œåˆ‡æ¨ªå±?æ—¶ä¼šæ‰§è¡Œä¸€æ¬¡ï¼Œåˆ‡ç«–å±?æ—¶ä¼šæ‰§è¡Œä¸¤æ¬¡</p>
     * <p>è®¾ç½®Activityçš„android:configChanges="orientation"æ—¶ï¼Œåˆ‡å±?è¿˜æ˜¯ä¼šé‡?æ–°è°ƒç”¨å?„ä¸ªç”Ÿå‘½å‘¨æœŸï¼Œåˆ‡æ¨ªã€?ç«–å±?æ—¶å?ªä¼šæ‰§è¡Œä¸€æ¬¡</p>
     * <p>è®¾ç½®Activityçš„android:configChanges="orientation|keyboardHidden|screenSize"ï¼ˆ4.0ä»¥ä¸Šå¿…é¡»å¸¦æœ€å?Žä¸€ä¸ªå?‚æ•°ï¼‰æ—¶
     * åˆ‡å±?ä¸?ä¼šé‡?æ–°è°ƒç”¨å?„ä¸ªç”Ÿå‘½å‘¨æœŸï¼Œå?ªä¼šæ‰§è¡ŒonConfigurationChangedæ–¹æ³•</p>
     *
     * @param activity activity
     */
    public static void setLandscape(Activity activity) {
        activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
    }

    /**
     * è®¾ç½®å±?å¹•ä¸ºç«–å±?
     *
     * @param activity activity
     */
    public static void setPortrait(Activity activity) {
        activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
    }

    /**
     * åˆ¤æ–­æ˜¯å?¦æ¨ªå±?
     *
     * @param context ä¸Šä¸‹æ–‡
     * @return {@code true}: æ˜¯<br>{@code false}: å?¦
     */
    public static boolean isLandscape(Context context) {
        return context.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE;
    }

    /**
     * åˆ¤æ–­æ˜¯å?¦ç«–å±?
     *
     * @param context ä¸Šä¸‹æ–‡
     * @return {@code true}: æ˜¯<br>{@code false}: å?¦
     */
    public static boolean isPortrait(Context context) {
        return context.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT;
    }

    /**
     * èŽ·å?–å±?å¹•æ—‹è½¬è§’åº¦
     *
     * @param activity activity
     * @return å±?å¹•æ—‹è½¬è§’åº¦
     */
    public static int getScreenRotation(Activity activity) {
        switch (activity.getWindowManager().getDefaultDisplay().getRotation()) {
            default:
            case Surface.ROTATION_0:
                return 0;
            case Surface.ROTATION_90:
                return 90;
            case Surface.ROTATION_180:
                return 180;
            case Surface.ROTATION_270:
                return 270;
        }
    }

    /**
     * èŽ·å?–å½“å‰?å±?å¹•æˆªå›¾ï¼ŒåŒ…å?«çŠ¶æ€?æ ?
     *
     * @param activity activity
     * @return Bitmap
     */
    public static Bitmap captureWithStatusBar(Activity activity) {
        View view = activity.getWindow().getDecorView();
        view.setDrawingCacheEnabled(true);
        view.buildDrawingCache();
        Bitmap bmp = view.getDrawingCache();
        int width = getScreenWidth(activity);
        int height = getScreenHeight(activity);
        Bitmap ret = Bitmap.createBitmap(bmp, 0, 0, width, height);
        view.destroyDrawingCache();
        return ret;
    }

    /**
     * èŽ·å?–å½“å‰?å±?å¹•æˆªå›¾ï¼Œä¸?åŒ…å?«çŠ¶æ€?æ ?
     * <p>éœ€è¦?ç”¨åˆ°ä¸Šé?¢èŽ·å?–çŠ¶æ€?æ ?é«˜åº¦getStatusBarHeightçš„æ–¹æ³•</p>
     *
     * @param activity activity
     * @return Bitmap
     */
    public static Bitmap captureWithoutStatusBar(Activity activity) {
        View view = activity.getWindow().getDecorView();
        view.setDrawingCacheEnabled(true);
        view.buildDrawingCache();
        Bitmap bmp = view.getDrawingCache();
        int statusBarHeight = RxBarTool.getStatusBarHeight(activity);
        int width = getScreenWidth(activity);
        int height = getScreenHeight(activity);
        Bitmap ret = Bitmap.createBitmap(bmp, 0, statusBarHeight, width, height - statusBarHeight);
        view.destroyDrawingCache();
        return ret;
    }

    /**
     * èŽ·å?–DisplayMetricså¯¹è±¡
     *
     * @param context åº”ç”¨ç¨‹åº?ä¸Šä¸‹æ–‡
     * @return
     */
    public static DisplayMetrics getDisplayMetrics(Context context) {
        WindowManager windowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        DisplayMetrics displayMetrics = new DisplayMetrics();
        windowManager.getDefaultDisplay().getMetrics(displayMetrics);
        return displayMetrics;
    }

    /**
     * åˆ¤æ–­æ˜¯å?¦é”?å±?
     *
     * @param context ä¸Šä¸‹æ–‡
     * @return {@code true}: æ˜¯<br>{@code false}: å?¦
     */
    public static boolean isScreenLock(Context context) {
        KeyguardManager km = (KeyguardManager) context
                .getSystemService(Context.KEYGUARD_SERVICE);
        return km.inKeyguardRestrictedInputMode();
    }


    /**
     * è®¾ç½®å®‰å…¨çª—å?£ï¼Œç¦?ç”¨ç³»ç»Ÿæˆªå±?ã€‚é˜²æ­¢ App ä¸­çš„ä¸€äº›ç•Œé?¢è¢«æˆªå±?ï¼Œå¹¶æ˜¾ç¤ºåœ¨å…¶ä»–è®¾å¤‡ä¸­é€ æˆ?ä¿¡æ?¯æ³„æ¼?ã€‚
     * ï¼ˆå¸¸è§?æ‰‹æœºè®¾å¤‡ç³»ç»Ÿæˆªå±?æ“?ä½œæ–¹å¼?ä¸ºï¼šå?Œæ—¶æŒ‰ä¸‹ç”µæº?é”®å’ŒéŸ³é‡?é”®ã€‚ï¼‰
     *
     * @param activity
     */
    public static void noScreenshots(Activity activity) {
        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE);
    }
}
