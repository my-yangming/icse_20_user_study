/*
 * <summary></summary>
 * <author>He Han</author>
 * <email>hankcs.cn@gmail.com</email>
 * <create-date>2014/10/8 1:05</create-date>
 *
 * <copyright file="Occurrence.java" company="ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸">
 * Copyright (c) 2003-2014, ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸. All Right Reserved, http://www.linrunsoft.com/
 * This source is subject to the LinrunSpace License. Please contact ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸ to get more information.
 * </copyright>
 */
package com.hankcs.hanlp.corpus.occurrence;

import com.hankcs.hanlp.collection.trie.bintrie.BinTrie;
import com.hankcs.hanlp.dictionary.CoreDictionary;
import com.hankcs.hanlp.seg.common.Term;
import com.hankcs.hanlp.tokenizer.NotionalTokenizer;
import com.hankcs.hanlp.utility.Predefine;

import java.util.*;

/**
 * è¯?å…±çŽ°ç»Ÿè®¡ï¼Œæœ€å¤šç»Ÿè®¡åˆ°ä¸‰é˜¶å…±çŽ°
 *
 * @author hankcs
 */
public class Occurrence
{
    /**
     * ä¸¤ä¸ªè¯?çš„æ­£å?‘è¿žæŽ¥ç¬¦ ä¸­å›½ RIGHT äººæ°‘
     */
    public static final char RIGHT = '\u0000';
    /**
     * ä¸¤ä¸ªè¯?çš„é€†å?‘è¿žæŽ¥ç¬¦ äººæ°‘ LEFT ä¸­å›½
     */
    static final char LEFT = '\u0001';

    /**
     * å…¨éƒ¨å?•è¯?æ•°é‡?
     */
    double totalTerm;
    /**
     * å…¨éƒ¨æŽ¥ç»­æ•°é‡?ï¼ŒåŒ…å?«æ­£å?‘å’Œé€†å?‘
     */
    double totalPair;

    /**
     * 2 gramçš„pair
     */
    BinTrie<PairFrequency> triePair;
    /**
     * è¯?é¢‘ç»Ÿè®¡ç”¨çš„å‚¨å­˜ç»“æž„
     */
    BinTrie<TermFrequency> trieSingle;
    /**
     * ä¸‰é˜¶å‚¨å­˜ç»“æž„
     */
    BinTrie<TriaFrequency> trieTria;

    /**
     * è½¯ç¼“å­˜ä¸€ä¸ªpairçš„setset
     */
    private Set<Map.Entry<String, PairFrequency>> entrySetPair;

    public Occurrence()
    {
        triePair = new BinTrie<PairFrequency>();
        trieSingle = new BinTrie<TermFrequency>();
        trieTria = new BinTrie<TriaFrequency>();
        totalTerm = totalPair = 0;
    }

    /**
     * æ·»åŠ ä¸€ä¸ªå…±çŽ°
     *
     * @param first  ç¬¬ä¸€ä¸ªè¯?
     * @param second ç¬¬äºŒä¸ªè¯?
     */
    public void addPair(String first, String second)
    {
        addPair(first, RIGHT, second);
    }

    /**
     * ç»Ÿè®¡è¯?é¢‘
     *
     * @param key å¢žåŠ ä¸€ä¸ªè¯?
     */
    public void addTerm(String key)
    {
        TermFrequency value = trieSingle.get(key);
        if (value == null)
        {
            value = new TermFrequency(key);
            trieSingle.put(key, value);
        }
        else
        {
            value.increase();
        }
        ++totalTerm;
    }

    private void addPair(String first, char delimiter, String second)
    {
        String key = first + delimiter + second;
        PairFrequency value = triePair.get(key);
        if (value == null)
        {
            value = PairFrequency.create(first, delimiter, second);
            triePair.put(key, value);
        }
        else
        {
            value.increase();
        }
        ++totalPair;
    }

    public void addTria(String first, String second, String third)
    {
        String key = first + RIGHT + second + RIGHT + third;
        TriaFrequency value = trieTria.get(key);
        if (value == null)
        {
            value = TriaFrequency.create(first, RIGHT, second, third);
            trieTria.put(key, value);
        }
        else
        {
            value.increase();
        }
        key = second + RIGHT + third + LEFT + first;    // å…¶å®žä¸¤ä¸ªkeyå?ªæœ‰æœ€å?Žä¸€ä¸ªè¿žæŽ¥ç¬¦æ–¹å?‘ä¸?å?Œ
        value = trieTria.get(key);
        if (value == null)
        {
            value = TriaFrequency.create(second, third, LEFT, first);
            trieTria.put(key, value);
        }
        else
        {
            value.increase();
        }
    }

    /**
     * èŽ·å?–è¯?é¢‘
     *
     * @param term
     * @return
     */
    public int getTermFrequency(String term)
    {
        TermFrequency termFrequency = trieSingle.get(term);
        if (termFrequency == null) return 0;
        return termFrequency.getValue();
    }

    public int getPairFrequency(String first, String second)
    {
        TermFrequency termFrequency = triePair.get(first + RIGHT + second);
        if (termFrequency == null) return 0;
        return termFrequency.getValue();
    }

    public void addAll(String[] termList)
    {
        for (String term : termList)
        {
            addTerm(term);
        }

        String first = null;
        for (String current : termList)
        {
            if (first != null)
            {
                addPair(first, current);
            }
            first = current;
        }
        for (int i = 2; i < termList.length; ++i)
        {
            addTria(termList[i - 2], termList[i - 1], termList[i]);
        }
    }

    public List<PairFrequency> getPhraseByMi()
    {
        List<PairFrequency> pairFrequencyList = new ArrayList<PairFrequency>(entrySetPair.size());
        for (Map.Entry<String, PairFrequency> entry : entrySetPair)
        {
            pairFrequencyList.add(entry.getValue());
        }
        Collections.sort(pairFrequencyList, new Comparator<PairFrequency>()
        {
            @Override
            public int compare(PairFrequency o1, PairFrequency o2)
            {
                return -Double.compare(o1.mi, o2.mi);
            }
        });
        return pairFrequencyList;
    }

    public List<PairFrequency> getPhraseByLe()
    {
        List<PairFrequency> pairFrequencyList = new ArrayList<PairFrequency>(entrySetPair.size());
        for (Map.Entry<String, PairFrequency> entry : entrySetPair)
        {
            pairFrequencyList.add(entry.getValue());
        }
        Collections.sort(pairFrequencyList, new Comparator<PairFrequency>()
        {
            @Override
            public int compare(PairFrequency o1, PairFrequency o2)
            {
                return -Double.compare(o1.le, o2.le);
            }
        });
        return pairFrequencyList;
    }

    public List<PairFrequency> getPhraseByRe()
    {
        List<PairFrequency> pairFrequencyList = new ArrayList<PairFrequency>(entrySetPair.size());
        for (Map.Entry<String, PairFrequency> entry : entrySetPair)
        {
            pairFrequencyList.add(entry.getValue());
        }
        Collections.sort(pairFrequencyList, new Comparator<PairFrequency>()
        {
            @Override
            public int compare(PairFrequency o1, PairFrequency o2)
            {
                return -Double.compare(o1.re, o2.re);
            }
        });
        return pairFrequencyList;
    }

    public List<PairFrequency> getPhraseByScore()
    {
        List<PairFrequency> pairFrequencyList = new ArrayList<PairFrequency>(entrySetPair.size());
        for (Map.Entry<String, PairFrequency> entry : entrySetPair)
        {
            pairFrequencyList.add(entry.getValue());
        }
        Collections.sort(pairFrequencyList, new Comparator<PairFrequency>()
        {
            @Override
            public int compare(PairFrequency o1, PairFrequency o2)
            {
                return -Double.compare(o1.score, o2.score);
            }
        });
        return pairFrequencyList;
    }

    public void addAll(List<Term> resultList)
    {
//        System.out.println(resultList);
        String[] termList = new String[resultList.size()];
        int i = 0;
        for (Term word : resultList)
        {
            termList[i] = word.word;
            ++i;
        }
        addAll(termList);
    }

    public void addAll(String text)
    {
        addAll(NotionalTokenizer.segment(text));
    }

    @Override
    public String toString()
    {
        final StringBuilder sb = new StringBuilder("äºŒé˜¶å…±çŽ°ï¼š\n");
        for (Map.Entry<String, PairFrequency> entry : triePair.entrySet())
        {
            sb.append(entry.getValue()).append('\n');
        }
        sb.append("ä¸‰é˜¶å…±çŽ°ï¼š\n");
        for (Map.Entry<String, TriaFrequency> entry : trieTria.entrySet())
        {
            sb.append(entry.getValue()).append('\n');
        }
        return sb.toString();
    }

    public double computeMutualInformation(String first, String second)
    {
        return Math.log(Math.max(Predefine.MIN_PROBABILITY, getPairFrequency(first, second) / (totalPair / 2)) / Math.max(Predefine.MIN_PROBABILITY, (getTermFrequency(first) / totalTerm * getTermFrequency(second) / totalTerm)));
    }

    public double computeMutualInformation(PairFrequency pair)
    {
        return Math.log(Math.max(Predefine.MIN_PROBABILITY, pair.getValue() / totalPair) / Math.max(Predefine.MIN_PROBABILITY, (CoreDictionary.getTermFrequency(pair.first) / (double) CoreDictionary.totalFrequency * CoreDictionary.getTermFrequency(pair.second) / (double) CoreDictionary.totalFrequency)));
    }

    /**
     * è®¡ç®—å·¦ç†µ
     *
     * @param pair
     * @return
     */
    public double computeLeftEntropy(PairFrequency pair)
    {
        Set<Map.Entry<String, TriaFrequency>> entrySet = trieTria.prefixSearch(pair.getKey() + LEFT);
        return computeEntropy(entrySet);
    }

    /**
     * è®¡ç®—å?³ç†µ
     *
     * @param pair
     * @return
     */
    public double computeRightEntropy(PairFrequency pair)
    {
        Set<Map.Entry<String, TriaFrequency>> entrySet = trieTria.prefixSearch(pair.getKey() + RIGHT);
        return computeEntropy(entrySet);
    }

    private double computeEntropy(Set<Map.Entry<String, TriaFrequency>> entrySet)
    {
        double totalFrequency = 0;
        for (Map.Entry<String, TriaFrequency> entry : entrySet)
        {
            totalFrequency += entry.getValue().getValue();
        }
        double le = 0;
        for (Map.Entry<String, TriaFrequency> entry : entrySet)
        {
            double p = entry.getValue().getValue() / totalFrequency;
            le += -p * Math.log(p);
        }
        return le;
    }

    /**
     * è¾“å…¥æ•°æ?®å®Œæ¯•ï¼Œæ‰§è¡Œè®¡ç®—
     */
    public void compute()
    {
        entrySetPair = triePair.entrySet();
        double total_mi = 0;
        double total_le = 0;
        double total_re = 0;
        for (Map.Entry<String, PairFrequency> entry : entrySetPair)
        {
            PairFrequency value = entry.getValue();
            value.mi = computeMutualInformation(value);
            value.le = computeLeftEntropy(value);
            value.re = computeRightEntropy(value);
            total_mi += value.mi;
            total_le += value.le;
            total_re += value.re;
        }

        for (Map.Entry<String, PairFrequency> entry : entrySetPair)
        {
            PairFrequency value = entry.getValue();
            value.score = value.mi / total_mi + value.le / total_le+ value.re / total_re;   // å½’ä¸€åŒ–
            value.score *= entrySetPair.size();
        }
    }

    /**
     * èŽ·å?–ä¸€é˜¶å…±çŽ°,å…¶å®žå°±æ˜¯è¯?é¢‘ç»Ÿè®¡
     * @return
     */
    public Set<Map.Entry<String, TermFrequency>> getUniGram()
    {
        return trieSingle.entrySet();
    }

    /**
     * èŽ·å?–äºŒé˜¶å…±çŽ°
     * @return
     */
    public Set<Map.Entry<String, PairFrequency>> getBiGram()
    {
        return triePair.entrySet();
    }

    /**
     * èŽ·å?–ä¸‰é˜¶å…±çŽ°
     * @return
     */
    public Set<Map.Entry<String, TriaFrequency>> getTriGram()
    {
        return trieTria.entrySet();
    }


//    public static void main(String[] args)
//    {
//        Occurrence occurrence = new Occurrence();
//        occurrence.addAll("ç®—æ³•å·¥ç¨‹å¸ˆ\n" +
//                                  "ç®—æ³•ï¼ˆAlgorithmï¼‰æ˜¯ä¸€ç³»åˆ—è§£å†³é—®é¢˜çš„æ¸…æ™°æŒ‡ä»¤ï¼Œä¹Ÿå°±æ˜¯è¯´ï¼Œèƒ½å¤Ÿå¯¹ä¸€å®šè§„èŒƒçš„è¾“å…¥ï¼Œåœ¨æœ‰é™?æ—¶é—´å†…èŽ·å¾—æ‰€è¦?æ±‚çš„è¾“å‡ºã€‚å¦‚æžœä¸€ä¸ªç®—æ³•æœ‰ç¼ºé™·ï¼Œæˆ–ä¸?é€‚å?ˆäºŽæŸ?ä¸ªé—®é¢˜ï¼Œæ‰§è¡Œè¿™ä¸ªç®—æ³•å°†ä¸?ä¼šè§£å†³è¿™ä¸ªé—®é¢˜ã€‚ä¸?å?Œçš„ç®—æ³•å?¯èƒ½ç”¨ä¸?å?Œçš„æ—¶é—´ã€?ç©ºé—´æˆ–æ•ˆçŽ‡æ?¥å®Œæˆ?å?Œæ ·çš„ä»»åŠ¡ã€‚ä¸€ä¸ªç®—æ³•çš„ä¼˜åŠ£å?¯ä»¥ç”¨ç©ºé—´å¤?æ?‚åº¦ä¸Žæ—¶é—´å¤?æ?‚åº¦æ?¥è¡¡é‡?ã€‚ç®—æ³•å·¥ç¨‹å¸ˆå°±æ˜¯åˆ©ç”¨ç®—æ³•å¤„ç?†äº‹ç‰©çš„äººã€‚\n" +
//                                  "\n" +
//                                  "1è?Œä½?ç®€ä»‹\n" +
//                                  "ç®—æ³•å·¥ç¨‹å¸ˆæ˜¯ä¸€ä¸ªé?žå¸¸é«˜ç«¯çš„è?Œä½?ï¼›\n" +
//                                  "ä¸“ä¸šè¦?æ±‚ï¼šè®¡ç®—æœºã€?ç”µå­?ã€?é€šä¿¡ã€?æ•°å­¦ç­‰ç›¸å…³ä¸“ä¸šï¼›\n" +
//                                  "å­¦åŽ†è¦?æ±‚ï¼šæœ¬ç§‘å?Šå…¶ä»¥ä¸Šçš„å­¦åŽ†ï¼Œå¤§å¤šæ•°æ˜¯ç¡•å£«å­¦åŽ†å?Šå…¶ä»¥ä¸Šï¼›\n" +
//                                  "è¯­è¨€è¦?æ±‚ï¼šè‹±è¯­è¦?æ±‚æ˜¯ç†Ÿç»ƒï¼ŒåŸºæœ¬ä¸Šèƒ½é˜…è¯»å›½å¤–ä¸“ä¸šä¹¦åˆŠï¼›\n" +
//                                  "å¿…é¡»æŽŒæ?¡è®¡ç®—æœºç›¸å…³çŸ¥è¯†ï¼Œç†Ÿç»ƒä½¿ç”¨ä»¿çœŸå·¥å…·MATLABç­‰ï¼Œå¿…é¡»ä¼šä¸€é—¨ç¼–ç¨‹è¯­è¨€ã€‚\n" +
//                                  "\n" +
//                                  "2ç ”ç©¶æ–¹å?‘\n" +
//                                  "è§†é¢‘ç®—æ³•å·¥ç¨‹å¸ˆã€?å›¾åƒ?å¤„ç?†ç®—æ³•å·¥ç¨‹å¸ˆã€?éŸ³é¢‘ç®—æ³•å·¥ç¨‹å¸ˆ é€šä¿¡åŸºå¸¦ç®—æ³•å·¥ç¨‹å¸ˆ\n" +
//                                  "\n" +
//                                  "3ç›®å‰?å›½å†…å¤–çŠ¶å†µ\n" +
//                                  "ç›®å‰?å›½å†…ä»Žäº‹ç®—æ³•ç ”ç©¶çš„å·¥ç¨‹å¸ˆä¸?å°‘ï¼Œä½†æ˜¯é«˜çº§ç®—æ³•å·¥ç¨‹å¸ˆå?´å¾ˆå°‘ï¼Œæ˜¯ä¸€ä¸ªé?žå¸¸ç´§ç¼ºçš„ä¸“ä¸šå·¥ç¨‹å¸ˆã€‚ç®—æ³•å·¥ç¨‹å¸ˆæ ¹æ?®ç ”ç©¶é¢†åŸŸæ?¥åˆ†ä¸»è¦?æœ‰éŸ³é¢‘/è§†é¢‘ç®—æ³•å¤„ç?†ã€?å›¾åƒ?æŠ€æœ¯æ–¹é?¢çš„äºŒç»´ä¿¡æ?¯ç®—æ³•å¤„ç?†å’Œé€šä¿¡ç‰©ç?†å±‚ã€?é›·è¾¾ä¿¡å?·å¤„ç?†ã€?ç”Ÿç‰©åŒ»å­¦ä¿¡å?·å¤„ç?†ç­‰é¢†åŸŸçš„ä¸€ç»´ä¿¡æ?¯ç®—æ³•å¤„ç?†ã€‚\n" +
//                                  "åœ¨è®¡ç®—æœºéŸ³è§†é¢‘å’Œå›¾å½¢å›¾å½¢å›¾åƒ?æŠ€æœ¯ç­‰äºŒç»´ä¿¡æ?¯ç®—æ³•å¤„ç?†æ–¹é?¢ç›®å‰?æ¯”è¾ƒå…ˆè¿›çš„è§†é¢‘å¤„ç?†ç®—æ³•ï¼šæœºå™¨è§†è§‰æˆ?ä¸ºæ­¤ç±»ç®—æ³•ç ”ç©¶çš„æ ¸å¿ƒï¼›å?¦å¤–è¿˜æœ‰2Dè½¬3Dç®—æ³•(2D-to-3D conversion)ï¼ŒåŽ»éš”è¡Œç®—æ³•(de-interlacing)ï¼Œè¿?åŠ¨ä¼°è®¡è¿?åŠ¨è¡¥å?¿ç®—æ³•(Motion estimation/Motion Compensation)ï¼ŒåŽ»å™ªç®—æ³•(Noise Reduction)ï¼Œç¼©æ”¾ç®—æ³•(scaling)ï¼Œé”?åŒ–å¤„ç?†ç®—æ³•(Sharpness)ï¼Œè¶…åˆ†è¾¨çŽ‡ç®—æ³•(Super Resolution),æ‰‹åŠ¿è¯†åˆ«(gesture recognition),äººè„¸è¯†åˆ«(face recognition)ã€‚\n" +
//                                  "åœ¨é€šä¿¡ç‰©ç?†å±‚ç­‰ä¸€ç»´ä¿¡æ?¯é¢†åŸŸç›®å‰?å¸¸ç”¨çš„ç®—æ³•ï¼šæ— çº¿é¢†åŸŸçš„RRMã€?RTTï¼Œä¼ é€?é¢†åŸŸçš„è°ƒåˆ¶è§£è°ƒã€?ä¿¡é?“å?‡è¡¡ã€?ä¿¡å?·æ£€æµ‹ã€?ç½‘ç»œä¼˜åŒ–ã€?ä¿¡å?·åˆ†è§£ç­‰ã€‚\n" +
//                                  "å?¦å¤–æ•°æ?®æŒ–æŽ˜ã€?äº’è?”ç½‘æ?œç´¢ç®—æ³•ä¹Ÿæˆ?ä¸ºå½“ä»Šçš„çƒ­é—¨æ–¹å?‘ã€‚\n" +
//                                  "ç®—æ³•å·¥ç¨‹å¸ˆé€?æ¸?å¾€äººå·¥æ™ºèƒ½æ–¹å?‘å?‘å±•ã€‚");
//        occurrence.compute();
//        System.out.println(occurrence);
//        System.out.println(occurrence.getPhraseByScore());
//    }
}
