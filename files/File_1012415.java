/**
 * Copyright (c) 2018-2028, Chill Zhuang åº„éªž (smallchill@163.com).
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springblade.desk.controller;

import com.baomidou.mybatisplus.core.metadata.IPage;
import io.swagger.annotations.*;
import lombok.AllArgsConstructor;
import org.springblade.common.cache.CacheNames;
import org.springblade.core.boot.ctrl.BladeController;
import org.springblade.core.mp.support.Condition;
import org.springblade.core.mp.support.Query;
import org.springblade.core.tool.api.R;
import org.springblade.core.tool.utils.Func;
import org.springblade.desk.entity.Notice;
import org.springblade.desk.service.INoticeService;
import org.springblade.desk.vo.NoticeVO;
import org.springblade.desk.wrapper.NoticeWrapper;
import org.springframework.web.bind.annotation.*;
import springfox.documentation.annotations.ApiIgnore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * æŽ§åˆ¶å™¨
 *
 * @author Chill
 * @since 2018-09-29
 */
@RestController
@RequestMapping("notice")
@AllArgsConstructor
@Api(value = "ç”¨æˆ·å?šå®¢", tags = "å?šå®¢æŽ¥å?£")
public class NoticeController extends BladeController implements CacheNames {

	private INoticeService noticeService;

	/**
	 * è¯¦æƒ…
	 */
	@GetMapping("/detail")
	@ApiOperationSupport(order = 1)
	@ApiOperation(value = "è¯¦æƒ…", notes = "ä¼ å…¥notice")
	public R<NoticeVO> detail(Notice notice) {
		Notice detail = noticeService.getOne(Condition.getQueryWrapper(notice));
		return R.data(NoticeWrapper.build().entityVO(detail));
	}

	/**
	 * åˆ†é¡µ
	 */
	@GetMapping("/list")
	@ApiImplicitParams({
		@ApiImplicitParam(name = "category", value = "å…¬å‘Šç±»åž‹", paramType = "query", dataType = "integer"),
		@ApiImplicitParam(name = "title", value = "å…¬å‘Šæ ‡é¢˜", paramType = "query", dataType = "string")
	})
	@ApiOperationSupport(order = 2)
	@ApiOperation(value = "åˆ†é¡µ", notes = "ä¼ å…¥notice")
	public R<IPage<NoticeVO>> list(@ApiIgnore @RequestParam Map<String, Object> notice, Query query) {
		IPage<Notice> pages = noticeService.page(Condition.getPage(query), Condition.getQueryWrapper(notice, Notice.class));
		return R.data(NoticeWrapper.build().pageVO(pages));
	}

	/**
	 * æ–°å¢ž
	 */
	@PostMapping("/save")
	@ApiOperationSupport(order = 3)
	@ApiOperation(value = "æ–°å¢ž", notes = "ä¼ å…¥notice")
	public R save(@RequestBody Notice notice) {
		return R.status(noticeService.save(notice));
	}

	/**
	 * ä¿®æ”¹
	 */
	@PostMapping("/update")
	@ApiOperationSupport(order = 4)
	@ApiOperation(value = "ä¿®æ”¹", notes = "ä¼ å…¥notice")
	public R update(@RequestBody Notice notice) {
		return R.status(noticeService.updateById(notice));
	}

	/**
	 * æ–°å¢žæˆ–ä¿®æ”¹
	 */
	@PostMapping("/submit")
	@ApiOperationSupport(order = 5)
	@ApiOperation(value = "æ–°å¢žæˆ–ä¿®æ”¹", notes = "ä¼ å…¥notice")
	public R submit(@RequestBody Notice notice) {
		return R.status(noticeService.saveOrUpdate(notice));
	}

	/**
	 * åˆ é™¤
	 */
	@PostMapping("/remove")
	@ApiOperationSupport(order = 6)
	@ApiOperation(value = "é€»è¾‘åˆ é™¤", notes = "ä¼ å…¥notice")
	public R remove(@ApiParam(value = "ä¸»é”®é›†å?ˆ") @RequestParam String ids) {
		boolean temp = noticeService.deleteLogic(Func.toIntList(ids));
		return R.status(temp);
	}

	/**
	 * èŽ·å?–æ¶ˆæ?¯
	 *
	 * @return
	 */
	@GetMapping("/notices")
	@ApiOperationSupport(order = 7)
	@ApiOperation(value = "æ¶ˆæ?¯", notes = "æ¶ˆæ?¯")
	public R notices() {
		List<Map<String, String>> list = new ArrayList<>();
		Map<String, String> map1 = new HashMap<>(16);
		map1.put("logo", "https://spring.io/img/homepage/icon-spring-framework.svg");
		map1.put("title", "SpringBoot");
		map1.put("description", "çŽ°åœ¨çš„webé¡¹ç›®å‡ ä¹Žéƒ½ä¼šç”¨åˆ°springæ¡†æž¶ï¼Œè€Œè¦?ä½¿ç”¨springéš¾å…?éœ€è¦?é…?ç½®å¤§é‡?çš„xmlé…?ç½®æ–‡ä»¶ï¼Œè€Œ springbootçš„å‡ºçŽ°è§£   å†³äº†è¿™ä¸€é—®é¢˜ï¼Œä¸€ä¸ªé¡¹ç›®ç”šè‡³ä¸?ç”¨éƒ¨ç½²åˆ°æœ?åŠ¡å™¨ä¸Šç›´æŽ¥å¼€è·‘ï¼ŒçœŸåƒ?springbootæ‰€è¯´ï¼šâ€œjust runâ€?ã€‚");
		map1.put("member", "Chill");
		map1.put("href", "http://spring.io/projects/spring-boot");
		list.add(map1);

		Map<String, String> map2 = new HashMap<>(16);
		map2.put("logo", "https://spring.io/img/homepage/icon-spring-cloud.svg");
		map2.put("title", "SpringCloud");
		map2.put("description", "SpringCloudæ˜¯åŸºäºŽSpringBootçš„ä¸€æ•´å¥—å®žçŽ°å¾®æœ?åŠ¡çš„æ¡†æž¶ã€‚ä»–æ??ä¾›äº†å¾®æœ?åŠ¡å¼€å?‘æ‰€éœ€çš„é…?ç½®ç®¡ç?†ã€?æœ?åŠ¡å?‘çŽ°ã€?æ–­è·¯å™¨ã€?æ™ºèƒ½è·¯ç”±ã€?å¾®ä»£ç?†ã€?æŽ§åˆ¶æ€»çº¿ã€?å…¨å±€é”?ã€?å†³ç­–ç«žé€‰ã€?åˆ†å¸ƒå¼?ä¼šè¯?å’Œé›†ç¾¤çŠ¶æ€?ç®¡ç?†ç­‰ç»„ä»¶ã€‚");
		map2.put("member", "Chill");
		map2.put("href", "http://spring.io/projects/spring-cloud");
		list.add(map2);

		Map<String, String> map3 = new HashMap<>(16);
		map3.put("logo", "https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1546359961068&di=05ff9406e6675ca9a58a525a7e7950b9&imgtype=jpg&src=http%3A%2F%2Fimg0.imgtn.bdimg.com%2Fit%2Fu%3D575314515%2C4268715674%26fm%3D214%26gp%3D0.jpg");
		map3.put("title", "Mybatis");
		map3.put("description", "MyBatis æ˜¯ä¸€æ¬¾ä¼˜ç§€çš„æŒ?ä¹…å±‚æ¡†æž¶ï¼Œå®ƒæ”¯æŒ?å®šåˆ¶åŒ– SQLã€?å­˜å‚¨è¿‡ç¨‹ä»¥å?Šé«˜çº§æ˜ å°„ã€‚MyBatis é?¿å…?äº†å‡ ä¹Žæ‰€æœ‰çš„ JDBC ä»£ç ?å’Œæ‰‹åŠ¨è®¾ç½®å?‚æ•°ä»¥å?ŠèŽ·å?–ç»“æžœé›†ã€‚MyBatis å?¯ä»¥ä½¿ç”¨ç®€å?•çš„ XML æˆ–æ³¨è§£æ?¥é…?ç½®å’Œæ˜ å°„åŽŸç”Ÿä¿¡æ?¯ï¼Œå°†æŽ¥å?£å’Œ Java çš„ POJOs(Plain Old Java Objects,æ™®é€šçš„ Javaå¯¹è±¡)æ˜ å°„æˆ?æ•°æ?®åº“ä¸­çš„è®°å½•ã€‚");
		map3.put("member", "Chill");
		map3.put("href", "http://www.mybatis.org/mybatis-3/getting-started.html");
		list.add(map3);

		Map<String, String> map4 = new HashMap<>(16);
		map4.put("logo", "https://gw.alipayobjects.com/zos/rmsportal/kZzEzemZyKLKFsojXItE.png");
		map4.put("title", "React");
		map4.put("description", "React èµ·æº?äºŽ Facebook çš„å†…éƒ¨é¡¹ç›®ï¼Œå› ä¸ºè¯¥å…¬å?¸å¯¹å¸‚åœºä¸Šæ‰€æœ‰ JavaScript MVC æ¡†æž¶ï¼Œéƒ½ä¸?æ»¡æ„?ï¼Œå°±å†³å®šè‡ªå·±å†™ä¸€å¥—ï¼Œç”¨æ?¥æž¶è®¾Instagram çš„ç½‘ç«™ã€‚å?šå‡ºæ?¥ä»¥å?Žï¼Œå?‘çŽ°è¿™å¥—ä¸œè¥¿å¾ˆå¥½ç”¨ï¼Œå°±åœ¨2013å¹´5æœˆå¼€æº?äº†ã€‚");
		map4.put("member", "Chill");
		map4.put("href", "https://reactjs.org/");
		list.add(map4);

		Map<String, String> map5 = new HashMap<>(16);
		map5.put("logo", "https://gw.alipayobjects.com/zos/rmsportal/dURIMkkrRFpPgTuzkwnB.png");
		map5.put("title", "Ant Design");
		map5.put("description", "èš‚èš?é‡‘æœ?ä½“éªŒæŠ€æœ¯éƒ¨ç»?è¿‡å¤§é‡?çš„é¡¹ç›®å®žè·µå’Œæ€»ç»“ï¼Œæ²‰æ·€å‡ºè®¾è®¡è¯­è¨€ Ant Designï¼Œè¿™å?¯ä¸?å?•çº¯å?ªæ˜¯è®¾è®¡åŽŸåˆ™ã€?æŽ§ä»¶è§„èŒƒå’Œè§†è§‰å°ºå¯¸ï¼Œè¿˜é…?å¥—æœ‰å‰?ç«¯ä»£ç ?å®žçŽ°æ–¹æ¡ˆã€‚ä¹Ÿå°±æ˜¯è¯´é‡‡ç”¨Ant Designå?Žï¼ŒUIè®¾è®¡å’Œå‰?ç«¯ç•Œé?¢ç ”å?‘å?¯å?Œæ­¥å®Œæˆ?ï¼Œæ•ˆçŽ‡å¤§å¤§æ??å?‡ã€‚");
		map5.put("member", "Chill");
		map5.put("href", "https://ant.design/docs/spec/introduce-cn");
		list.add(map5);

		Map<String, String> map6 = new HashMap<>(16);
		map6.put("logo", "https://gw.alipayobjects.com/zos/rmsportal/sfjbOqnsXXJgNCjCzDBL.png");
		map6.put("title", "Ant Design Pro");
		map6.put("description", "Ant Design Pro æ˜¯ä¸€ä¸ªä¼?ä¸šçº§å¼€ç®±å?³ç”¨çš„ä¸­å?Žå?°å‰?ç«¯/è®¾è®¡è§£å†³æ–¹æ¡ˆã€‚ç¬¦å?ˆé˜¿é‡Œè¿½æ±‚çš„'æ•?æ?·çš„å‰?ç«¯+å¼ºå¤§çš„ä¸­å?°'çš„æ€?æƒ³ã€‚");
		map6.put("member", "Chill");
		map6.put("href", "https://pro.ant.design");
		list.add(map6);

		return R.data(list);
	}

	/**
	 * èŽ·å?–æˆ‘çš„æ¶ˆæ?¯
	 *
	 * @return
	 */
	@GetMapping("/my-notices")
	@ApiOperation(value = "æ¶ˆæ?¯", notes = "æ¶ˆæ?¯")
	public R myNotices() {
		List<Map<String, String>> list = new ArrayList<>();
		Map<String, String> map1 = new HashMap<>(16);
		map1.put("id", "000000001");
		map1.put("avatar", "https://gw.alipayobjects.com/zos/rmsportal/ThXAXghbEsBCCSDihZxY.png");
		map1.put("title", "ä½ æ”¶åˆ°äº† 14 ä»½æ–°å‘¨æŠ¥");
		map1.put("datetime", "2018-08-09");
		map1.put("type", "notification");
		list.add(map1);

		Map<String, String> map2 = new HashMap<>(16);
		map2.put("id", "000000002");
		map2.put("avatar", "https://gw.alipayobjects.com/zos/rmsportal/OKJXDXrmkNshAMvwtvhu.png");
		map2.put("title", "ä½ æŽ¨è??çš„ æ›²å¦®å¦® å·²é€šè¿‡ç¬¬ä¸‰è½®é?¢è¯•");
		map2.put("datetime", "2018-08-08");
		map2.put("type", "notification");
		list.add(map2);


		Map<String, String> map3 = new HashMap<>(16);
		map3.put("id", "000000003");
		map3.put("avatar", "https://gw.alipayobjects.com/zos/rmsportal/fcHMVNCjPOsbUGdEduuv.jpeg");
		map3.put("title", "æ›²ä¸½ä¸½ è¯„è®ºäº†ä½ ");
		map3.put("description", "æ??è¿°ä¿¡æ?¯æ??è¿°ä¿¡æ?¯æ??è¿°ä¿¡æ?¯");
		map3.put("datetime", "2018-08-07");
		map3.put("type", "message");
		map3.put("clickClose", "true");
		list.add(map3);


		Map<String, String> map4 = new HashMap<>(16);
		map4.put("id", "000000004");
		map4.put("avatar", "https://gw.alipayobjects.com/zos/rmsportal/fcHMVNCjPOsbUGdEduuv.jpeg");
		map4.put("title", "æœ±å??å?³ å›žå¤?äº†ä½ ");
		map4.put("description", "è¿™ç§?æ¨¡æ?¿ç”¨äºŽæ??é†’è°?ä¸Žä½ å?‘ç”Ÿäº†äº’åŠ¨ï¼Œå·¦ä¾§æ”¾ã€Žè°?ã€?çš„å¤´åƒ?");
		map4.put("type", "message");
		map4.put("datetime", "2018-08-07");
		map4.put("clickClose", "true");
		list.add(map4);


		Map<String, String> map5 = new HashMap<>(16);
		map5.put("id", "000000005");
		map5.put("title", "ä»»åŠ¡å??ç§°");
		map5.put("description", "ä»»åŠ¡éœ€è¦?åœ¨ 2018-01-12 20:00 å‰?å?¯åŠ¨");
		map5.put("extra", "æœªå¼€å§‹");
		map5.put("status", "todo");
		map5.put("type", "event");
		list.add(map5);

		return R.data(list);
	}

}
