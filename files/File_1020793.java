package com.fisher.auth.mobile;

import com.fisher.auth.security.UserDetailsImpl;
import com.fisher.auth.service.SysUserService;
import com.fisher.common.constants.SecurityConstants;
import com.fisher.common.vo.SysUserVo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.userdetails.UsernameNotFoundException;


/**
 * æ‰‹æœºéªŒè¯?ç ?ç™»å½•é€»è¾‘å®žçŽ°
 */
public class MobileAuthenticationProvider implements AuthenticationProvider {

    private final Logger logger = LoggerFactory.getLogger(getClass());


    private RedisTemplate<String, String> redisTemplate;

    private SysUserService sysUserService;


    @Override
    public Authentication authenticate(Authentication authentication) throws AuthenticationException {
        MobileAuthenticationToken mobileAuthenticationToken = (MobileAuthenticationToken) authentication;
        String mobile = mobileAuthenticationToken.getPrincipal().toString();
        String realCode = redisTemplate.opsForValue().get(SecurityConstants.REDIS_CODE_PREFIX + mobile);
        String inputCode = authentication.getCredentials().toString();
        // åˆ¤æ–­æ‰‹æœºçš„éªŒè¯?ç ?æ˜¯å?¦å­˜åœ¨
        if (realCode == null) {
            logger.debug("ç™»å½•å¤±è´¥ï¼Œå½“å‰?æ‰‹æœºå?·éªŒè¯?ç ?ä¸?å­˜åœ¨æˆ–è€…å·²ç»?è¿‡æœŸ");
            throw new BadCredentialsException("ç™»å½•å¤±è´¥ï¼ŒéªŒè¯?ç ?ä¸?å­˜åœ¨");
        }
        // åˆ¤æ–­æ˜¯å?¦éªŒè¯?ç ?è·Ÿredisä¸­å­˜çš„éªŒè¯?ç ?æ˜¯å?¦æ­£ç¡®
        if(!inputCode.equalsIgnoreCase(realCode)) {
            logger.debug("ç™»å½•å¤±è´¥ï¼Œæ‚¨è¾“å…¥çš„éªŒè¯?ç ?ä¸?æ­£ç¡®");

            throw new BadCredentialsException("ç™»å½•å¤±è´¥ï¼ŒéªŒè¯?ç ?ä¸?æ­£ç¡®");
        }
        SysUserVo sysUserVo = sysUserService.loadUserByMobile(mobile);
        if(sysUserVo == null) {
            logger.debug("ç™»å½•å¤±è´¥ï¼Œç”¨æˆ·ä¸?å­˜åœ¨");
            throw new UsernameNotFoundException("ç™»å½•å¤±è´¥, æ‰‹æœºå?·ç ?ä¸?å­˜åœ¨");
        }

        UserDetailsImpl userDetails = new UserDetailsImpl(sysUserVo);
        // é‡?æ–°æž„é€ token  ç™»å½•æˆ?åŠŸ
        MobileAuthenticationToken authenticationToken = new MobileAuthenticationToken(userDetails, inputCode, userDetails.getAuthorities());
        authenticationToken.setDetails(mobileAuthenticationToken.getDetails());
        return authenticationToken;
    }

    @Override
    public boolean supports(Class<?> authentication) {
        return MobileAuthenticationToken.class.isAssignableFrom(authentication);
    }


    public RedisTemplate<String, String> getRedisTemplate() {
        return redisTemplate;
    }

    public void setRedisTemplate(RedisTemplate<String, String> redisTemplate) {
        this.redisTemplate = redisTemplate;
    }

    public SysUserService getSysUserService() {
        return sysUserService;
    }

    public void setSysUserService(SysUserService sysUserService) {
        this.sysUserService = sysUserService;
    }
}
