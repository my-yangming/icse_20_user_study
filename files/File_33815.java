package com.example.jingbin.cloudreader.view.webview;

import android.Manifest;
import android.annotation.SuppressLint;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.widget.FrameLayout;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.example.http.utils.CheckNetwork;
import com.example.jingbin.cloudreader.ui.MainActivity;
import com.example.jingbin.cloudreader.R;
import com.example.jingbin.cloudreader.app.Constants;
import com.example.jingbin.cloudreader.data.UserUtil;
import com.example.jingbin.cloudreader.data.model.CollectModel;
import com.example.jingbin.cloudreader.utils.BaseTools;
import com.example.jingbin.cloudreader.utils.CommonUtils;
import com.example.jingbin.cloudreader.utils.DialogBuild;
import com.example.jingbin.cloudreader.utils.PermissionHandler;
import com.example.jingbin.cloudreader.utils.RxSaveImage;
import com.example.jingbin.cloudreader.utils.SPUtils;
import com.example.jingbin.cloudreader.utils.ShareUtils;
import com.example.jingbin.cloudreader.utils.ToastUtil;
import com.example.jingbin.cloudreader.view.statusbar.StatusBarUtil;
import com.example.jingbin.cloudreader.view.viewbigimage.ViewBigImageActivity;
import com.example.jingbin.cloudreader.view.webview.config.FullscreenHolder;
import com.example.jingbin.cloudreader.view.webview.config.IWebPageView;
import com.example.jingbin.cloudreader.view.webview.config.ImageClickInterface;
import com.example.jingbin.cloudreader.view.webview.config.MyWebChromeClient;
import com.example.jingbin.cloudreader.view.webview.config.MyWebViewClient;
import com.example.jingbin.cloudreader.viewmodel.wan.WanNavigator;

/**
 * ç½‘é¡µå?¯ä»¥å¤„ç?†:
 * ç‚¹å‡»ç›¸åº”æŽ§ä»¶:æ‹¨æ‰“ç”µè¯?ã€?å?‘é€?çŸ­ä¿¡ã€?å?‘é€?é‚®ä»¶ã€?ä¸Šä¼ å›¾ç‰‡ã€?æ’­æ”¾è§†é¢‘
 * è¿›åº¦æ?¡ã€?è¿”å›žç½‘é¡µä¸Šä¸€å±‚ã€?æ˜¾ç¤ºç½‘é¡µæ ‡é¢˜
 * Thanks to: https://github.com/youlookwhat/WebViewStudy
 * contact me: http://www.jianshu.com/users/e43c6e979831/latest_articles
 */
public class WebViewActivity extends AppCompatActivity implements IWebPageView {

    // è¿›åº¦æ?¡
    private ProgressBar mProgressBar;
    private WebView webView;
    // å…¨å±?æ—¶è§†é¢‘åŠ è½½view
    private FrameLayout videoFullView;
    private Toolbar mTitleToolBar;
    // åŠ è½½è§†é¢‘ç›¸å…³
    private MyWebChromeClient mWebChromeClient;
    // title
    private String mTitle;
    // ç½‘é¡µé“¾æŽ¥
    private String mUrl;
    // å?¯æ»šåŠ¨çš„title ä½¿ç”¨ç®€å?• æ²¡æœ‰æ¸?å?˜æ•ˆæžœï¼Œæ–‡å­—ä¸¤æ—?æœ‰é˜´å½±
    private TextView tvGunTitle;
    private boolean isTitleFix;
    private CollectModel collectModel;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_web_view);
        getIntentData();
        initTitle();
        initWebView();
        webView.loadUrl(mUrl);
        getDataFromBrowser(getIntent());
    }

    private void getIntentData() {
        if (getIntent() != null) {
            mTitle = getIntent().getStringExtra("mTitle");
            mUrl = getIntent().getStringExtra("mUrl");
            isTitleFix = getIntent().getBooleanExtra("isTitleFix", false);
        }
    }

    private void initTitle() {
        StatusBarUtil.setColor(this, CommonUtils.getColor(R.color.colorTheme), 0);
        mProgressBar = findViewById(R.id.pb_progress);
        webView = findViewById(R.id.webview_detail);
        videoFullView = findViewById(R.id.video_fullView);
        mTitleToolBar = findViewById(R.id.title_tool_bar);
        tvGunTitle = findViewById(R.id.tv_gun_title);

        initToolBar();
    }

    private void initToolBar() {
        setSupportActionBar(mTitleToolBar);
        ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            //åŽ»é™¤é»˜è®¤Titleæ˜¾ç¤º
            actionBar.setDisplayShowTitleEnabled(false);
        }
        mTitleToolBar.setOverflowIcon(ContextCompat.getDrawable(this, R.drawable.actionbar_more));
        tvGunTitle.postDelayed(() -> tvGunTitle.setSelected(true), 1900);
        tvGunTitle.setText(mTitle);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.webview_menu, menu);
        return true;
    }

    @Override
    public void setTitle(String mTitle) {
        if (!isTitleFix) {
            tvGunTitle.setText(mTitle);
            this.mTitle = mTitle;
        }
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                // è¿”å›žé”®
                handleFinish();
                break;
            case R.id.actionbar_share:
                // åˆ†äº«åˆ°
                String shareText = mTitle + webView.getUrl() + " (åˆ†äº«è‡ªäº‘é˜…)";
                ShareUtils.share(WebViewActivity.this, shareText);
                break;
            case R.id.actionbar_cope:
                // å¤?åˆ¶é“¾æŽ¥
                BaseTools.copy(webView.getUrl());
                ToastUtil.showToast("å¤?åˆ¶æˆ?åŠŸ");
                break;
            case R.id.actionbar_open:
                // æ‰“å¼€é“¾æŽ¥
                BaseTools.openLink(WebViewActivity.this, webView.getUrl());
                break;
            case R.id.actionbar_webview_refresh:
                // åˆ·æ–°é¡µé?¢
                if (webView != null) {
                    webView.reload();
                }
                break;
            case R.id.actionbar_collect:
                // æ·»åŠ åˆ°æ”¶è—?
                if (UserUtil.isLogin(webView.getContext())) {
                    if (SPUtils.getBoolean(Constants.IS_FIRST_COLLECTURL, true)) {
                        DialogBuild.show(webView, "ç½‘å?€ä¸?å?ŒäºŽæ–‡ç« ï¼Œç›¸å?Œç½‘å?€å?¯å¤šæ¬¡è¿›è¡Œæ”¶è—?ï¼Œä¸”ä¸?ä¼šæ˜¾ç¤ºæ”¶è—?çŠ¶æ€?ã€‚", "çŸ¥é?“äº†", (DialogInterface.OnClickListener) (dialog, which) -> {
                            SPUtils.putBoolean(Constants.IS_FIRST_COLLECTURL, false);
                            collectUrl();
                        });
                    } else {
                        collectUrl();
                    }
                }
                break;
            default:
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void collectUrl() {
        // æ”¶è—?
        if (collectModel == null) {
            collectModel = new CollectModel();
        }
        collectModel.collectUrl(mTitle, webView.getUrl(), new WanNavigator.OnCollectNavigator() {
            @Override
            public void onSuccess() {
                ToastUtil.showToastLong("æ”¶è—?ç½‘å?€æˆ?åŠŸ");
            }

            @Override
            public void onFailure() {
                ToastUtil.showToastLong("æ”¶è—?ç½‘å?€å¤±è´¥");
            }
        });
    }

    @SuppressLint("SetJavaScriptEnabled")
    private void initWebView() {
        mProgressBar.setVisibility(View.VISIBLE);
        WebSettings ws = webView.getSettings();
        // ç½‘é¡µå†…å®¹çš„å®½åº¦æ˜¯å?¦å?¯å¤§äºŽWebViewæŽ§ä»¶çš„å®½åº¦
        ws.setLoadWithOverviewMode(false);
        // ä¿?å­˜è¡¨å?•æ•°æ?®
        ws.setSaveFormData(true);
        // æ˜¯å?¦åº”è¯¥æ”¯æŒ?ä½¿ç”¨å…¶å±?å¹•ç¼©æ”¾æŽ§ä»¶å’Œæ‰‹åŠ¿ç¼©æ”¾
        ws.setSupportZoom(true);
        ws.setBuiltInZoomControls(true);
        ws.setDisplayZoomControls(false);
        // å?¯åŠ¨åº”ç”¨ç¼“å­˜
        ws.setAppCacheEnabled(true);
        // è®¾ç½®ç¼“å­˜æ¨¡å¼?
        ws.setCacheMode(WebSettings.LOAD_DEFAULT);
        // setDefaultZoom  api19è¢«å¼ƒç”¨
        // è®¾ç½®æ­¤å±žæ€§ï¼Œå?¯ä»»æ„?æ¯”ä¾‹ç¼©æ”¾ã€‚
        ws.setUseWideViewPort(true);
        // ä¸?ç¼©æ”¾
        webView.setInitialScale(100);
        // å‘Šè¯‰WebViewå?¯ç”¨JavaScriptæ‰§è¡Œã€‚é»˜è®¤çš„æ˜¯falseã€‚
        ws.setJavaScriptEnabled(true);
        //  é¡µé?¢åŠ è½½å¥½ä»¥å?Žï¼Œå†?æ”¾å¼€å›¾ç‰‡
        ws.setBlockNetworkImage(false);
        // ä½¿ç”¨localStorageåˆ™å¿…é¡»æ‰“å¼€
        ws.setDomStorageEnabled(true);
        // æŽ’ç‰ˆé€‚åº”å±?å¹•
        ws.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NARROW_COLUMNS);
        // WebViewæ˜¯å?¦æ–°çª—å?£æ‰“å¼€(åŠ äº†å?Žå?¯èƒ½æ‰“ä¸?å¼€ç½‘é¡µ)
//        ws.setSupportMultipleWindows(true);

        // webviewä»Ž5.0å¼€å§‹é»˜è®¤ä¸?å…?è®¸æ··å?ˆæ¨¡å¼?,httpsä¸­ä¸?èƒ½åŠ è½½httpèµ„æº?,éœ€è¦?è®¾ç½®å¼€å?¯ã€‚
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            ws.setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);
        }
        /** è®¾ç½®å­—ä½“é»˜è®¤ç¼©æ”¾å¤§å°?(æ”¹å?˜ç½‘é¡µå­—ä½“å¤§å°?,setTextSize  api14è¢«å¼ƒç”¨)*/
        ws.setTextZoom(100);

        mWebChromeClient = new MyWebChromeClient(this);
        webView.setWebChromeClient(mWebChromeClient);
        // ä¸Žjsäº¤äº’
        webView.addJavascriptInterface(new ImageClickInterface(this), "injectedObject");
        webView.setWebViewClient(new MyWebViewClient(this));
        webView.setOnLongClickListener(new View.OnLongClickListener() {
            @Override
            public boolean onLongClick(View v) {
                return handleLongImage();
            }
        });
    }

    @Override
    public void hindProgressBar() {
        mProgressBar.setVisibility(View.GONE);
    }

    @Override
    public void showWebView() {
        webView.setVisibility(View.VISIBLE);
    }

    @Override
    public void hindWebView() {
        webView.setVisibility(View.INVISIBLE);
    }

    @Override
    public void fullViewAddView(View view) {
        FrameLayout decor = (FrameLayout) getWindow().getDecorView();
        videoFullView = new FullscreenHolder(WebViewActivity.this);
        videoFullView.addView(view);
        decor.addView(videoFullView);
    }

    @Override
    public void showVideoFullView() {
        videoFullView.setVisibility(View.VISIBLE);
    }

    @Override
    public void hindVideoFullView() {
        videoFullView.setVisibility(View.GONE);
    }

    @Override
    public void startProgress(int newProgress) {
        mProgressBar.setVisibility(View.VISIBLE);
        mProgressBar.setProgress(newProgress);
        if (newProgress == 100) {
            mProgressBar.setVisibility(View.GONE);
        }
    }

    @Override
    public void addImageClickListener() {
//        loadImageClickJS();
//        loadTextClickJS();
    }

    private void loadImageClickJS() {
        // è¿™æ®µjså‡½æ•°çš„åŠŸèƒ½å°±æ˜¯ï¼Œé??åŽ†æ‰€æœ‰çš„imgèŠ‚ç‚¹ï¼Œå¹¶æ·»åŠ onclickå‡½æ•°ï¼Œå‡½æ•°çš„åŠŸèƒ½æ˜¯åœ¨å›¾ç‰‡ç‚¹å‡»çš„æ—¶å€™è°ƒç”¨æœ¬åœ°javaæŽ¥å?£å¹¶ä¼ é€’urlè¿‡åŽ»
        webView.loadUrl("javascript:(function(){" +
                "var objs = document.getElementsByTagName(\"img\");" +
                "for(var i=0;i<objs.length;i++)" +
                "{" +
                "objs[i].onclick=function(){window.injectedObject.imageClick(this.getAttribute(\"src\"),this.getAttribute(\"has_link\"));}" +
                "}" +
                "})()");
    }

    private void loadTextClickJS() {
        // é??åŽ†æ‰€æœ‰çš„aèŠ‚ç‚¹,å°†èŠ‚ç‚¹é‡Œçš„å±žæ€§ä¼ é€’è¿‡åŽ»(å±žæ€§è‡ªå®šä¹‰,ç”¨äºŽé¡µé?¢è·³è½¬)
        webView.loadUrl("javascript:(function(){" +
                "var objs =document.getElementsByTagName(\"a\");" +
                "for(var i=0;i<objs.length;i++)" +
                "{" +
                "objs[i].onclick=function(){" +
                "window.injectedObject.textClick(this.getAttribute(\"type\"),this.getAttribute(\"item_pk\"));}" +
                "}" +
                "})()");
    }

    public FrameLayout getVideoFullView() {
        return videoFullView;
    }

    /**
     * å…¨å±?æ—¶æŒ‰è¿”åŠ é”®æ‰§è¡Œé€€å‡ºå…¨å±?æ–¹æ³•
     */
    public void hideCustomView() {
        mWebChromeClient.onHideCustomView();
        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
    }

    /**
     * ä¸Šä¼ å›¾ç‰‡ä¹‹å?Žçš„å›žè°ƒ
     */
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent intent) {
        if (requestCode == MyWebChromeClient.FILECHOOSER_RESULTCODE) {
            mWebChromeClient.mUploadMessage(intent, resultCode);
        } else if (requestCode == MyWebChromeClient.FILECHOOSER_RESULTCODE_FOR_ANDROID_5) {
            mWebChromeClient.mUploadMessageForAndroid5(intent, resultCode);
        }
    }

    /**
     * ä½¿ç”¨singleTaskå?¯åŠ¨æ¨¡å¼?çš„Activityåœ¨ç³»ç»Ÿä¸­å?ªä¼šå­˜åœ¨ä¸€ä¸ªå®žä¾‹ã€‚
     * å¦‚æžœè¿™ä¸ªå®žä¾‹å·²ç»?å­˜åœ¨ï¼Œintentå°±ä¼šé€šè¿‡onNewIntentä¼ é€’åˆ°è¿™ä¸ªActivityã€‚
     * å?¦åˆ™æ–°çš„Activityå®žä¾‹è¢«åˆ›å»ºã€‚
     */
    @Override
    protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);
        getDataFromBrowser(intent);
    }

    /**
     * ä½œä¸ºä¸‰æ–¹æµ?è§ˆå™¨æ‰“å¼€
     * Scheme: https
     * host: www.jianshu.com
     * path: /p/1cbaf784c29c
     * url = scheme + "://" + host + path;
     */
    private void getDataFromBrowser(Intent intent) {
        Uri data = intent.getData();
        if (data != null) {
            try {
                String scheme = data.getScheme();
                String host = data.getHost();
                String path = data.getPath();
//                String text = "Scheme: " + scheme + "\n" + "host: " + host + "\n" + "path: " + path;
//                Log.e("data", text);
                String url = scheme + "://" + host + path;
                webView.loadUrl(url);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * é•¿æŒ‰å›¾ç‰‡äº‹ä»¶å¤„ç?†
     */
    private boolean handleLongImage() {
        final WebView.HitTestResult hitTestResult = webView.getHitTestResult();
        // å¦‚æžœæ˜¯å›¾ç‰‡ç±»åž‹æˆ–è€…æ˜¯å¸¦æœ‰å›¾ç‰‡é“¾æŽ¥çš„ç±»åž‹
        if (hitTestResult.getType() == WebView.HitTestResult.IMAGE_TYPE ||
                hitTestResult.getType() == WebView.HitTestResult.SRC_IMAGE_ANCHOR_TYPE) {
            // å¼¹å‡ºä¿?å­˜å›¾ç‰‡çš„å¯¹è¯?æ¡†
            new AlertDialog.Builder(WebViewActivity.this)
                    .setItems(new String[]{"æŸ¥çœ‹å¤§å›¾", "ä¿?å­˜å›¾ç‰‡åˆ°ç›¸å†Œ"}, new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            String picUrl = hitTestResult.getExtra();
                            //èŽ·å?–å›¾ç‰‡
//                            Log.e("picUrl", picUrl);
                            switch (which) {
                                case 0:
                                    ViewBigImageActivity.start(WebViewActivity.this, picUrl, picUrl);
                                    break;
                                case 1:
                                    if (!PermissionHandler.isHandlePermission(WebViewActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE)) {
                                        return;
                                    }
                                    RxSaveImage.saveImageToGallery(WebViewActivity.this, picUrl, picUrl);
                                    break;
                                default:
                                    break;
                            }
                        }
                    })
                    .show();
            return true;
        }
        return false;
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_BACK) {
            //å…¨å±?æ’­æ”¾é€€å‡ºå…¨å±?
            if (mWebChromeClient.inCustomView()) {
                hideCustomView();
                return true;

                //è¿”å›žç½‘é¡µä¸Šä¸€é¡µ
            } else if (webView.canGoBack()) {
                webView.goBack();
                return true;

                //é€€å‡ºç½‘é¡µ
            } else {
                handleFinish();
            }
        }
        return false;
    }

    /**
     * ç›´æŽ¥é€šè¿‡ä¸‰æ–¹æµ?è§ˆå™¨æ‰“å¼€æ—¶ï¼Œå›žé€€åˆ°é¦–é¡µ
     */
    public void handleFinish() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            finishAfterTransition();
        } else {
            finish();
        }
        if (!MainActivity.isLaunch) {
            MainActivity.start(this);
        }
    }

    @Override
    protected void onPause() {
        super.onPause();
        webView.onPause();
    }

    @Override
    protected void onResume() {
        super.onResume();
        webView.onResume();
        // æ”¯ä»˜å®?ç½‘é¡µç‰ˆåœ¨æ‰“å¼€æ–‡ç« è¯¦æƒ…ä¹‹å?Ž,æ— æ³•ç‚¹å‡»æŒ‰é’®ä¸‹ä¸€æ­¥
        webView.resumeTimers();
        // è®¾ç½®ä¸ºæ¨ªå±?
        if (getRequestedOrientation() != ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE) {
            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
        }
    }

    @Override
    protected void onDestroy() {
        if (videoFullView != null) {
            videoFullView.clearAnimation();
            videoFullView.removeAllViews();
        }
        if (webView != null) {
            webView.loadDataWithBaseURL(null, "", "text/html", "utf-8", null);
            webView.clearHistory();
            ViewGroup parent = (ViewGroup) webView.getParent();
            if (parent != null) {
                parent.removeView(webView);
            }
            webView.removeAllViews();
            webView.stopLoading();
            webView.setWebChromeClient(null);
            webView.setWebViewClient(null);
            webView.destroy();
            webView = null;
            mProgressBar.clearAnimation();
            tvGunTitle.clearAnimation();
            tvGunTitle.clearFocus();
        }
        if (collectModel != null) {
            collectModel = null;
        }
        super.onDestroy();
    }

    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        if (newConfig.fontScale != 1) {
            getResources();
        }
    }

    /**
     * ç¦?æ­¢æ”¹å?˜å­—ä½“å¤§å°?
     */
    @Override
    public Resources getResources() {
        Resources res = super.getResources();
        Configuration config = new Configuration();
        config.setToDefaults();
        res.updateConfiguration(config, res.getDisplayMetrics());
        return res;
    }

    /**
     * æ‰“å¼€ç½‘é¡µ:
     *
     * @param mContext ä¸Šä¸‹æ–‡
     * @param mUrl     è¦?åŠ è½½çš„ç½‘é¡µurl
     * @param mTitle   title
     */
    public static void loadUrl(Context mContext, String mUrl, String mTitle) {
        loadUrl(mContext, mUrl, mTitle, false);
    }

    /**
     * æ‰“å¼€ç½‘é¡µ:
     *
     * @param mContext     ä¸Šä¸‹æ–‡
     * @param mUrl         è¦?åŠ è½½çš„ç½‘é¡µurl
     * @param mTitle       title
     * @param isTitleFixed titleæ˜¯å?¦å›ºå®š
     */
    public static void loadUrl(Context mContext, String mUrl, String mTitle, boolean isTitleFixed) {
        if (CheckNetwork.isNetworkConnected(mContext)) {
            Intent intent = new Intent(mContext, WebViewActivity.class);
            intent.putExtra("mUrl", mUrl);
            intent.putExtra("isTitleFix", isTitleFixed);
            intent.putExtra("mTitle", mTitle == null ? "" : mTitle);
            mContext.startActivity(intent);
        } else {
            ToastUtil.showToastLong("å½“å‰?ç½‘ç»œä¸?å?¯ç”¨ï¼Œè¯·æ£€æŸ¥ä½ çš„ç½‘ç»œè®¾ç½®");
        }
    }

}
