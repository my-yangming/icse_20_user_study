package jetbrains.mps.make.reduced.plugin;

/*Generated by MPS */

import jetbrains.mps.make.facet.IFacet;
import java.util.List;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.make.resources.IPropertiesPersistence;
import jetbrains.mps.make.facet.ITargetEx2;
import jetbrains.mps.make.script.IJob;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.resources.IPropertiesAccessor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.smodel.resources.TResource;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.make.runtime.util.DeltaReconciler;
import jetbrains.mps.internal.make.runtime.util.FilesDelta;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.make.script.IConfig;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.make.script.IPropertiesPool;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import java.util.Map;

public class ReportFiles_Facet extends IFacet.Stub {
  private List<ITarget> targets = ListSequence.fromList(new ArrayList<ITarget>());
  private IFacet.Name name = new IFacet.Name("jetbrains.mps.make.reduced.ReportFiles");
  public ReportFiles_Facet() {
    ListSequence.fromList(targets).addElement(new ReportFiles_Facet.Target_report());
  }
  public Iterable<ITarget> targets() {
    return targets;
  }
  public Iterable<IFacet.Name> optional() {
    return null;
  }
  public Iterable<IFacet.Name> required() {
    return Sequence.fromArray(new IFacet.Name[]{new IFacet.Name("jetbrains.mps.lang.core.TextGen"), new IFacet.Name("jetbrains.mps.make.facets.Make")});
  }
  public Iterable<IFacet.Name> extended() {
    return Sequence.fromArray(new IFacet.Name[]{new IFacet.Name("jetbrains.mps.make.facets.Make")});
  }
  public IFacet.Name getName() {
    return this.name;
  }
  public IPropertiesPersistence propertiesPersistence() {
    return new ReportFiles_Facet.TargetProperties();
  }
  public static class Target_report implements ITargetEx2 {
    private static final ITarget.Name name = new ITarget.Name("jetbrains.mps.make.reduced.ReportFiles.report");
    public Target_report() {
    }
    public IJob createJob() {
      return new IJob.Stub() {
        @Override
        public IResult execute(final Iterable<IResource> rawInput, final IJobMonitor monitor, final IPropertiesAccessor pa, @NotNull final ProgressMonitor progressMonitor) {
          Iterable<IResource> _output_bk4wqp_a0a = null;
          final Iterable<TResource> input = (Iterable<TResource>) (Iterable) rawInput;
          switch (0) {
            case 0:
              monitor.getSession().getProject().getModelAccess().runWriteAction(new Runnable() {
                public void run() {
                  for (TResource itr : Sequence.fromIterable(input)) {
                    final SModel md = itr.modelDescriptor();
                    new DeltaReconciler(itr.delta()).visitAll(new FilesDelta.Visitor() {
                      @Override
                      public boolean acceptWritten(IFile file) {
                        ListSequence.fromList(vars(pa.global()).writtenFiles()).addElement(file.getPath());
                        MapSequence.fromMap(vars(pa.global()).sourceModels()).put(file.getPath(), md);
                        return true;
                      }
                      @Override
                      public boolean acceptKept(IFile file) {
                        ListSequence.fromList(vars(pa.global()).keptFiles()).addElement(file.getPath());
                        MapSequence.fromMap(vars(pa.global()).sourceModels()).put(file.getPath(), md);
                        return true;
                      }
                      @Override
                      public boolean acceptDeleted(IFile file) {
                        ListSequence.fromList(vars(pa.global()).deletedFiles()).addElement(file.getPath());
                        MapSequence.fromMap(vars(pa.global()).sourceModels()).put(file.getPath(), md);
                        return true;
                      }
                    });
                  }
                }
              });
              _output_bk4wqp_a0a = Sequence.fromIterable(_output_bk4wqp_a0a).concat(Sequence.fromIterable(input));
            default:
              progressMonitor.done();
              return new IResult.SUCCESS(_output_bk4wqp_a0a);
          }
        }
      };
    }
    public IConfig createConfig() {
      return null;
    }
    public Iterable<ITarget.Name> notAfter() {
      return null;
    }
    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.TextGen.textGen")});
    }
    public Iterable<ITarget.Name> notBefore() {
      return null;
    }
    public Iterable<ITarget.Name> before() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.make.facets.Make.reconcile")});
    }
    public ITarget.Name getName() {
      return name;
    }
    public boolean isOptional() {
      return false;
    }
    public boolean requiresInput() {
      return true;
    }
    public boolean producesOutput() {
      return true;
    }
    public Iterable<Class<? extends IResource>> expectedInput() {
      List<Class<? extends IResource>> rv = ListSequence.fromList(new ArrayList<Class<? extends IResource>>());
      ListSequence.fromList(rv).addElement(TResource.class);
      return rv;
    }
    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }
    public <T> T createParameters(Class<T> cls) {
      return cls.cast(new Parameters());
    }
    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      if (t != null) {
        ((Tuples._4) t).assign((Tuples._4) copyFrom);
      }
      return t;
    }
    public int workEstimate() {
      return 100;
    }
    public static ReportFiles_Facet.Target_report.Parameters vars(IPropertiesPool ppool) {
      return ppool.properties(name, ReportFiles_Facet.Target_report.Parameters.class);
    }
    public static class Parameters extends MultiTuple._4<List<String>, List<String>, List<String>, Map<String, SModel>> {
      public Parameters() {
        super();
      }
      public Parameters(List<String> writtenFiles, List<String> deletedFiles, List<String> keptFiles, Map<String, SModel> sourceModels) {
        super(writtenFiles, deletedFiles, keptFiles, sourceModels);
      }
      public List<String> writtenFiles(List<String> value) {
        return super._0(value);
      }
      public List<String> deletedFiles(List<String> value) {
        return super._1(value);
      }
      public List<String> keptFiles(List<String> value) {
        return super._2(value);
      }
      public Map<String, SModel> sourceModels(Map<String, SModel> value) {
        return super._3(value);
      }
      public List<String> writtenFiles() {
        return super._0();
      }
      public List<String> deletedFiles() {
        return super._1();
      }
      public List<String> keptFiles() {
        return super._2();
      }
      public Map<String, SModel> sourceModels() {
        return super._3();
      }
    }
  }
  public static class TargetProperties implements IPropertiesPersistence {
    public TargetProperties() {
    }
    public void storeValues(Map<String, String> store, IPropertiesPool properties) {
      {
        ITarget.Name name = new ITarget.Name("jetbrains.mps.make.reduced.ReportFiles.report");
        if (properties.hasProperties(name)) {
          ReportFiles_Facet.Target_report.Parameters props = properties.properties(name, ReportFiles_Facet.Target_report.Parameters.class);
          MapSequence.fromMap(store).put("jetbrains.mps.make.reduced.ReportFiles.report.writtenFiles", null);
          MapSequence.fromMap(store).put("jetbrains.mps.make.reduced.ReportFiles.report.deletedFiles", null);
          MapSequence.fromMap(store).put("jetbrains.mps.make.reduced.ReportFiles.report.keptFiles", null);
          MapSequence.fromMap(store).put("jetbrains.mps.make.reduced.ReportFiles.report.sourceModels", null);
        }
      }
    }
    public void loadValues(Map<String, String> store, IPropertiesPool properties) {
      try {
        {
          ITarget.Name name = new ITarget.Name("jetbrains.mps.make.reduced.ReportFiles.report");
          ReportFiles_Facet.Target_report.Parameters props = properties.properties(name, ReportFiles_Facet.Target_report.Parameters.class);
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.make.reduced.ReportFiles.report.writtenFiles")) {
            props.writtenFiles(null);
          }
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.make.reduced.ReportFiles.report.deletedFiles")) {
            props.deletedFiles(null);
          }
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.make.reduced.ReportFiles.report.keptFiles")) {
            props.keptFiles(null);
          }
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.make.reduced.ReportFiles.report.sourceModels")) {
            props.sourceModels(null);
          }
        }
      } catch (RuntimeException re) {
      }
    }
  }
}
