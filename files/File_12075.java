package com.geekq.miasha.utils;
/**
 * Twitter_Snowflake<br>
 * SnowFlakeçš„ç»“æž„å¦‚ä¸‹(æ¯?éƒ¨åˆ†ç”¨-åˆ†å¼€):<br>
 * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 <br>
 * 1ä½?æ ‡è¯†ï¼Œç”±äºŽlongåŸºæœ¬ç±»åž‹åœ¨Javaä¸­æ˜¯å¸¦ç¬¦å?·çš„ï¼Œæœ€é«˜ä½?æ˜¯ç¬¦å?·ä½?ï¼Œæ­£æ•°æ˜¯0ï¼Œè´Ÿæ•°æ˜¯1ï¼Œæ‰€ä»¥idä¸€èˆ¬æ˜¯æ­£æ•°ï¼Œæœ€é«˜ä½?æ˜¯0<br>
 * 41ä½?æ—¶é—´æˆª(æ¯«ç§’çº§)ï¼Œæ³¨æ„?ï¼Œ41ä½?æ—¶é—´æˆªä¸?æ˜¯å­˜å‚¨å½“å‰?æ—¶é—´çš„æ—¶é—´æˆªï¼Œè€Œæ˜¯å­˜å‚¨æ—¶é—´æˆªçš„å·®å€¼ï¼ˆå½“å‰?æ—¶é—´æˆª - å¼€å§‹æ—¶é—´æˆª)
 * å¾—åˆ°çš„å€¼ï¼‰ï¼Œè¿™é‡Œçš„çš„å¼€å§‹æ—¶é—´æˆªï¼Œä¸€èˆ¬æ˜¯æˆ‘ä»¬çš„idç”Ÿæˆ?å™¨å¼€å§‹ä½¿ç”¨çš„æ—¶é—´ï¼Œç”±æˆ‘ä»¬ç¨‹åº?æ?¥æŒ‡å®šçš„ï¼ˆå¦‚ä¸‹ä¸‹é?¢ç¨‹åº?IdWorkerç±»çš„startTimeå±žæ€§ï¼‰ã€‚41ä½?çš„æ—¶é—´æˆªï¼Œå?¯ä»¥ä½¿ç”¨69å¹´ï¼Œå¹´T = (1L << 41) / (1000L * 60 * 60 * 24 * 365) = 69<br>
 * 10ä½?çš„æ•°æ?®æœºå™¨ä½?ï¼Œå?¯ä»¥éƒ¨ç½²åœ¨1024ä¸ªèŠ‚ç‚¹ï¼ŒåŒ…æ‹¬5ä½?datacenterIdå’Œ5ä½?workerId<br>
 * 12ä½?åº?åˆ—ï¼Œæ¯«ç§’å†…çš„è®¡æ•°ï¼Œ12ä½?çš„è®¡æ•°é¡ºåº?å?·æ”¯æŒ?æ¯?ä¸ªèŠ‚ç‚¹æ¯?æ¯«ç§’(å?Œä¸€æœºå™¨ï¼Œå?Œä¸€æ—¶é—´æˆª)äº§ç”Ÿ4096ä¸ªIDåº?å?·<br>
 * åŠ èµ·æ?¥åˆšå¥½64ä½?ï¼Œä¸ºä¸€ä¸ªLongåž‹ã€‚<br>
 * SnowFlakeçš„ä¼˜ç‚¹æ˜¯ï¼Œæ•´ä½“ä¸ŠæŒ‰ç…§æ—¶é—´è‡ªå¢žæŽ’åº?ï¼Œå¹¶ä¸”æ•´ä¸ªåˆ†å¸ƒå¼?ç³»ç»Ÿå†…ä¸?ä¼šäº§ç”ŸIDç¢°æ’ž(ç”±æ•°æ?®ä¸­å¿ƒIDå’Œæœºå™¨IDä½œåŒºåˆ†)ï¼Œå¹¶ä¸”æ•ˆçŽ‡è¾ƒé«˜ï¼Œç»?æµ‹è¯•ï¼ŒSnowFlakeæ¯?ç§’èƒ½å¤Ÿäº§ç”Ÿ26ä¸‡IDå·¦å?³ã€‚
 */
public class SnowflakeIdWorker {

    // ==============================Fields===========================================
    /** å¼€å§‹æ—¶é—´æˆª (2015-01-01) */
    private final long twepoch = 1420041600000L;

    /** æœºå™¨idæ‰€å? çš„ä½?æ•° */
    private final long workerIdBits = 5L;

    /** æ•°æ?®æ ‡è¯†idæ‰€å? çš„ä½?æ•° */
    private final long datacenterIdBits = 5L;

    /** æ”¯æŒ?çš„æœ€å¤§æœºå™¨idï¼Œç»“æžœæ˜¯31 (è¿™ä¸ªç§»ä½?ç®—æ³•å?¯ä»¥å¾ˆå¿«çš„è®¡ç®—å‡ºå‡ ä½?äºŒè¿›åˆ¶æ•°æ‰€èƒ½è¡¨ç¤ºçš„æœ€å¤§å??è¿›åˆ¶æ•°) */
    private final long maxWorkerId = -1L ^ (-1L << workerIdBits);

    /** æ”¯æŒ?çš„æœ€å¤§æ•°æ?®æ ‡è¯†idï¼Œç»“æžœæ˜¯31 */
    private final long maxDatacenterId = -1L ^ (-1L << datacenterIdBits);

    /** åº?åˆ—åœ¨idä¸­å? çš„ä½?æ•° */
    private final long sequenceBits = 12L;

    /** æœºå™¨IDå?‘å·¦ç§»12ä½? */
    private final long workerIdShift = sequenceBits;

    /** æ•°æ?®æ ‡è¯†idå?‘å·¦ç§»17ä½?(12+5) */
    private final long datacenterIdShift = sequenceBits + workerIdBits;

    /** æ—¶é—´æˆªå?‘å·¦ç§»22ä½?(5+5+12) */
    private final long timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;

    /** ç”Ÿæˆ?åº?åˆ—çš„æŽ©ç ?ï¼Œè¿™é‡Œä¸º4095 (0b111111111111=0xfff=4095) */
    private final long sequenceMask = -1L ^ (-1L << sequenceBits);

    /** å·¥ä½œæœºå™¨ID(0~31) */
    private long workerId;

    /** æ•°æ?®ä¸­å¿ƒID(0~31) */
    private long datacenterId;

    /** æ¯«ç§’å†…åº?åˆ—(0~4095) */
    private long sequence = 0L;

    /** ä¸Šæ¬¡ç”Ÿæˆ?IDçš„æ—¶é—´æˆª */
    private long lastTimestamp = -1L;

    //==============================Constructors=====================================
    /**
     * æž„é€ å‡½æ•°
     * @param workerId å·¥ä½œID (0~31)
     * @param datacenterId æ•°æ?®ä¸­å¿ƒID (0~31)
     */
    public SnowflakeIdWorker(long workerId, long datacenterId) {
        if (workerId > maxWorkerId || workerId < 0) {
            throw new IllegalArgumentException(String.format("worker Id can't be greater than %d or less than 0", maxWorkerId));
        }
        if (datacenterId > maxDatacenterId || datacenterId < 0) {
            throw new IllegalArgumentException(String.format("datacenter Id can't be greater than %d or less than 0", maxDatacenterId));
        }
        this.workerId = workerId;
        this.datacenterId = datacenterId;
    }

    /**
     * ç”Ÿæˆ?è®¢å?•å”¯ä¸€ID
     * @param workerId
     * @param datacenterId
     * @return
     */
    public static long getOrderId(long workerId, long datacenterId){
        SnowflakeIdWorker idWorker = new SnowflakeIdWorker(0, 0);
        return idWorker.nextId();
    }

    // ==============================Methods==========================================
    /**
     * èŽ·å¾—ä¸‹ä¸€ä¸ªID (è¯¥æ–¹æ³•æ˜¯çº¿ç¨‹å®‰å…¨çš„)
     * @return SnowflakeId
     */
    public synchronized long nextId() {
        long timestamp = timeGen();

        //å¦‚æžœå½“å‰?æ—¶é—´å°?äºŽä¸Šä¸€æ¬¡IDç”Ÿæˆ?çš„æ—¶é—´æˆ³ï¼Œè¯´æ˜Žç³»ç»Ÿæ—¶é’Ÿå›žé€€è¿‡è¿™ä¸ªæ—¶å€™åº”å½“æŠ›å‡ºå¼‚å¸¸
        if (timestamp < lastTimestamp) {
            throw new RuntimeException(
                    String.format("Clock moved backwards.  Refusing to generate id for %d milliseconds", lastTimestamp - timestamp));
        }

        //å¦‚æžœæ˜¯å?Œä¸€æ—¶é—´ç”Ÿæˆ?çš„ï¼Œåˆ™è¿›è¡Œæ¯«ç§’å†…åº?åˆ—
        if (lastTimestamp == timestamp) {
            sequence = (sequence + 1) & sequenceMask;
            //æ¯«ç§’å†…åº?åˆ—æº¢å‡º
            if (sequence == 0) {
                //é˜»å¡žåˆ°ä¸‹ä¸€ä¸ªæ¯«ç§’,èŽ·å¾—æ–°çš„æ—¶é—´æˆ³
                timestamp = tilNextMillis(lastTimestamp);
            }
        }
        //æ—¶é—´æˆ³æ”¹å?˜ï¼Œæ¯«ç§’å†…åº?åˆ—é‡?ç½®
        else {
            sequence = 0L;
        }

        //ä¸Šæ¬¡ç”Ÿæˆ?IDçš„æ—¶é—´æˆª
        lastTimestamp = timestamp;

        //ç§»ä½?å¹¶é€šè¿‡æˆ–è¿?ç®—æ‹¼åˆ°ä¸€èµ·ç»„æˆ?64ä½?çš„ID
        return ((timestamp - twepoch) << timestampLeftShift) //
                | (datacenterId << datacenterIdShift) //
                | (workerId << workerIdShift) //
                | sequence;
    }

    /**
     * é˜»å¡žåˆ°ä¸‹ä¸€ä¸ªæ¯«ç§’ï¼Œç›´åˆ°èŽ·å¾—æ–°çš„æ—¶é—´æˆ³
     * @param lastTimestamp ä¸Šæ¬¡ç”Ÿæˆ?IDçš„æ—¶é—´æˆª
     * @return å½“å‰?æ—¶é—´æˆ³
     */
    protected long tilNextMillis(long lastTimestamp) {
        long timestamp = timeGen();
        while (timestamp <= lastTimestamp) {
            timestamp = timeGen();
        }
        return timestamp;
    }

    /**
     * è¿”å›žä»¥æ¯«ç§’ä¸ºå?•ä½?çš„å½“å‰?æ—¶é—´
     * @return å½“å‰?æ—¶é—´(æ¯«ç§’)
     */
    protected long timeGen() {
        return System.currentTimeMillis();
    }

    //==============================Test=============================================
    /** æµ‹è¯• */
    public static void main(String[] args) {
        SnowflakeIdWorker idWorker = new SnowflakeIdWorker(0, 0);
        for (int i = 0; i < 1000; i++) {
            long id = idWorker.nextId();
            System.out.println(Long.toBinaryString(id));
            System.out.println(id);
        }
    }







}
