package com.xuexiang.xui.logs;

import androidx.annotation.NonNull;
import android.text.TextUtils;
import android.util.Log;

/**
 * æ¡†æž¶æ—¥å¿—è®°å½•
 *
 * @author xuexiang
 * @since 2018/11/14 ä¸Šå?ˆ11:59
 */
public final class UILog {

    //==============å¸¸é‡?================//
    /**
     * é»˜è®¤tag
     */
    private final static String DEFAULT_LOG_TAG = "[XUI]";
    /**
     * æœ€å¤§æ—¥å¿—ä¼˜å…ˆçº§ã€?æ—¥å¿—ä¼˜å…ˆçº§ä¸ºæœ€å¤§ç­‰çº§ï¼Œæ‰€æœ‰æ—¥å¿—éƒ½ä¸?æ‰“å?°ã€‘
     */
    private final static int MAX_LOG_PRIORITY = 10;
    /**
     * æœ€å°?æ—¥å¿—ä¼˜å…ˆçº§ã€?æ—¥å¿—ä¼˜å…ˆçº§ä¸ºæœ€å°?ç­‰çº§ï¼Œæ‰€æœ‰æ—¥å¿—éƒ½æ‰“å?°ã€‘
     */
    private final static int MIN_LOG_PRIORITY = 0;

    //==============å±žæ€§================//
    /**
     * é»˜è®¤çš„æ—¥å¿—è®°å½•ä¸ºLogcat
     */
    private static ILogger sILogger = new LogcatLogger();

    private static String sTag = DEFAULT_LOG_TAG;
    /**
     * æ˜¯å?¦æ˜¯è°ƒè¯•æ¨¡å¼?
     */
    private static boolean sIsDebug = false;
    /**
     * æ—¥å¿—æ‰“å?°ä¼˜å…ˆçº§
     */
    private static int sLogPriority = MAX_LOG_PRIORITY;

    //==============å±žæ€§è®¾ç½®================//

    /**
     * è®¾ç½®æ—¥å¿—è®°å½•è€…çš„æŽ¥å?£
     *
     * @param logger
     */
    public static void setLogger(@NonNull ILogger logger) {
        sILogger = logger;
    }

    /**
     * è®¾ç½®æ—¥å¿—çš„tag
     *
     * @param tag
     */
    public static void setTag(String tag) {
        sTag = tag;
    }

    /**
     * è®¾ç½®æ˜¯å?¦æ˜¯è°ƒè¯•æ¨¡å¼?
     *
     * @param isDebug
     */
    public static void setDebug(boolean isDebug) {
        sIsDebug = isDebug;
    }

    /**
     * è®¾ç½®æ‰“å?°æ—¥å¿—çš„ç­‰çº§ï¼ˆå?ªæ‰“å?°æ”¹ç­‰çº§ä»¥ä¸Šçš„æ—¥å¿—ï¼‰
     *
     * @param priority
     */
    public static void setPriority(int priority) {
        sLogPriority = priority;
    }

    //===================å¯¹å¤–æŽ¥å?£=======================//

    /**
     * è®¾ç½®æ˜¯å?¦æ‰“å¼€è°ƒè¯•
     * @param isDebug
     */
    public static void debug(boolean isDebug) {
        if (isDebug) {
            debug(DEFAULT_LOG_TAG);
        } else {
            debug("");
        }
    }

    /**
     * è®¾ç½®è°ƒè¯•æ¨¡å¼?
     *
     * @param tag
     */
    public static void debug(String tag) {
        if (!TextUtils.isEmpty(tag)) {
            setDebug(true);
            setPriority(MIN_LOG_PRIORITY);
            setTag(tag);
        } else {
            setDebug(false);
            setPriority(MAX_LOG_PRIORITY);
            setTag("");
        }
    }

    //=============æ‰“å?°æ–¹æ³•===============//
    /**
     * æ‰“å?°ä»»ä½•ï¼ˆæ‰€æœ‰ï¼‰ä¿¡æ?¯
     *
     * @param msg
     */
    public static void v(String msg) {
        if (enableLog(Log.VERBOSE)) {
            sILogger.log(Log.VERBOSE, sTag, msg, null);
        }
    }

    /**
     * æ‰“å?°ä»»ä½•ï¼ˆæ‰€æœ‰ï¼‰ä¿¡æ?¯
     *
     * @param tag
     * @param msg
     */
    public static void vTag(String tag, String msg) {
        if (enableLog(Log.VERBOSE)) {
            sILogger.log(Log.VERBOSE, tag, msg, null);
        }
    }

    /**
     * æ‰“å?°è°ƒè¯•ä¿¡æ?¯
     *
     * @param msg
     */
    public static void d(String msg) {
        if (enableLog(Log.DEBUG)) {
            sILogger.log(Log.DEBUG, sTag, msg, null);
        }
    }

    /**
     * æ‰“å?°è°ƒè¯•ä¿¡æ?¯
     *
     * @param tag
     * @param msg
     */
    public static void dTag(String tag, String msg) {
        if (enableLog(Log.DEBUG)) {
            sILogger.log(Log.DEBUG, tag, msg, null);
        }
    }

    /**
     * æ‰“å?°æ??ç¤ºæ€§çš„ä¿¡æ?¯
     *
     * @param msg
     */
    public static void i(String msg) {
        if (enableLog(Log.INFO)) {
            sILogger.log(Log.INFO, sTag, msg, null);
        }
    }

    /**
     * æ‰“å?°æ??ç¤ºæ€§çš„ä¿¡æ?¯
     *
     * @param tag
     * @param msg
     */
    public static void iTag(String tag, String msg) {
        if (enableLog(Log.INFO)) {
            sILogger.log(Log.INFO, tag, msg, null);
        }
    }

    /**
     * æ‰“å?°warningè­¦å‘Šä¿¡æ?¯
     *
     * @param msg
     */
    public static void w(String msg) {
        if (enableLog(Log.WARN)) {
            sILogger.log(Log.WARN, sTag, msg, null);
        }
    }

    /**
     * æ‰“å?°warningè­¦å‘Šä¿¡æ?¯
     *
     * @param tag
     * @param msg
     */
    public static void wTag(String tag, String msg) {
        if (enableLog(Log.WARN)) {
            sILogger.log(Log.WARN, tag, msg, null);
        }
    }

    /**
     * æ‰“å?°å‡ºé”™ä¿¡æ?¯
     *
     * @param msg
     */
    public static void e(String msg) {
        if (enableLog(Log.ERROR)) {
            sILogger.log(Log.ERROR, sTag, msg, null);
        }
    }

    /**
     * æ‰“å?°å‡ºé”™ä¿¡æ?¯
     *
     * @param tag
     * @param msg
     */
    public static void eTag(String tag, String msg) {
        if (enableLog(Log.ERROR)) {
            sILogger.log(Log.ERROR, tag, msg, null);
        }
    }

    /**
     * æ‰“å?°å‡ºé”™å †æ ˆä¿¡æ?¯
     *
     * @param t
     */
    public static void e(Throwable t) {
        if (enableLog(Log.ERROR)) {
            sILogger.log(Log.ERROR, sTag, null, t);
        }
    }

    /**
     * æ‰“å?°å‡ºé”™å †æ ˆä¿¡æ?¯
     *
     * @param tag
     * @param t
     */
    public static void eTag(String tag, Throwable t) {
        if (enableLog(Log.ERROR)) {
            sILogger.log(Log.ERROR, tag, null, t);
        }
    }


    /**
     * æ‰“å?°å‡ºé”™å †æ ˆä¿¡æ?¯
     *
     * @param msg
     * @param t
     */
    public static void e(String msg, Throwable t) {
        if (enableLog(Log.ERROR)) {
            sILogger.log(Log.ERROR, sTag, msg, t);
        }
    }

    /**
     * æ‰“å?°å‡ºé”™å †æ ˆä¿¡æ?¯
     *
     * @param tag
     * @param msg
     * @param t
     */
    public static void eTag(String tag, String msg, Throwable t) {
        if (enableLog(Log.ERROR)) {
            sILogger.log(Log.ERROR, tag, msg, t);
        }
    }

    /**
     * æ‰“å?°ä¸¥é‡?çš„é”™è¯¯ä¿¡æ?¯
     *
     * @param msg
     */
    public static void wtf(String msg) {
        if (enableLog(Log.ASSERT)) {
            sILogger.log(Log.ASSERT, sTag, msg, null);
        }
    }

    /**
     * æ‰“å?°ä¸¥é‡?çš„é”™è¯¯ä¿¡æ?¯
     *
     * @param tag
     * @param msg
     */
    public static void wtfTag(String tag, String msg) {
        if (enableLog(Log.ASSERT)) {
            sILogger.log(Log.ASSERT, tag, msg, null);
        }
    }

    /**
     * èƒ½å?¦æ‰“å?°
     *
     * @param logPriority
     * @return
     */
    private static boolean enableLog(int logPriority) {
        return sILogger != null && sIsDebug && logPriority >= sLogPriority;
    }
}
