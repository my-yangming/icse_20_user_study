package org.nutz.el.arithmetic;

import java.util.LinkedList;
import java.util.Queue;

import org.nutz.el.ElCache;
import org.nutz.el.Operator;
import org.nutz.el.obj.Elobj;
import org.nutz.lang.util.Context;

/**
 * é€†æ³¢å…°è¡¨ç¤ºæ³•ï¼ˆReverse Polish notationï¼ŒRPNï¼Œæˆ–é€†æ³¢å…°è®°æ³•ï¼‰ï¼Œæ˜¯ä¸€ç§?æ˜¯ç”±æ³¢å…°æ•°å­¦å®¶æ‰¬Â·æ­¦å?¡è°¢ç»´å¥‡1920å¹´å¼•å…¥çš„æ•°å­¦è¡¨è¾¾å¼?æ–¹å¼?ï¼Œåœ¨é€†æ³¢å…°è®°æ³•ä¸­ï¼Œæ‰€æœ‰æ“?ä½œç¬¦ç½®äºŽæ“?ä½œæ•°çš„å?Žé?¢ï¼Œå› æ­¤ä¹Ÿè¢«ç§°ä¸ºå?Žç¼€è¡¨ç¤ºæ³•ã€‚<br/>
 * å?‚è€ƒ:<a href="http://zh.wikipedia.org/wiki/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E7%A4%BA%E6%B3%95">é€†æ³¢å…°è¡¨è¾¾å¼?</a>
 * 
 * @author juqkai(juqkai@gmail.com)
 *
 */
public class RPN {
    //å­˜æ”¾context
    private final ElCache ec = new ElCache();
    //é¢„ç¼–è¯‘å?Žçš„å¯¹è±¡
    private LinkedList<Object> el;
    
    public RPN() {}
    
    /**
     * è¿›è¡ŒELçš„é¢„ç¼–è¯‘
     */
    public RPN(Queue<Object> rpn) {
        compile(rpn);
    }
    
    /**
     * æ‰§è¡Œå·²ç»?é¢„ç¼–è¯‘çš„EL
     */
    public Object calculate(Context context){
        ec.setContext(context);
        return calculate(el);
    }
    /**
     * æ ¹æ?®é€†æ³¢å…°è¡¨è¾¾å¼?è¿›è¡Œè®¡ç®—
     */
    public Object calculate(Context context, Queue<Object> rpn) {
        ec.setContext(context);
        LinkedList<Object> operand = OperatorTree(rpn);
        return calculate(operand);
    }
    
    /**
     * è®¡ç®—
     */
    private Object calculate(LinkedList<Object> el2){
        if(el2.peek() instanceof Operator){
            Operator obj = (Operator) el2.peek();
            return obj.calculate();
        }
        if(el2.peek() instanceof Elobj){
            return ((Elobj) el2.peek()).fetchVal();
        }
        return el2.peek();
    }
    
    /**
     * é¢„å…ˆç¼–è¯‘
     */
    public void compile(Queue<Object> rpn){
        el = OperatorTree(rpn);
    }
    
    /**
     * è½¬æ?¢æˆ?æ“?ä½œæ ‘
     */
    private LinkedList<Object> OperatorTree(Queue<Object> rpn){
        LinkedList<Object> operand = new LinkedList<Object>();
        while(!rpn.isEmpty()){
            if(rpn.peek() instanceof Operator){
                Operator opt = (Operator) rpn.poll();
                opt.wrap(operand);
                operand.addFirst(opt);
                continue;
            }
            if(rpn.peek() instanceof Elobj){
                ((Elobj) rpn.peek()).setEc(ec);
            }
            operand.addFirst(rpn.poll());
        }
        return operand;
    }
}
