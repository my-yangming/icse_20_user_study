/*
 * <summary></summary>
 * <author>He Han</author>
 * <email>hankcs.cn@gmail.com</email>
 * <create-date>2014/05/2014/5/19 21:07</create-date>
 *
 * <copyright file="Vertex.java" company="ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸">
 * Copyright (c) 2003-2014, ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸. All Right Reserved, http://www.linrunsoft.com/
 * This source is subject to the LinrunSpace License. Please contact ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸ to get more information.
 * </copyright>
 */
package com.hankcs.hanlp.seg.common;

import com.hankcs.hanlp.utility.MathUtility;
import com.hankcs.hanlp.dictionary.CoreDictionary;
import com.hankcs.hanlp.corpus.tag.Nature;
import com.hankcs.hanlp.utility.Predefine;

import java.util.Map;

import static com.hankcs.hanlp.utility.Predefine.logger;

/**
 * é¡¶ç‚¹
 *
 * @author hankcs
 */
public class Vertex
{
    /**
     * èŠ‚ç‚¹å¯¹åº”çš„è¯?æˆ–ç­‰æ•ˆè¯?ï¼ˆå¦‚æœª##æ•°ï¼‰
     */
    public String word;
    /**
     * èŠ‚ç‚¹å¯¹åº”çš„çœŸå®žè¯?ï¼Œç»?å¯¹ä¸?å?«##
     */
    public String realWord;
    /**
     * è¯?çš„å±žæ€§ï¼Œè°¨æ…Žä¿®æ”¹å±žæ€§å†…éƒ¨çš„æ•°æ?®ï¼Œå› ä¸ºä¼šå½±å“?åˆ°å­—å…¸<br>
     * å¦‚æžœè¦?ä¿®æ”¹ï¼Œåº”å½“newä¸€ä¸ªAttribute
     */
    public CoreDictionary.Attribute attribute;
    /**
     * ç­‰æ•ˆè¯?ID,ä¹Ÿæ˜¯Attributeçš„ä¸‹æ ‡
     */
    public int wordID;

    /**
     * åœ¨ä¸€ç»´é¡¶ç‚¹æ•°ç»„ä¸­çš„ä¸‹æ ‡ï¼Œå?¯ä»¥è§†ä½œè¿™ä¸ªé¡¶ç‚¹çš„id
     */
    public int index;

    ////////åœ¨æœ€çŸ­è·¯ç›¸å…³è®¡ç®—ä¸­ç”¨åˆ°çš„å‡ ä¸ªå?˜é‡?ï¼Œä¹‹æ‰€ä»¥æ”¾åœ¨è¿™é‡Œï¼Œæ˜¯ä¸ºäº†é?¿å…?å†?åŽ»ç”Ÿæˆ?å¯¹è±¡ï¼Œæµªè´¹æ—¶é—´////////
    /**
     * åˆ°è¯¥èŠ‚ç‚¹çš„æœ€çŸ­è·¯å¾„çš„å‰?é©±èŠ‚ç‚¹
     */
    public Vertex from;
    /**
     * æœ€çŸ­è·¯å¾„å¯¹åº”çš„æ?ƒé‡?
     */
    public double weight;

    public void updateFrom(Vertex from)
    {
        double weight = from.weight + MathUtility.calculateWeight(from, this);
        if (this.from == null || this.weight > weight)
        {
            this.from = from;
            this.weight = weight;
        }
    }

    /**
     * æœ€å¤?æ?‚çš„æž„é€ å‡½æ•°
     *
     * @param word      ç¼–è¯‘å?Žçš„è¯?
     * @param realWord  çœŸå®žè¯?
     * @param attribute å±žæ€§
     */
    public Vertex(String word, String realWord, CoreDictionary.Attribute attribute)
    {
        this(word, realWord, attribute, attribute == null ? -1 : -attribute.totalFrequency);
    }

    public Vertex(String word, String realWord, CoreDictionary.Attribute attribute, int wordID)
    {
        if (attribute == null) attribute = new CoreDictionary.Attribute(Nature.n, 1);   // å®‰å…¨èµ·è§?
        this.wordID = wordID;
        this.attribute = attribute;
        if (word == null) word = compileRealWord(realWord, attribute);
        assert realWord.length() > 0 : "æž„é€ ç©ºç™½èŠ‚ç‚¹ä¼šå¯¼è‡´æ­»å¾ªçŽ¯ï¼?";
        this.word = word;
        this.realWord = realWord;
    }

    /**
     * å°†åŽŸè¯?è½¬ä¸ºç­‰æ•ˆè¯?ä¸²
     * @param realWord åŽŸæ?¥çš„è¯?
     * @param attribute ç­‰æ•ˆè¯?ä¸²
     * @return
     */
    private String compileRealWord(String realWord, CoreDictionary.Attribute attribute)
    {
        if (attribute.nature.length == 1)
        {
            Nature nature = attribute.nature[0];
            if (nature.startsWith("nr"))
            {
                wordID = CoreDictionary.NR_WORD_ID;
//                    this.attribute = CoreDictionary.get(CoreDictionary.NR_WORD_ID);
                return Predefine.TAG_PEOPLE;
            }
            else if (nature.startsWith("ns"))
            {
                wordID = CoreDictionary.NS_WORD_ID;
                // åœ¨åœ°å??è¯†åˆ«çš„æ—¶å€™,å¸Œæœ›ç±»ä¼¼"æ²³é•‡"çš„è¯?è¯­ä¿?æŒ?è‡ªå·±çš„è¯?æ€§,è€Œä¸?æ˜¯æœª##åœ°çš„è¯?æ€§
//                    this.attribute = CoreDictionary.get(CoreDictionary.NS_WORD_ID);
                return Predefine.TAG_PLACE;
            }
//                case nz:
            else if (nature == Nature.nx)
            {
                wordID = CoreDictionary.NX_WORD_ID;
                if (wordID == -1)
                    wordID = CoreDictionary.X_WORD_ID;
//                    this.attribute = CoreDictionary.get(wordID);
                return Predefine.TAG_PROPER;
            }
            else if (nature.startsWith("nt") || nature == Nature.nit)
            {
                wordID = CoreDictionary.NT_WORD_ID;
//                    this.attribute = CoreDictionary.get(CoreDictionary.NT_WORD_ID);
                return Predefine.TAG_GROUP;
            }
            else if (nature.startsWith('m'))
            {
                wordID = CoreDictionary.M_WORD_ID;
                this.attribute = CoreDictionary.get(CoreDictionary.M_WORD_ID);
                return Predefine.TAG_NUMBER;
            }
            else if (nature.startsWith('x'))
            {
                wordID = CoreDictionary.X_WORD_ID;
                this.attribute = CoreDictionary.get(CoreDictionary.X_WORD_ID);
                return Predefine.TAG_CLUSTER;
            }
//                case xx:
//                case w:
//                {
//                    word= Predefine.TAG_OTHER;
//                }
//                break;
            else if (nature == Nature.t)
            {
                wordID = CoreDictionary.T_WORD_ID;
                this.attribute = CoreDictionary.get(CoreDictionary.T_WORD_ID);
                return Predefine.TAG_TIME;
            }
        }

        return realWord;
    }

    /**
     * çœŸå®žè¯?ä¸Žç¼–è¯‘è¯?ç›¸å?Œæ—¶å€™çš„æž„é€ å‡½æ•°
     *
     * @param realWord
     * @param attribute
     */
    public Vertex(String realWord, CoreDictionary.Attribute attribute)
    {
        this(null, realWord, attribute);
    }

    public Vertex(String realWord, CoreDictionary.Attribute attribute, int wordID)
    {
        this(null, realWord, attribute, wordID);
    }

    /**
     * é€šè¿‡ä¸€ä¸ªé”®å€¼å¯¹æ–¹ä¾¿åœ°æž„é€ èŠ‚ç‚¹
     *
     * @param entry
     */
    public Vertex(Map.Entry<String, CoreDictionary.Attribute> entry)
    {
        this(entry.getKey(), entry.getValue());
    }

    /**
     * è‡ªåŠ¨æž„é€ ä¸€ä¸ªå?ˆç?†çš„é¡¶ç‚¹
     *
     * @param realWord
     */
    public Vertex(String realWord)
    {
        this(null, realWord, CoreDictionary.get(realWord));
    }

    public Vertex(char realWord, CoreDictionary.Attribute attribute)
    {
        this(String.valueOf(realWord), attribute);
    }

    /**
     * èŽ·å?–çœŸå®žè¯?
     *
     * @return
     */
    public String getRealWord()
    {
        return realWord;
    }

    public Vertex getFrom()
    {
        return from;
    }

    public void setFrom(Vertex from)
    {
        this.from = from;
    }

    /**
     * èŽ·å?–è¯?çš„å±žæ€§
     *
     * @return
     */
    public CoreDictionary.Attribute getAttribute()
    {
        return attribute;
    }

    /**
     * å°†å±žæ€§çš„è¯?æ€§é”?å®šä¸ºnature
     *
     * @param nature è¯?æ€§
     * @return å¦‚æžœé”?å®šè¯?æ€§åœ¨è¯?æ€§åˆ—è¡¨ä¸­ï¼Œè¿”å›žçœŸï¼Œå?¦åˆ™è¿”å›žå?‡
     */
    public boolean confirmNature(Nature nature)
    {
        if (attribute.nature.length == 1 && attribute.nature[0] == nature)
        {
            return true;
        }
        boolean result = true;
        int frequency = attribute.getNatureFrequency(nature);
        if (frequency == 0)
        {
            frequency = 1000;
            result = false;
        }
        attribute = new CoreDictionary.Attribute(nature, frequency);
        return result;
    }

    /**
     * å°†å±žæ€§çš„è¯?æ€§é”?å®šä¸ºnatureï¼Œæ­¤é‡?è½½ä¼šé™?ä½Žæ€§èƒ½
     *
     * @param nature     è¯?æ€§
     * @param updateWord æ˜¯å?¦æ›´æ–°é¢„ç¼–è¯‘å­—ä¸²
     * @return å¦‚æžœé”?å®šè¯?æ€§åœ¨è¯?æ€§åˆ—è¡¨ä¸­ï¼Œè¿”å›žçœŸï¼Œå?¦åˆ™è¿”å›žå?‡
     */
    public boolean confirmNature(Nature nature, boolean updateWord)
    {
        switch (nature.firstChar())
        {

            case 'm':
                word = Predefine.TAG_NUMBER;
                break;
            case 't':
                word = Predefine.TAG_TIME;
                break;
            default:
                logger.warning("æ²¡æœ‰ä¸Ž" + nature + "å¯¹åº”çš„case");
                break;
        }

        return confirmNature(nature);
    }

    /**
     * èŽ·å?–è¯¥èŠ‚ç‚¹çš„è¯?æ€§ï¼Œå¦‚æžœè¯?æ€§è¿˜æœªç¡®å®šï¼Œåˆ™è¿”å›žnull
     *
     * @return
     */
    public Nature getNature()
    {
        if (attribute.nature.length == 1)
        {
            return attribute.nature[0];
        }

        return null;
    }

    /**
     * çŒœæµ‹æœ€å?¯èƒ½çš„è¯?æ€§ï¼Œä¹Ÿå°±æ˜¯è¿™ä¸ªèŠ‚ç‚¹çš„è¯?æ€§ä¸­å‡ºçŽ°é¢‘çŽ‡æœ€å¤§çš„é‚£ä¸€ä¸ªè¯?æ€§
     *
     * @return
     */
    public Nature guessNature()
    {
        return attribute.nature[0];
    }

    public boolean hasNature(Nature nature)
    {
        return attribute.getNatureFrequency(nature) > 0;
    }

    /**
     * å¤?åˆ¶è‡ªå·±
     *
     * @return è‡ªå·±çš„å¤‡ä»½
     */
    public Vertex copy()
    {
        return new Vertex(word, realWord, attribute);
    }

    public Vertex setWord(String word)
    {
        this.word = word;
        return this;
    }

    public Vertex setRealWord(String realWord)
    {
        this.realWord = realWord;
        return this;
    }

    /**
     * åˆ›å»ºä¸€ä¸ªæ•°è¯?å®žä¾‹
     *
     * @param realWord æ•°å­—å¯¹åº”çš„çœŸå®žå­—ä¸²
     * @return æ•°è¯?é¡¶ç‚¹
     */
    public static Vertex newNumberInstance(String realWord)
    {
        return new Vertex(Predefine.TAG_NUMBER, realWord, new CoreDictionary.Attribute(Nature.m, 1000));
    }

    /**
     * åˆ›å»ºä¸€ä¸ªåœ°å??å®žä¾‹
     *
     * @param realWord æ•°å­—å¯¹åº”çš„çœŸå®žå­—ä¸²
     * @return åœ°å??é¡¶ç‚¹
     */
    public static Vertex newAddressInstance(String realWord)
    {
        return new Vertex(Predefine.TAG_PLACE, realWord, new CoreDictionary.Attribute(Nature.ns, 1000));
    }

    /**
     * åˆ›å»ºä¸€ä¸ªæ ‡ç‚¹ç¬¦å?·å®žä¾‹
     *
     * @param realWord æ ‡ç‚¹ç¬¦å?·å¯¹åº”çš„çœŸå®žå­—ä¸²
     * @return æ ‡ç‚¹ç¬¦å?·é¡¶ç‚¹
     */
    public static Vertex newPunctuationInstance(String realWord)
    {
        return new Vertex(realWord, new CoreDictionary.Attribute(Nature.w, 1000));
    }

    /**
     * åˆ›å»ºä¸€ä¸ªäººå??å®žä¾‹
     *
     * @param realWord
     * @return
     */
    public static Vertex newPersonInstance(String realWord)
    {
        return newPersonInstance(realWord, 1000);
    }

    /**
     * åˆ›å»ºä¸€ä¸ªéŸ³è¯‘äººå??å®žä¾‹
     *
     * @param realWord
     * @return
     */
    public static Vertex newTranslatedPersonInstance(String realWord, int frequency)
    {
        return new Vertex(Predefine.TAG_PEOPLE, realWord, new CoreDictionary.Attribute(Nature.nrf, frequency));
    }

    /**
     * åˆ›å»ºä¸€ä¸ªæ—¥æœ¬äººå??å®žä¾‹
     *
     * @param realWord
     * @return
     */
    public static Vertex newJapanesePersonInstance(String realWord, int frequency)
    {
        return new Vertex(Predefine.TAG_PEOPLE, realWord, new CoreDictionary.Attribute(Nature.nrj, frequency));
    }

    /**
     * åˆ›å»ºä¸€ä¸ªäººå??å®žä¾‹
     *
     * @param realWord
     * @param frequency
     * @return
     */
    public static Vertex newPersonInstance(String realWord, int frequency)
    {
        return new Vertex(Predefine.TAG_PEOPLE, realWord, new CoreDictionary.Attribute(Nature.nr, frequency));
    }

    /**
     * åˆ›å»ºä¸€ä¸ªåœ°å??å®žä¾‹
     *
     * @param realWord
     * @param frequency
     * @return
     */
    public static Vertex newPlaceInstance(String realWord, int frequency)
    {
        return new Vertex(Predefine.TAG_PLACE, realWord, new CoreDictionary.Attribute(Nature.ns, frequency));
    }

    /**
     * åˆ›å»ºä¸€ä¸ªæœºæž„å??å®žä¾‹
     *
     * @param realWord
     * @param frequency
     * @return
     */
    public static Vertex newOrganizationInstance(String realWord, int frequency)
    {
        return new Vertex(Predefine.TAG_GROUP, realWord, new CoreDictionary.Attribute(Nature.nt, frequency));
    }

    /**
     * åˆ›å»ºä¸€ä¸ªæ—¶é—´å®žä¾‹
     *
     * @param realWord æ—¶é—´å¯¹åº”çš„çœŸå®žå­—ä¸²
     * @return æ—¶é—´é¡¶ç‚¹
     */
    public static Vertex newTimeInstance(String realWord)
    {
        return new Vertex(Predefine.TAG_TIME, realWord, new CoreDictionary.Attribute(Nature.t, 1000));
    }

    /**
     * ç”Ÿæˆ?çº¿ç¨‹å®‰å…¨çš„èµ·å§‹èŠ‚ç‚¹
     * @return
     */
    public static Vertex newB()
    {
        return new Vertex(Predefine.TAG_BIGIN, " ", new CoreDictionary.Attribute(Nature.begin, Predefine.MAX_FREQUENCY / 10), CoreDictionary.getWordID(Predefine.TAG_BIGIN));
    }

    /**
     * ç”Ÿæˆ?çº¿ç¨‹å®‰å…¨çš„ç»ˆæ­¢èŠ‚ç‚¹
     * @return
     */
    public static Vertex newE()
    {
        return new Vertex(Predefine.TAG_END, " ", new CoreDictionary.Attribute(Nature.end, Predefine.MAX_FREQUENCY / 10), CoreDictionary.getWordID(Predefine.TAG_END));
    }

    public int length()
    {
        return realWord.length();
    }

    @Override
    public String toString()
    {
        return realWord;
//        return "WordNode{" +
//                "word='" + word + '\'' +
//                (word.equals(realWord) ? "" : (", realWord='" + realWord + '\'')) +
////                ", attribute=" + attribute +
//                '}';
    }
}
