package org.nutz.dao.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

import javax.sql.DataSource;

import org.nutz.dao.Dao;
import org.nutz.dao.impl.NutDao;
import org.nutz.dao.impl.SimpleDataSource;
import org.nutz.lang.Files;
import org.nutz.lang.Lang;
import org.nutz.lang.Mirror;
import org.nutz.lang.Streams;
import org.nutz.log.Log;
import org.nutz.log.Logs;

/**
 * ä¸ºé?žMvc,IocçŽ¯å¢ƒä¸‹çš„ç¨‹åº?æ??ä¾›è¾…åŠ©æ”¯æŒ?.<p/>
 * <b>DaoUpä¸?æ˜¯ä¸€æ¬¡æ€§äº§å“?!! å¦‚æžœæ–°å»ºDaoUpç„¶å?Žç«‹é©¬æŠ›å¼ƒæŽ‰, ä»Žä¸­èŽ·å?–çš„NutDao/DataSourceå°†ä¼šå…³é—­!!</b><p/>
 * <b>è¯·æ³¨æ„?ä½¿ç”¨åœºæ™¯!!! åœ¨Mvcä¸‹æœ‰IocByçš„æƒ…å†µä¸‹,ä¸?éœ€è¦?ä¹Ÿä¸?åº”è¯¥ä½¿ç”¨æœ¬ç±»!!</b><p/>
 * <b>Mvcä¸‹å?¯ä»¥é€šè¿‡ Mvcs.getIoc()æˆ–Mvcs.ctx().getDefaultIoc()èŽ·å?–Iocå®¹å™¨,ä»Žè€ŒèŽ·å?–å…¶ä¸­çš„Daoå®žä¾‹!!</b><p/>
 * <b>Mvcåº”å°½é‡?ä½¿ç”¨æ³¨å…¥,è€Œé?žä¸»åŠ¨å?–Daoå®žä¾‹,æ›´ä¸?åº”è¯¥ä¸»åŠ¨new NutDao!!!</b>
 * <p/> æœ€åŸºæœ¬çš„ç”¨æ³•<p/>
<code>
    DaoUp.me().init(new File("db.properties"));
    Dao dao = DaoUp.me().dao();
    
    dao.insert(.......);
    
    // æ³¨æ„?,ä¸?æ˜¯æ¯?æ¬¡ç”¨å®ŒDaoå°±å…³,æ˜¯æ•´ä¸ªç¨‹åº?å…³é—­çš„æ—¶å€™æ‰?å…³!!
    // ç¨‹åº?ç»“æ?Ÿå‰?å…³é—­ç›¸å…³èµ„æº?.
    DaoUp.me().close();
</code>
<p/><p/>
è¯·å?‚é˜…testæº?ç ?ä¸­çš„DaoUpTestèŽ·å?–Daoçš„å…¥é—¨æŠ€å·§.
 * 
 * @author wendal(wendal1985@gmail.com)
 *
 */
public class DaoUp {
    
    /**
     * æ—¥å¿—å¯¹è±¡
     */
    private static final Log log = Logs.get();

    /**
     * å†…ç½®å?•ä¾‹
     */
    protected static DaoUp me = new DaoUp("_defult_");
    
    /**
     * Druidæ•°æ?®æº?çš„å·¥åŽ‚æ–¹æ³•ç±»
     */
    protected static Class<?> druidFactoryClass;
    
    /**
     * å¦‚æžœæœ¬å¯¹è±¡è¢«GC,æ˜¯å?¦è§¦å?‘è‡ªåŠ¨å…³é—­
     */
    protected boolean autoCloseWhenFinalize = true;
    
    static {
        try {
            /**
             * åŠ è½½DruidDataSourceFactory, å?³Druidè¿žæŽ¥æ± çš„å·¥åŽ‚ç±»
             */
            druidFactoryClass = Lang.loadClass("com.alibaba.druid.pool.DruidDataSourceFactory");
        }
        catch (ClassNotFoundException e) {
            // æ‰¾ä¸?åˆ°å°±ç”¨å†…ç½®çš„SimpleDataSourceå¥½äº†.
            // TODO æ”¯æŒ?å…¶ä»–ç±»åž‹çš„æ•°æ?®æº?, ä½Žä¼˜å…ˆçº§
        }
    }
    
    /**
     * èŽ·å?–å†…ç½®çš„DaoUpå?•ä¾‹
     * @return DaoUpå®žä¾‹
     */
    public static DaoUp me() {
        return me;
    }

    /**
     * éœ€è¦?æ–°å»ºå¤šä¸ªDaoUp,è¯·ç»§æ‰¿DaoUp,ä»Žè€Œæš´éœ²æž„é€ æ–¹æ³•æˆ–ä½¿ç”¨å·¥åŽ‚æ–¹æ³•!!
     */
    protected DaoUp(String name) {
        this.name = name;
    }
    
    /**
     * Daoå¯¹è±¡
     */
    protected Dao dao;
    
    /**
     * è¿žæŽ¥æ± 
     */
    protected DataSource dataSource;
    
    /**
     * å½“å‰?DaoUpçš„å??ç§°
     */
    protected String name;
    
    /**
     * è¿”å›žæ‰€æŒ?æœ‰çš„Daoå®žä¾‹,å¦‚æžœDaoUpè¿˜æ²¡åˆ?å§‹åŒ–æˆ–å·²ç»?å…³é—­,è¿™é‡Œä¼šè¿”å›žnull
     * @return Daoå®žä¾‹
     */
    public Dao dao() {
        return dao;
    }
    
    /**
     * èŽ·å?–æ•°æ?®æº?, å¦‚æžœDaoUpè¿˜æ²¡åˆ?å§‹åŒ–æˆ–å·²ç»?å…³é—­,è¿™é‡Œä¼šè¿”å›žnull
     * @return æ•°æ?®æº?(è¿žæŽ¥æ± )
     */
    public DataSource getDataSource() {
        return dataSource;
    }
    
    /**
     * ä¸»åŠ¨è®¾ç½®æ•°æ?®æº?(è¿žæŽ¥æ± )
     * @param dataSource æ•°æ?®æº?(è¿žæŽ¥æ± )
     */
    public void setDataSource(DataSource dataSource) {
        this.dataSource = dataSource;
        setDao(new NutDao(dataSource));
    }
    
    /**
     * ä¸»åŠ¨è®¾ç½®Daoå®žä¾‹
     * @param dao Daoå®žä¾‹
     */
    public void setDao(Dao dao) {
        if (this.dao != null)
            log.infof("override old Dao=%s by new Dao=%s", this.dao, dao);
        this.dao = dao;
    }
    
    /**
     * ä»Žclasspathæˆ–å½“å‰?ç›®å½•ä¸‹æŸ¥æ‰¾é…?ç½®æ–‡ä»¶æ?¥è¿›è¡Œåˆ?å§‹åŒ–
     * @param name
     */
    public void init(String name) throws IOException {
        init(new FileInputStream(Files.findFile(name)));
    }
    
    /**
     * ä»Žä¸€ä¸ªæ–‡ä»¶è¯»å?–æ•°æ?®åº“é…?ç½®
     * @param f é…?ç½®æ–‡ä»¶
     * @throws IOException æ–‡ä»¶ä¸?å?¯è¯»å?–æ—¶æŠ›å‡ºå¼‚å¸¸
     */
    public void init(File f) throws IOException {
        init(new FileInputStream(f));
    }
    
    /**
     * ä»Žä¸€ä¸ªæµ?è¯»å?–æ•°æ?®åº“é…?ç½®
     * @param in è¾“å…¥æµ?,åŒ…å?«é…?ç½®ä¿¡æ?¯
     * @throws IOException è¯»å?–å¤±è´¥æ˜¯æŠ›å‡ºå¼‚å¸¸
     */
    public void init(InputStream in) throws IOException {
        Properties props = new Properties();
        try {
            props.load(in);
            init(props);
        }
        finally {
            Streams.safeClose(in);
        }
    }
    
    /**
     * ç»™å®šä¸€ä¸ªPropertiesé…?ç½®,ä¸?èƒ½ä¸ºnull!!!! æœ€èµ·ç ?è¦?åŒ…å?«ä¸€ä¸ªå?«urlçš„å?‚æ•°!!!
     * @param props é…?ç½®ä¿¡æ?¯
     */
    public void init(Properties props) {
        if (dao != null) {
            throw new IllegalArgumentException("DaoUp is inited!!");
        }
        if (props.size() == 0) {
            throw new IllegalArgumentException("DaoUp props size=0!!!");
        }
        DataSource ds = buildDataSource(props);
        setDataSource(ds);
    }
    
    /**
     * æž„å»ºDataSource,å­?ç±»å?¯è¦†ç›–. å¦‚æžœå­˜åœ¨Druid,åˆ™ä½¿ç”¨ä¹‹,å?¦åˆ™ä½¿ç”¨å†…ç½®çš„SimpleDataSource
     * @param props é…?ç½®ä¿¡æ?¯
     * @return ç›®æ ‡DataSource
     */
    protected DataSource buildDataSource(Properties props) {
        if (druidFactoryClass != null) {
            log.debug("build DruidDataSource by props");
            Mirror<?> mirror = Mirror.me(druidFactoryClass);
            DataSource ds = (DataSource) mirror.invoke(null, "createDataSource", props);
            if (!props.containsKey("maxWait"))
                Mirror.me(ds).setValue(ds, "maxWait", 15*1000);
            return ds;
        }
        log.debug("build SimpleteDataSource by props");
        return SimpleDataSource.createDataSource(props);
    }
    
    /**
     * å…³é—­æœ¬DaoUp,å°†å…³é—­DataSourceå¹¶å°†daoå’ŒdataSourceç½®ä¸ºnull!!!<p/>
     * <b>å?ªèƒ½åœ¨ç¨‹åº?å…³é—­æ—¶è°ƒç”¨,ä¸¥ç¦?åœ¨æ¯?æ¬¡Daoæ“?ä½œå?Žè°ƒç”¨!!</b>
     */
    public synchronized void close() {
        if (dao == null)
            return;
        log.infof("shutdown DaoUp(name=%s)", name);
        try {
            Mirror.me(dataSource).invoke(dataSource, "close");
        }
        catch (Throwable e) {
        }
        this.dataSource = null;
        this.dao = null;
    }
    
    /**
     * è®¾ç½®æ˜¯å?¦åœ¨æœ¬å¯¹è±¡è¢«GCæ—¶è‡ªåŠ¨å…³é—­ç›¸å…³èµ„æº?.<p/>
     * <b>è‹¥è¦?è®¾ç½®ä¸ºfalse, è¯·æ…Žé‡?è€ƒè™‘,å› ä¸ºç»?å¤§éƒ¨åˆ†æƒ…å†µä¸‹è®¾ç½®ä¸ºtrueå¹¶ä¸?èƒ½è§£å†³æ‚¨å½“å‰?é?‡åˆ°çš„é—®é¢˜!!</b><p/>
     * DaoUpç±»ä¸?æ˜¯è®¾è®¡ä¸ºå?³ç”¨å?³æŠ›çš„!!!è€Œæ˜¯è®¾è®¡ä¸ºå?•ä¾‹æ¨¡å¼?çš„!!!!!!!<p/>
     * <b>å¦‚æžœæ˜¯é?‡åˆ°DataSource is closedä¹‹ç±»çš„å¼‚å¸¸, åœ¨è€ƒè™‘ä½¿ç”¨æœ¬é…?ç½®å‰?è¯·å…ˆæ£€è®¨ä»£ç ?!!!</b><p/>
     * @param autoCloseWhenFinalize æ˜¯å?¦è‡ªåŠ¨å…³é—­èµ„æº?
     */
    public void setAutoCloseWhenFinalize(boolean autoCloseWhenFinalize) {
        this.autoCloseWhenFinalize = autoCloseWhenFinalize;
        if (!autoCloseWhenFinalize) {
            log.warnf("DaoUp[%s] autoCloseWhenFinalize is disabled. You had been WARN!!", name);
        }
    }
    
    /**
     * å¦‚æžœè¢«GC,ä¸»åŠ¨è§¦å?‘å…³é—­,é™¤é?žautoCloseWhenFinalizeä¸ºfalse
     */
    protected void finalize() throws Throwable {
        if (autoCloseWhenFinalize)
            close();
        super.finalize();
    }
    
//    /**
//     * æ??ä¾›ä¸€ä¸ªé…?ç½®å¯¹è±¡,ç„¶å?Žç”Ÿæˆ?Daoå®žä¾‹<p/>
//     * <p/>åº”è¯¥æŠŠå¯¹è±¡
//     * <b>è¿”å›žçš„å¯¹è±¡!!</b>
//     * @param conf å?¯ä»¥ä¸ºDataSource/File/InputStream/Properties/String
//     * @return åˆ?å§‹åŒ–å¥½çš„Daoå®žä¾‹
//     * @throws IOException è¯»å?–æ–‡ä»¶å‡ºé”™æ—¶æŠ›å‡º
//     */
//    public static Dao factory(Object conf) throws IOException {
//        if (conf == null)
//            return null;
//        if (conf instanceof Dao)
//            return (Dao) conf;
//        if (conf instanceof DataSource)
//            return new NutDao((DataSource)conf);
//        DaoUp up = new DaoUp("daoup_factory_" + System.currentTimeMillis());
//        if (conf instanceof File) {
//            up.init((File)conf);
//        } else if (conf instanceof InputStream) {
//            up.init((InputStream)conf);
//        } else if (conf instanceof Properties) {
//            up.init((Properties)conf);
//        } else {
//            up.init(conf.toString());
//        }
//        Dao dao = up.dao();
//        up.autoCloseWhenFinalize = false;
//        return dao;
//    }
    
    // TODO å®Œæˆ?ä¸€ä¸ªrepl
//    public static void main(String[] args) {
//        
//    }
}
