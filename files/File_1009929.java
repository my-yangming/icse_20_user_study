package com.xiaojinzi.component.impl.interceptor;

import android.net.Uri;

import com.xiaojinzi.component.error.ignore.NavigationFailException;
import com.xiaojinzi.component.impl.RouterInterceptor;

/**
 * è¿™ä¸ªæ‹¦æˆªå™¨å¿…é¡»åœ¨å…¶ä»–ä»»ä½•ä¸€ä¸ªæ‹¦æˆªå™¨ä¹‹å‰?æ‰§è¡Œ
 * ä»Žæ ¹æœ¬ä¸Šé™?åˆ¶å?Œä¸€ä¸ªç•Œé?¢åœ¨ä¸€ç§’é’Ÿå†…å?ªèƒ½æ‰“å¼€ä¸€æ¬¡,è¿™ä¸ªæ‹¦æˆªå™¨ä¼šè¢«æ¡†æž¶æœ€å…ˆæ‰§è¡Œ
 * note: è¿™ä¸ªæ‹¦æˆªå™¨æ²¡æœ‰è¿žå?Œ {@link Uri#getScheme()} ä¸€èµ·åˆ¤æ–­,å…¶å®žåº”è¯¥ä¸€èµ·çš„,
 * ä½†æ˜¯çŽ°å®žä¸­åº”è¯¥ä¹Ÿä¸?ä¼šå‡ºçŽ°ä¸€ç§’é’Ÿ host å’Œ path éƒ½ç›¸å?Œçš„ä¸¤æ¬¡è·¯ç”±äº†
 *
 * time   : 2019/01/23
 *
 * @author : xiaojinzi 30212
 */
public class OpenOnceInterceptor implements RouterInterceptor {

    private OpenOnceInterceptor() {
    }

    private static class SingletonInstance {
        private static final OpenOnceInterceptor INSTANCE = new OpenOnceInterceptor();
    }

    public static OpenOnceInterceptor getInstance() {
        return OpenOnceInterceptor.SingletonInstance.INSTANCE;
    }

    private String preHost;
    private String prePath;
    /**
     * è®°å½•ä¸Šä¸€ä¸ªç•Œé?¢è·³è½¬çš„æ—¶é—´
     */
    private long preTargetTime;

    @Override
    public void intercept(Chain chain) throws Exception {
        Uri uri = chain.request().uri;
        String currentHost = uri.getHost();
        String currentPath = uri.getPath();
        // è°ƒè¯•çš„æƒ…å†µä¸‹å?¯èƒ½ä¼šå¤±æ•ˆ,å› ä¸ºä½ æ–­ç‚¹æ‰“åˆ°è¿™é‡Œæ…¢æ…¢çš„å¾€ä¸‹èµ°é‚£ä¹ˆå?¯èƒ½æ—¶é—´å·²ç»?è¿‡äº†ä¸€ç§’,å°±å¤±åŽ»äº†é™?åˆ¶çš„ä½œç”¨
        long currentTime = System.currentTimeMillis();
        // å¦‚æžœåŒ¹é…?äº†
        if (currentHost.equals(preHost) && currentPath.equals(prePath) && (currentTime - preTargetTime) < 1000) {
            chain.callback().onError(new NavigationFailException("target '" + uri.toString() + "' can't launch twice in a second"));
        } else {
            preHost = currentHost;
            prePath = currentPath;
            preTargetTime = currentTime;
            // æ”¾è¿‡æ‰§è¡Œ
            chain.proceed(chain.request());
        }
    }

}
