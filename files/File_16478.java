package org.hswebframework.web.organizational.authorization.relation;


import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public interface LinkedRelations<C extends LinkedRelations> {

    /**
     * èŽ·å?–æŒ‡å®šæ–¹å?‘ä»¥å?Šç»´åº¦çš„å…³ç³»é“¾,å¦‚: æˆ‘æ˜¯æ?Žå››çš„ç»?ç?†,å¼ ä¸‰æ˜¯æˆ‘çš„ç»?ç?†
     *
     * @param direction å…³ç³»æ–¹å?‘ {@link Relation.Direction}
     * @param dimension å…³ç³»ç»´åº¦,å¦‚: position,ç”±å®žçŽ°è¿›è¡Œè‡ªå®šä¹‰
     * @param relation  å…³ç³»å®šä¹‰,å¦‚: ç›´å±žé¢†å¯¼ {@link Relation#getRelation()}
     * @return å…³ç³»é“¾
     * @see Relation#getRelation()
     * @see Relation#getDirection()
     */
    C relations(Relation.Direction direction, String dimension, String relation);

    /**
     * èŽ·å?–æŒ‡å®šæ–¹å?‘çš„æ‰€æœ‰ç»´åº¦çš„å…³ç³»é“¾.
     * <pre>
     *     æ­£å?‘: [æˆ‘]æ˜¯[å¼ ä¸‰]çš„[ç ”å?‘éƒ¨(ç»´åº¦)][ç»?ç?†(å…³ç³»)]
     *     å??å?‘: [å¼ ä¸‰]æ˜¯[æˆ‘]çš„[ç ”å?‘éƒ¨(ç»´åº¦)][ç»?ç?†(å…³ç³»)]
     *     å?Œå?‘: [æ­£å?‘]æˆ–è€…[å??å?‘]å…³ç³»
     * </pre>
     *
     * @param direction æ–¹å?‘
     * @param relation  å…³ç³»å®šä¹‰ {@link Relation#getRelation()}
     * @return å…³ç³»é“¾
     * @see Relation#getRelation()
     * @see Relation#getDirection()
     * @see this#relations(Relation.Direction, String, String)
     */
    default C relations(Relation.Direction direction, String relation) {
        return relations(direction, null, relation);
    }

    /**
     * @see this#relations(Relation.Direction, String, String)
     * @see Relation.Direction#REVERSE
     */
    default C relationsRev(String type, String relation) {
        return relations(Relation.Direction.REVERSE, type, relation);
    }

    /**
     * @see this#relations(Relation.Direction, String)
     * @see Relation.Direction#REVERSE
     */
    default C relationsRev(String relation) {
        return relations(Relation.Direction.REVERSE, relation);
    }


    /**
     * @see this#relations(Relation.Direction, String, String)
     * @see Relation.Direction#POSITIVE
     */
    default C relationsPos(String type, String relation) {
        return relations(Relation.Direction.POSITIVE, type, relation);
    }

    /**
     * @see this#relations(Relation.Direction, String)
     * @see Relation.Direction#POSITIVE
     */
    default C relationsPos(String relation) {
        return relations(Relation.Direction.POSITIVE, relation);
    }

    /**
     * @see this#relations(Relation.Direction, String, String)
     * @see Relation.Direction#ALL
     */
    default C relations(String type, String relation) {
        return relations(Relation.Direction.ALL, type, relation);
    }

    /**
     * @see this#relations(Relation.Direction, String)
     * @see Relation.Direction#ALL
     */
    default C relations(String relation) {
        return relations(Relation.Direction.ALL, relation);
    }


    /**
     * åˆ¤æ–­ç›®æ ‡å…³ç³»å¯¹è±¡å±žæ€§æ˜¯å?¦ä¸Žå€¼ç­‰äºŽ
     *
     * @param property å±žæ€§å??ç§°,å¦‚: name
     * @param value    å±žæ€§æŒ‡,å¦‚: å¼ ä¸‰
     * @return å…³ç³»é“¾
     */
    C is(String property, Object value);

    /**
     * åˆ¤æ–­ç›®æ ‡å…³ç³»å¯¹è±¡å±žæ€§æ˜¯å?¦ä¸?ç­‰äºŽå€¼
     *
     * @param property å±žæ€§å??ç§°,å¦‚: name
     * @param value    å±žæ€§æŒ‡,å¦‚: å¼ ä¸‰
     * @return å…³ç³»é“¾
     */
    C not(String property, Object value);

    /**
     * åˆ‡æ?¢å½“å‰?è¿‡æ»¤é€»è¾‘ä¸ºæˆ–åˆ™,å¦‚:
     * <pre>
     *     //èŽ·å?–å§“å??ä¸ºå¼ ä¸‰æˆ–è€…æ?Žå››çš„é¢†å¯¼
     *     me.relations("é¢†å¯¼").is("name","å¼ ä¸‰").or().is("name","æ?Žå››").all();
     * </pre>
     *
     * @return å…³ç³»é“¾
     */
    C or();

    /**
     * åˆ‡æ?¢å½“å‰?è¿‡æ»¤é€»è¾‘ä¸ºå¹¶ä¸”
     * <pre>
     *     //èŽ·å?–statusä¸º1å¹¶ä¸”emailä¸?ä¸ºç©ºçš„é¢†å¯¼
     *     me.relations("é¢†å¯¼").is("status",1).and().not("email","").all();
     * </pre>
     *
     * @return å…³ç³»é“¾
     */
    C and();

    /**
     * @return å…¨éƒ¨å…³ç³»ä¿¡æ?¯é›†å?ˆ
     */
    default List<Relation> all() {
        return stream().collect(Collectors.toList());
    }

    /**
     * èŽ·å?–æ‰€æœ‰çš„å…³ç³»ç›®æ ‡æ ‡è¯†,é€šå¸¸æ˜¯äººå‘˜çš„id
     *
     * @return äººå‘˜id
     */
    default List<String> allTarget() {
        return stream().map(Relation::getTarget).collect(Collectors.toList());
    }

    /**
     * @return å…¨éƒ¨å…³ç³»ä¿¡æ?¯çš„stream
     */
    Stream<Relation> stream();

    C deep();
}
