package com.sohu.cache.web.util;

import com.sohu.cache.constant.AppAuditType;
import com.sohu.cache.constant.AppCheckEnum;
import com.sohu.cache.constant.RedisConfigTemplateChangeEnum;
import com.sohu.cache.entity.AppAudit;
import com.sohu.cache.entity.AppDailyData;
import com.sohu.cache.entity.AppDesc;
import com.sohu.cache.entity.AppUser;
import com.sohu.cache.entity.InstanceAlertValueResult;
import com.sohu.cache.entity.InstanceConfig;
import com.sohu.cache.stats.app.AppStatsCenter;
import com.sohu.cache.util.ConstUtils;
import com.sohu.cache.web.component.EmailComponent;
import com.sohu.cache.web.enums.SuccessEnum;
import com.sohu.cache.web.service.UserService;
import com.sohu.cache.web.vo.AppDetailVO;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.apache.velocity.app.VelocityEngine;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

/**
 * é‚®ä»¶é€šçŸ¥åº”ç”¨çš„ç”³è¯·æµ?ç¨‹(æ–¹æ³•å†…æ˜¯å…·ä½“çš„æ–‡æ¡ˆ)
 *
 * @author leifu
 * @Time 2014å¹´10æœˆ16æ—¥
 */
public class AppEmailUtil {

    private EmailComponent emailComponent;

    private UserService userService;

    private VelocityEngine velocityEngine;
    
    private AppStatsCenter appStatsCenter;
    
    private Logger logger = Logger.getLogger(AppEmailUtil.class);

    
    /**
     * åº”ç”¨çŠ¶æ€?é€šçŸ¥
     * @param appDesc
     * @param appAudit
     */
    public void noticeAppResult(AppDesc appDesc, AppAudit appAudit) {
        List<String> ccEmailList = getCCEmailList(appDesc, appAudit);
        String mailContent = VelocityUtils.createText(velocityEngine, appDesc, appAudit, new AppDailyData(), new ArrayList<InstanceAlertValueResult>(), "appAudit.vm", "UTF-8");
        AppUser appUser = userService.get(appDesc.getUserId());
        emailComponent.sendMail("ã€?CacheCloudã€‘çŠ¶æ€?é€šçŸ¥", mailContent, Arrays.asList(appUser.getEmail()), ccEmailList);
    }
    
    /**
     * é‡?è¦?åº”ç”¨æŠ„é€?
     * @param appDesc
     * @param appAudit
     * @return
     */
    private List<String> getCCEmailList(AppDesc appDesc, AppAudit appAudit) {
        Set<String> ccEmailSet = new LinkedHashSet<String>();
        for (String email : emailComponent.getAdminEmail().split(ConstUtils.COMMA)) {
            ccEmailSet.add(email);
        }
        //Sçº§åˆ«ï¼Œä¸”æ˜¯å¼€é€šé‚®ä»¶
        if (appDesc.isSuperImportant() && AppAuditType.APP_AUDIT.getValue() == appAudit.getType()) {
            ccEmailSet.addAll(ConstUtils.LEADER_EMAIL_LIST);
        }
        return new ArrayList<String>(ccEmailSet);
    }

    /**
     * è´¡çŒ®è€…é€šçŸ¥
     * @param groupName
     * @param applyReason
     * @param appUser
     */
    public void noticeBecomeContributor(String groupName, String applyReason, AppUser appUser) {
        StringBuffer mailContent = new StringBuffer();
        mailContent.append(appUser.getChName() + "(é¡¹ç›®ç»„:"+groupName+")ç”³è¯·æˆ?ä¸ºCacheCloudè´¡çŒ®è€…<br/>");
        mailContent.append("ç”³è¯·ç?†ç”±:<br/>" + applyReason);
        emailComponent.sendMail("ã€?CacheCloudã€‘çŠ¶æ€?é€šçŸ¥", mailContent.toString(), Arrays.asList(appUser.getEmail()), Arrays.asList(emailComponent.getAdminEmail().split(ConstUtils.COMMA)));
    }
    
    /**
     * æ³¨å†Œç”¨æˆ·é€šçŸ¥
     * @param appUser
     * @param appAudit
     */
    public void noticeUserResult(AppUser appUser, AppAudit appAudit) {
        if(appAudit == null){
            return;
        }
        StringBuffer mailContent = new StringBuffer();
        if (AppCheckEnum.APP_WATING_CHECK.value().equals(appAudit.getStatus())) {
            mailContent.append(appUser.getChName() + "ç”³è¯·æƒ³æˆ?ä¸ºCacheCloudç”¨æˆ·ï¼Œè¯·ç®¡ç?†å‘˜å¸®å¿™å¤„ç?†ï¼?<br/>");
        } else if (AppCheckEnum.APP_PASS.value().equals(appAudit.getStatus())) {
            mailContent.append("æ‚¨çš„ç”¨æˆ·ç”³è¯·å·²ç»?å®¡æ‰¹é€šè¿‡ï¼Œæ‚¨å?¯ä»¥ç™»å½•æ­£å¸¸Cachecloudäº†ï¼?<br/>");
        } else if (AppCheckEnum.APP_REJECT.value().equals(appAudit.getStatus())) {
            mailContent.append("æ‚¨çš„ç”¨æˆ·ç”³è¯·è¢«é©³å›žï¼ŒåŽŸå› æ˜¯: " + appAudit.getRefuseReason());
        }
        emailComponent.sendMail("ã€?CacheCloudã€‘çŠ¶æ€?é€šçŸ¥", mailContent.toString(), Arrays.asList(appUser.getEmail()), Arrays.asList(emailComponent.getAdminEmail().split(ConstUtils.COMMA)));
    }
    
    /**
     * ä¸‹çº¿åº”ç”¨é€šçŸ¥
     * @param appUser
     * @param appId
     * @param isSuccess
     */
    public void noticeOfflineApp(AppUser appUser, Long appId, boolean isSuccess) {
        AppDetailVO appDetailVO = appStatsCenter.getAppDetail(appId);
        StringBuilder mailContent = new StringBuilder();
        mailContent.append(appUser.getChName()).append(",å¯¹åº”ç”¨appid=").append(appId);
        mailContent.append("è¿›è¡Œä¸‹çº¿,æ“?ä½œç»“æžœæ˜¯").append(isSuccess?"æˆ?åŠŸ":"å¤±è´¥");
        mailContent.append(",è¯·çŸ¥æ™“!");
        emailComponent.sendMail("ã€?CacheCloudã€‘çŠ¶æ€?é€šçŸ¥", mailContent.toString(), appDetailVO.getEmailList(), Arrays.asList(emailComponent.getAdminEmail().split(ConstUtils.COMMA)));
    }
    
    public void sendRedisConfigTemplateChangeEmail(AppUser appUser, InstanceConfig instanceConfig,
            SuccessEnum successEnum, RedisConfigTemplateChangeEnum redisConfigTemplateChangeEnum) {
        String mailTitle = "ã€?CacheCloudã€‘-Redisé…?ç½®æ¨¡æ?¿ä¿®æ”¹é€šçŸ¥";
        String mailContent = String.format("%s å¯¹Redisé…?ç½®æ¨¡æ?¿ è¿›è¡Œäº†%s,æ“?ä½œç»“æžœæ˜¯%s,å…·ä½“ä¸º(key=%s,value=%s,çŠ¶æ€?ä¸º%s)",
                appUser.getChName(),
                redisConfigTemplateChangeEnum.getInfo(), successEnum.info(), instanceConfig.getConfigKey(),
                instanceConfig.getConfigValue(), instanceConfig.getStatusDesc());
        emailComponent.sendMail(mailTitle, mailContent.toString(), Arrays.asList(emailComponent.getAdminEmail().split(ConstUtils.COMMA)));
        
    }
    
    public void sendSystemConfigDifEmail(AppUser appUser, Map<String, String> systemDifConfigMap,
            SuccessEnum successEnum) {
        if (MapUtils.isEmpty(systemDifConfigMap)) {
            return;
        }
        String mailTitle = "ã€?CacheCloudã€‘-ç³»ç»Ÿé…?ç½®ä¿®æ”¹é€šçŸ¥";
        StringBuffer mailContent = new StringBuffer();
        mailContent.append(appUser.getChName() + "ä¿®æ”¹äº†ç³»ç»Ÿé…?ç½®ï¼Œä¿®æ”¹ç»“æžœ:" + successEnum.info() + "<br/>");
        mailContent.append("å…·ä½“é…?ç½®å¦‚ä¸‹:<br/>");
        for(Entry<String, String> entry : systemDifConfigMap.entrySet()) {
            mailContent.append(entry.getKey() + "-->" + entry.getValue() + "<br/>");
        }
        emailComponent.sendMail(mailTitle, mailContent.toString(), Arrays.asList(emailComponent.getAdminEmail().split(ConstUtils.COMMA)));
    }
    
    /**
     * ç³»ç»Ÿé€šçŸ¥
     * @param noticeContent
     * @return
     */
    public boolean noticeAllUser(String noticeContent) {
        if (StringUtils.isBlank(noticeContent)) {
            return false;
        }
        try {
            String mailTitle = "ã€?CacheCloudã€‘-ç³»ç»Ÿé€šçŸ¥";
            StringBuffer mailContent = new StringBuffer();
            String[] noticeArray = noticeContent.split(ConstUtils.NEXT_LINE);
            for(String noticeLine : noticeArray) {
                mailContent.append(noticeLine).append("<br/>");
            }
            List<String> emailList = new ArrayList<String>();
            List<AppUser> appUserList = userService.getUserList(null);
            if (CollectionUtils.isEmpty(appUserList)) {
                return false;
            }
            for (AppUser appUser: appUserList) {
                String email = appUser.getEmail();
                if (StringUtils.isBlank(email)) {
                    continue;
                }
                emailList.add(email);
            }
            return emailComponent.sendMail(mailTitle, mailContent.toString(), emailList, Arrays.asList(emailComponent.getAdminEmail().split(ConstUtils.COMMA))); 
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
        }
        return false;
    }

    public void setEmailComponent(EmailComponent emailComponent) {
        this.emailComponent = emailComponent;
    }

    public void setUserService(UserService userService) {
        this.userService = userService;
    }

    public void setVelocityEngine(VelocityEngine velocityEngine) {
        this.velocityEngine = velocityEngine;
    }

    public void setAppStatsCenter(AppStatsCenter appStatsCenter) {
        this.appStatsCenter = appStatsCenter;
    }
    
}
