/*Copyright Â©2016 TommyLemon(https://github.com/TommyLemon/APIJSON)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.*/

package zuo.biao.apijson;

import java.util.List;
import java.util.Set;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;

/**parser for response
 * @author Lemon
 * @see #getObject
 * @see #getList
 * @use JSONResponse response = new JSONResponse(json);
 * <br> User user = response.getObject(User.class);//not a must
 * <br> List<Comment> commenntList = response.getList("Comment[]", Comment.class);//not a must
 */
public class JSONResponse extends zuo.biao.apijson.JSONObject {
	private static final long serialVersionUID = 1L;

	private static final String TAG = "JSONResponse";

	public JSONResponse() {
		super();
	}
	public JSONResponse(String json) {
		this(parseObject(json));
	}
	public JSONResponse(JSONObject object) {
		super(format(object));
	}

	//çŠ¶æ€?ä¿¡æ?¯ï¼Œé?žGETè¯·æ±‚èŽ·å¾—çš„ä¿¡æ?¯<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	public static final int CODE_SUCCESS = 200; //æˆ?åŠŸ
	public static final int CODE_UNSUPPORTED_ENCODING = 400; //ç¼–ç ?é”™è¯¯
	public static final int CODE_ILLEGAL_ACCESS = 401; //æ?ƒé™?é”™è¯¯
	public static final int CODE_UNSUPPORTED_OPERATION = 403; //ç¦?æ­¢æ“?ä½œ
	public static final int CODE_NOT_FOUND = 404; //æœªæ‰¾åˆ°
	public static final int CODE_ILLEGAL_ARGUMENT = 406; //å?‚æ•°é”™è¯¯
	public static final int CODE_NOT_LOGGED_IN = 407; //æœªç™»å½•
	public static final int CODE_TIME_OUT = 408; //è¶…æ—¶
	public static final int CODE_CONFLICT = 409; //é‡?å¤?ï¼Œå·²å­˜åœ¨
	public static final int CODE_CONDITION_ERROR = 412; //æ?¡ä»¶é”™è¯¯ï¼Œå¦‚å¯†ç ?é”™è¯¯
	public static final int CODE_UNSUPPORTED_TYPE = 415; //ç±»åž‹é”™è¯¯
	public static final int CODE_OUT_OF_RANGE = 416; //è¶…å‡ºèŒƒå›´
	public static final int CODE_NULL_POINTER = 417; //å¯¹è±¡ä¸ºç©º
	public static final int CODE_SERVER_ERROR = 500; //æœ?åŠ¡å™¨å†…éƒ¨é”™è¯¯


	public static final String MSG_SUCCEED = "success"; //æˆ?åŠŸ
	public static final String MSG_SERVER_ERROR = "Internal Server Error!"; //æœ?åŠ¡å™¨å†…éƒ¨é”™è¯¯


	public static final String KEY_CODE = "code";
	public static final String KEY_MSG = "msg";
	public static final String KEY_COUNT = "count";
	public static final String KEY_TOTAL = "total";

	/**èŽ·å?–çŠ¶æ€?
	 * @return
	 */
	public int getCode() {
		try {
			return getIntValue(KEY_CODE);
		} catch (Exception e) {
			//empty
		}
		return 0;
	}
	/**èŽ·å?–çŠ¶æ€?
	 * @return
	 */
	public static int getCode(JSONObject reponse) {
		try {
			return reponse.getIntValue(KEY_CODE);
		} catch (Exception e) {
			//empty
		}
		return 0;
	}
	/**èŽ·å?–çŠ¶æ€?æ??è¿°
	 * @return
	 */
	public String getMsg() {
		return getString(KEY_MSG);
	}
	/**èŽ·å?–çŠ¶æ€?æ??è¿°
	 * @param reponse
	 * @return
	 */
	public static String getMsg(JSONObject reponse) {
		return reponse == null ? null : reponse.getString(KEY_MSG);
	}
	/**èŽ·å?–id
	 * @return
	 */
	public long getId() {
		try {
			return getLongValue(KEY_ID);
		} catch (Exception e) {
			//empty
		}
		return 0;
	}
	/**èŽ·å?–æ•°é‡?
	 * @return
	 */
	public int getCount() {
		try {
			return getIntValue(KEY_COUNT);
		} catch (Exception e) {
			//empty
		}
		return 0;
	}
	/**èŽ·å?–æ€»æ•°
	 * @return
	 */
	public int getTotal() {
		try {
			return getIntValue(KEY_TOTAL);
		} catch (Exception e) {
			//empty
		}
		return 0;
	}


	/**æ˜¯å?¦æˆ?åŠŸ
	 * @return
	 */
	public boolean isSuccess() {
		return isSuccess(getCode());
	}
	/**æ˜¯å?¦æˆ?åŠŸ
	 * @param code
	 * @return
	 */
	public static boolean isSuccess(int code) {
		return code == CODE_SUCCESS;
	}
	/**æ˜¯å?¦æˆ?åŠŸ
	 * @param response
	 * @return
	 */
	public static boolean isSuccess(JSONResponse response) {
		return response != null && response.isSuccess();
	}
	/**æ˜¯å?¦æˆ?åŠŸ
	 * @param response
	 * @return
	 */
	public static boolean isSuccess(JSONObject response) {
		return response != null && isSuccess(response.getIntValue(KEY_CODE));
	}

	/**æ ¡éªŒæœ?åŠ¡ç«¯æ˜¯å?¦å­˜åœ¨table
	 * @return
	 */
	public boolean isExist() {
		return isExist(getCount());
	}
	/**æ ¡éªŒæœ?åŠ¡ç«¯æ˜¯å?¦å­˜åœ¨table
	 * @param count
	 * @return
	 */
	public static boolean isExist(int count) {
		return count > 0;
	}
	/**æ ¡éªŒæœ?åŠ¡ç«¯æ˜¯å?¦å­˜åœ¨table
	 * @param response
	 * @return
	 */
	public static boolean isExist(JSONResponse response) {
		return response != null && response.isExist();
	}

	/**èŽ·å?–å†…éƒ¨çš„JSONResponse
	 * @param key
	 * @return
	 */
	public JSONResponse getJSONResponse(String key) {
		return getObject(key, JSONResponse.class);
	}
	//cannot get javaBeanDeserizer
	//	/**èŽ·å?–å†…éƒ¨çš„JSONResponse
	//	 * @param response
	//	 * @param key
	//	 * @return
	//	 */
	//	public static JSONResponse getJSONResponse(JSONObject response, String key) {
	//		return response == null ? null : response.getObject(key, JSONResponse.class);
	//	}
	//çŠ¶æ€?ä¿¡æ?¯ï¼Œé?žGETè¯·æ±‚èŽ·å¾—çš„ä¿¡æ?¯>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>






	/**
	 * key = clazz.getSimpleName()
	 * @param clazz
	 * @return
	 */
	public <T> T getObject(Class<T> clazz) {
		return getObject(clazz == null ? "" : clazz.getSimpleName(), clazz);
	}
	/**
	 * @param key
	 * @param clazz
	 * @return
	 */
	public <T> T getObject(String key, Class<T> clazz) {
		return getObject(this, key, clazz);
	}
	/**
	 * @param object
	 * @param key
	 * @param clazz
	 * @return
	 */
	public static <T> T getObject(JSONObject object, String key, Class<T> clazz) {
		return toObject(object == null ? null : object.getJSONObject(formatObjectKey(key)), clazz);
	}

	/**
	 * @param clazz
	 * @return
	 */
	public <T> T toObject(Class<T> clazz) {
		return toObject(this, clazz);
	}
	/**
	 * @param object
	 * @param clazz
	 * @return
	 */
	public static <T> T toObject(JSONObject object, Class<T> clazz) {
		return JSON.parseObject(JSON.toJSONString(object), clazz);
	}




	/**
	 * key = KEY_ARRAY
	 * @param clazz
	 * @return
	 */
	public <T> List<T> getList(Class<T> clazz) {
		return getList(KEY_ARRAY, clazz);
	}
	/**
	 * arrayObject = this
	 * @param key
	 * @param clazz
	 * @return
	 */
	public <T> List<T> getList(String key, Class<T> clazz) {
		return getList(this, key, clazz);
	}

	/**
	 * key = KEY_ARRAY
	 * @param object
	 * @param clazz
	 * @return
	 */
	public static <T> List<T> getList(JSONObject object, Class<T> clazz) {
		return getList(object, KEY_ARRAY, clazz);
	}
	/**
	 * @param object
	 * @param key
	 * @param clazz
	 * @return
	 */
	public static <T> List<T> getList(JSONObject object, String key, Class<T> clazz) {
		return object == null ? null : JSON.parseArray(object.getString(formatArrayKey(key)), clazz);
	}

	/**
	 * key = KEY_ARRAY
	 * @return
	 */
	public JSONArray getArray() {
		return getArray(KEY_ARRAY);
	}
	/**
	 * @param key
	 * @return
	 */
	public JSONArray getArray(String key) {
		return getArray(this, key);
	}
	/**
	 * @param object
	 * @return
	 */
	public static JSONArray getArray(JSONObject object) {
		return getArray(object, KEY_ARRAY);
	}
	/**
	 * key = KEY_ARRAY
	 * @param object
	 * @param key
	 * @return
	 */
	public static JSONArray getArray(JSONObject object, String key) {
		return object == null ? null : object.getJSONArray(formatArrayKey(key));
	}


	//	/**
	//	 * @return
	//	 */
	//	public JSONObject format() {
	//		return format(this);
	//	}
	/**æ ¼å¼?åŒ–keyå??ç§°
	 * @param object
	 * @return
	 */
	public static JSONObject format(final JSONObject object) {
		//å¤ªé•¿æŸ¥çœ‹ä¸?æ–¹ä¾¿ï¼Œä¸?å¦‚debug	 Log.i(TAG, "format  object = \n" + JSON.toJSONString(object));
		if (object == null || object.isEmpty()) {
			Log.i(TAG, "format  object == null || object.isEmpty() >> return object;");
			return object;
		}
		JSONObject formatedObject = new JSONObject(true);

		Set<String> set = object.keySet();
		if (set != null) {

			Object value;
			for (String key : set) {
				value = object.get(key);

				if (value instanceof JSONArray) {//JSONArrayï¼Œé??åŽ†æ?¥formatå†…éƒ¨é¡¹
					formatedObject.put(formatArrayKey(key), format((JSONArray) value));
				}
				else if (value instanceof JSONObject) {//JSONObjectï¼Œå¾€ä¸‹ä¸€çº§æ??å?–
					formatedObject.put(formatObjectKey(key), format((JSONObject) value));
				}
				else {//å…¶å®ƒObjectï¼Œç›´æŽ¥å¡«å……
					formatedObject.put(formatOtherKey(key), value);
				}
			}
		}

		//å¤ªé•¿æŸ¥çœ‹ä¸?æ–¹ä¾¿ï¼Œä¸?å¦‚debug	 Log.i(TAG, "format  return formatedObject = " + JSON.toJSONString(formatedObject));
		return formatedObject;
	}

	/**æ ¼å¼?åŒ–keyå??ç§°
	 * @param array
	 * @return
	 */
	public static JSONArray format(final JSONArray array) {
		//å¤ªé•¿æŸ¥çœ‹ä¸?æ–¹ä¾¿ï¼Œä¸?å¦‚debug	 Log.i(TAG, "format  array = \n" + JSON.toJSONString(array));
		if (array == null || array.isEmpty()) {
			Log.i(TAG, "format  array == null || array.isEmpty() >> return array;");
			return array;
		}
		JSONArray formatedArray = new JSONArray();

		Object value;
		for (int i = 0; i < array.size(); i++) {
			value = array.get(i);
			if (value instanceof JSONArray) {//JSONArrayï¼Œé??åŽ†æ?¥formatå†…éƒ¨é¡¹
				formatedArray.add(format((JSONArray) value));
			}
			else if (value instanceof JSONObject) {//JSONObjectï¼Œå¾€ä¸‹ä¸€çº§æ??å?–
				formatedArray.add(format((JSONObject) value));
			}
			else {//å…¶å®ƒObjectï¼Œç›´æŽ¥å¡«å……
				formatedArray.add(value);
			}
		}

		//å¤ªé•¿æŸ¥çœ‹ä¸?æ–¹ä¾¿ï¼Œä¸?å¦‚debug	 Log.i(TAG, "format  return formatedArray = " + JSON.toJSONString(formatedArray));
		return formatedArray;
	}


	/**èŽ·å?–è¡¨å??ç§°
	 * @param fullName name æˆ– name:alias
	 * @return name => name; name:alias => alias
	 */
	public static String getTableName(String fullName) {
		//key:alias  -> alias; key:alias[] -> alias[]
		int index = fullName == null ? -1 : fullName.indexOf(":");
		return index < 0 ? fullName : fullName.substring(0, index);
	}

	/**èŽ·å?–å?˜é‡?å??
	 * @param fullName
	 * @return {@link #formatKey(String, boolean, boolean, boolean, boolean)} formatColon = true, formatAt = true, formatHyphen = true, firstCase = true
	 */
	public static String getVariableName(String fullName) {
		if (isArrayKey(fullName)) {
			fullName = StringUtil.addSuffix(fullName.substring(0, fullName.length() - 2), "list");
		}
		return formatKey(fullName, true, true, true, true);
	}

	/**æ ¼å¼?åŒ–æ•°ç»„çš„å??ç§° key[] => keyList; key:alias[] => aliasList; Table-column[] => tableColumnList
	 * @param key empty ? "list" : key + "List" ä¸”é¦–å­—æ¯?å°?å†™
	 * @return {@link #formatKey(String, boolean, boolean, boolean, boolean)} formatColon = false, formatAt = true, formatHyphen = true, firstCase = true
	 */
	public static String formatArrayKey(String key) {
		if (isArrayKey(key)) {
			key = StringUtil.addSuffix(key.substring(0, key.length() - 2), "list");
		}
		int index = key == null ? -1 : key.indexOf(":");
		if (index >= 0) {
			return key.substring(index + 1); //ä¸?å¤„ç?†è‡ªå®šä¹‰çš„
		}

		return formatKey(key, false, true, true, true); //èŠ‚çº¦æ€§èƒ½ï¼Œé™¤äº†æ•°ç»„å¯¹è±¡ Table-column:alias[] ï¼Œä¸€èˆ¬éƒ½ç¬¦å?ˆå?˜é‡?å‘½å??è§„èŒƒ
	}

	/**æ ¼å¼?åŒ–å¯¹è±¡çš„å??ç§° name => name; name:alias => alias
	 * @param key name æˆ– name:alias
	 * @return {@link #formatKey(String, boolean, boolean, boolean, boolean)} formatColon = false, formatAt = true, formatHyphen = false, firstCase = true
	 */
	public static String formatObjectKey(String key) {
		int index = key == null ? -1 : key.indexOf(":");
		if (index >= 0) {
			return key.substring(index + 1); //ä¸?å¤„ç?†è‡ªå®šä¹‰çš„
		}

		return formatKey(key, false, true, false, true); //èŠ‚çº¦æ€§èƒ½ï¼Œé™¤äº†è¡¨å¯¹è±¡ Table:alias ï¼Œä¸€èˆ¬éƒ½ç¬¦å?ˆå?˜é‡?å‘½å??è§„èŒƒ
	}

	/**æ ¼å¼?åŒ–æ™®é€šå€¼çš„å??ç§° name => name; name:alias => alias
	 * @param fullName name æˆ– name:alias
	 * @return {@link #formatKey(String, boolean, boolean, boolean, boolean)} formatColon = false, formatAt = true, formatHyphen = false, firstCase = false
	 */
	public static String formatOtherKey(String fullName) {
		return formatKey(fullName, false, true, false, false); //èŠ‚çº¦æ€§èƒ½ï¼Œé™¤äº†å…³é”®è¯? @key ï¼Œä¸€èˆ¬éƒ½ç¬¦å?ˆå?˜é‡?å‘½å??è§„èŒƒï¼Œä¸?ç¬¦å?ˆä¹ŸåŽŸæ ·è¿”å›žä¾¿äºŽè°ƒè¯•
	}


	/**æ ¼å¼?åŒ–å??ç§°
	 * @param fullName name æˆ– name:alias
	 * @param formatAt åŽ»é™¤å‰?ç¼€ @ ï¼Œ @a => a
	 * @param formatColon åŽ»é™¤åˆ†éš”ç¬¦ : ï¼Œ A:b => b
	 * @param formatHyphen åŽ»é™¤åˆ†éš”ç¬¦ - ï¼Œ A-b-cd-Efg => aBCdEfg
	 * @param firstCase ç¬¬ä¸€ä¸ªå?•è¯?é¦–å­—æ¯?å°?å†™ï¼Œå?Žé?¢çš„é¦–å­—æ¯?å¤§å†™ï¼Œ Ab => ab ; A-b-Cd => aBCd
	 * @return name => name; name:alias => alias
	 */
	public static String formatKey(String fullName, boolean formatColon, boolean formatAt, boolean formatHyphen, boolean firstCase) {
		if (fullName == null) {
			Log.w(TAG, "formatKey  fullName == null >> return null;");
			return null;
		}

		if (formatColon) {
			fullName = formatColon(fullName);
		}
		if (formatAt) { //å…³é”®è¯?å?ªåŽ»æŽ‰å‰?ç¼€ï¼Œä¸?æ ¼å¼?åŒ–å?•è¯?ï¼Œä¾‹å¦‚ @a-b è¿”å›ž a-b ï¼Œæœ€å?Žä¸?ä¼šè°ƒç”¨ setter
			fullName = formatAt(fullName);
		}
		if (formatHyphen) {
			fullName = formatHyphen(fullName, firstCase);
		}

		return firstCase ? StringUtil.firstCase(fullName) : fullName; //ä¸?æ ¼å¼?åŒ–æ™®é€š key:value (value ä¸?ä¸º [], {}) çš„ key
	}

	/**"@key" => "key"
	 * @param key
	 * @return
	 */
	public static String formatAt(@NotNull String key) {
		return key.startsWith("@") ? key.substring(1) : key;
	}
	/**key:alias => alias
	 * @param key
	 * @return
	 */
	public static String formatColon(@NotNull String key) {
		int index = key.indexOf(":");
		return index < 0 ? key : key.substring(index + 1);
	}

	/**A-b-cd-Efg => ABCdEfg
	 * @param key
	 * @return
	 */
	public static String formatHyphen(@NotNull String key, boolean firstCase) {
		boolean first = true;
		int index;

		String name = "";
		String part;
		do {
			index = key.indexOf("-");
			part = index < 0 ? key : key.substring(0, index);

			name += firstCase && first == false ? StringUtil.firstCase(part, true) : part;
			key = key.substring(index + 1);

			first = false;
		}
		while (index >= 0);

		return name;
	}


}
