/*
 * Copyright 2017-2019 CodingApi .
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.codingapi.txlcn.txmsg;

import com.codingapi.txlcn.txmsg.dto.AppInfo;
import com.codingapi.txlcn.txmsg.dto.RpcResponseState;
import com.codingapi.txlcn.txmsg.loadbalance.RpcLoadBalance;
import com.codingapi.txlcn.txmsg.dto.MessageDto;
import com.codingapi.txlcn.txmsg.dto.RpcCmd;
import com.codingapi.txlcn.txmsg.exception.RpcException;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;

/**
 * Description:
 * Company: CodingApi
 * Date: 2018/12/10
 *
 * @author ujued
 */
public abstract class RpcClient {

    @Autowired
    private RpcLoadBalance rpcLoadBalance;

    /**
     * å?‘é€?æŒ‡ä»¤ä¸?éœ€è¦?è¿”å›žæ•°æ?®ï¼Œéœ€è¦?çŸ¥é?“è¿”å›žçš„çŠ¶æ€?
     *
     * @param rpcCmd æŒ‡ä»¤å†…å®¹
     * @return æŒ‡ä»¤çŠ¶æ€?
     * @throws RpcException è¿œç¨‹è°ƒç”¨è¯·æ±‚å¼‚å¸¸
     */
    public abstract RpcResponseState send(RpcCmd rpcCmd) throws RpcException;


    /**
     * å?‘é€?æŒ‡ä»¤ä¸?éœ€è¦?è¿”å›žæ•°æ?®ï¼Œéœ€è¦?çŸ¥é?“è¿”å›žçš„çŠ¶æ€?
     *
     * @param remoteKey è¿œç¨‹æ ‡è¯†å…³é”®å­—
     * @param msg       æŒ‡ä»¤å†…å®¹
     * @return æŒ‡ä»¤çŠ¶æ€?
     * @throws RpcException è¿œç¨‹è°ƒç”¨è¯·æ±‚å¼‚å¸¸
     */
    public abstract RpcResponseState send(String remoteKey, MessageDto msg) throws RpcException;


    /**
     * å?‘é€?è¯·æ±‚å¹¶èŽ·å?–å“?åº”
     *
     * @param rpcCmd æŒ‡ä»¤å†…å®¹
     * @return å“?åº”æŒ‡ä»¤æ•°æ?®
     * @throws RpcException è¿œç¨‹è°ƒç”¨è¯·æ±‚å¼‚å¸¸
     */
    public abstract MessageDto request(RpcCmd rpcCmd) throws RpcException;


    /**
     * å?‘é€?è¯·æ±‚å¹¶å“?åº”
     *
     * @param remoteKey è¿œç¨‹æ ‡è¯†å…³é”®å­—
     * @param msg       è¯·æ±‚å†…å®¹
     * @return ç›¸åº”æŒ‡ä»¤æ•°æ?®
     * @throws RpcException è¿œç¨‹è°ƒç”¨è¯·æ±‚å¼‚å¸¸
     */
    public abstract MessageDto request(String remoteKey, MessageDto msg) throws RpcException;

    /**
     * å?‘é€?è¯·æ±‚å¹¶èŽ·å?–å“?åº”
     *
     * @param remoteKey è¿œç¨‹æ ‡è¯†å…³é”®å­—
     * @param msg       è¯·æ±‚å†…å®¹
     * @param timeout   è¶…æ—¶æ—¶é—´
     * @return å“?åº”æ¶ˆæ?¯
     * @throws RpcException è¿œç¨‹è°ƒç”¨è¯·æ±‚å¼‚å¸¸
     */
    public abstract MessageDto request(String remoteKey, MessageDto msg, long timeout) throws RpcException;


    /**
     * èŽ·å?–ä¸€ä¸ªè¿œç¨‹æ ‡è¯†å…³é”®å­—
     *
     * @return è¿œç¨‹æ ‡è¯†å…³é”®å­—
     * @throws RpcException è¿œç¨‹è°ƒç”¨è¯·æ±‚å¼‚å¸¸
     */
    public String loadRemoteKey() throws RpcException {
        return rpcLoadBalance.getRemoteKey();
    }


    /**
     * èŽ·å?–æ‰€æœ‰çš„è¿œç¨‹è¿žæŽ¥å¯¹è±¡
     *
     * @return è¿œç¨‹è¿žæŽ¥å¯¹è±¡æ•°ç»„.
     */
    public abstract List<String> loadAllRemoteKey();


    /**
     * èŽ·å?–æ¨¡å?—è¿œç¨‹æ ‡è¯†
     *
     * @param moduleName æ¨¡å?—å??ç§°
     * @return è¿œç¨‹æ ‡è¯†
     */
    public abstract List<String> remoteKeys(String moduleName);


    /**
     * ç»‘å®šæ¨¡å?—å??ç§°
     *
     * @param remoteKey è¿œç¨‹æ ‡è¯†
     * @param appName   åº”ç”¨å??ç§°
     * @param labelName  TCæ ‡è¯†å??ç§°
     * @throws RpcException   RpcException
     */
    public abstract void bindAppName(String remoteKey, String appName,String labelName) throws RpcException;


    /**
     * èŽ·å?–æ¨¡å?—å??ç§°
     *
     * @param remoteKey è¿œç¨‹æ ‡è¯†
     * @return åº”ç”¨å??ç§°
     */
    public abstract String getAppName(String remoteKey);


    /**
     * èŽ·å?–æ‰€æœ‰çš„æ¨¡å?—ä¿¡æ?¯
     *
     * @return åº”ç”¨å??ç§°
     */
    public abstract List<AppInfo> apps();

}
