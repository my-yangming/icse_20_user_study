package org.hswebframework.web.organizational.authorization.relation;

import java.io.Serializable;

/**
 * å…³ç³»ï¼Œç”¨äºŽèŽ·å?–äººå‘˜ç­‰å…³ç³»ä¿¡æ?¯
 *
 * @author zhouhao
 * @see Relations
 * @since 3.0
 */
public interface Relation extends Serializable {

    /**
     * é»˜è®¤ç±»åž‹:æœºæž„
     */
    String TYPE_ORG = "org";

    /**
     * é»˜è®¤ç±»åž‹:éƒ¨é—¨
     */
    String TYPE_DEPARTMENT = "department";

    /**
     * é»˜è®¤ç±»åž‹:å²—ä½?
     */
    String TYPE_POSITION = "position";

    /**
     * é»˜è®¤ç±»åž‹:äººå‘˜
     */
    String TYPE_PERSON = "person";

    /**
     * @return å…³ç³»ç»´åº¦ï¼Œå¦‚:person,department
     */
    String getDimension();

    /**
     * @return å…³ç³»ï¼Œå¦‚: leader,member
     */
    String getRelation();

    /**
     * @return å…³ç³»ç›®æ ‡è¡¨è¯†ï¼ˆå’Œè°?å»ºç«‹å…³ç³»ï¼‰ï¼Œé€šå¸¸ä¸ºç›®æ ‡çš„id
     */
    String getTarget();

    /**
     * @return å…³ç³»ç›®æ ‡å¯¹è±¡ï¼Œç”¨äºŽèŽ·å?–å»ºç«‹å…³ç³»å¯¹è±¡å®Œæ•´ä¿¡æ?¯ï¼Œè¿”å›žå€¼çš„ç±»åž‹å?¯èƒ½éš?ç?€{@link this#getDimension()}çš„ä¸?å?Œè€Œå?˜åŒ–
     * @see RelationTargetSupplier
     */
    Serializable getTargetObject();

    /**
     * @return å…³ç³»å??ç§°ï¼Œä¸Ž{@link this#getDimension()} å¯¹åº”ï¼Œå¦‚: ç»?ç?†,å‘˜å·¥
     */
    String getName();

    /**
     * @return å…³ç³»çš„æ–¹å?‘
     * @see Direction
     */
    Direction getDirection();

    /**
     * åŒ¹é…?æ–¹å?‘ï¼Œå¦‚æžœå½“å‰?çš„æ–¹å?‘ä¸ºALlï¼Œåˆ™å…¨éƒ¨è¿”å›žtrue
     * <pre>
     *     direction=ALL;
     *     matchDirection(POSITIVE) -> true
     *     matchDirection(REVERSE) -> true
     *     matchDirection(ALL) -> true
     * </pre>
     * <p>
     * <pre>
     *     direction=POSITIVE;
     *     matchDirection(POSITIVE) -> true
     *     matchDirection(REVERSE) -> false
     *     matchDirection(ALL) -> false
     * </pre>
     *
     * @param direction è¦?åŒ¹é…?çš„æ–¹å?‘æžšä¸¾
     * @return åŒ¹é…?ç»“æžœ
     */
    default boolean matchDirection(Direction direction) {
        return getDirection() == Direction.ALL || getDirection() == direction;
    }

    /**
     * åŒ¹é…?æ–¹å?‘ï¼Œå¦‚æžœå½“å‰?çš„æ–¹å?‘ä¸ºALlï¼Œåˆ™å…¨éƒ¨è¿”å›žtrue
     * <pre>
     *     direction=ALL;
     *     matchDirection("A") -> true
     *     matchDirection("ALL") -> true
     *     matchDirection("R") -> true
     *     matchDirection("P") -> true
     *     matchDirection("O") -> false
     * </pre>
     * <p>
     * <pre>
     *     direction=POSITIVE;
     *     matchDirection("P") -> true
     *     matchDirection("POS") -> true
     *     matchDirection("A") -> false
     *     matchDirection("O") -> false
     * </pre>
     *
     * @param direction è¦?åŒ¹é…?çš„æ–¹å?‘å­—ç¬¦
     * @return åŒ¹é…?ç»“æžœ
     * @see Direction#fromString(String)
     */
    default boolean matchDirection(String direction) {
        return matchDirection(Direction.fromString(direction));
    }

    /**
     * å…³ç³»æ–¹å?‘,ä¾‹å¦‚ï¼Œæˆ‘å’Œå¼ ä¸‰å»ºç«‹å…³ç³»ï¼ŒPOSITIVEï¼šæˆ‘æ˜¯å¼ ä¸‰çš„ç»?ç?† ï¼ŒREVERSEå¼ ä¸‰æ˜¯æˆ‘çš„ç»?ç?†
     *
     * @author zhouhao
     * @since 3.0
     */
    enum Direction {
        /**
         * æ­£å?‘å…³ç³»
         */
        POSITIVE,
        /**
         * å??å?‘å…³ç³»
         */
        REVERSE,
        /**
         * å?Œå?‘å…³ç³»
         */
        ALL;

        public static Direction fromString(String direction) {
            if (direction == null) {
                return null;
            }
            for (Direction dir : values()) {
                //ä»¥å??ç§°å¼€å¤´åˆ™è®¤ä¸ºæ˜¯å?Œä¸€ä¸ªæ–¹å?‘
                if (dir.name().startsWith(direction.toUpperCase())) {
                    return dir;
                }
            }
            return null;
        }
    }

}
