package jetbrains.mps.lang.smodel.generator.smodelAdapter;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SEnumerationLiteral;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import org.jetbrains.mps.openapi.language.SEnumeration;
import org.jetbrains.mps.openapi.language.SType;
import jetbrains.mps.util.InternUtil;
import java.util.Objects;
import jetbrains.mps.smodel.adapter.structure.types.SEnumerationAdapter;
import jetbrains.mps.util.EqualUtil;
import org.jetbrains.mps.openapi.language.SDataType;
import jetbrains.mps.smodel.adapter.structure.types.SPrimitiveTypes;
import jetbrains.mps.references.Reference;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.util.annotation.ToRemove;

public class SPropertyOperations {
  public static String assign(SNode node, SProperty property, String propertyValue) {
    set(node, property, propertyValue);
    return propertyValue;
  }
  public static int assign(SNode node, SProperty property, int propertyValue) {
    set(node, property, propertyValue);
    return propertyValue;
  }
  public static boolean assign(SNode node, SProperty property, boolean propertyValue) {
    set(node, property, propertyValue);
    return propertyValue;
  }
  public static SEnumerationLiteral assignEnum(SNode node, SProperty property, SEnumerationLiteral propertyValue) {
    setEnum(node, property, propertyValue);
    return propertyValue;
  }

  public static void set(SNode node, SProperty property, String propertyValue) {
    if (node != null) {
      SNodeAccessUtil.setPropertyValue(node, property, upgradeToEnumMember(property, deserializeIfNeeded(propertyValue, property)));
    }
  }
  public static void set(SNode node, SProperty property, int propertyValue) {
    if (node != null) {
      SNodeAccessUtil.setPropertyValue(node, property, upgradeToEnumMember(property, propertyValue));
    }
  }
  public static void set(SNode node, SProperty property, boolean propertyValue) {
    if (node != null) {
      SNodeAccessUtil.setPropertyValue(node, property, upgradeToEnumMember(property, propertyValue));
    }
  }
  public static void setEnum(SNode node, SProperty property, SEnumerationLiteral propertyValue) {
    if (node != null) {
      SNodeAccessUtil.setPropertyValue(node, property, propertyValue);
    }
  }
  public static void setEnum(SNode node, SProperty property, long enumMemberId, String enumMemberName) {
    if (node != null) {
      SEnumeration enumeration = as_sbyy7e_a0a0a0a9(property.getType(), SEnumeration.class);
      SNodeAccessUtil.setPropertyValue(node, property, SEnumOperations.getMember(enumeration, enumMemberId, enumMemberName));
    }
  }


  public static void remove(SNode node, SProperty property) {
    if (node != null) {
      SNodeAccessUtil.setPropertyValue(node, property, null);
    }
  }

  public static String getString(SNode node, SProperty property) {
    if (node != null) {
      Object value = downgradeFromEnumMember(property, SNodeAccessUtil.getPropertyValue(node, property));
      if (value != SType.NOT_A_VALUE) {
        return (String) value;
      }
    }
    return null;
  }
  public static String getString(String value) {
    if (value != null) {
      return InternUtil.intern(value);
    } else {
      return null;
    }
  }
  public static int getInteger(SNode node, SProperty property) {
    if (node != null) {
      Object value = downgradeFromEnumMember(property, SNodeAccessUtil.getPropertyValue(node, property));
      if (value != null && value != SType.NOT_A_VALUE) {
        return (int) value;
      }
    }
    return 0;
  }
  public static int getInteger(String value) {
    try {
      return (value == null ? 0 : Integer.parseInt(value));
    } catch (Exception e) {
      return 0;
    }
  }
  public static boolean getBoolean(SNode node, SProperty property) {
    if (node != null) {
      Object value = downgradeFromEnumMember(property, SNodeAccessUtil.getPropertyValue(node, property));
      if (value != SType.NOT_A_VALUE) {
        return (boolean) value;
      }
    }
    return false;
  }
  public static boolean getBoolean(String value) {
    return "true".equals(value);
  }

  public static SEnumerationLiteral getEnum(SNode node, SProperty property) {
    if (node != null) {
      Object value = SNodeAccessUtil.getPropertyValue(node, property);
      if (value != SType.NOT_A_VALUE) {
        return (SEnumerationLiteral) value;
      }
    }
    return null;
  }

  public static boolean hasValue(SNode node, SProperty property, String value) {
    if (node != null) {
      return Objects.equals(downgradeFromEnumMember(property, SNodeAccessUtil.getPropertyValue(node, property)), value);
    }
    return false;
  }
  public static boolean hasValue(SNode node, SProperty property, int value) {
    if (node != null) {
      return Objects.equals(downgradeFromEnumMember(property, SNodeAccessUtil.getPropertyValue(node, property)), value);
    }
    return false;
  }
  public static boolean hasValue(SNode node, SProperty property, boolean value) {
    if (node != null) {
      return Objects.equals(downgradeFromEnumMember(property, SNodeAccessUtil.getPropertyValue(node, property)), value);
    }
    return false;
  }
  public static boolean hasEnumValue(SNode node, SProperty property, String literalRawValue) {
    if (node != null) {
      Object literal = SNodeAccessUtil.getPropertyValue(node, property);
      if (literal instanceof SEnumerationLiteral) {
        return Objects.equals(literalRawValue, SEnumerationAdapter.getEnumMemberRawValue((SEnumerationLiteral) literal));
      }
    }
    return false;
  }

  public static boolean hasValue(SNode node, SProperty property, String propertyValue, String defaultValue) {
    if (node != null) {
      String value = SNodeAccessUtil.getProperty(node, property);
      if (value == null) {
        return EqualUtil.equals(defaultValue, propertyValue);
      }
      return value.equals(propertyValue);
    }
    return false;
  }

  public static Object upgradeToEnumMember(SProperty property, Object propertyValue) {
    SDataType type = property.getType();
    if (type instanceof SEnumerationAdapter) {
      return ((SEnumerationAdapter) type).convertValueToLiteral(propertyValue);
    }
    return propertyValue;
  }
  private static Object downgradeFromEnumMember(SProperty property, Object propertyValue) {
    SDataType type = property.getType();
    if (propertyValue instanceof SEnumerationLiteral && type instanceof SEnumerationAdapter) {
      return ((SEnumerationAdapter) type).getRawValueFromLiteral((SEnumerationLiteral) propertyValue);
    }
    return propertyValue;
  }
  public static Object deserializeIfNeeded(String string, SProperty property) {
    // While regenerated smodel code calls proper `assign` and `set` methods (by respecting type of a property) 
    // old code serialize properties and then invokes `assign` and `set` with `String propertyValue` argument 
    // To handle not-regenerated code we have this compatiblity aux until 18.3 will be released 
    SDataType type = property.getType();
    if (type == SPrimitiveTypes.BOOLEAN || type == SPrimitiveTypes.INTEGER) {
      return type.fromString(string);
    }
    return string;
  }

  public static Reference<String> stringPropRef(final SNode node, final SProperty property) {
    return new Reference<String>() {
      @Override
      public String get() {
        return SPropertyOperations.getString(node, property);
      }
      @Override
      public void set(String propertyValue) {
        SPropertyOperations.set(node, property, propertyValue);
      }
    };
  }
  public static Reference<Integer> intPropRef(final SNode node, final SProperty property) {
    return new Reference<Integer>() {
      @Override
      public Integer get() {
        return SPropertyOperations.getInteger(node, property);
      }
      @Override
      public void set(Integer propertyValue) {
        SPropertyOperations.set(node, property, propertyValue);
      }
    };
  }
  public static Reference<Boolean> booleanPropRef(final SNode node, final SProperty property) {
    return new Reference<Boolean>() {
      @Override
      public Boolean get() {
        return SPropertyOperations.getBoolean(node, property);
      }
      @Override
      public void set(Boolean propertyValue) {
        SPropertyOperations.set(node, property, propertyValue);
      }
    };
  }
  public static Reference<SEnumerationLiteral> enumPropRef(final SNode node, final SProperty property) {
    return new Reference<SEnumerationLiteral>() {
      @Override
      public SEnumerationLiteral get() {
        return SPropertyOperations.getEnum(node, property);
      }
      @Override
      public void set(SEnumerationLiteral propertyValue) {
        SPropertyOperations.setEnum(node, property, propertyValue);
      }
    };
  }
  public static String plusAssignStringProp(final SNode node, final SProperty property, Object value) {
    String propertyValue = getString(node, property);
    if (propertyValue == null) {
      propertyValue = "";
    }
    propertyValue += value;
    set(node, property, propertyValue);
    return propertyValue;
  }

  public static String serializeEnummember(SEnumerationLiteral member) {
    if (member == null) {
      return null;
    }
    SEnumerationAdapter enumeration = as_sbyy7e_a0a1a04(member.getEnumeration(), SEnumerationAdapter.class);
    return enumeration.toString(member);
  }

  public static SEnumerationLiteral deserializeEnummember(long uuidHigh, long uuidLow, long enumId, String fqEnumNameHint, String serializedValue) {
    SEnumerationAdapter enumeration = as_sbyy7e_a0a0a24(MetaAdapterFactory.getEnumeration(uuidHigh, uuidLow, enumId, fqEnumNameHint), SEnumerationAdapter.class);
    Object value = enumeration.fromString(serializedValue);
    return (value == SType.NOT_A_VALUE ? null : (SEnumerationLiteral) value);
  }

  public static String castString(@Nullable Object value) {
    return (String) value;
  }
  public static boolean castBoolean(@Nullable Object value) {
    return (boolean) value;
  }
  public static int castInteger(@Nullable Object value) {
    return (value == null ? 0 : (int) value);
  }
  public static SEnumerationLiteral castEnummember(@Nullable Object value) {
    return (SEnumerationLiteral) value;
  }

  @Deprecated
  @ToRemove(version = 19.2)
  public static String castEnumString(@Nullable Object value) {
    return castString(getRawValueFromLiteral(value));
  }
  @Deprecated
  @ToRemove(version = 19.2)
  public static boolean castEnumBoolean(@Nullable Object value) {
    return castBoolean(getRawValueFromLiteral(value));
  }
  @Deprecated
  @ToRemove(version = 19.2)
  public static int castEnumInteger(@Nullable Object value) {
    return castInteger(getRawValueFromLiteral(value));
  }

  private static Object getRawValueFromLiteral(Object value) {
    if (value == null) {
      return null;
    }
    SEnumerationLiteral literal = (SEnumerationLiteral) value;
    SEnumeration enumeration = literal.getEnumeration();
    if (enumeration instanceof SEnumerationAdapter) {
      return ((SEnumerationAdapter) enumeration).getRawValueFromLiteral(literal);
    }
    return null;
  }
  private static <T> T as_sbyy7e_a0a0a0a9(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_sbyy7e_a0a1a04(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_sbyy7e_a0a0a24(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
