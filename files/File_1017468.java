package com.zone.weixin4j.util;

import com.zone.weixin4j.base64.Base64;
import com.zone.weixin4j.exception.WeixinException;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.util.Arrays;

/**
 * æ¶ˆæ?¯å·¥å…·ç±»
 * 
 * @className MessageUtil
 * @author jinyu(foxinmy@gmail.com)
 * @date 2014å¹´10æœˆ31æ—¥
 * @since JDK 1.6
 * @see
 */
public final class MessageUtil {
	/**
	 * éªŒè¯?å¾®ä¿¡ç­¾å??
	 * 
	 * @param signature
	 *            å¾®ä¿¡åŠ å¯†ç­¾å??ï¼Œsignatureç»“å?ˆäº†å¼€å?‘è€…å¡«å†™çš„tokenå?‚æ•°å’Œè¯·æ±‚ä¸­çš„timestampå?‚æ•°ã€?nonceå?‚æ•°
	 * @return å¼€å?‘è€…é€šè¿‡æ£€éªŒsignatureå¯¹è¯·æ±‚è¿›è¡Œç›¸å…³æ ¡éªŒã€‚è‹¥ç¡®è®¤æ­¤æ¬¡GETè¯·æ±‚æ?¥è‡ªå¾®ä¿¡æœ?åŠ¡å™¨
	 *         è¯·åŽŸæ ·è¿”å›žechostrå?‚æ•°å†…å®¹ï¼Œåˆ™æŽ¥å…¥ç”Ÿæ•ˆ æˆ?ä¸ºå¼€å?‘è€…æˆ?åŠŸï¼Œå?¦åˆ™æŽ¥å…¥å¤±è´¥
	 * @see <a
	 *      href="https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421135319&token=&lang=zh_CN">æŽ¥å…¥æŒ‡å?—</a>
	 */
	public static String signature(String... para) {
		Arrays.sort(para);
		StringBuffer sb = new StringBuffer();
		for (String str : para) {
			sb.append(str);
		}
		return ServerToolkits.digestSHA1(sb.toString());
	}

	/**
	 * å¯¹xmlæ¶ˆæ?¯åŠ å¯†
	 * 
	 * @param appId
	 *            åº”ç”¨ID
	 * @param encodingAesKey
	 *            åŠ å¯†å¯†é’¥
	 * @param xmlContent
	 *            åŽŸå§‹æ¶ˆæ?¯ä½“
	 * @return aesåŠ å¯†å?Žçš„æ¶ˆæ?¯ä½“
	 * @throws WeixinException
	 */
	public static String aesEncrypt(String appId, String encodingAesKey,
			String xmlContent) throws WeixinException {
		/**
		 * å…¶ä¸­ï¼Œmsg_encrypt=Base64_Encode(AES_Encrypt [random(16B)+ msg_len(4B) +
		 * msg + $AppId])
		 * 
		 * random(16B)ä¸º16å­—èŠ‚çš„éš?æœºå­—ç¬¦ä¸²ï¼›msg_lenä¸ºmsgé•¿åº¦ï¼Œå? 4ä¸ªå­—èŠ‚(ç½‘ç»œå­—èŠ‚åº?)ï¼Œ$AppIdä¸ºå…¬ä¼—è´¦å?·çš„AppId
		 */
		byte[] randomBytes = ServerToolkits.getBytesUtf8(ServerToolkits
				.generateRandomString(16));
		byte[] xmlBytes = ServerToolkits.getBytesUtf8(xmlContent);
		int xmlLength = xmlBytes.length;
		byte[] orderBytes = new byte[4];
		orderBytes[3] = (byte) (xmlLength & 0xFF);
		orderBytes[2] = (byte) (xmlLength >> 8 & 0xFF);
		orderBytes[1] = (byte) (xmlLength >> 16 & 0xFF);
		orderBytes[0] = (byte) (xmlLength >> 24 & 0xFF);
		byte[] appidBytes = ServerToolkits.getBytesUtf8(appId);

		int byteLength = randomBytes.length + xmlLength + orderBytes.length
				+ appidBytes.length;
		// ... + pad: ä½¿ç”¨è‡ªå®šä¹‰çš„å¡«å……æ–¹å¼?å¯¹æ˜Žæ–‡è¿›è¡Œè¡¥ä½?å¡«å……
		byte[] padBytes = PKCS7Encoder.encode(byteLength);
		// random + endian + xml + appid + pad èŽ·å¾—æœ€ç»ˆçš„å­—èŠ‚æµ?
		byte[] unencrypted = new byte[byteLength + padBytes.length];
		byteLength = 0;
		// src:æº?æ•°ç»„;srcPos:æº?æ•°ç»„è¦?å¤?åˆ¶çš„èµ·å§‹ä½?ç½®;dest:ç›®çš„æ•°ç»„;destPos:ç›®çš„æ•°ç»„æ”¾ç½®çš„èµ·å§‹ä½?ç½®;length:å¤?åˆ¶çš„é•¿åº¦
		System.arraycopy(randomBytes, 0, unencrypted, byteLength,
				randomBytes.length);
		byteLength += randomBytes.length;
		System.arraycopy(orderBytes, 0, unencrypted, byteLength,
				orderBytes.length);
		byteLength += orderBytes.length;
		System.arraycopy(xmlBytes, 0, unencrypted, byteLength, xmlBytes.length);
		byteLength += xmlBytes.length;
		System.arraycopy(appidBytes, 0, unencrypted, byteLength,
				appidBytes.length);
		byteLength += appidBytes.length;
		System.arraycopy(padBytes, 0, unencrypted, byteLength, padBytes.length);
		try {
			byte[] aesKey = Base64.decodeBase64(encodingAesKey + "=");
			// è®¾ç½®åŠ å¯†æ¨¡å¼?ä¸ºAESçš„CBCæ¨¡å¼?
			Cipher cipher = Cipher.getInstance("AES/CBC/NoPadding");
			SecretKeySpec keySpec = new SecretKeySpec(aesKey, ServerToolkits.AES);
			IvParameterSpec iv = new IvParameterSpec(aesKey, 0, 16);
			cipher.init(Cipher.ENCRYPT_MODE, keySpec, iv);
			// åŠ å¯†
			byte[] encrypted = cipher.doFinal(unencrypted);
			// ä½¿ç”¨BASE64å¯¹åŠ å¯†å?Žçš„å­—ç¬¦ä¸²è¿›è¡Œç¼–ç ?
			// return Base64.encodeBase64String(encrypted);
			return Base64
					.encodeBase64String(encrypted);
		} catch (Exception e) {
			throw new WeixinException("-40006", "AESåŠ å¯†å¤±è´¥:" + e.getMessage());
		}
	}

	/**
	 * å¯¹AESæ¶ˆæ?¯è§£å¯†
	 * 
	 * @param appId
	 * @param encodingAesKey
	 *            aesåŠ å¯†çš„å¯†é’¥
	 * @param encryptContent
	 *            åŠ å¯†çš„æ¶ˆæ?¯ä½“
	 * @return è§£å¯†å?Žçš„å­—ç¬¦
	 * @throws WeixinException
	 */
	public static String aesDecrypt(String appId, String encodingAesKey,
			String encryptContent) throws WeixinException {
		byte[] aesKey = Base64.decodeBase64(encodingAesKey + "=");
		byte[] original;
		try {
			// è®¾ç½®è§£å¯†æ¨¡å¼?ä¸ºAESçš„CBCæ¨¡å¼?
			Cipher cipher = Cipher.getInstance("AES/CBC/NoPadding");
			SecretKeySpec key_spec = new SecretKeySpec(aesKey, ServerToolkits.AES);
			IvParameterSpec iv = new IvParameterSpec(Arrays.copyOfRange(aesKey,
					0, 16));
			cipher.init(Cipher.DECRYPT_MODE, key_spec, iv);
			// ä½¿ç”¨BASE64å¯¹å¯†æ–‡è¿›è¡Œè§£ç ?
			byte[] encrypted = Base64.decodeBase64(encryptContent);
			// è§£å¯†
			original = cipher.doFinal(encrypted);
		} catch (Exception e) {
			throw new WeixinException("-40007", "AESè§£å¯†å¤±è´¥:" + e.getMessage());
		}
		String xmlContent, fromAppId;
		try {
			// åŽ»é™¤è¡¥ä½?å­—ç¬¦
			byte[] bytes = PKCS7Encoder.decode(original);
			/**
			 * AESåŠ å¯†çš„bufç”±16ä¸ªå­—èŠ‚çš„éš?æœºå­—ç¬¦ä¸²ã€?4ä¸ªå­—èŠ‚çš„msg_len(ç½‘ç»œå­—èŠ‚åº?)ã€?msgå’Œ$AppIdç»„æˆ?ï¼Œ
			 * å…¶ä¸­msg_lenä¸ºmsgçš„é•¿åº¦ï¼Œ$AppIdä¸ºå…¬ä¼—å¸?å?·çš„AppId
			 */
			// èŽ·å?–è¡¨ç¤ºxmlé•¿åº¦çš„å­—èŠ‚æ•°ç»„
			byte[] lengthByte = Arrays.copyOfRange(bytes, 16, 20);
			// èŽ·å?–xmlæ¶ˆæ?¯ä¸»ä½“çš„é•¿åº¦(byte[]2int)
			// http://my.oschina.net/u/169390/blog/97495
			int xmlLength = lengthByte[3] & 0xff | (lengthByte[2] & 0xff) << 8
					| (lengthByte[1] & 0xff) << 16
					| (lengthByte[0] & 0xff) << 24;
			xmlContent = ServerToolkits.newStringUtf8(Arrays.copyOfRange(bytes, 20,
					20 + xmlLength));
			fromAppId = ServerToolkits.newStringUtf8(Arrays.copyOfRange(bytes,
					20 + xmlLength, bytes.length));
		} catch (Exception e) {
			throw new WeixinException("-40008", "xmlå†…å®¹ä¸?å?ˆæ³•:" + e.getMessage());
		}
		// æ ¡éªŒappIdæ˜¯å?¦ä¸€è‡´
		if (appId != null && !fromAppId.trim().equals(appId)) {
			throw new WeixinException("-40005", "æ ¡éªŒAppIDå¤±è´¥,expect " + appId
					+ ",but actual is " + fromAppId);
		}
		return xmlContent;
	}
}
