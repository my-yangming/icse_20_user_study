package jetbrains.mps.execution.configurations.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.part.ProjectPluginPart;
import java.util.List;
import com.intellij.execution.BeforeRunTaskProvider;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.project.MPSProject;
import com.intellij.openapi.extensions.ExtensionPoint;
import com.intellij.execution.BeforeRunTask;
import com.intellij.openapi.extensions.Extensions;

public class BeforeTasksInitializer_ProjectPluginPart extends ProjectPluginPart {
  private List<BeforeRunTaskProvider> myRegisteredBeforeTasks = ListSequence.fromList(new ArrayList<BeforeRunTaskProvider>());
  public BeforeTasksInitializer_ProjectPluginPart() {
  }
  @Override
  public void init(MPSProject project) {
    ExtensionPoint<BeforeRunTaskProvider<BeforeRunTask>> beforeTasksExtensionPoint = Extensions.getArea(project.getProject()).getExtensionPoint(BeforeRunTaskProvider.EXTENSION_POINT_NAME);
    {
      BeforeRunTaskProvider beforeTask = (BeforeRunTaskProvider) new MakeNodePointers_BeforeTask();
      ListSequence.fromList(BeforeTasksInitializer_ProjectPluginPart.this.myRegisteredBeforeTasks).addElement(beforeTask);
      beforeTasksExtensionPoint.registerExtension(beforeTask);
    }
  }
  @Override
  public void dispose(MPSProject project) {
    ExtensionPoint<BeforeRunTaskProvider<BeforeRunTask>> beforeTasksExtensionPoint = Extensions.getArea(project.getProject()).getExtensionPoint(BeforeRunTaskProvider.EXTENSION_POINT_NAME);
    for (BeforeRunTaskProvider beforeTask : ListSequence.fromList(BeforeTasksInitializer_ProjectPluginPart.this.myRegisteredBeforeTasks)) {
      beforeTasksExtensionPoint.unregisterExtension(beforeTask);
    }
    ListSequence.fromList(BeforeTasksInitializer_ProjectPluginPart.this.myRegisteredBeforeTasks).clear();
  }
}
