/*
 * Copyright 2015-2102 RonCoo(http://www.roncoo.com) Group.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.roncoo.pay.trade.service.impl;

import com.roncoo.pay.account.service.RpAccountTransactionService;
import com.roncoo.pay.notify.service.RpNotifyService;
import com.roncoo.pay.reconciliation.entity.RpAccountCheckMistake;
import com.roncoo.pay.trade.dao.RpTradePaymentOrderDao;
import com.roncoo.pay.trade.dao.RpTradePaymentRecordDao;
import com.roncoo.pay.trade.entity.RpTradePaymentOrder;
import com.roncoo.pay.trade.entity.RpTradePaymentRecord;
import com.roncoo.pay.trade.enums.TradeStatusEnum;
import com.roncoo.pay.trade.enums.TrxTypeEnum;
import com.roncoo.pay.trade.exception.TradeBizException;
import com.roncoo.pay.trade.service.RpTradeReconciliationService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;

/**
 * <b>åŠŸèƒ½è¯´æ˜Ž:äº¤æ˜“æ¨¡å?—å¯¹è´¦å·®é”™å®žçŽ°</b>
 * @author  Peter
 * <a href="http://www.roncoo.com">é¾™æžœå­¦é™¢(www.roncoo.com)</a>
 */
@Service("rpTradeReconciliationService")
public class RpTradeReconciliationServiceImpl implements RpTradeReconciliationService {

	private static final Logger LOG = LoggerFactory.getLogger(RpTradeReconciliationServiceImpl.class);

	@Autowired
	private RpTradePaymentOrderDao rpTradePaymentOrderDao;
	@Autowired
	private RpTradePaymentRecordDao rpTradePaymentRecordDao;
	@Autowired
	private RpNotifyService rpNotifyService;
	@Autowired
	private RpAccountTransactionService rpAccountTransactionService;

	/**
	 * å¹³å?°æˆ?åŠŸï¼Œé“¶è¡Œè®°å½•ä¸?å­˜åœ¨ï¼Œæˆ–è€…é“¶è¡Œå¤±è´¥ï¼Œä»¥é“¶è¡Œä¸ºå‡†
	 * 
	 * @param trxNo
	 *            å¹³å?°äº¤æ˜“æµ?æ°´
	 */

	// @Transactional(rollbackFor = Exception.class)
	public void bankMissOrBankFailBaseBank(String trxNo) {
		LOG.info("===== æŠŠè®¢å?•æ”¹ä¸ºå¤±è´¥ï¼Œå¹¶å‡?æ¬¾å¼€å§‹========");
		RpTradePaymentRecord record = rpTradePaymentRecordDao.getByTrxNo(trxNo);
		if (record == null) {
			throw new TradeBizException(TradeBizException.TRADE_ORDER_ERROR, "trxNo[" + trxNo + "]çš„æ”¯ä»˜è®°å½•ä¸?å­˜åœ¨");
		}

		if (!record.getStatus().equals(TradeStatusEnum.SUCCESS.name())) {
			throw new TradeBizException(TradeBizException.TRADE_ORDER_STATUS_NOT_SUCCESS, "trxNo[" + trxNo + "]çš„æ”¯ä»˜è®°å½•çŠ¶æ€?ä¸?æ˜¯success");
		}

		// æ”¹æ”¯ä»˜è®°å½•çŠ¶æ€?
		record.setStatus(TradeStatusEnum.FAILED.name());
		record.setRemark("å¯¹è´¦å·®é”™å¤„ç?†,è®¢å?•æ”¹ä¸ºå¤±è´¥ï¼Œå¹¶å‡?æ¬¾.");
		rpTradePaymentRecordDao.update(record);

		// æ”¹æ”¯ä»˜è®¢å?•çŠ¶æ€?
		RpTradePaymentOrder order = rpTradePaymentOrderDao.selectByMerchantNoAndMerchantOrderNo(record.getMerchantNo(), record.getMerchantOrderNo());
		order.setStatus(TradeStatusEnum.FAILED.name());
		order.setRemark("å¯¹è´¦å·®é”™å¤„ç?†,è®¢å?•æ”¹ä¸ºå¤±è´¥ï¼Œå¹¶å‡?æ¬¾.");
		rpTradePaymentOrderDao.update(order);

		// å‡?æ¬¾
		rpAccountTransactionService.debitToAccount(record.getMerchantNo(), record.getOrderAmount().subtract(record.getPlatIncome()), record.getBankOrderNo(), TrxTypeEnum.ERRORHANKLE.name(), "å¯¹è´¦å·®é”™å¤„ç?†,è®¢å?•æ”¹ä¸ºå¤±è´¥ï¼Œå¹¶å‡?æ¬¾.");
		LOG.info("===== æŠŠè®¢å?•æ”¹ä¸ºå¤±è´¥ï¼Œå¹¶å‡?æ¬¾æˆ?åŠŸ========");
	}

	/**
	 * é“¶è¡Œæ”¯ä»˜æˆ?åŠŸï¼Œå¹³å?°å¤±è´¥.
	 * 
	 * @param trxNo
	 *            å¹³å?°äº¤æ˜“æµ?æ°´
	 * @param bankTrxNo
	 *            é“¶è¡Œè¿”å›žæµ?æ°´
	 */
	@Transactional(rollbackFor = Exception.class)
	public void platFailBankSuccess(String trxNo, String bankTrxNo) {

		LOG.info("===== é“¶è¡Œæ”¯ä»˜æˆ?åŠŸï¼Œå¹³å?°å¤±è´¥.========");

		RpTradePaymentRecord record = rpTradePaymentRecordDao.getByTrxNo(trxNo);
		if (record == null) {
			throw new TradeBizException(TradeBizException.TRADE_ORDER_ERROR, "trxNo[" + trxNo + "]çš„æ”¯ä»˜è®°å½•ä¸?å­˜åœ¨");
		}

		record.setBankTrxNo(bankTrxNo);
		record.setBankReturnMsg("SUCCESS");
		record.setStatus(TradeStatusEnum.SUCCESS.name());
		rpTradePaymentRecordDao.update(record);

		RpTradePaymentOrder rpTradePaymentOrder = rpTradePaymentOrderDao.selectByMerchantNoAndMerchantOrderNo(record.getMerchantNo(), record.getMerchantOrderNo());
		rpTradePaymentOrder.setStatus(TradeStatusEnum.SUCCESS.name());
		rpTradePaymentOrderDao.update(rpTradePaymentOrder);

		rpAccountTransactionService.creditToAccount(record.getMerchantNo(), record.getOrderAmount().subtract(record.getPlatIncome()), record.getBankOrderNo(), record.getBankTrxNo(), record.getTrxType(), record.getRemark());

		rpNotifyService.notifySend(record.getNotifyUrl(), record.getMerchantOrderNo(), record.getMerchantNo());

	}

	/**
	 * å¤„ç?†é‡‘é¢?ä¸?åŒ¹é…?å¼‚å¸¸
	 * 
	 * @param mistake
	 *            å·®é”™è®°å½•
	 * @param isBankMore
	 *            æ˜¯å?¦æ˜¯é“¶è¡Œé‡‘é¢?å¤š
	 * @param baseOnBank
	 *            æ˜¯å?¦ä»¥é“¶è¡Œä¸ºå‡†
	 */

	@Transactional(rollbackFor = Exception.class)
	public void handleAmountMistake(RpAccountCheckMistake mistake, boolean isBankMore) {

		LOG.info("=====å¼€å§‹å¤„ç?†é‡‘é¢?å·®é”™,æ˜¯å?¦æ˜¯é“¶è¡Œé‡‘é¢?å¤š[" + isBankMore + "],ä¸”éƒ½æ˜¯ä»¥é“¶è¡Œæ•°æ?®ä¸ºå‡†========");
		String trxNo = mistake.getTrxNo();
		RpTradePaymentRecord record = rpTradePaymentRecordDao.getByTrxNo(trxNo);
		if (record == null) {
			throw new TradeBizException(TradeBizException.TRADE_ORDER_ERROR, "trxNo[" + trxNo + "]çš„æ”¯ä»˜è®°å½•ä¸?å­˜åœ¨");
		}

		if (!record.getStatus().equals(TradeStatusEnum.SUCCESS.name())) {
			throw new TradeBizException(TradeBizException.TRADE_ORDER_STATUS_NOT_SUCCESS, "è¯·å…ˆå¤„ç?†è¯¥è®¢å?•çŠ¶æ€?ä¸?ç¬¦çš„å·®é”™");
		}
		// é“¶è¡Œæ”¯ä»˜é‡‘é¢?
		BigDecimal bankAmount = mistake.getBankAmount();
		// é“¶è¡Œæˆ?æœ¬
		BigDecimal bankFee = mistake.getBankFee();
		// å¹³å?°è®¢å?•æ”¯ä»˜é‡‘é¢?
		BigDecimal orderAmount = record.getOrderAmount();
		// å¹³å?°å·²æ”¶å•†æˆ·çš„æ‰‹ç»­è´¹
		BigDecimal fee = record.getPlatIncome();
		// å®žé™…éœ€è¦?æ‰‹ç»­è´¹
		BigDecimal needFee = bankAmount.multiply(record.getFeeRate()).divide(BigDecimal.valueOf(100), 2, BigDecimal.ROUND_HALF_UP);
		// è®¢å?•é‡‘é¢?å·®
		BigDecimal subOrderAmount = bankAmount.subtract(orderAmount).abs();
		// æ‰‹ç»­è´¹å·®
		BigDecimal subFee = needFee.subtract(fee).abs();

		/** å¦‚æžœæ˜¯é“¶è¡Œé‡‘é¢?å¤š ----åŠ  **/
		if (isBankMore) {
			/** ä»¥é“¶è¡Œæ•°æ?®ä¸ºå‡† **/

			record.setOrderAmount(bankAmount);
			record.setPlatCost(bankFee);
			record.setPlatIncome(needFee);
			record.setRemark("å·®é”™è°ƒæ•´ï¼šè®¢å?•é‡‘é¢?åŠ [" + subOrderAmount + "],æ‰‹ç»­è´¹åŠ [" + subFee + "],æˆ?æœ¬å?˜æˆ?[" + bankFee + "]");
			rpTradePaymentRecordDao.update(record);

			RpTradePaymentOrder rpTradePaymentOrder = rpTradePaymentOrderDao.selectByMerchantNoAndMerchantOrderNo(record.getMerchantNo(), record.getMerchantOrderNo());
			rpTradePaymentOrder.setOrderAmount(bankAmount);
			rpTradePaymentOrder.setRemark("å·®é”™å¤„ç?†:è®¢å?•é‡‘é¢?ç”±[" + orderAmount + "]æ”¹ä¸º[" + bankAmount + "]");
			rpTradePaymentOrderDao.update(rpTradePaymentOrder);

			// åŠ æ¬¾
			rpAccountTransactionService.creditToAccount(record.getMerchantNo(), subOrderAmount.subtract(subFee), record.getBankOrderNo(), record.getBankTrxNo(), TrxTypeEnum.ERRORHANKLE.name(), "å·®é”™å¤„ç?†åŠ æ¬¾ã€‚");
		}
		/** å¹³å?°é‡‘é¢?å¤š -----å‡? **/
		else {
			/** ä»¥é“¶è¡Œæ•°æ?®ä¸ºå‡† **/

			record.setOrderAmount(bankAmount);
			record.setPlatCost(bankFee);
			record.setPlatIncome(needFee);
			record.setRemark("å·®é”™è°ƒæ•´ï¼šè®¢å?•é‡‘é¢?å‡?[" + subOrderAmount + "],æ‰‹ç»­è´¹å‡?[" + subFee + "],æˆ?æœ¬å?˜æˆ?[" + bankFee + "]");
			rpTradePaymentRecordDao.update(record);

			RpTradePaymentOrder rpTradePaymentOrder = rpTradePaymentOrderDao.selectByMerchantNoAndMerchantOrderNo(record.getMerchantNo(), record.getMerchantOrderNo());
			rpTradePaymentOrder.setOrderAmount(bankAmount);
			rpTradePaymentOrder.setRemark("å·®é”™å¤„ç?†:è®¢å?•é‡‘é¢?ç”±[" + orderAmount + "]æ”¹ä¸º[" + bankAmount + "]");
			rpTradePaymentOrderDao.update(rpTradePaymentOrder);

			// å‡?æ¬¾
			rpAccountTransactionService.debitToAccount(record.getMerchantNo(), subOrderAmount.subtract(subFee), record.getBankOrderNo(), record.getBankTrxNo(), TrxTypeEnum.ERRORHANKLE.name(), "å·®é”™å¤„ç?†å‡?æ¬¾ã€‚");
		}
	}

	/**
	 * å¤„ç?†æ‰‹ç»­è´¹ä¸?åŒ¹é…?å·®é”™ï¼ˆé»˜è®¤ä»¥é“¶è¡Œä¸ºå‡†ï¼‰
	 * 
	 * @param mistake
	 */

	@Transactional(rollbackFor = Exception.class)
	public void handleFeeMistake(RpAccountCheckMistake mistake) {

		String trxNo = mistake.getTrxNo();
		RpTradePaymentRecord record = rpTradePaymentRecordDao.getByTrxNo(trxNo);
		if (record == null) {
			throw new TradeBizException(TradeBizException.TRADE_ORDER_ERROR, "trxNo[" + trxNo + "]çš„æ”¯ä»˜è®°å½•ä¸?å­˜åœ¨");
		}

		if (!record.getStatus().equals(TradeStatusEnum.SUCCESS.name())) {
			throw new TradeBizException(TradeBizException.TRADE_ORDER_STATUS_NOT_SUCCESS, "è¯·å…ˆå¤„ç?†è¯¥è®¢å?•çŠ¶æ€?ä¸?ç¬¦çš„å·®é”™");
		}

		BigDecimal oldBankFee = record.getPlatCost();
		BigDecimal bankFee = mistake.getBankFee();

		record.setPlatCost(bankFee);
		record.setRemark("å·®é”™å¤„ç?†:é“¶è¡Œæˆ?æœ¬ç”±[" + oldBankFee + "]æ”¹ä¸º[" + bankFee + "]");
		rpTradePaymentRecordDao.update(record);
	}
}
