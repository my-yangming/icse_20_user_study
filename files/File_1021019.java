/**
 * Copyright (c) 2015-2019, Michael Yang æ?¨ç¦?æµ· (fuhai999@gmail.com).
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.jboot.support.redis.jedis;

import com.jfinal.log.Log;
import io.jboot.utils.StrUtil;
import io.jboot.support.redis.JbootRedisBase;
import io.jboot.support.redis.JbootRedisConfig;
import io.jboot.exception.JbootException;
import org.apache.commons.pool2.impl.GenericObjectPoolConfig;
import redis.clients.jedis.*;
import redis.clients.jedis.exceptions.JedisConnectionException;

import java.util.*;
import java.util.Map.Entry;

/**
 * å?‚è€ƒï¼š com.jfinal.plugin.redis
 * JbootRedis å‘½ä»¤æ–‡æ¡£: http://redisdoc.com/
 */
public class JbootJedisClusterImpl extends JbootRedisBase {

    protected JedisCluster jedisCluster;
    private int timeout = 2000;

    static final Log LOG = Log.getLog(JbootJedisClusterImpl.class);


    public JbootJedisClusterImpl(JbootRedisConfig config) {

        super(config);

        Integer timeout = config.getTimeout();
        String password = config.getPassword();
        Integer maxAttempts = config.getMaxAttempts();

        if (timeout != null) {
            this.timeout = timeout;
        }


        GenericObjectPoolConfig poolConfig = new GenericObjectPoolConfig();

        if (StrUtil.isNotBlank(config.getTestWhileIdle())) {
            poolConfig.setTestWhileIdle(config.getTestWhileIdle());
        }

        if (StrUtil.isNotBlank(config.getTestOnBorrow())) {
            poolConfig.setTestOnBorrow(config.getTestOnBorrow());
        }

        if (StrUtil.isNotBlank(config.getTestOnCreate())) {
            poolConfig.setTestOnCreate(config.getTestOnCreate());
        }

        if (StrUtil.isNotBlank(config.getTestOnReturn())) {
            poolConfig.setTestOnReturn(config.getTestOnReturn());
        }

        if (StrUtil.isNotBlank(config.getMinEvictableIdleTimeMillis())) {
            poolConfig.setMinEvictableIdleTimeMillis(config.getMinEvictableIdleTimeMillis());
        }

        if (StrUtil.isNotBlank(config.getTimeBetweenEvictionRunsMillis())) {
            poolConfig.setTimeBetweenEvictionRunsMillis(config.getTimeBetweenEvictionRunsMillis());
        }

        if (StrUtil.isNotBlank(config.getNumTestsPerEvictionRun())) {
            poolConfig.setNumTestsPerEvictionRun(config.getNumTestsPerEvictionRun());
        }

        if (StrUtil.isNotBlank(config.getMaxTotal())) {
            poolConfig.setMaxTotal(config.getMaxTotal());
        }

        if (StrUtil.isNotBlank(config.getMaxIdle())) {
            poolConfig.setMaxIdle(config.getMaxIdle());
        }

        if (StrUtil.isNotBlank(config.getMinIdle())) {
            poolConfig.setMinIdle(config.getMinIdle());
        }

        if (StrUtil.isNotBlank(config.getMaxWaitMillis())) {
            poolConfig.setMaxWaitMillis(config.getMaxWaitMillis());
        }
        this.jedisCluster = newJedisCluster(config.getHostAndPorts(), timeout, maxAttempts, password, poolConfig);
    }

    public static JedisCluster newJedisCluster(Set<HostAndPort> haps, Integer timeout,
                                               Integer maxAttempts, String password, GenericObjectPoolConfig poolConfig) {
        JedisCluster jedisCluster;

        if (timeout != null && maxAttempts != null && password != null && poolConfig != null) {
            jedisCluster = new JedisCluster(haps, timeout, timeout, maxAttempts, password, poolConfig);
        } else if (timeout != null && maxAttempts != null && poolConfig != null) {
            jedisCluster = new JedisCluster(haps, timeout, maxAttempts, poolConfig);
        } else if (timeout != null && maxAttempts != null) {
            jedisCluster = new JedisCluster(haps, timeout, maxAttempts);
        } else if (timeout != null && poolConfig != null) {
            jedisCluster = new JedisCluster(haps, timeout, poolConfig);
        } else if (timeout != null) {
            jedisCluster = new JedisCluster(haps, timeout);
        } else {
            jedisCluster = new JedisCluster(haps);
        }
        return jedisCluster;
    }

    public JbootJedisClusterImpl(JedisCluster jedisCluster) {
        super(null);
        this.jedisCluster = jedisCluster;
    }

    /**
     * å­˜æ”¾ key value å¯¹åˆ° redis
     * å¦‚æžœ key å·²ç»?æŒ?æœ‰å…¶ä»–å€¼ï¼Œ SET å°±è¦†å†™æ—§å€¼ï¼Œæ— è§†ç±»åž‹ã€‚
     * å¯¹äºŽæŸ?ä¸ªåŽŸæœ¬å¸¦æœ‰ç”Ÿå­˜æ—¶é—´ï¼ˆTTLï¼‰çš„é”®æ?¥è¯´ï¼Œ å½“ SET å‘½ä»¤æˆ?åŠŸåœ¨è¿™ä¸ªé”®ä¸Šæ‰§è¡Œæ—¶ï¼Œ è¿™ä¸ªé”®åŽŸæœ‰çš„ TTL å°†è¢«æ¸…é™¤ã€‚
     */
    public String set(Object key, Object value) {
        return jedisCluster.set(keyToBytes(key), valueToBytes(value));
    }

    @Override
    public Long setnx(Object key, Object value) {
        return jedisCluster.setnx(keyToBytes(key), valueToBytes(value));
    }

    /**
     * å­˜æ”¾ key value å¯¹åˆ° redis
     * å¦‚æžœ key å·²ç»?æŒ?æœ‰å…¶ä»–å€¼ï¼Œ SET å°±è¦†å†™æ—§å€¼ï¼Œæ— è§†ç±»åž‹ã€‚
     * æ­¤æ–¹æ³•ç”¨äº†ä¿®æ”¹ incr ç­‰çš„å€¼
     */
    public String setWithoutSerialize(Object key, Object value) {
        return jedisCluster.set(keyToBytes(key), value.toString().getBytes());
    }


    /**
     * å­˜æ”¾ key value å¯¹åˆ° redisï¼Œå¹¶å°† key çš„ç”Ÿå­˜æ—¶é—´è®¾ä¸º seconds (ä»¥ç§’ä¸ºå?•ä½?)ã€‚
     * å¦‚æžœ key å·²ç»?å­˜åœ¨ï¼Œ SETEX å‘½ä»¤å°†è¦†å†™æ—§å€¼ã€‚
     */
    public String setex(Object key, int seconds, Object value) {

        return jedisCluster.setex(keyToBytes(key), seconds, valueToBytes(value));

    }

    /**
     * è¿”å›ž key æ‰€å…³è?”çš„ value å€¼
     * å¦‚æžœ key ä¸?å­˜åœ¨é‚£ä¹ˆè¿”å›žç‰¹æ®Šå€¼ nil ã€‚
     */
    @SuppressWarnings("unchecked")
    public <T> T get(Object key) {

        return (T) valueFromBytes(jedisCluster.get(keyToBytes(key)));

    }

    @Override
    public String getWithoutSerialize(Object key) {
        byte[] bytes = jedisCluster.get(keyToBytes(key));
        if (bytes == null || bytes.length == 0) {
            return null;
        }
        return new String(jedisCluster.get(keyToBytes(key)));
    }

    /**
     * åˆ é™¤ç»™å®šçš„ä¸€ä¸ª key
     * ä¸?å­˜åœ¨çš„ key ä¼šè¢«å¿½ç•¥ã€‚
     */
    public Long del(Object key) {
        return jedisCluster.del(keyToBytes(key));
    }

    /**
     * åˆ é™¤ç»™å®šçš„å¤šä¸ª key
     * ä¸?å­˜åœ¨çš„ key ä¼šè¢«å¿½ç•¥ã€‚
     */
    public Long del(Object... keys) {

        return jedisCluster.del(keysToBytesArray(keys));

    }

    /**
     * æŸ¥æ‰¾æ‰€æœ‰ç¬¦å?ˆç»™å®šæ¨¡å¼? pattern çš„ key ã€‚
     * KEYS * åŒ¹é…?æ•°æ?®åº“ä¸­æ‰€æœ‰ key ã€‚
     * KEYS h?llo åŒ¹é…? hello ï¼Œ hallo å’Œ hxllo ç­‰ã€‚
     * KEYS h*llo åŒ¹é…? hllo å’Œ heeeeello ç­‰ã€‚
     * KEYS h[ae]llo åŒ¹é…? hello å’Œ hallo ï¼Œä½†ä¸?åŒ¹é…? hillo ã€‚
     * ç‰¹æ®Šç¬¦å?·ç”¨ \ éš”å¼€
     */
    public Set<String> keys(String pattern) {
        HashSet<String> keys = new HashSet<>();
        Map<String, JedisPool> clusterNodes = jedisCluster.getClusterNodes();
        for (String k : clusterNodes.keySet()) {
            JedisPool jp = clusterNodes.get(k);
            Jedis jedis = jp.getResource();
            try {
                keys.addAll(jedis.keys(pattern));
            } catch (Exception e) {
                LOG.error(e.toString(), e);
            } finally {
                jedis.close(); //ç”¨å®Œä¸€å®šè¦?closeè¿™ä¸ªé“¾æŽ¥ï¼?ï¼?ï¼?
            }
        }
        return keys;
    }


    /**
     * å?Œæ—¶è®¾ç½®ä¸€ä¸ªæˆ–å¤šä¸ª key-value å¯¹ã€‚
     * å¦‚æžœæŸ?ä¸ªç»™å®š key å·²ç»?å­˜åœ¨ï¼Œé‚£ä¹ˆ MSET ä¼šç”¨æ–°å€¼è¦†ç›–åŽŸæ?¥çš„æ—§å€¼ï¼Œå¦‚æžœè¿™ä¸?æ˜¯ä½ æ‰€å¸Œæœ›çš„æ•ˆæžœï¼Œè¯·è€ƒè™‘ä½¿ç”¨ MSETNX å‘½ä»¤ï¼šå®ƒå?ªä¼šåœ¨æ‰€æœ‰ç»™å®š key éƒ½ä¸?å­˜åœ¨çš„æƒ…å†µä¸‹è¿›è¡Œè®¾ç½®æ“?ä½œã€‚
     * MSET æ˜¯ä¸€ä¸ªåŽŸå­?æ€§(atomic)æ“?ä½œï¼Œæ‰€æœ‰ç»™å®š key éƒ½ä¼šåœ¨å?Œä¸€æ—¶é—´å†…è¢«è®¾ç½®ï¼ŒæŸ?äº›ç»™å®š key è¢«æ›´æ–°è€Œå?¦ä¸€äº›ç»™å®š key æ²¡æœ‰æ”¹å?˜çš„æƒ…å†µï¼Œä¸?å?¯èƒ½å?‘ç”Ÿã€‚
     * <pre>
     * ä¾‹å­?ï¼š
     * Cache cache = RedisKit.use();			// ä½¿ç”¨ JbootRedis çš„ cache
     * cache.mset("k1", "v1", "k2", "v2");		// æ”¾å…¥å¤šä¸ª key value é”®å€¼å¯¹
     * List list = cache.mget("k1", "k2");		// åˆ©ç”¨å¤šä¸ªé”®å€¼å¾—åˆ°ä¸Šé?¢ä»£ç ?æ”¾å…¥çš„å€¼
     * </pre>
     */
    public String mset(Object... keysValues) {
        if (keysValues.length % 2 != 0)
            throw new IllegalArgumentException("wrong number of arguments for met, keysValues length can not be odd");

        byte[][] kv = new byte[keysValues.length][];
        for (int i = 0; i < keysValues.length; i++) {
            if (i % 2 == 0)
                kv[i] = keyToBytes(keysValues[i]);
            else
                kv[i] = valueToBytes(keysValues[i]);
        }
        return jedisCluster.mset(kv);

    }

    /**
     * è¿”å›žæ‰€æœ‰(ä¸€ä¸ªæˆ–å¤šä¸ª)ç»™å®š key çš„å€¼ã€‚
     * å¦‚æžœç»™å®šçš„ key é‡Œé?¢ï¼Œæœ‰æŸ?ä¸ª key ä¸?å­˜åœ¨ï¼Œé‚£ä¹ˆè¿™ä¸ª key è¿”å›žç‰¹æ®Šå€¼ nil ã€‚å› æ­¤ï¼Œè¯¥å‘½ä»¤æ°¸ä¸?å¤±è´¥ã€‚
     */
    @SuppressWarnings("rawtypes")
    public List mget(Object... keys) {

        byte[][] keysBytesArray = keysToBytesArray(keys);
        List<byte[]> data = jedisCluster.mget(keysBytesArray);
        return valueListFromBytesList(data);

    }

    /**
     * å°† key ä¸­å‚¨å­˜çš„æ•°å­—å€¼å‡?ä¸€ã€‚
     * å¦‚æžœ key ä¸?å­˜åœ¨ï¼Œé‚£ä¹ˆ key çš„å€¼ä¼šå…ˆè¢«åˆ?å§‹åŒ–ä¸º 0 ï¼Œç„¶å?Žå†?æ‰§è¡Œ DECR æ“?ä½œã€‚
     * å¦‚æžœå€¼åŒ…å?«é”™è¯¯çš„ç±»åž‹ï¼Œæˆ–å­—ç¬¦ä¸²ç±»åž‹çš„å€¼ä¸?èƒ½è¡¨ç¤ºä¸ºæ•°å­—ï¼Œé‚£ä¹ˆè¿”å›žä¸€ä¸ªé”™è¯¯ã€‚
     * æœ¬æ“?ä½œçš„å€¼é™?åˆ¶åœ¨ 64 ä½?(bit)æœ‰ç¬¦å?·æ•°å­—è¡¨ç¤ºä¹‹å†…ã€‚
     * å…³äºŽé€’å¢ž(increment) / é€’å‡?(decrement)æ“?ä½œçš„æ›´å¤šä¿¡æ?¯ï¼Œè¯·å?‚è§? INCR å‘½ä»¤ã€‚
     */
    public Long decr(Object key) {

        return jedisCluster.decr(keyToBytes(key));

    }

    /**
     * å°† key æ‰€å‚¨å­˜çš„å€¼å‡?åŽ»å‡?é‡? decrement ã€‚
     * å¦‚æžœ key ä¸?å­˜åœ¨ï¼Œé‚£ä¹ˆ key çš„å€¼ä¼šå…ˆè¢«åˆ?å§‹åŒ–ä¸º 0 ï¼Œç„¶å?Žå†?æ‰§è¡Œ DECRBY æ“?ä½œã€‚
     * å¦‚æžœå€¼åŒ…å?«é”™è¯¯çš„ç±»åž‹ï¼Œæˆ–å­—ç¬¦ä¸²ç±»åž‹çš„å€¼ä¸?èƒ½è¡¨ç¤ºä¸ºæ•°å­—ï¼Œé‚£ä¹ˆè¿”å›žä¸€ä¸ªé”™è¯¯ã€‚
     * æœ¬æ“?ä½œçš„å€¼é™?åˆ¶åœ¨ 64 ä½?(bit)æœ‰ç¬¦å?·æ•°å­—è¡¨ç¤ºä¹‹å†…ã€‚
     * å…³äºŽæ›´å¤šé€’å¢ž(increment) / é€’å‡?(decrement)æ“?ä½œçš„æ›´å¤šä¿¡æ?¯ï¼Œè¯·å?‚è§? INCR å‘½ä»¤ã€‚
     */
    public Long decrBy(Object key, long longValue) {

        return jedisCluster.decrBy(keyToBytes(key), longValue);

    }

    /**
     * å°† key ä¸­å‚¨å­˜çš„æ•°å­—å€¼å¢žä¸€ã€‚
     * å¦‚æžœ key ä¸?å­˜åœ¨ï¼Œé‚£ä¹ˆ key çš„å€¼ä¼šå…ˆè¢«åˆ?å§‹åŒ–ä¸º 0 ï¼Œç„¶å?Žå†?æ‰§è¡Œ INCR æ“?ä½œã€‚
     * å¦‚æžœå€¼åŒ…å?«é”™è¯¯çš„ç±»åž‹ï¼Œæˆ–å­—ç¬¦ä¸²ç±»åž‹çš„å€¼ä¸?èƒ½è¡¨ç¤ºä¸ºæ•°å­—ï¼Œé‚£ä¹ˆè¿”å›žä¸€ä¸ªé”™è¯¯ã€‚
     * æœ¬æ“?ä½œçš„å€¼é™?åˆ¶åœ¨ 64 ä½?(bit)æœ‰ç¬¦å?·æ•°å­—è¡¨ç¤ºä¹‹å†…ã€‚
     */
    public Long incr(Object key) {

        return jedisCluster.incr(keyToBytes(key));

    }

    /**
     * å°† key æ‰€å‚¨å­˜çš„å€¼åŠ ä¸Šå¢žé‡? increment ã€‚
     * å¦‚æžœ key ä¸?å­˜åœ¨ï¼Œé‚£ä¹ˆ key çš„å€¼ä¼šå…ˆè¢«åˆ?å§‹åŒ–ä¸º 0 ï¼Œç„¶å?Žå†?æ‰§è¡Œ INCRBY å‘½ä»¤ã€‚
     * å¦‚æžœå€¼åŒ…å?«é”™è¯¯çš„ç±»åž‹ï¼Œæˆ–å­—ç¬¦ä¸²ç±»åž‹çš„å€¼ä¸?èƒ½è¡¨ç¤ºä¸ºæ•°å­—ï¼Œé‚£ä¹ˆè¿”å›žä¸€ä¸ªé”™è¯¯ã€‚
     * æœ¬æ“?ä½œçš„å€¼é™?åˆ¶åœ¨ 64 ä½?(bit)æœ‰ç¬¦å?·æ•°å­—è¡¨ç¤ºä¹‹å†…ã€‚
     * å…³äºŽé€’å¢ž(increment) / é€’å‡?(decrement)æ“?ä½œçš„æ›´å¤šä¿¡æ?¯ï¼Œå?‚è§? INCR å‘½ä»¤ã€‚
     */
    public Long incrBy(Object key, long longValue) {
        return jedisCluster.incrBy(keyToBytes(key), longValue);

    }

    /**
     * æ£€æŸ¥ç»™å®š key æ˜¯å?¦å­˜åœ¨ã€‚
     */
    public boolean exists(Object key) {

        return jedisCluster.exists(keyToBytes(key));

    }

    /**
     * ä»Žå½“å‰?æ•°æ?®åº“ä¸­éš?æœºè¿”å›ž(ä¸?åˆ é™¤)ä¸€ä¸ª key ã€‚
     */
    public String randomKey() {

        throw new JbootException("not support randomKey commmand in redis cluster.");

    }

    /**
     * å°† key æ”¹å??ä¸º newkey ã€‚
     * å½“ key å’Œ newkey ç›¸å?Œï¼Œæˆ–è€… key ä¸?å­˜åœ¨æ—¶ï¼Œè¿”å›žä¸€ä¸ªé”™è¯¯ã€‚
     * å½“ newkey å·²ç»?å­˜åœ¨æ—¶ï¼Œ RENAME å‘½ä»¤å°†è¦†ç›–æ—§å€¼ã€‚
     */
    public String rename(Object oldkey, Object newkey) {

        return jedisCluster.rename(keyToBytes(oldkey), keyToBytes(newkey));

    }

    /**
     * å°†å½“å‰?æ•°æ?®åº“çš„ key ç§»åŠ¨åˆ°ç»™å®šçš„æ•°æ?®åº“ db å½“ä¸­ã€‚
     * å¦‚æžœå½“å‰?æ•°æ?®åº“(æº?æ•°æ?®åº“)å’Œç»™å®šæ•°æ?®åº“(ç›®æ ‡æ•°æ?®åº“)æœ‰ç›¸å?Œå??å­—çš„ç»™å®š key ï¼Œæˆ–è€… key ä¸?å­˜åœ¨äºŽå½“å‰?æ•°æ?®åº“ï¼Œé‚£ä¹ˆ MOVE æ²¡æœ‰ä»»ä½•æ•ˆæžœã€‚
     * å› æ­¤ï¼Œä¹Ÿå?¯ä»¥åˆ©ç”¨è¿™ä¸€ç‰¹æ€§ï¼Œå°† MOVE å½“ä½œé”?(locking)åŽŸè¯­(primitive)ã€‚
     */
    public Long move(Object key, int dbIndex) {

//        return jedisCluster.move(keyToBytes(key), dbIndex);
        throw new JbootException("not support move commmand in redis cluster.");

    }

    /**
     * å°† key åŽŸå­?æ€§åœ°ä»Žå½“å‰?å®žä¾‹ä¼ é€?åˆ°ç›®æ ‡å®žä¾‹çš„æŒ‡å®šæ•°æ?®åº“ä¸Šï¼Œä¸€æ—¦ä¼ é€?æˆ?åŠŸï¼Œ key ä¿?è¯?ä¼šå‡ºçŽ°åœ¨ç›®æ ‡å®žä¾‹ä¸Šï¼Œè€Œå½“å‰?å®žä¾‹ä¸Šçš„ key ä¼šè¢«åˆ é™¤ã€‚
     */
    public String migrate(String host, int port, Object key, int destinationDb, int timeout) {

        throw new JbootException("not support migrate commmand in redis cluster.");

    }

    /**
     * åˆ‡æ?¢åˆ°æŒ‡å®šçš„æ•°æ?®åº“ï¼Œæ•°æ?®åº“ç´¢å¼•å?· index ç”¨æ•°å­—å€¼æŒ‡å®šï¼Œä»¥ 0 ä½œä¸ºèµ·å§‹ç´¢å¼•å€¼ã€‚
     * é»˜è®¤ä½¿ç”¨ 0 å?·æ•°æ?®åº“ã€‚
     * æ³¨æ„?ï¼šåœ¨ Jedis å¯¹è±¡è¢«å…³é—­æ—¶ï¼Œæ•°æ?®åº“å?ˆä¼šé‡?æ–°è¢«è®¾ç½®ä¸ºåˆ?å§‹å€¼ï¼Œæ‰€ä»¥æœ¬æ–¹æ³• select(...)
     * æ­£å¸¸å·¥ä½œéœ€è¦?ä½¿ç”¨å¦‚ä¸‹æ–¹å¼?ä¹‹ä¸€ï¼š
     * 1ï¼šä½¿ç”¨ RedisInterceptorï¼Œåœ¨æœ¬çº¿ç¨‹å†…å…±äº«å?Œä¸€ä¸ª Jedis å¯¹è±¡
     * 2ï¼šä½¿ç”¨ JbootRedis.call(ICallback) è¿›è¡Œæ“?ä½œ
     * 3ï¼šè‡ªè¡ŒèŽ·å?– Jedis å¯¹è±¡è¿›è¡Œæ“?ä½œ
     */
    public String select(int databaseIndex) {

        return jedisCluster.select(databaseIndex);

    }

    /**
     * ä¸ºç»™å®š key è®¾ç½®ç”Ÿå­˜æ—¶é—´ï¼Œå½“ key è¿‡æœŸæ—¶(ç”Ÿå­˜æ—¶é—´ä¸º 0 )ï¼Œå®ƒä¼šè¢«è‡ªåŠ¨åˆ é™¤ã€‚
     * åœ¨ JbootRedis ä¸­ï¼Œå¸¦æœ‰ç”Ÿå­˜æ—¶é—´çš„ key è¢«ç§°ä¸ºã€Žæ˜“å¤±çš„ã€?(volatile)ã€‚
     */
    public Long expire(Object key, int seconds) {

        return jedisCluster.expire(keyToBytes(key), seconds);

    }

    /**
     * EXPIREAT çš„ä½œç”¨å’Œ EXPIRE ç±»ä¼¼ï¼Œéƒ½ç”¨äºŽä¸º key è®¾ç½®ç”Ÿå­˜æ—¶é—´ã€‚ä¸?å?Œåœ¨äºŽ EXPIREAT å‘½ä»¤æŽ¥å?—çš„æ—¶é—´å?‚æ•°æ˜¯ UNIX æ—¶é—´æˆ³(unix timestamp)ã€‚
     */
    public Long expireAt(Object key, long unixTime) {

        return jedisCluster.expireAt(keyToBytes(key), unixTime);

    }

    /**
     * è¿™ä¸ªå‘½ä»¤å’Œ EXPIRE å‘½ä»¤çš„ä½œç”¨ç±»ä¼¼ï¼Œä½†æ˜¯å®ƒä»¥æ¯«ç§’ä¸ºå?•ä½?è®¾ç½® key çš„ç”Ÿå­˜æ—¶é—´ï¼Œè€Œä¸?åƒ? EXPIRE å‘½ä»¤é‚£æ ·ï¼Œä»¥ç§’ä¸ºå?•ä½?ã€‚
     */
    public Long pexpire(Object key, long milliseconds) {

        return jedisCluster.pexpire(keyToBytes(key), milliseconds);

    }

    /**
     * è¿™ä¸ªå‘½ä»¤å’Œ EXPIREAT å‘½ä»¤ç±»ä¼¼ï¼Œä½†å®ƒä»¥æ¯«ç§’ä¸ºå?•ä½?è®¾ç½® key çš„è¿‡æœŸ unix æ—¶é—´æˆ³ï¼Œè€Œä¸?æ˜¯åƒ? EXPIREAT é‚£æ ·ï¼Œä»¥ç§’ä¸ºå?•ä½?ã€‚
     */
    public Long pexpireAt(Object key, long millisecondsTimestamp) {

        return jedisCluster.pexpireAt(keyToBytes(key), millisecondsTimestamp);

    }

    /**
     * å°†ç»™å®š key çš„å€¼è®¾ä¸º value ï¼Œå¹¶è¿”å›ž key çš„æ—§å€¼(old value)ã€‚
     * å½“ key å­˜åœ¨ä½†ä¸?æ˜¯å­—ç¬¦ä¸²ç±»åž‹æ—¶ï¼Œè¿”å›žä¸€ä¸ªé”™è¯¯ã€‚
     */
    @SuppressWarnings("unchecked")
    public <T> T getSet(Object key, Object value) {

        return (T) valueFromBytes(jedisCluster.getSet(keyToBytes(key), valueToBytes(value)));

    }

    /**
     * ç§»é™¤ç»™å®š key çš„ç”Ÿå­˜æ—¶é—´ï¼Œå°†è¿™ä¸ª key ä»Žã€Žæ˜“å¤±çš„ã€?(å¸¦ç”Ÿå­˜æ—¶é—´ key )è½¬æ?¢æˆ?ã€ŽæŒ?ä¹…çš„ã€?(ä¸€ä¸ªä¸?å¸¦ç”Ÿå­˜æ—¶é—´ã€?æ°¸ä¸?è¿‡æœŸçš„ key )ã€‚
     */
    public Long persist(Object key) {

        return jedisCluster.persist(keyToBytes(key));

    }

    /**
     * è¿”å›ž key æ‰€å‚¨å­˜çš„å€¼çš„ç±»åž‹ã€‚
     */
    public String type(Object key) {

        return jedisCluster.type(keyToBytes(key));

    }

    /**
     * ä»¥ç§’ä¸ºå?•ä½?ï¼Œè¿”å›žç»™å®š key çš„å‰©ä½™ç”Ÿå­˜æ—¶é—´(TTL, time to live)ã€‚
     */
    public Long ttl(Object key) {

        return jedisCluster.ttl(keyToBytes(key));

    }

    /**
     * è¿™ä¸ªå‘½ä»¤ç±»ä¼¼äºŽ TTL å‘½ä»¤ï¼Œä½†å®ƒä»¥æ¯«ç§’ä¸ºå?•ä½?è¿”å›ž key çš„å‰©ä½™ç”Ÿå­˜æ—¶é—´ï¼Œè€Œä¸?æ˜¯åƒ? TTL å‘½ä»¤é‚£æ ·ï¼Œä»¥ç§’ä¸ºå?•ä½?ã€‚
     */
    public Long pttl(Object key) {

        return jedisCluster.pttl(key.toString());

    }

    /**
     * å¯¹è±¡è¢«å¼•ç”¨çš„æ•°é‡?
     */
    public Long objectRefcount(Object key) {

//        return jedisCluster.objectRefcount(keyToBytes(key));
        throw new JbootException("not support move objectRefcount in redis cluster.");
    }

    /**
     * å¯¹è±¡æ²¡æœ‰è¢«è®¿é—®çš„ç©ºé—²æ—¶é—´
     */
    public Long objectIdletime(Object key) {

//        return jedisCluster.objectIdletime(keyToBytes(key));
        throw new JbootException("not support move objectIdletime in redis cluster.");

    }

    /**
     * å°†å“ˆå¸Œè¡¨ key ä¸­çš„åŸŸ field çš„å€¼è®¾ä¸º value ã€‚
     * å¦‚æžœ key ä¸?å­˜åœ¨ï¼Œä¸€ä¸ªæ–°çš„å“ˆå¸Œè¡¨è¢«åˆ›å»ºå¹¶è¿›è¡Œ HSET æ“?ä½œã€‚
     * å¦‚æžœåŸŸ field å·²ç»?å­˜åœ¨äºŽå“ˆå¸Œè¡¨ä¸­ï¼Œæ—§å€¼å°†è¢«è¦†ç›–ã€‚
     */
    public Long hset(Object key, Object field, Object value) {

        return jedisCluster.hset(keyToBytes(key), valueToBytes(field), valueToBytes(value));

    }

    /**
     * å?Œæ—¶å°†å¤šä¸ª field-value (åŸŸ-å€¼)å¯¹è®¾ç½®åˆ°å“ˆå¸Œè¡¨ key ä¸­ã€‚
     * æ­¤å‘½ä»¤ä¼šè¦†ç›–å“ˆå¸Œè¡¨ä¸­å·²å­˜åœ¨çš„åŸŸã€‚
     * å¦‚æžœ key ä¸?å­˜åœ¨ï¼Œä¸€ä¸ªç©ºå“ˆå¸Œè¡¨è¢«åˆ›å»ºå¹¶æ‰§è¡Œ HMSET æ“?ä½œã€‚
     */
    public String hmset(Object key, Map<Object, Object> hash) {

        Map<byte[], byte[]> para = new HashMap<byte[], byte[]>();
        for (Entry<Object, Object> e : hash.entrySet())
            para.put(valueToBytes(e.getKey()), valueToBytes(e.getValue()));
        return jedisCluster.hmset(keyToBytes(key), para);

    }

    /**
     * è¿”å›žå“ˆå¸Œè¡¨ key ä¸­ç»™å®šåŸŸ field çš„å€¼ã€‚
     */
    @SuppressWarnings("unchecked")
    public <T> T hget(Object key, Object field) {

        return (T) valueFromBytes(jedisCluster.hget(keyToBytes(key), valueToBytes(field)));

    }

    /**
     * è¿”å›žå“ˆå¸Œè¡¨ key ä¸­ï¼Œä¸€ä¸ªæˆ–å¤šä¸ªç»™å®šåŸŸçš„å€¼ã€‚
     * å¦‚æžœç»™å®šçš„åŸŸä¸?å­˜åœ¨äºŽå“ˆå¸Œè¡¨ï¼Œé‚£ä¹ˆè¿”å›žä¸€ä¸ª nil å€¼ã€‚
     * å› ä¸ºä¸?å­˜åœ¨çš„ key è¢«å½“ä½œä¸€ä¸ªç©ºå“ˆå¸Œè¡¨æ?¥å¤„ç?†ï¼Œæ‰€ä»¥å¯¹ä¸€ä¸ªä¸?å­˜åœ¨çš„ key è¿›è¡Œ HMGET æ“?ä½œå°†è¿”å›žä¸€ä¸ªå?ªå¸¦æœ‰ nil å€¼çš„è¡¨ã€‚
     */
    @SuppressWarnings("rawtypes")
    public List hmget(Object key, Object... fields) {

        List<byte[]> data = jedisCluster.hmget(keyToBytes(key), valuesToBytesArray(fields));
        return valueListFromBytesList(data);

    }

    /**
     * åˆ é™¤å“ˆå¸Œè¡¨ key ä¸­çš„ä¸€ä¸ªæˆ–å¤šä¸ªæŒ‡å®šåŸŸï¼Œä¸?å­˜åœ¨çš„åŸŸå°†è¢«å¿½ç•¥ã€‚
     */
    public Long hdel(Object key, Object... fields) {

        return jedisCluster.hdel(keyToBytes(key), valuesToBytesArray(fields));

    }

    /**
     * æŸ¥çœ‹å“ˆå¸Œè¡¨ key ä¸­ï¼Œç»™å®šåŸŸ field æ˜¯å?¦å­˜åœ¨ã€‚
     */
    public boolean hexists(Object key, Object field) {

        return jedisCluster.hexists(keyToBytes(key), valueToBytes(field));

    }

    /**
     * è¿”å›žå“ˆå¸Œè¡¨ key ä¸­ï¼Œæ‰€æœ‰çš„åŸŸå’Œå€¼ã€‚
     * åœ¨è¿”å›žå€¼é‡Œï¼Œç´§è·Ÿæ¯?ä¸ªåŸŸå??(field name)ä¹‹å?Žæ˜¯åŸŸçš„å€¼(value)ï¼Œæ‰€ä»¥è¿”å›žå€¼çš„é•¿åº¦æ˜¯å“ˆå¸Œè¡¨å¤§å°?çš„ä¸¤å€?ã€‚
     */
    @SuppressWarnings("rawtypes")
    public Map hgetAll(Object key) {

        Map<byte[], byte[]> data = jedisCluster.hgetAll(keyToBytes(key));
        Map<Object, Object> result = new HashMap<Object, Object>();
        for (Entry<byte[], byte[]> e : data.entrySet())
            result.put(valueFromBytes(e.getKey()), valueFromBytes(e.getValue()));
        return result;

    }

    /**
     * è¿”å›žå“ˆå¸Œè¡¨ key ä¸­æ‰€æœ‰åŸŸçš„å€¼ã€‚
     */
    @SuppressWarnings("rawtypes")
    public List hvals(Object key) {

        Collection<byte[]> data = jedisCluster.hvals(keyToBytes(key));
        return valueListFromBytesList(data);

    }

    /**
     * è¿”å›žå“ˆå¸Œè¡¨ key ä¸­çš„æ‰€æœ‰åŸŸã€‚
     * åº•å±‚å®žçŽ°æ­¤æ–¹æ³•å?–å??ä¸º hfields æ›´ä¸ºå?ˆé€‚ï¼Œåœ¨æ­¤ä»…ä¸ºä¸Žåº•å±‚ä¿?æŒ?ä¸€è‡´
     */
    public Set<Object> hkeys(Object key) {

        Set<byte[]> fieldSet = jedisCluster.hkeys(keyToBytes(key));
        Set<Object> result = new HashSet<Object>();
        fieldSetFromBytesSet(fieldSet, result);
        return result;

    }

    /**
     * è¿”å›žå“ˆå¸Œè¡¨ key ä¸­åŸŸçš„æ•°é‡?ã€‚
     */
    public Long hlen(Object key) {

        return jedisCluster.hlen(keyToBytes(key));

    }

    /**
     * ä¸ºå“ˆå¸Œè¡¨ key ä¸­çš„åŸŸ field çš„å€¼åŠ ä¸Šå¢žé‡? increment ã€‚
     * å¢žé‡?ä¹Ÿå?¯ä»¥ä¸ºè´Ÿæ•°ï¼Œç›¸å½“äºŽå¯¹ç»™å®šåŸŸè¿›è¡Œå‡?æ³•æ“?ä½œã€‚
     * å¦‚æžœ key ä¸?å­˜åœ¨ï¼Œä¸€ä¸ªæ–°çš„å“ˆå¸Œè¡¨è¢«åˆ›å»ºå¹¶æ‰§è¡Œ HINCRBY å‘½ä»¤ã€‚
     * å¦‚æžœåŸŸ field ä¸?å­˜åœ¨ï¼Œé‚£ä¹ˆåœ¨æ‰§è¡Œå‘½ä»¤å‰?ï¼ŒåŸŸçš„å€¼è¢«åˆ?å§‹åŒ–ä¸º 0 ã€‚
     * å¯¹ä¸€ä¸ªå‚¨å­˜å­—ç¬¦ä¸²å€¼çš„åŸŸ field æ‰§è¡Œ HINCRBY å‘½ä»¤å°†é€ æˆ?ä¸€ä¸ªé”™è¯¯ã€‚
     * æœ¬æ“?ä½œçš„å€¼è¢«é™?åˆ¶åœ¨ 64 ä½?(bit)æœ‰ç¬¦å?·æ•°å­—è¡¨ç¤ºä¹‹å†…ã€‚
     */
    public Long hincrBy(Object key, Object field, long value) {

        return jedisCluster.hincrBy(keyToBytes(key), valueToBytes(field), value);

    }

    /**
     * ä¸ºå“ˆå¸Œè¡¨ key ä¸­çš„åŸŸ field åŠ ä¸Šæµ®ç‚¹æ•°å¢žé‡? increment ã€‚
     * å¦‚æžœå“ˆå¸Œè¡¨ä¸­æ²¡æœ‰åŸŸ field ï¼Œé‚£ä¹ˆ HINCRBYFLOAT ä¼šå…ˆå°†åŸŸ field çš„å€¼è®¾ä¸º 0 ï¼Œç„¶å?Žå†?æ‰§è¡ŒåŠ æ³•æ“?ä½œã€‚
     * å¦‚æžœé”® key ä¸?å­˜åœ¨ï¼Œé‚£ä¹ˆ HINCRBYFLOAT ä¼šå…ˆåˆ›å»ºä¸€ä¸ªå“ˆå¸Œè¡¨ï¼Œå†?åˆ›å»ºåŸŸ field ï¼Œæœ€å?Žå†?æ‰§è¡ŒåŠ æ³•æ“?ä½œã€‚
     * å½“ä»¥ä¸‹ä»»æ„?ä¸€ä¸ªæ?¡ä»¶å?‘ç”Ÿæ—¶ï¼Œè¿”å›žä¸€ä¸ªé”™è¯¯ï¼š
     * 1:åŸŸ field çš„å€¼ä¸?æ˜¯å­—ç¬¦ä¸²ç±»åž‹(å› ä¸º redis ä¸­çš„æ•°å­—å’Œæµ®ç‚¹æ•°éƒ½ä»¥å­—ç¬¦ä¸²çš„å½¢å¼?ä¿?å­˜ï¼Œæ‰€ä»¥å®ƒä»¬éƒ½å±žäºŽå­—ç¬¦ä¸²ç±»åž‹ï¼‰
     * 2:åŸŸ field å½“å‰?çš„å€¼æˆ–ç»™å®šçš„å¢žé‡? increment ä¸?èƒ½è§£é‡Š(parse)ä¸ºå?Œç²¾åº¦æµ®ç‚¹æ•°(double precision floating point number)
     * HINCRBYFLOAT å‘½ä»¤çš„è¯¦ç»†åŠŸèƒ½å’Œ INCRBYFLOAT å‘½ä»¤ç±»ä¼¼ï¼Œè¯·æŸ¥çœ‹ INCRBYFLOAT å‘½ä»¤èŽ·å?–æ›´å¤šç›¸å…³ä¿¡æ?¯ã€‚
     */
    public Double hincrByFloat(Object key, Object field, double value) {

        return jedisCluster.hincrByFloat(keyToBytes(key), valueToBytes(field), value);

    }

    /**
     * è¿”å›žåˆ—è¡¨ key ä¸­ï¼Œä¸‹æ ‡ä¸º index çš„å…ƒç´ ã€‚
     * ä¸‹æ ‡(index)å?‚æ•° start å’Œ stop éƒ½ä»¥ 0 ä¸ºåº•ï¼Œä¹Ÿå°±æ˜¯è¯´ï¼Œä»¥ 0 è¡¨ç¤ºåˆ—è¡¨çš„ç¬¬ä¸€ä¸ªå…ƒç´ ï¼Œä»¥ 1 è¡¨ç¤ºåˆ—è¡¨çš„ç¬¬äºŒä¸ªå…ƒç´ ï¼Œä»¥æ­¤ç±»æŽ¨ã€‚
     * ä½ ä¹Ÿå?¯ä»¥ä½¿ç”¨è´Ÿæ•°ä¸‹æ ‡ï¼Œä»¥ -1 è¡¨ç¤ºåˆ—è¡¨çš„æœ€å?Žä¸€ä¸ªå…ƒç´ ï¼Œ -2 è¡¨ç¤ºåˆ—è¡¨çš„å€’æ•°ç¬¬äºŒä¸ªå…ƒç´ ï¼Œä»¥æ­¤ç±»æŽ¨ã€‚
     * å¦‚æžœ key ä¸?æ˜¯åˆ—è¡¨ç±»åž‹ï¼Œè¿”å›žä¸€ä¸ªé”™è¯¯ã€‚
     */
    @SuppressWarnings("unchecked")

    /**
     * è¿”å›žåˆ—è¡¨ key ä¸­ï¼Œä¸‹æ ‡ä¸º index çš„å…ƒç´ ã€‚
     * ä¸‹æ ‡(index)å?‚æ•° start å’Œ stop éƒ½ä»¥ 0 ä¸ºåº•ï¼Œä¹Ÿå°±æ˜¯è¯´ï¼Œä»¥ 0 è¡¨ç¤ºåˆ—è¡¨çš„ç¬¬ä¸€ä¸ªå…ƒç´ ï¼Œ
     * ä»¥ 1 è¡¨ç¤ºåˆ—è¡¨çš„ç¬¬äºŒä¸ªå…ƒç´ ï¼Œä»¥æ­¤ç±»æŽ¨ã€‚
     * ä½ ä¹Ÿå?¯ä»¥ä½¿ç”¨è´Ÿæ•°ä¸‹æ ‡ï¼Œä»¥ -1 è¡¨ç¤ºåˆ—è¡¨çš„æœ€å?Žä¸€ä¸ªå…ƒç´ ï¼Œ -2 è¡¨ç¤ºåˆ—è¡¨çš„å€’æ•°ç¬¬äºŒä¸ªå…ƒç´ ï¼Œä»¥æ­¤ç±»æŽ¨ã€‚
     * å¦‚æžœ key ä¸?æ˜¯åˆ—è¡¨ç±»åž‹ï¼Œè¿”å›žä¸€ä¸ªé”™è¯¯ã€‚
     */
    public <T> T lindex(Object key, long index) {

        return (T) valueFromBytes(jedisCluster.lindex(keyToBytes(key), index));

    }


    /**
     * è¿”å›žåˆ—è¡¨ key çš„é•¿åº¦ã€‚
     * å¦‚æžœ key ä¸?å­˜åœ¨ï¼Œåˆ™ key è¢«è§£é‡Šä¸ºä¸€ä¸ªç©ºåˆ—è¡¨ï¼Œè¿”å›ž 0 .
     * å¦‚æžœ key ä¸?æ˜¯åˆ—è¡¨ç±»åž‹ï¼Œè¿”å›žä¸€ä¸ªé”™è¯¯ã€‚
     */
    public Long llen(Object key) {

        return jedisCluster.llen(keyToBytes(key));

    }

    /**
     * ç§»é™¤å¹¶è¿”å›žåˆ—è¡¨ key çš„å¤´å…ƒç´ ã€‚
     */
    @SuppressWarnings("unchecked")
    public <T> T lpop(Object key) {

        return (T) valueFromBytes(jedisCluster.lpop(keyToBytes(key)));

    }

    /**
     * å°†ä¸€ä¸ªæˆ–å¤šä¸ªå€¼ value æ?’å…¥åˆ°åˆ—è¡¨ key çš„è¡¨å¤´
     * å¦‚æžœæœ‰å¤šä¸ª value å€¼ï¼Œé‚£ä¹ˆå?„ä¸ª value å€¼æŒ‰ä»Žå·¦åˆ°å?³çš„é¡ºåº?ä¾?æ¬¡æ?’å…¥åˆ°è¡¨å¤´ï¼š æ¯”å¦‚è¯´ï¼Œ
     * å¯¹ç©ºåˆ—è¡¨ mylist æ‰§è¡Œå‘½ä»¤ LPUSH mylist a b c ï¼Œåˆ—è¡¨çš„å€¼å°†æ˜¯ c b a ï¼Œ
     * è¿™ç­‰å?ŒäºŽåŽŸå­?æ€§åœ°æ‰§è¡Œ LPUSH mylist a ã€? LPUSH mylist b å’Œ LPUSH mylist c ä¸‰ä¸ªå‘½ä»¤ã€‚
     * å¦‚æžœ key ä¸?å­˜åœ¨ï¼Œä¸€ä¸ªç©ºåˆ—è¡¨ä¼šè¢«åˆ›å»ºå¹¶æ‰§è¡Œ LPUSH æ“?ä½œã€‚
     * å½“ key å­˜åœ¨ä½†ä¸?æ˜¯åˆ—è¡¨ç±»åž‹æ—¶ï¼Œè¿”å›žä¸€ä¸ªé”™è¯¯ã€‚
     */
    public Long lpush(Object key, Object... values) {

        return jedisCluster.lpush(keyToBytes(key), valuesToBytesArray(values));

    }

    /**
     * å°†åˆ—è¡¨ key ä¸‹æ ‡ä¸º index çš„å…ƒç´ çš„å€¼è®¾ç½®ä¸º value ã€‚
     * å½“ index å?‚æ•°è¶…å‡ºèŒƒå›´ï¼Œæˆ–å¯¹ä¸€ä¸ªç©ºåˆ—è¡¨( key ä¸?å­˜åœ¨)è¿›è¡Œ LSET æ—¶ï¼Œè¿”å›žä¸€ä¸ªé”™è¯¯ã€‚
     * å…³äºŽåˆ—è¡¨ä¸‹æ ‡çš„æ›´å¤šä¿¡æ?¯ï¼Œè¯·å?‚è€ƒ LINDEX å‘½ä»¤ã€‚
     */
    public String lset(Object key, long index, Object value) {

        return jedisCluster.lset(keyToBytes(key), index, valueToBytes(value));

    }

    /**
     * æ ¹æ?®å?‚æ•° count çš„å€¼ï¼Œç§»é™¤åˆ—è¡¨ä¸­ä¸Žå?‚æ•° value ç›¸ç­‰çš„å…ƒç´ ã€‚
     * count çš„å€¼å?¯ä»¥æ˜¯ä»¥ä¸‹å‡ ç§?ï¼š
     * count å¤§äºŽ 0 : ä»Žè¡¨å¤´å¼€å§‹å?‘è¡¨å°¾æ?œç´¢ï¼Œç§»é™¤ä¸Ž value ç›¸ç­‰çš„å…ƒç´ ï¼Œæ•°é‡?ä¸º count ã€‚
     * count å°?äºŽ 0 : ä»Žè¡¨å°¾å¼€å§‹å?‘è¡¨å¤´æ?œç´¢ï¼Œç§»é™¤ä¸Ž value ç›¸ç­‰çš„å…ƒç´ ï¼Œæ•°é‡?ä¸º count çš„ç»?å¯¹å€¼ã€‚
     * count ç­‰äºŽ 0 : ç§»é™¤è¡¨ä¸­æ‰€æœ‰ä¸Ž value ç›¸ç­‰çš„å€¼ã€‚
     */
    public Long lrem(Object key, long count, Object value) {

        return jedisCluster.lrem(keyToBytes(key), count, valueToBytes(value));

    }

    /**
     * è¿”å›žåˆ—è¡¨ key ä¸­æŒ‡å®šåŒºé—´å†…çš„å…ƒç´ ï¼ŒåŒºé—´ä»¥å??ç§»é‡? start å’Œ stop æŒ‡å®šã€‚
     * ä¸‹æ ‡(index)å?‚æ•° start å’Œ stop éƒ½ä»¥ 0 ä¸ºåº•ï¼Œä¹Ÿå°±æ˜¯è¯´ï¼Œä»¥ 0 è¡¨ç¤ºåˆ—è¡¨çš„ç¬¬ä¸€ä¸ªå…ƒç´ ï¼Œä»¥ 1 è¡¨ç¤ºåˆ—è¡¨çš„ç¬¬äºŒä¸ªå…ƒç´ ï¼Œä»¥æ­¤ç±»æŽ¨ã€‚
     * ä½ ä¹Ÿå?¯ä»¥ä½¿ç”¨è´Ÿæ•°ä¸‹æ ‡ï¼Œä»¥ -1 è¡¨ç¤ºåˆ—è¡¨çš„æœ€å?Žä¸€ä¸ªå…ƒç´ ï¼Œ -2 è¡¨ç¤ºåˆ—è¡¨çš„å€’æ•°ç¬¬äºŒä¸ªå…ƒç´ ï¼Œä»¥æ­¤ç±»æŽ¨ã€‚
     * <pre>
     * ä¾‹å­?ï¼š
     * èŽ·å?– list ä¸­æ‰€æœ‰æ•°æ?®ï¼šcache.lrange(listKey, 0, -1);
     * èŽ·å?– list ä¸­ä¸‹æ ‡ 1 åˆ° 3 çš„æ•°æ?®ï¼š cache.lrange(listKey, 1, 3);
     * </pre>
     */
    @SuppressWarnings("rawtypes")
    public List lrange(Object key, long start, long end) {

        List<byte[]> data = jedisCluster.lrange(keyToBytes(key), start, end);
        if (data != null) {
            return valueListFromBytesList(data);
        } else {
            return new ArrayList<byte[]>(0);
        }

    }

    /**
     * å¯¹ä¸€ä¸ªåˆ—è¡¨è¿›è¡Œä¿®å‰ª(trim)ï¼Œå°±æ˜¯è¯´ï¼Œè®©åˆ—è¡¨å?ªä¿?ç•™æŒ‡å®šåŒºé—´å†…çš„å…ƒç´ ï¼Œä¸?åœ¨æŒ‡å®šåŒºé—´ä¹‹å†…çš„å…ƒç´ éƒ½å°†è¢«åˆ é™¤ã€‚
     * ä¸¾ä¸ªä¾‹å­?ï¼Œæ‰§è¡Œå‘½ä»¤ LTRIM list 0 2 ï¼Œè¡¨ç¤ºå?ªä¿?ç•™åˆ—è¡¨ list çš„å‰?ä¸‰ä¸ªå…ƒç´ ï¼Œå…¶ä½™å…ƒç´ å…¨éƒ¨åˆ é™¤ã€‚
     * ä¸‹æ ‡(index)å?‚æ•° start å’Œ stop éƒ½ä»¥ 0 ä¸ºåº•ï¼Œä¹Ÿå°±æ˜¯è¯´ï¼Œä»¥ 0 è¡¨ç¤ºåˆ—è¡¨çš„ç¬¬ä¸€ä¸ªå…ƒç´ ï¼Œä»¥ 1 è¡¨ç¤ºåˆ—è¡¨çš„ç¬¬äºŒä¸ªå…ƒç´ ï¼Œä»¥æ­¤ç±»æŽ¨ã€‚
     * ä½ ä¹Ÿå?¯ä»¥ä½¿ç”¨è´Ÿæ•°ä¸‹æ ‡ï¼Œä»¥ -1 è¡¨ç¤ºåˆ—è¡¨çš„æœ€å?Žä¸€ä¸ªå…ƒç´ ï¼Œ -2 è¡¨ç¤ºåˆ—è¡¨çš„å€’æ•°ç¬¬äºŒä¸ªå…ƒç´ ï¼Œä»¥æ­¤ç±»æŽ¨ã€‚
     * å½“ key ä¸?æ˜¯åˆ—è¡¨ç±»åž‹æ—¶ï¼Œè¿”å›žä¸€ä¸ªé”™è¯¯ã€‚
     */
    public String ltrim(Object key, long start, long end) {

        return jedisCluster.ltrim(keyToBytes(key), start, end);

    }

    /**
     * ç§»é™¤å¹¶è¿”å›žåˆ—è¡¨ key çš„å°¾å…ƒç´ ã€‚
     */
    @SuppressWarnings("unchecked")
    public <T> T rpop(Object key) {

        return (T) valueFromBytes(jedisCluster.rpop(keyToBytes(key)));

    }

    /**
     * å‘½ä»¤ RPOPLPUSH åœ¨ä¸€ä¸ªåŽŸå­?æ—¶é—´å†…ï¼Œæ‰§è¡Œä»¥ä¸‹ä¸¤ä¸ªåŠ¨ä½œï¼š
     * å°†åˆ—è¡¨ source ä¸­çš„æœ€å?Žä¸€ä¸ªå…ƒç´ (å°¾å…ƒç´ )å¼¹å‡ºï¼Œå¹¶è¿”å›žç»™å®¢æˆ·ç«¯ã€‚
     * å°† source å¼¹å‡ºçš„å…ƒç´ æ?’å…¥åˆ°åˆ—è¡¨ destination ï¼Œä½œä¸º destination åˆ—è¡¨çš„çš„å¤´å…ƒç´ ã€‚
     */
    @SuppressWarnings("unchecked")
    public <T> T rpoplpush(Object srcKey, Object dstKey) {

        return (T) valueFromBytes(jedisCluster.rpoplpush(keyToBytes(srcKey), keyToBytes(dstKey)));

    }

    /**
     * å°†ä¸€ä¸ªæˆ–å¤šä¸ªå€¼ value æ?’å…¥åˆ°åˆ—è¡¨ key çš„è¡¨å°¾(æœ€å?³è¾¹)ã€‚
     * å¦‚æžœæœ‰å¤šä¸ª value å€¼ï¼Œé‚£ä¹ˆå?„ä¸ª value å€¼æŒ‰ä»Žå·¦åˆ°å?³çš„é¡ºåº?ä¾?æ¬¡æ?’å…¥åˆ°è¡¨å°¾ï¼šæ¯”å¦‚
     * å¯¹ä¸€ä¸ªç©ºåˆ—è¡¨ mylist æ‰§è¡Œ RPUSH mylist a b c ï¼Œå¾—å‡ºçš„ç»“æžœåˆ—è¡¨ä¸º a b c ï¼Œ
     * ç­‰å?ŒäºŽæ‰§è¡Œå‘½ä»¤ RPUSH mylist a ã€? RPUSH mylist b ã€? RPUSH mylist c ã€‚
     * å¦‚æžœ key ä¸?å­˜åœ¨ï¼Œä¸€ä¸ªç©ºåˆ—è¡¨ä¼šè¢«åˆ›å»ºå¹¶æ‰§è¡Œ RPUSH æ“?ä½œã€‚
     * å½“ key å­˜åœ¨ä½†ä¸?æ˜¯åˆ—è¡¨ç±»åž‹æ—¶ï¼Œè¿”å›žä¸€ä¸ªé”™è¯¯ã€‚
     */
    public Long rpush(Object key, Object... values) {

        return jedisCluster.rpush(keyToBytes(key), valuesToBytesArray(values));

    }

    /**
     * BLPOP æ˜¯åˆ—è¡¨çš„é˜»å¡žå¼?(blocking)å¼¹å‡ºåŽŸè¯­ã€‚
     * å®ƒæ˜¯ LPOP å‘½ä»¤çš„é˜»å¡žç‰ˆæœ¬ï¼Œå½“ç»™å®šåˆ—è¡¨å†…æ²¡æœ‰ä»»ä½•å…ƒç´ å?¯ä¾›å¼¹å‡ºçš„æ—¶å€™ï¼Œè¿žæŽ¥å°†è¢« BLPOP å‘½ä»¤é˜»å¡žï¼Œç›´åˆ°ç­‰å¾…è¶…æ—¶æˆ–å?‘çŽ°å?¯å¼¹å‡ºå…ƒç´ ä¸ºæ­¢ã€‚
     * å½“ç»™å®šå¤šä¸ª key å?‚æ•°æ—¶ï¼ŒæŒ‰å?‚æ•° key çš„å…ˆå?Žé¡ºåº?ä¾?æ¬¡æ£€æŸ¥å?„ä¸ªåˆ—è¡¨ï¼Œå¼¹å‡ºç¬¬ä¸€ä¸ªé?žç©ºåˆ—è¡¨çš„å¤´å…ƒç´ ã€‚
     */
    @SuppressWarnings("rawtypes")
    public List blpop(Object... keys) {
//        String[] keysStrings = new String[keys.length];
//        for (int i = 0; i < keys.length; i++) {
//            keysStrings[i] = keys[i].toString();
//        }
        
        List<byte[]> data = jedisCluster.blpop(timeout, keysToBytesArray(keys));

        if (data != null && data.size() == 2) {
            List<Object> objects = new ArrayList<>();
            objects.add(new String(data.get(0)));
            objects.add(valueFromBytes(data.get(1)));
            return objects;
        }

        return valueListFromBytesList(data);

    }

    /**
     * BLPOP æ˜¯åˆ—è¡¨çš„é˜»å¡žå¼?(blocking)å¼¹å‡ºåŽŸè¯­ã€‚
     * å®ƒæ˜¯ LPOP å‘½ä»¤çš„é˜»å¡žç‰ˆæœ¬ï¼Œå½“ç»™å®šåˆ—è¡¨å†…æ²¡æœ‰ä»»ä½•å…ƒç´ å?¯ä¾›å¼¹å‡ºçš„æ—¶å€™ï¼Œè¿žæŽ¥å°†è¢« BLPOP å‘½ä»¤é˜»å¡žï¼Œç›´åˆ°ç­‰å¾…è¶…æ—¶æˆ–å?‘çŽ°å?¯å¼¹å‡ºå…ƒç´ ä¸ºæ­¢ã€‚
     * å½“ç»™å®šå¤šä¸ª key å?‚æ•°æ—¶ï¼ŒæŒ‰å?‚æ•° key çš„å…ˆå?Žé¡ºåº?ä¾?æ¬¡æ£€æŸ¥å?„ä¸ªåˆ—è¡¨ï¼Œå¼¹å‡ºç¬¬ä¸€ä¸ªé?žç©ºåˆ—è¡¨çš„å¤´å…ƒç´ ã€‚
     */
    @SuppressWarnings("rawtypes")
    public List blpop(Integer timeout, Object... keys) {

        List<byte[]> data = jedisCluster.blpop(timeout, keysToBytesArray(keys));
        return valueListFromBytesList(data);

    }

    /**
     * BRPOP æ˜¯åˆ—è¡¨çš„é˜»å¡žå¼?(blocking)å¼¹å‡ºåŽŸè¯­ã€‚
     * å®ƒæ˜¯ RPOP å‘½ä»¤çš„é˜»å¡žç‰ˆæœ¬ï¼Œå½“ç»™å®šåˆ—è¡¨å†…æ²¡æœ‰ä»»ä½•å…ƒç´ å?¯ä¾›å¼¹å‡ºçš„æ—¶å€™ï¼Œè¿žæŽ¥å°†è¢« BRPOP å‘½ä»¤é˜»å¡žï¼Œç›´åˆ°ç­‰å¾…è¶…æ—¶æˆ–å?‘çŽ°å?¯å¼¹å‡ºå…ƒç´ ä¸ºæ­¢ã€‚
     * å½“ç»™å®šå¤šä¸ª key å?‚æ•°æ—¶ï¼ŒæŒ‰å?‚æ•° key çš„å…ˆå?Žé¡ºåº?ä¾?æ¬¡æ£€æŸ¥å?„ä¸ªåˆ—è¡¨ï¼Œå¼¹å‡ºç¬¬ä¸€ä¸ªé?žç©ºåˆ—è¡¨çš„å°¾éƒ¨å…ƒç´ ã€‚
     * å…³äºŽé˜»å¡žæ“?ä½œçš„æ›´å¤šä¿¡æ?¯ï¼Œè¯·æŸ¥çœ‹ BLPOP å‘½ä»¤ï¼Œ BRPOP é™¤äº†å¼¹å‡ºå…ƒç´ çš„ä½?ç½®å’Œ BLPOP ä¸?å?Œä¹‹å¤–ï¼Œå…¶ä»–è¡¨çŽ°ä¸€è‡´ã€‚
     */
    @SuppressWarnings("rawtypes")
    public List brpop(Object... keys) {

        List<byte[]> data = jedisCluster.brpop(timeout, keysToBytesArray(keys));
        return valueListFromBytesList(data);

    }

    /**
     * BRPOP æ˜¯åˆ—è¡¨çš„é˜»å¡žå¼?(blocking)å¼¹å‡ºåŽŸè¯­ã€‚
     * å®ƒæ˜¯ RPOP å‘½ä»¤çš„é˜»å¡žç‰ˆæœ¬ï¼Œå½“ç»™å®šåˆ—è¡¨å†…æ²¡æœ‰ä»»ä½•å…ƒç´ å?¯ä¾›å¼¹å‡ºçš„æ—¶å€™ï¼Œè¿žæŽ¥å°†è¢« BRPOP å‘½ä»¤é˜»å¡žï¼Œç›´åˆ°ç­‰å¾…è¶…æ—¶æˆ–å?‘çŽ°å?¯å¼¹å‡ºå…ƒç´ ä¸ºæ­¢ã€‚
     * å½“ç»™å®šå¤šä¸ª key å?‚æ•°æ—¶ï¼ŒæŒ‰å?‚æ•° key çš„å…ˆå?Žé¡ºåº?ä¾?æ¬¡æ£€æŸ¥å?„ä¸ªåˆ—è¡¨ï¼Œå¼¹å‡ºç¬¬ä¸€ä¸ªé?žç©ºåˆ—è¡¨çš„å°¾éƒ¨å…ƒç´ ã€‚
     * å…³äºŽé˜»å¡žæ“?ä½œçš„æ›´å¤šä¿¡æ?¯ï¼Œè¯·æŸ¥çœ‹ BLPOP å‘½ä»¤ï¼Œ BRPOP é™¤äº†å¼¹å‡ºå…ƒç´ çš„ä½?ç½®å’Œ BLPOP ä¸?å?Œä¹‹å¤–ï¼Œå…¶ä»–è¡¨çŽ°ä¸€è‡´ã€‚
     */
    @SuppressWarnings("rawtypes")
    public List brpop(Integer timeout, Object... keys) {

        List<byte[]> data = jedisCluster.brpop(timeout, keysToBytesArray(keys));
        return valueListFromBytesList(data);

    }

    /**
     * ä½¿ç”¨å®¢æˆ·ç«¯å?‘ JbootRedis æœ?åŠ¡å™¨å?‘é€?ä¸€ä¸ª PING ï¼Œå¦‚æžœæœ?åŠ¡å™¨è¿?ä½œæ­£å¸¸çš„è¯?ï¼Œä¼šè¿”å›žä¸€ä¸ª PONG ã€‚
     * é€šå¸¸ç”¨äºŽæµ‹è¯•ä¸Žæœ?åŠ¡å™¨çš„è¿žæŽ¥æ˜¯å?¦ä»?ç„¶ç”Ÿæ•ˆï¼Œæˆ–è€…ç”¨äºŽæµ‹é‡?å»¶è¿Ÿå€¼ã€‚
     */
    public String ping() {

        return jedisCluster.ping();

    }

    /**
     * å°†ä¸€ä¸ªæˆ–å¤šä¸ª member å…ƒç´ åŠ å…¥åˆ°é›†å?ˆ key å½“ä¸­ï¼Œå·²ç»?å­˜åœ¨äºŽé›†å?ˆçš„ member å…ƒç´ å°†è¢«å¿½ç•¥ã€‚
     * å?‡å¦‚ key ä¸?å­˜åœ¨ï¼Œåˆ™åˆ›å»ºä¸€ä¸ªå?ªåŒ…å?« member å…ƒç´ ä½œæˆ?å‘˜çš„é›†å?ˆã€‚
     * å½“ key ä¸?æ˜¯é›†å?ˆç±»åž‹æ—¶ï¼Œè¿”å›žä¸€ä¸ªé”™è¯¯ã€‚
     */
    public Long sadd(Object key, Object... members) {

        return jedisCluster.sadd(keyToBytes(key), valuesToBytesArray(members));

    }

    /**
     * è¿”å›žé›†å?ˆ key çš„åŸºæ•°(é›†å?ˆä¸­å…ƒç´ çš„æ•°é‡?)ã€‚
     */
    public Long scard(Object key) {

        return jedisCluster.scard(keyToBytes(key));

    }

    /**
     * ç§»é™¤å¹¶è¿”å›žé›†å?ˆä¸­çš„ä¸€ä¸ªéš?æœºå…ƒç´ ã€‚
     * å¦‚æžœå?ªæƒ³èŽ·å?–ä¸€ä¸ªéš?æœºå…ƒç´ ï¼Œä½†ä¸?æƒ³è¯¥å…ƒç´ ä»Žé›†å?ˆä¸­è¢«ç§»é™¤çš„è¯?ï¼Œå?¯ä»¥ä½¿ç”¨ SRANDMEMBER å‘½ä»¤ã€‚
     */
    @SuppressWarnings("unchecked")
    public <T> T spop(Object key) {

        return (T) valueFromBytes(jedisCluster.spop(keyToBytes(key)));

    }

    /**
     * è¿”å›žé›†å?ˆ key ä¸­çš„æ‰€æœ‰æˆ?å‘˜ã€‚
     * ä¸?å­˜åœ¨çš„ key è¢«è§†ä¸ºç©ºé›†å?ˆã€‚
     */
    @SuppressWarnings("rawtypes")
    public Set smembers(Object key) {

        Set<byte[]> data = jedisCluster.smembers(keyToBytes(key));
        Set<Object> result = new HashSet<Object>();
        valueSetFromBytesSet(data, result);
        return result;

    }

    /**
     * åˆ¤æ–­ member å…ƒç´ æ˜¯å?¦é›†å?ˆ key çš„æˆ?å‘˜ã€‚
     */
    public boolean sismember(Object key, Object member) {

        return jedisCluster.sismember(keyToBytes(key), valueToBytes(member));

    }

    /**
     * è¿”å›žå¤šä¸ªé›†å?ˆçš„äº¤é›†ï¼Œå¤šä¸ªé›†å?ˆç”± keys æŒ‡å®š
     */
    @SuppressWarnings("rawtypes")
    public Set sinter(Object... keys) {

        Set<byte[]> data = jedisCluster.sinter(keysToBytesArray(keys));
        Set<Object> result = new HashSet<Object>();
        valueSetFromBytesSet(data, result);
        return result;

    }

    /**
     * è¿”å›žé›†å?ˆä¸­çš„ä¸€ä¸ªéš?æœºå…ƒç´ ã€‚
     */
    @SuppressWarnings("unchecked")
    public <T> T srandmember(Object key) {

        return (T) valueFromBytes(jedisCluster.srandmember(keyToBytes(key)));

    }

    /**
     * è¿”å›žé›†å?ˆä¸­çš„ count ä¸ªéš?æœºå…ƒç´ ã€‚
     * ä»Ž JbootRedis 2.6 ç‰ˆæœ¬å¼€å§‹ï¼Œ SRANDMEMBER å‘½ä»¤æŽ¥å?—å?¯é€‰çš„ count å?‚æ•°ï¼š
     * å¦‚æžœ count ä¸ºæ­£æ•°ï¼Œä¸”å°?äºŽé›†å?ˆåŸºæ•°ï¼Œé‚£ä¹ˆå‘½ä»¤è¿”å›žä¸€ä¸ªåŒ…å?« count ä¸ªå…ƒç´ çš„æ•°ç»„ï¼Œæ•°ç»„ä¸­çš„å…ƒç´ å?„ä¸?ç›¸å?Œã€‚
     * å¦‚æžœ count å¤§äºŽç­‰äºŽé›†å?ˆåŸºæ•°ï¼Œé‚£ä¹ˆè¿”å›žæ•´ä¸ªé›†å?ˆã€‚
     * å¦‚æžœ count ä¸ºè´Ÿæ•°ï¼Œé‚£ä¹ˆå‘½ä»¤è¿”å›žä¸€ä¸ªæ•°ç»„ï¼Œæ•°ç»„ä¸­çš„å…ƒç´ å?¯èƒ½ä¼šé‡?å¤?å‡ºçŽ°å¤šæ¬¡ï¼Œè€Œæ•°ç»„çš„é•¿åº¦ä¸º count çš„ç»?å¯¹å€¼ã€‚
     * è¯¥æ“?ä½œå’Œ SPOP ç›¸ä¼¼ï¼Œä½† SPOP å°†éš?æœºå…ƒç´ ä»Žé›†å?ˆä¸­ç§»é™¤å¹¶è¿”å›žï¼Œè€Œ SRANDMEMBER åˆ™ä»…ä»…è¿”å›žéš?æœºå…ƒç´ ï¼Œè€Œä¸?å¯¹é›†å?ˆè¿›è¡Œä»»ä½•æ”¹åŠ¨ã€‚
     */
    @SuppressWarnings("rawtypes")
    public List srandmember(Object key, int count) {

        List<byte[]> data = jedisCluster.srandmember(keyToBytes(key), count);
        return valueListFromBytesList(data);

    }

    /**
     * ç§»é™¤é›†å?ˆ key ä¸­çš„ä¸€ä¸ªæˆ–å¤šä¸ª member å…ƒç´ ï¼Œä¸?å­˜åœ¨çš„ member å…ƒç´ ä¼šè¢«å¿½ç•¥ã€‚
     */
    public Long srem(Object key, Object... members) {

        return jedisCluster.srem(keyToBytes(key), valuesToBytesArray(members));

    }

    /**
     * è¿”å›žå¤šä¸ªé›†å?ˆçš„å¹¶é›†ï¼Œå¤šä¸ªé›†å?ˆç”± keys æŒ‡å®š
     * ä¸?å­˜åœ¨çš„ key è¢«è§†ä¸ºç©ºé›†ã€‚
     */
    @SuppressWarnings("rawtypes")
    public Set sunion(Object... keys) {

        Set<byte[]> data = jedisCluster.sunion(keysToBytesArray(keys));
        Set<Object> result = new HashSet<Object>();
        valueSetFromBytesSet(data, result);
        return result;

    }

    /**
     * è¿”å›žä¸€ä¸ªé›†å?ˆçš„å…¨éƒ¨æˆ?å‘˜ï¼Œè¯¥é›†å?ˆæ˜¯æ‰€æœ‰ç»™å®šé›†å?ˆä¹‹é—´çš„å·®é›†ã€‚
     * ä¸?å­˜åœ¨çš„ key è¢«è§†ä¸ºç©ºé›†ã€‚
     */
    @SuppressWarnings("rawtypes")
    public Set sdiff(Object... keys) {

        Set<byte[]> data = jedisCluster.sdiff(keysToBytesArray(keys));
        Set<Object> result = new HashSet<Object>();
        valueSetFromBytesSet(data, result);
        return result;

    }

    /**
     * å°†ä¸€ä¸ªæˆ–å¤šä¸ª member å…ƒç´ å?Šå…¶ score å€¼åŠ å…¥åˆ°æœ‰åº?é›† key å½“ä¸­ã€‚
     * å¦‚æžœæŸ?ä¸ª member å·²ç»?æ˜¯æœ‰åº?é›†çš„æˆ?å‘˜ï¼Œé‚£ä¹ˆæ›´æ–°è¿™ä¸ª member çš„ score å€¼ï¼Œ
     * å¹¶é€šè¿‡é‡?æ–°æ?’å…¥è¿™ä¸ª member å…ƒç´ ï¼Œæ?¥ä¿?è¯?è¯¥ member åœ¨æ­£ç¡®çš„ä½?ç½®ä¸Šã€‚
     */
    public Long zadd(Object key, double score, Object member) {

        return jedisCluster.zadd(keyToBytes(key), score, valueToBytes(member));

    }

    public Long zadd(Object key, Map<Object, Double> scoreMembers) {

        Map<byte[], Double> para = new HashMap<byte[], Double>();
        for (Entry<Object, Double> e : scoreMembers.entrySet())
            para.put(valueToBytes(e.getKey()), e.getValue());    // valueToBytes is important
        return jedisCluster.zadd(keyToBytes(key), para);

    }

    /**
     * è¿”å›žæœ‰åº?é›† key çš„åŸºæ•°ã€‚
     */
    public Long zcard(Object key) {

        return jedisCluster.zcard(keyToBytes(key));

    }

    /**
     * è¿”å›žæœ‰åº?é›† key ä¸­ï¼Œ score å€¼åœ¨ min å’Œ max ä¹‹é—´(é»˜è®¤åŒ…æ‹¬ score å€¼ç­‰äºŽ min æˆ– max )çš„æˆ?å‘˜çš„æ•°é‡?ã€‚
     * å…³äºŽå?‚æ•° min å’Œ max çš„è¯¦ç»†ä½¿ç”¨æ–¹æ³•ï¼Œè¯·å?‚è€ƒ ZRANGEBYSCORE å‘½ä»¤ã€‚
     */
    public Long zcount(Object key, double min, double max) {

        return jedisCluster.zcount(keyToBytes(key), min, max);

    }

    /**
     * ä¸ºæœ‰åº?é›† key çš„æˆ?å‘˜ member çš„ score å€¼åŠ ä¸Šå¢žé‡? increment ã€‚
     */
    public Double zincrby(Object key, double score, Object member) {

        return jedisCluster.zincrby(keyToBytes(key), score, valueToBytes(member));

    }

    /**
     * è¿”å›žæœ‰åº?é›† key ä¸­ï¼ŒæŒ‡å®šåŒºé—´å†…çš„æˆ?å‘˜ã€‚
     * å…¶ä¸­æˆ?å‘˜çš„ä½?ç½®æŒ‰ score å€¼é€’å¢ž(ä»Žå°?åˆ°å¤§)æ?¥æŽ’åº?ã€‚
     * å…·æœ‰ç›¸å?Œ score å€¼çš„æˆ?å‘˜æŒ‰å­—å…¸åº?(lexicographical order )æ?¥æŽ’åˆ—ã€‚
     * å¦‚æžœä½ éœ€è¦?æˆ?å‘˜æŒ‰ score å€¼é€’å‡?(ä»Žå¤§åˆ°å°?)æ?¥æŽ’åˆ—ï¼Œè¯·ä½¿ç”¨ ZREVRANGE å‘½ä»¤ã€‚
     */
    @SuppressWarnings("rawtypes")
    public Set zrange(Object key, long start, long end) {

        Set<byte[]> data = jedisCluster.zrange(keyToBytes(key), start, end);
        Set<Object> result = new LinkedHashSet<Object>();    // æœ‰åº?é›†å?ˆå¿…é¡» LinkedHashSet
        valueSetFromBytesSet(data, result);
        return result;

    }

    /**
     * è¿”å›žæœ‰åº?é›† key ä¸­ï¼ŒæŒ‡å®šåŒºé—´å†…çš„æˆ?å‘˜ã€‚
     * å…¶ä¸­æˆ?å‘˜çš„ä½?ç½®æŒ‰ score å€¼é€’å‡?(ä»Žå¤§åˆ°å°?)æ?¥æŽ’åˆ—ã€‚
     * å…·æœ‰ç›¸å?Œ score å€¼çš„æˆ?å‘˜æŒ‰å­—å…¸åº?çš„é€†åº?(reverse lexicographical order)æŽ’åˆ—ã€‚
     * é™¤äº†æˆ?å‘˜æŒ‰ score å€¼é€’å‡?çš„æ¬¡åº?æŽ’åˆ—è¿™ä¸€ç‚¹å¤–ï¼Œ ZREVRANGE å‘½ä»¤çš„å…¶ä»–æ–¹é?¢å’Œ ZRANGE å‘½ä»¤ä¸€æ ·ã€‚
     */
    @SuppressWarnings("rawtypes")
    public Set zrevrange(Object key, long start, long end) {

        Set<byte[]> data = jedisCluster.zrevrange(keyToBytes(key), start, end);
        Set<Object> result = new LinkedHashSet<Object>();    // æœ‰åº?é›†å?ˆå¿…é¡» LinkedHashSet
        valueSetFromBytesSet(data, result);
        return result;

    }

    /**
     * è¿”å›žæœ‰åº?é›† key ä¸­ï¼Œæ‰€æœ‰ score å€¼ä»‹äºŽ min å’Œ max ä¹‹é—´(åŒ…æ‹¬ç­‰äºŽ min æˆ– max )çš„æˆ?å‘˜ã€‚
     * æœ‰åº?é›†æˆ?å‘˜æŒ‰ score å€¼é€’å¢ž(ä»Žå°?åˆ°å¤§)æ¬¡åº?æŽ’åˆ—ã€‚
     */
    @SuppressWarnings("rawtypes")
    public Set zrangeByScore(Object key, double min, double max) {

        Set<byte[]> data = jedisCluster.zrangeByScore(keyToBytes(key), min, max);
        Set<Object> result = new LinkedHashSet<Object>();    // æœ‰åº?é›†å?ˆå¿…é¡» LinkedHashSet
        valueSetFromBytesSet(data, result);
        return result;

    }

    /**
     * è¿”å›žæœ‰åº?é›† key ä¸­æˆ?å‘˜ member çš„æŽ’å??ã€‚å…¶ä¸­æœ‰åº?é›†æˆ?å‘˜æŒ‰ score å€¼é€’å¢ž(ä»Žå°?åˆ°å¤§)é¡ºåº?æŽ’åˆ—ã€‚
     * æŽ’å??ä»¥ 0 ä¸ºåº•ï¼Œä¹Ÿå°±æ˜¯è¯´ï¼Œ score å€¼æœ€å°?çš„æˆ?å‘˜æŽ’å??ä¸º 0 ã€‚
     * ä½¿ç”¨ ZREVRANK å‘½ä»¤å?¯ä»¥èŽ·å¾—æˆ?å‘˜æŒ‰ score å€¼é€’å‡?(ä»Žå¤§åˆ°å°?)æŽ’åˆ—çš„æŽ’å??ã€‚
     */
    public Long zrank(Object key, Object member) {

        return jedisCluster.zrank(keyToBytes(key), valueToBytes(member));

    }

    /**
     * è¿”å›žæœ‰åº?é›† key ä¸­æˆ?å‘˜ member çš„æŽ’å??ã€‚å…¶ä¸­æœ‰åº?é›†æˆ?å‘˜æŒ‰ score å€¼é€’å‡?(ä»Žå¤§åˆ°å°?)æŽ’åº?ã€‚
     * æŽ’å??ä»¥ 0 ä¸ºåº•ï¼Œä¹Ÿå°±æ˜¯è¯´ï¼Œ score å€¼æœ€å¤§çš„æˆ?å‘˜æŽ’å??ä¸º 0 ã€‚
     * ä½¿ç”¨ ZRANK å‘½ä»¤å?¯ä»¥èŽ·å¾—æˆ?å‘˜æŒ‰ score å€¼é€’å¢ž(ä»Žå°?åˆ°å¤§)æŽ’åˆ—çš„æŽ’å??ã€‚
     */
    public Long zrevrank(Object key, Object member) {

        return jedisCluster.zrevrank(keyToBytes(key), valueToBytes(member));

    }

    /**
     * ç§»é™¤æœ‰åº?é›† key ä¸­çš„ä¸€ä¸ªæˆ–å¤šä¸ªæˆ?å‘˜ï¼Œä¸?å­˜åœ¨çš„æˆ?å‘˜å°†è¢«å¿½ç•¥ã€‚
     * å½“ key å­˜åœ¨ä½†ä¸?æ˜¯æœ‰åº?é›†ç±»åž‹æ—¶ï¼Œè¿”å›žä¸€ä¸ªé”™è¯¯ã€‚
     */
    public Long zrem(Object key, Object... members) {

        return jedisCluster.zrem(keyToBytes(key), valuesToBytesArray(members));

    }

    /**
     * è¿”å›žæœ‰åº?é›† key ä¸­ï¼Œæˆ?å‘˜ member çš„ score å€¼ã€‚
     * å¦‚æžœ member å…ƒç´ ä¸?æ˜¯æœ‰åº?é›† key çš„æˆ?å‘˜ï¼Œæˆ– key ä¸?å­˜åœ¨ï¼Œè¿”å›ž nil ã€‚
     */
    public Double zscore(Object key, Object member) {

        return jedisCluster.zscore(keyToBytes(key), valueToBytes(member));

    }

    /**
     * å?‘å¸ƒ
     *
     * @param channel
     * @param message
     */
    public void publish(String channel, String message) {

        jedisCluster.publish(channel, message);

    }

    /**
     * å?‘å¸ƒ
     *
     * @param channel
     * @param message
     */
    public void publish(byte[] channel, byte[] message) {

        jedisCluster.publish(channel, message);

    }


    /**
     * è®¢é˜…
     *
     * @param listener
     * @param channels
     */
    public void subscribe(JedisPubSub listener, final String... channels) {
        /**
         * https://github.com/xetorthio/jedis/wiki/AdvancedUsage
         * Note that subscribe is a blocking operation because it will poll JbootRedis for responses on the thread that calls subscribe.
         * A single JedisPubSub instance can be used to subscribe to multiple channels.
         * You can call subscribe or psubscribe on an existing JedisPubSub instance to change your subscriptions.
         */
        new Thread("jboot-redisCluster-subscribe-JedisPubSub") {
            @Override
            public void run() {
                while (true) {
                    //è®¢é˜…çº¿ç¨‹æ–­å¼€è¿žæŽ¥ï¼Œéœ€è¦?è¿›è¡Œé‡?è¿ž
                    try {
                        jedisCluster.subscribe(listener, channels);
                        LOG.warn("Disconnect to redis channel in subscribe JedisPubSub!");
                        break;
                    } catch (JedisConnectionException e) {
                        LOG.error("failed connect to redis, reconnect it.", e);
                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException ie) {
                            break;
                        }
                    }
                }
            }
        }.start();
    }

    /**
     * è®¢é˜…
     *
     * @param binaryListener
     * @param channels
     */
    public void subscribe(BinaryJedisPubSub binaryListener, final byte[]... channels) {
        /**
         * https://github.com/xetorthio/jedis/wiki/AdvancedUsage
         * Note that subscribe is a blocking operation because it will poll JbootRedis for responses on the thread that calls subscribe.
         * A single JedisPubSub instance can be used to subscribe to multiple channels.
         * You can call subscribe or psubscribe on an existing JedisPubSub instance to change your subscriptions.
         */
        new Thread("jboot-redisCluster-subscribe-BinaryJedisPubSub") {
            @Override
            public void run() {
                while (true) {
                    //è®¢é˜…çº¿ç¨‹æ–­å¼€è¿žæŽ¥ï¼Œéœ€è¦?è¿›è¡Œé‡?è¿ž
                    try {
                        jedisCluster.subscribe(binaryListener, channels);
                        LOG.warn("Disconnect to redis channel in subscribe BinaryJedisPubSub!");
                        break;
                    } catch (Throwable e) {
                        LOG.error("failed connect to redis, reconnect it.", e);
                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException ie) {
                            break;
                        }
                    }
                }
            }
        }.start();
    }


    public JedisCluster getJedisCluster() {
        return jedisCluster;
    }

}






