package com.roncoo.pay.trade.utils.alipay.util;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.httpclient.methods.multipart.FilePartSource;
import org.apache.commons.httpclient.methods.multipart.PartSource;

import java.io.File;
import java.io.IOException;
import java.util.*;

/* *
 *ç±»å??ï¼šAlipayFunction
 *åŠŸèƒ½ï¼šæ”¯ä»˜å®?æŽ¥å?£å…¬ç”¨å‡½æ•°ç±»
 *è¯¦ç»†ï¼šè¯¥ç±»æ˜¯è¯·æ±‚ã€?é€šçŸ¥è¿”å›žä¸¤ä¸ªæ–‡ä»¶æ‰€è°ƒç”¨çš„å…¬ç”¨å‡½æ•°æ ¸å¿ƒå¤„ç?†æ–‡ä»¶ï¼Œä¸?éœ€è¦?ä¿®æ”¹
 *ç‰ˆæœ¬ï¼š3.3
 *æ—¥æœŸï¼š2012-08-14
 *è¯´æ˜Žï¼š
 *ä»¥ä¸‹ä»£ç ?å?ªæ˜¯ä¸ºäº†æ–¹ä¾¿å•†æˆ·æµ‹è¯•è€Œæ??ä¾›çš„æ ·ä¾‹ä»£ç ?ï¼Œå•†æˆ·å?¯ä»¥æ ¹æ?®è‡ªå·±ç½‘ç«™çš„éœ€è¦?ï¼ŒæŒ‰ç…§æŠ€æœ¯æ–‡æ¡£ç¼–å†™,å¹¶é?žä¸€å®šè¦?ä½¿ç”¨è¯¥ä»£ç ?ã€‚
 *è¯¥ä»£ç ?ä»…ä¾›å­¦ä¹ å’Œç ”ç©¶æ”¯ä»˜å®?æŽ¥å?£ä½¿ç”¨ï¼Œå?ªæ˜¯æ??ä¾›ä¸€ä¸ªå?‚è€ƒã€‚
 */

public class AlipayCore {

    /** ç§?æœ‰æž„é€ å‡½æ•° **/
    private AlipayCore(){}

    /** 
     * é™¤åŽ»æ•°ç»„ä¸­çš„ç©ºå€¼å’Œç­¾å??å?‚æ•°
     * @param sArray ç­¾å??å?‚æ•°ç»„
     * @return åŽ»æŽ‰ç©ºå€¼ä¸Žç­¾å??å?‚æ•°å?Žçš„æ–°ç­¾å??å?‚æ•°ç»„
     */
    public static Map<String, String> paraFilter(Map<String, String> sArray) {

        Map<String, String> result = new HashMap<String, String>();

        if (sArray == null || sArray.isEmpty()) {
            return result;
        }

        for (String key : sArray.keySet()) {
            String value = sArray.get(key);
            if (value == null || "".equals(value) || "sign".equalsIgnoreCase(key)
                || "sign_type".equalsIgnoreCase(key)) {
                continue;
            }
            result.put(key, value);
        }

        return result;
    }

    /** 
     * æŠŠæ•°ç»„æ‰€æœ‰å…ƒç´ æŽ’åº?ï¼Œå¹¶æŒ‰ç…§â€œå?‚æ•°=å?‚æ•°å€¼â€?çš„æ¨¡å¼?ç”¨â€œ&â€?å­—ç¬¦æ‹¼æŽ¥æˆ?å­—ç¬¦ä¸²
     * @param params éœ€è¦?æŽ’åº?å¹¶å?‚ä¸Žå­—ç¬¦æ‹¼æŽ¥çš„å?‚æ•°ç»„
     * @return æ‹¼æŽ¥å?Žå­—ç¬¦ä¸²
     */
    public static String createLinkString(Map<String, String> params) {

        List<String> keys = new ArrayList<String>(params.keySet());
        Collections.sort(keys);

        String prestr = "";

        for (int i = 0; i < keys.size(); i++) {
            String key = keys.get(i);
            String value = params.get(key);

            if (i == keys.size() - 1) {//æ‹¼æŽ¥æ—¶ï¼Œä¸?åŒ…æ‹¬æœ€å?Žä¸€ä¸ª&å­—ç¬¦
                prestr = prestr + key + "=" + value;
            } else {
                prestr = prestr + key + "=" + value + "&";
            }
        }

        return prestr;
    }

    /**
     * ç”Ÿæˆ?æ–‡ä»¶æ‘˜è¦?
     * @param strFilePath æ–‡ä»¶è·¯å¾„
     * @param file_digest_type æ‘˜è¦?ç®—æ³•
     * @return æ–‡ä»¶æ‘˜è¦?ç»“æžœ
     */
    public static String getAbstract(String strFilePath, String file_digest_type) throws IOException {
        PartSource file = new FilePartSource(new File(strFilePath));
    	if("MD5".equals(file_digest_type)){
    		return DigestUtils.md5Hex(file.createInputStream());
    	}
    	else if("SHA".equals(file_digest_type)) {
    		return DigestUtils.sha256Hex(file.createInputStream());
    	}
    	else {
    		return "";
    	}
    }
}
