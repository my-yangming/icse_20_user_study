package com.cg.baseproject.utils;

import android.util.Log;

import com.cg.baseproject.manager.AppLogMessageMgr;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;
import java.net.URL;
import java.net.URLConnection;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.sql.Timestamp;

/**
 * TimeUtils
 * 
 * @author <a href="http://www.trinea.cn" target="_blank">Trinea</a> 2013-8-24
 */
public class DateUtils {

    private static long calendarLong = 1533081600000L;
    private static String calendar = "CalendarDay{2018-7-6}";
    public static void main(String[] args) {
        System.out.println(getCurrentDateBefore30Day());
    }
    
    public static String formatCanlendar(String calendar){
        return calendar.substring(calendar.indexOf("{")+1,calendar.indexOf("}"));
    }
    
	public static final SimpleDateFormat DEFAULT_DATE_FORMAT = new SimpleDateFormat(
			"yyyy-MM-dd HH:mm:ss");
	public static final SimpleDateFormat DATE_FORMAT_DATE = new SimpleDateFormat(
			"yyyy-MM-dd");
	/** å®šä¹‰å¸¸é‡? **/
	public static final String DATE_JFP_STR = "yyyyMM";
	public static final String DATE_FULL_STR = "yyyy-MM-dd HH:mm:ss";
	public static final String DATE_SMALL_STR = "yyyy-MM-dd";
	public static final String DATE_KEY_STR = "yyMMddHHmmss";
	static final String formatPattern = "yyyy-MM-dd";

	static final String formatPattern_Short = "yyyyMMdd";

	private static final long serialVersionUID = 1L;

    /**
     * èŽ·å?–ç³»ç»Ÿæ—¶é—´(æ ¼å¼?ï¼šyyyyMMddHHmmss)
     * @return String è¿”å›žæ—¶é—´
     */
    public static String getNowTime() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
        return sdf.format(Calendar.getInstance().getTime());
    }

    /**
     * èŽ·å?–ç³»ç»Ÿæ—¶é—´(æ ¼å¼?ï¼šyyyyMMddHHmmss)
     * @return String è¿”å›žæ—¶é—´
     */
    public static String getStringTime() {
        SimpleDateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");
        return df.format(new Date());
    }

    /**
     * èŽ·å?–ç³»ç»Ÿæ—¶é—´(æ ¼å¼?ï¼šyyyyMMddHHmmssSSS)
     * @return String è¿”å›žæ—¶é—´
     */
    public static String getStringTimeFull() {
        SimpleDateFormat df = new SimpleDateFormat("yyyyMMddHHmmssSSS");
        return df.format(new Date());
    }

    /**
     * åˆ¤æ–­æ—¥æœŸæ˜¯å?¦å±žäºŽä»Šå¤©æ—¥æœŸ(ç²¾ç¡®åˆ°å¤©)
     * @param sDate æ—¥æœŸå€¼
     * @return boolean è¿”å›žtrueè¡¨ç¤ºæ˜¯ï¼Œfalseè¡¨ç¤ºä¸?æ˜¯
     */
    public static boolean getSysIsToday(String sDate) {
        boolean falg = false;
        try {
            Date date = null;
            date = dateFormaterFull.get().parse(sDate);
            Date today = new Date();
            if (date != null) {
                String nowDate = dateFormater.get().format(today);
                String timeDate = dateFormater.get().format(date);
                if (nowDate.equals(timeDate)) {
                    falg = true;
                }
            }
        } catch (ParseException e) {
            e.printStackTrace();
            AppLogMessageMgr.e("AppSysDateMgr-->>getSysIsToday", e.getMessage().toString());
        }
        return falg;
    }

    private final static ThreadLocal<SimpleDateFormat> dateFormater = new ThreadLocal<SimpleDateFormat>() {
        @Override
        protected SimpleDateFormat initialValue() {
            return new SimpleDateFormat("yyyy-MM-dd");
        }
    };
    
    private final static ThreadLocal<SimpleDateFormat> dateFormaterFull = new ThreadLocal<SimpleDateFormat>() {
        @Override
        protected SimpleDateFormat initialValue() {
            return new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        }
    };
    
    /**
     * æ£€æŸ¥æ—¥æœŸæ˜¯å?¦æœ‰æ•ˆ
     * @param year å¹´
     * @param month æœˆ
     * @param day æ—¥
     * @return boolean
     */
    public static boolean getDateIsTrue(String year, String month, String day){
        try {
            String data = year + month + day;
            SimpleDateFormat simpledateformat = new SimpleDateFormat("yyyyMMdd");
            simpledateformat.setLenient(false);
            simpledateformat.parse(data);
        } catch (ParseException e) {
            e.printStackTrace();
            AppLogMessageMgr.e("AppSysDateMgr-->>getDateIsTrue", e.getMessage().toString());
            return false;
        }
        return true;
    }

    /**
     * åˆ¤æ–­ä¸¤ä¸ªå­—ç¬¦ä¸²æ—¥æœŸçš„å‰?å?Ž
     * @param strdate1  å­—ç¬¦ä¸²æ—¶é—´1
     * @param strdate2  å­—ç¬¦ä¸²æ—¶é—´2
     * @return boolean
     * æ—¥æœŸä¸Žæ—¶é—´
     */
    public static boolean getDateIsBefore(String strdate1, String strdate2){
        try {
            SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            AppLogMessageMgr.i("AppSysDateMgr-->>getDateIsBefore-->>strdate1: ", strdate1);
            AppLogMessageMgr.i("AppSysDateMgr-->>getDateIsBefore-->>strdate2: ", strdate2);
            return df.parse(strdate1).before(df.parse(strdate2));
        } catch (ParseException e) {
            e.printStackTrace();
            AppLogMessageMgr.e("AppSysDateMgr-->>getDateIsBefore", e.getMessage().toString());
            return false;
        }
    }
    /**
     * åˆ¤æ–­ä¸¤ä¸ªå­—ç¬¦ä¸²æ—¥æœŸçš„å‰?å?Ž
     * @param strdate1  å­—ç¬¦ä¸²æ—¶é—´1
     * @param strdate2  å­—ç¬¦ä¸²æ—¶é—´2
     * @return boolean
     */
    public static boolean getDateIsEqual(String strdate1, String strdate2){
        try {
            SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            return df.parse(strdate1).equals(df.parse(strdate2));
        } catch (ParseException e) {
            e.printStackTrace();
            AppLogMessageMgr.e("AppSysDateMgr-->>getDateIsBefore", e.getMessage().toString());
            return false;
        }
    }

    /**
     * åˆ¤æ–­ä¸¤ä¸ªå­—ç¬¦ä¸²æ—¥æœŸçš„å‰?å?Ž
     * @param Longdate1  å­—ç¬¦ä¸²æ—¶é—´1
     * @param Longdate2  å­—ç¬¦ä¸²æ—¶é—´2
     * @return boolean
     */
    public static boolean getDateIsBefore(Long Longdate1, Long Longdate2){
        try {
            AppLogMessageMgr.i("AppSysDateMgr-->>getDateIsBefore-->>strdate1: ", Longdate1 + "");
            AppLogMessageMgr.i("AppSysDateMgr-->>getDateIsBefore-->>strdate2: ", Longdate2 + "");
            Longdate1 = (null == Longdate1) ? 0 : Longdate1;
            Longdate2 = (null == Longdate2) ? 0 : Longdate2;
            return  Longdate1 > Longdate2 ? true : false;
        } catch (Exception e) {
            e.printStackTrace();
            AppLogMessageMgr.e("AppSysDateMgr-->>getDateIsBefore", e.getMessage().toString());
            return false;
        }
    }

    /**
     * åˆ¤æ–­ä¸¤ä¸ªæ—¶é—´æ—¥æœŸçš„å‰?å?Ž
     * @param date1  æ—¥æœŸ1
     * @param date2  æ—¥æœŸ2
     * @return boolean
     */
    public static boolean getDateIsBefore(Date date1, Date date2) {
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        return getDateIsBefore(df.format(date1), df.format(date2));
    }
    
	/**
	 * å¾—åˆ°å½“å‰?å¹´
	 * 
	 * @return
	 */
	public static int getCurrYear() {
		Calendar cal = Calendar.getInstance();
		return cal.get(Calendar.YEAR);
	}

	/**
	 * å¾—åˆ°å½“å‰?æœˆä»½ æ³¨æ„?ï¼Œè¿™é‡Œçš„æœˆä»½ä¾?ç„¶æ˜¯ä»Ž0å¼€å§‹çš„
	 * 
	 * @return
	 */
	public static int getCurrMonth() {
		Calendar cal = Calendar.getInstance();
		return cal.get(Calendar.MONTH);
	}

	/**
	 * å¾—åˆ°å½“å‰?æ—¥
	 * 
	 * @return
	 */
	public static int getCurrDay() {
		Calendar cal = Calendar.getInstance();
		return cal.get(Calendar.DAY_OF_MONTH);
	}

	/**
	 * å¾—åˆ°å½“å‰?æ˜ŸæœŸ
	 * 
	 * @return
	 */
	public static int getCurrWeek() {
		Calendar cal = Calendar.getInstance();
		return cal.get(Calendar.DAY_OF_WEEK);
	}

	/**
	 * å¾—åˆ°å½“å‰?å°?æ—¶
	 * 
	 * @return
	 */
	public static int getCurrHour() {
		Calendar cal = Calendar.getInstance();
		return cal.get(Calendar.HOUR);
	}

	/**
	 * å¾—åˆ°å½“å‰?åˆ†é’Ÿ
	 * 
	 * @return
	 */
	public static int getCurrMinute() {
		Calendar cal = Calendar.getInstance();
		return cal.get(Calendar.MINUTE);
	}

	/**
	 * å¾—åˆ°å½“å‰?ç§’
	 * 
	 * @return
	 */
	public static int getCurrSecond() {
		Calendar cal = Calendar.getInstance();
		return cal.get(Calendar.SECOND);
	}

	/**
	 * Dateç±»åž‹è½¬æ?¢åˆ°Calendarç±»åž‹
	 * 
	 * @param date
	 * @return
	 */
	public static Calendar Date2Calendar(Date date) {
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		return cal;
	}

	/**
	 * Calendarç±»åž‹è½¬æ?¢åˆ°Dateç±»åž‹
	 * 
	 * @param cal
	 * @return
	 */
	public static Date calendar2Date(Calendar cal) {
		return cal.getTime();
	}

	/**
	 * Dateç±»åž‹è½¬æ?¢åˆ°Timestampç±»åž‹
	 * 
	 * @param date
	 * @return
	 */
	public static Timestamp date2Timestamp(Date date) {
		return new Timestamp(date.getTime());
	}

	/**
	 * Calendarç±»åž‹è½¬æ?¢åˆ°Timestampç±»åž‹
	 * 
	 * @return
	 */
	public static Timestamp calendar2Timestamp(Calendar cal) {
		return new Timestamp(cal.getTimeInMillis());
	}

	/**
	 * Timestampç±»åž‹è½¬æ?¢åˆ°Calendarç±»åž‹
	 * 
	 * @param timestamp
	 * @return
	 */
	public static Calendar timestamp2Calendar(Timestamp timestamp) {
		Calendar cal = Calendar.getInstance();
		cal.setTime(timestamp);
		return cal;
	}

	/**
	 * å¾—åˆ°å½“å‰?æ—¶é—´çš„æ¯«ç§’æ•°
	 * 
	 * @return
	 */
	public static Long getCurrentTimeMillis() {
		return System.currentTimeMillis();
	}

	/**
	 * èŽ·å?–ä»»æ„?æ—¶é—´å?Žnumå¤©çš„æ—¶é—´
	 * 
	 * @param date
	 *            java.util.Date
	 * @param num
	 * @return
	 */
	public static Date nextDate(Date date, int num) {
		Calendar cla = Calendar.getInstance();
		cla.setTime(date);
		cla.add(Calendar.DAY_OF_YEAR, num);
		return cla.getTime();
	}

	/**
	 * èŽ·å?–ä»»æ„?æ—¶é—´å?Žnumå¤©çš„æ—¶é—´
	 * 
	 * @param date
	 *            String; <br>
	 *            æ ¼å¼?æ”¯æŒ?ï¿½?<br>
	 *            yyyy-MM-dd HH:mm:ss <br>
	 *            yyyyå¹´MMæœˆddæ—¥HHæ—¶mmåˆ†ssï¿½?<br>
	 *            yyyy/MM/dd HH:mm:ss <br>
	 *            é»˜è®¤æ—¶é—´æ ¼å¼?
	 * @param num
	 *            int
	 * @return java.util.Date
	 * @throws ParseException
	 */
	public static Date nextDate(String date, int num) throws ParseException {
		if (date == null)
			return null;
		SimpleDateFormat sdf = null;
		if (date.indexOf("-") != -1)
			sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		else if (date.indexOf("-") != -1)
			sdf = new SimpleDateFormat("yyyyå¹´MMæœˆddæ—¥HHæ—¶mmåˆ†ss");
		else if (date.indexOf("/") != -1)
			sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		else if (date.indexOf("CST") != -1)
			sdf = new SimpleDateFormat();
		else
			System.out.println("no match format:");
		return nextDate(sdf.parse(date), num);
	}

	/**
	 * èŽ·å?–å½“å¤©æ—¶é—´numå¤©å?Žçš„æ—¶é—´<br>
	 * å¦‚æžœnumå°?äºŽ0åˆ™è¿”å›žå½“å‰?æ—¶é—´çš„å‰?numå¤©çš„æ—¶é—´<br>
	 * ï¼Œå?¦åˆ™è¿”å›žå½“å¤©æ—¶é—´å?Žnumå¤©çš„æ—¶é—´
	 * 
	 * @param num
	 *            int;
	 * @return java.util.Date
	 */
	public static Date nextDate(int num) {
		return nextDate(new Date(), num);
	}

	/**
	 * å?–å¾—å½“å‰?æ—¥æœŸæ˜¯å¤šå°‘å‘¨
	 * 
	 * @param date
	 * @return
	 */
	public static int getWeekOfYear(Date date) {
		Calendar c = Calendar.getInstance();
		c.setFirstDayOfWeek(Calendar.MONDAY);
		/**
		 * è®¾ç½®ä¸€å¹´ä¸­ç¬¬ä¸€ä¸ªæ˜ŸæœŸæ‰€éœ€çš„æœ€å°‘å¤©æ•°ï¼Œä¾‹å¦‚ï¼Œå¦‚æžœå®šä¹‰ç¬¬ä¸€ä¸ªæ˜ŸæœŸåŒ…å?«ä¸€å¹´ç¬¬ä¸€ä¸ªæœˆçš„ç¬¬ä¸€å¤©ï¼Œåˆ™ä½¿ç”¨å€¼ 1 è°ƒç”¨æ­¤æ–¹æ³•ã€‚
		 * å¦‚æžœæœ€å°‘å¤©æ•°å¿…é¡»æ˜¯ä¸€æ•´ä¸ªæ˜ŸæœŸï¼Œåˆ™ä½¿ç”¨å€¼ 7 è°ƒç”¨æ­¤æ–¹æ³•ã€‚
		 **/
		c.setMinimalDaysInFirstWeek(1);
		c.setTime(date);
		return c.get(Calendar.WEEK_OF_YEAR);
	}

	/**
	 * èŽ·å?–å½“å‰?æ—¥æœŸ
	 * 
	 * @return
	 */
	public static String getCurrentDate() {
		SimpleDateFormat format = new SimpleDateFormat(formatPattern);
		return format.format(new Date());
	}

    /**
     * èŽ·å?–å½“å‰?æ—¥æœŸå‰?30å¤©
     *
     * @return
     */
    public static String getCurrentDateBefore30Day() {
        Calendar now = Calendar.getInstance();
        now.add(Calendar.DAY_OF_MONTH, -30);
        return new SimpleDateFormat(formatPattern).format(now.getTime());
    }
    
	/**
	 * èŽ·å?–åˆ¶å®šæ¯«ç§’æ•°ä¹‹å‰?çš„æ—¥æœŸ
	 * 
	 * @param timeDiff
	 * @return
	 */
	public static String getDesignatedDate(long timeDiff) {
		SimpleDateFormat format = new SimpleDateFormat(formatPattern);
		long nowTime = System.currentTimeMillis();
		long designTime = nowTime - timeDiff;
		return format.format(designTime);
	}

	/**
	 * 
	 * èŽ·å?–å‰?å‡ å¤©çš„æ—¥æœŸ
	 */
	public static String getPrefixDate(String count) {
		Calendar cal = Calendar.getInstance();
		int day = 0 - Integer.parseInt(count);
		cal.add(Calendar.DATE, day); // int amount ä»£è¡¨å¤©æ•°
		Date datNew = cal.getTime();
		SimpleDateFormat format = new SimpleDateFormat(formatPattern);
		return format.format(datNew);
	}

	/**
	 * æ—¥æœŸè½¬æ?¢æˆ?å­—ç¬¦ä¸²
	 * 
	 * @param date
	 * @return
	 */
	public static String dateToString(Date date) {
		SimpleDateFormat format = new SimpleDateFormat(formatPattern);
		return format.format(date);
	}

	/**
	 * å­—ç¬¦ä¸²è½¬æ?¢æ—¥æœŸ
	 * 
	 * @param str
	 * @return
	 */
	public static Date stringToDate(String str) {
		// str = " 2008-07-10 19:20:00 " æ ¼å¼?
		SimpleDateFormat format = new SimpleDateFormat(formatPattern);
		if (!str.equals("") && str != null) {
			try {
				return format.parse(str);
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return null;
	}

	// javaä¸­æ€Žæ ·è®¡ç®—ä¸¤ä¸ªæ—¶é—´å¦‚ï¼šâ€œ21:57â€?å’Œâ€œ08:20â€?ç›¸å·®çš„åˆ†é’Ÿæ•°ã€?å°?æ—¶æ•° javaè®¡ç®—ä¸¤ä¸ªæ—¶é—´å·®å°?æ—¶ åˆ†é’Ÿ ç§’ .
	public void timeSubtract() {
		SimpleDateFormat dfs = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date begin = null;
		Date end = null;
		try {
			begin = dfs.parse("2004-01-02 11:30:24");
			end = dfs.parse("2004-03-26 13:31:40");
		} catch (ParseException e) {
			e.printStackTrace();
		}

		long between = (end.getTime() - begin.getTime()) / 1000;// é™¤ä»¥1000æ˜¯ä¸ºäº†è½¬æ?¢æˆ?ç§’

		long day1 = between / (24 * 3600);
		long hour1 = between % (24 * 3600) / 3600;
		long minute1 = between % 3600 / 60;
		long second1 = between % 60;
		System.out.println("" + day1 + "å¤©" + hour1 + "å°?æ—¶" + minute1 + "åˆ†"
				+ second1 + "ç§’");
	}

	/**
	 * ä½¿ç”¨é¢„è®¾æ ¼å¼?æ??å?–å­—ç¬¦ä¸²æ—¥æœŸ
	 * 
	 * @param strDate
	 *            æ—¥æœŸå­—ç¬¦ä¸²
	 * @return
	 */
	public static Date parse(String strDate) {
		return parse(strDate, DATE_FULL_STR);
	}

	/**
	 * ä½¿ç”¨ç”¨æˆ·æ ¼å¼?æ??å?–å­—ç¬¦ä¸²æ—¥æœŸ
	 * 
	 * @param strDate
	 *            æ—¥æœŸå­—ç¬¦ä¸²
	 * @param pattern
	 *            æ—¥æœŸæ ¼å¼?
	 * @return
	 */
	public static Date parse(String strDate, String pattern) {
		SimpleDateFormat df = new SimpleDateFormat(pattern);
		try {
			return df.parse(strDate);
		} catch (ParseException e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * ä¸¤ä¸ªæ—¶é—´æ¯”è¾ƒ
	 * 
	 * @param date
	 * @return
	 */
	public static int compareDateWithNow(Date date) {
		Date date2 = new Date();
		int rnum = date.compareTo(date2);
		return rnum;
	}

	/**
	 * ä¸¤ä¸ªæ—¶é—´æ¯”è¾ƒ(æ—¶é—´æˆ³æ¯”è¾ƒ)
	 * 
	 * @param date
	 * @return
	 */
	public static int compareDateWithNow(long date) {
		long date2 = dateToUnixTimestamp();
		if (date > date2) {
			return 1;
		} else if (date < date2) {
			return -1;
		} else {
			return 0;
		}
	}

	/**
	 * èŽ·å?–ç³»ç»Ÿå½“å‰?æ—¶é—´
	 * 
	 * @return
	 */
	public static String getNowTime(String type) {
		SimpleDateFormat df = new SimpleDateFormat(type);
		return df.format(new Date());
	}

	/**
	 * èŽ·å?–ç³»ç»Ÿå½“å‰?è®¡è´¹æœŸ
	 * 
	 * @return
	 */
	public static String getJFPTime() {
		SimpleDateFormat df = new SimpleDateFormat(DATE_JFP_STR);
		return df.format(new Date());
	}

	/**
	 * å°†æŒ‡å®šçš„æ—¥æœŸè½¬æ?¢æˆ?Unixæ—¶é—´æˆ³
	 * 
	 * @param date
	 *            date éœ€è¦?è½¬æ?¢çš„æ—¥æœŸ yyyy-MM-dd HH:mm:ss
	 * @return long æ—¶é—´æˆ³
	 */
	public static long dateToUnixTimestamp(String date) {
		long timestamp = 0;
		try {
			timestamp = new SimpleDateFormat(DATE_FULL_STR).parse(date)
					.getTime();
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return timestamp;
	}

	/**
	 * å°†æŒ‡å®šçš„æ—¥æœŸè½¬æ?¢æˆ?Unixæ—¶é—´æˆ³
	 * 
	 *            date éœ€è¦?è½¬æ?¢çš„æ—¥æœŸ yyyy-MM-dd
	 * @return long æ—¶é—´æˆ³
	 */
	public static long dateToUnixTimestamp(String date, String dateFormat) {
		long timestamp = 0;
		try {
			timestamp = new SimpleDateFormat(dateFormat).parse(date).getTime();
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return timestamp;
	}

	/**
	 * å°†å½“å‰?æ—¥æœŸè½¬æ?¢æˆ?Unixæ—¶é—´æˆ³
	 * 
	 * @return long æ—¶é—´æˆ³
	 */
	public static long dateToUnixTimestamp() {
		long timestamp = new Date().getTime();
		return timestamp;
	}

	/**
	 * å°†Unixæ—¶é—´æˆ³è½¬æ?¢æˆ?æ—¥æœŸ
	 * 
	 * @param timestamp timestamp æ—¶é—´æˆ³
	 * @return String æ—¥æœŸå­—ç¬¦ä¸²
	 */
	public static String unixTimestampToDate(long timestamp) {
		SimpleDateFormat sd = new SimpleDateFormat(DATE_FULL_STR);
		sd.setTimeZone(TimeZone.getTimeZone("GMT+8"));
		return sd.format(new Date(timestamp));
	}

    /**
     * æ ¼å¼?åŒ–æ—¶é—´ä¸º
     * @param timeMillis
     * @return
     */
	public static String formatTimeInMillis(long timeMillis){
	    String time = "2018-01-01";
        try {
            Date curDate = new Date(timeMillis);// èŽ·å?–å½“å‰?æ—¶é—´
            SimpleDateFormat format = new SimpleDateFormat(DATE_SMALL_STR);
            time = format.format(curDate);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return time;
    }
    
	public static int getSystemTime() {
		int result = -1;
		try {
			Date curDate = new Date(System.currentTimeMillis());// èŽ·å?–å½“å‰?æ—¶é—´
			SimpleDateFormat format = new SimpleDateFormat("yyyyMMdd");
			String time = format.format(curDate);
			result = Integer.parseInt(time);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return 20130918;
		}
		return result;
	}

	public static int getTime() {
		int result = -1;
		try {
			URL url = new URL("http://www.bjtime.cn");
			URLConnection uc = url.openConnection();// ç”Ÿæˆ?è¿žæŽ¥å¯¹è±¡
			uc.connect(); // å?‘å‡ºè¿žæŽ¥
			long ld = uc.getDate(); // å?–å¾—ç½‘ç«™æ—¥æœŸæ—¶é—´
			Date date = new Date(ld); // è½¬æ?¢ä¸ºæ ‡å‡†æ—¶é—´å¯¹è±¡
			SimpleDateFormat format = new SimpleDateFormat("yyyyMMdd");
			String time = format.format(date);
			result = Integer.parseInt(time);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return getSystemTime();
		}
		return result;
	}

	/**
	 * long time to string
	 * 
	 * @param timeInMillis
	 * @param dateFormat
	 * @return
	 */
	public static String getTime(long timeInMillis, SimpleDateFormat dateFormat) {
		return dateFormat.format(new Date(timeInMillis));
	}

	/**
	 * long time to string, format is {@link #DEFAULT_DATE_FORMAT}
	 * 
	 * @param timeInMillis
	 * @return
	 */
	public static String getTime(long timeInMillis) {
		return getTime(timeInMillis, DEFAULT_DATE_FORMAT);
	}

	/**
	 * get current time in milliseconds
	 * 
	 * @return
	 */
	public static long getCurrentTimeInLong() {
		return System.currentTimeMillis();
	}

	/**
	 * get current time in milliseconds, format is {@link #DEFAULT_DATE_FORMAT}
	 * 
	 * @return
	 */
	public static String getCurrentTimeInString() {
		return getTime(getCurrentTimeInLong());
	}

	/**
	 * get current time in milliseconds
	 * 
	 * @return
	 */
	public static String getCurrentTimeInString(SimpleDateFormat dateFormat) {
		return getTime(getCurrentTimeInLong(), dateFormat);
	}
}
