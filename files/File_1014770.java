package com.cgfay.camera.engine.camera;

import android.app.Activity;
import android.content.Context;
import android.graphics.Rect;
import android.graphics.SurfaceTexture;
import android.hardware.Camera;
import android.view.Surface;
import android.view.SurfaceHolder;

import com.cgfay.camera.engine.model.CalculateType;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

/**
 * ç›¸æœºå¼•æ“Ž
 * Created by cain on 2017/7/9.
 */

public class CameraEngine {

    private static class CameraEngineHolder {
        public static CameraEngine instance = new CameraEngine();
    }

    private CameraEngine() {}

    public static CameraEngine getInstance() {
        return CameraEngineHolder.instance;
    }

    // ç›¸æœºå¯¹è±¡
    private Camera mCamera;

    public void openCamera(Context context) {
        openCamera(context, CameraParam.getInstance().expectFps);
    }

    /**
     * æ ¹æ?®IDæ‰“å¼€ç›¸æœº
     * @param expectFps
     */
    public void openCamera(Context context, int expectFps) {
        int width = CameraParam.getInstance().expectWidth;
        int height = CameraParam.getInstance().expectHeight;
        openCamera(context, CameraParam.getInstance().cameraId, expectFps, width, height);
    }

    /**
     * æ‰“å¼€ç›¸æœº
     * @param context
     * @param cameraID
     * @param expectFps
     * @param expectWidth
     * @param expectHeight
     */
    public void openCamera(Context context, int cameraID, int expectFps, int expectWidth, int expectHeight) {
        if (mCamera != null) {
            throw new RuntimeException("camera already initialized!");
        }
        mCamera = Camera.open(cameraID);
        if (mCamera == null) {
            throw new RuntimeException("Unable to open camera");
        }
        CameraParam cameraParam = CameraParam.getInstance();
        cameraParam.cameraId = cameraID;
        Camera.Parameters parameters = mCamera.getParameters();
        cameraParam.supportFlash = checkSupportFlashLight(parameters);
        cameraParam.previewFps = chooseFixedPreviewFps(parameters, expectFps * 1000);
        parameters.setRecordingHint(true);
        mCamera.setParameters(parameters);
        setPreviewSize(mCamera, expectWidth, expectHeight);
        setPictureSize(mCamera, expectWidth, expectHeight);
        calculateCameraPreviewOrientation((Activity) context);
        mCamera.setDisplayOrientation(cameraParam.orientation);
    }

    /**
     * è®¾ç½®é¢„è§ˆSurface
     * @param holder
     */
    public void setPreviewSurface(SurfaceHolder holder) {
        if (mCamera == null) {
            throw new IllegalStateException("Camera must be set when start preview");
        }
        try {
            mCamera.setPreviewDisplay(holder);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * è®¾ç½®é¢„è§ˆSurface
     * @param texture
     */
    public void setPreviewSurface(SurfaceTexture texture) {
        if (mCamera == null) {
            throw new IllegalStateException("Camera must be set when start preview");
        }
        try {
            mCamera.setPreviewTexture(texture);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * å¼€å§‹é¢„è§ˆ
     */
    public void startPreview() {
        if (mCamera == null) {
            throw new IllegalStateException("Camera must be set when start preview");
        }
        mCamera.startPreview();
    }

    /**
     * å?œæ­¢é¢„è§ˆ
     */
    public void stopPreview() {
        if (mCamera != null) {
            mCamera.stopPreview();
        }
    }

    /**
     * é‡Šæ”¾ç›¸æœº
     */
    public void releaseCamera() {
        if (mCamera != null) {
            mCamera.setPreviewCallback(null);
            mCamera.setPreviewCallbackWithBuffer(null);
            mCamera.addCallbackBuffer(null);
            mCamera.stopPreview();
            mCamera.release();
            mCamera = null;
        }
        CameraParam.getInstance().supportFlash = false;
    }

    /**
     * æ·»åŠ é¢„è§ˆå›žè°ƒ
     * @param callback
     * @param previewBuffer
     */
    public void setPreviewCallbackWithBuffer(Camera.PreviewCallback callback, byte[] previewBuffer) {
        if (mCamera != null) {
            mCamera.setPreviewCallbackWithBuffer(callback);
            mCamera.addCallbackBuffer(previewBuffer);
        }
    }

    /**
     * æ·»åŠ é¢„è§ˆå›žè°ƒ
     * @param callback
     */
    public void setPreviewCallback(Camera.PreviewCallback callback) {
        if (mCamera != null) {
            mCamera.setPreviewCallback(callback);
        }
    }

    /**
     * æ‹?ç…§
     */
    public void takePicture(Camera.ShutterCallback shutterCallback,
                                   Camera.PictureCallback rawCallback,
                                   Camera.PictureCallback pictureCallback) {
        if (mCamera != null) {
            mCamera.takePicture(shutterCallback, rawCallback, pictureCallback);
        }
    }

    /**
     * è®¾ç½®é¢„è§ˆå¤§å°?
     * @param camera
     * @param expectWidth
     * @param expectHeight
     */
    private void setPreviewSize(Camera camera, int expectWidth, int expectHeight) {
        Camera.Parameters parameters = camera.getParameters();
        Camera.Size size = calculatePerfectSize(parameters.getSupportedPreviewSizes(),
                expectWidth, expectHeight, CalculateType.Lower);
        parameters.setPreviewSize(size.width, size.height);
        CameraParam.getInstance().previewWidth = size.width;
        CameraParam.getInstance().previewHeight = size.height;
        camera.setParameters(parameters);
    }

    /**
     * è®¾ç½®é¢„è§ˆå¤§å°?
     * @param camera
     * @param expectWidth
     * @param expectHeight
     */
    private void setPreviewSize(Camera camera, int expectWidth, int expectHeight, float ratio) {
        Camera.Parameters parameters = camera.getParameters();
        Camera.Size size = calculatePerfectSize(parameters.getSupportedPreviewSizes(),
                expectWidth, expectHeight, CalculateType.Lower);
        parameters.setPreviewSize(size.width, size.height);
        camera.setParameters(parameters);
    }

    /**
     * è®¾ç½®æ‹?æ‘„çš„ç…§ç‰‡å¤§å°?
     * @param camera
     * @param expectWidth
     * @param expectHeight
     */
    private void setPictureSize(Camera camera, int expectWidth, int expectHeight) {
        Camera.Parameters parameters = camera.getParameters();
        Camera.Size size = calculatePerfectSize(parameters.getSupportedPictureSizes(),
                expectWidth, expectHeight, CalculateType.Max);
        parameters.setPictureSize(size.width, size.height);
        camera.setParameters(parameters);
    }


    /**
     * è®¾ç½®é¢„è§ˆè§’åº¦ï¼ŒsetDisplayOrientationæœ¬èº«å?ªèƒ½æ”¹å?˜é¢„è§ˆçš„è§’åº¦
     * previewFrameCallbackä»¥å?Šæ‹?æ‘„å‡ºæ?¥çš„ç…§ç‰‡æ˜¯ä¸?ä¼šå?‘ç”Ÿæ”¹å?˜çš„ï¼Œæ‹?æ‘„å‡ºæ?¥çš„ç…§ç‰‡è§’åº¦ä¾?æ—§ä¸?æ­£å¸¸çš„
     * æ‹?æ‘„çš„ç…§ç‰‡éœ€è¦?è‡ªè¡Œå¤„ç?†
     * è¿™é‡ŒNexus5Xçš„ç›¸æœºç®€ç›´æ²¡æ³•å??æ§½ï¼Œå?Žç½®æ‘„åƒ?å¤´å€’ç½®äº†ï¼Œåˆ‡æ?¢æ‘„åƒ?å¤´ä¹‹å?Žå°±å‡ºçŽ°é—®é¢˜äº†ã€‚
     * @param activity
     */
    private int calculateCameraPreviewOrientation(Activity activity) {
        Camera.CameraInfo info = new Camera.CameraInfo();
        Camera.getCameraInfo(CameraParam.getInstance().cameraId, info);
        int rotation = activity.getWindowManager().getDefaultDisplay()
                .getRotation();
        int degrees = 0;
        switch (rotation) {
            case Surface.ROTATION_0:
                degrees = 0;
                break;
            case Surface.ROTATION_90:
                degrees = 90;
                break;
            case Surface.ROTATION_180:
                degrees = 180;
                break;
            case Surface.ROTATION_270:
                degrees = 270;
                break;
        }

        int result;
        if (info.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {
            result = (info.orientation + degrees) % 360;
            result = (360 - result) % 360;
        } else {
            result = (info.orientation - degrees + 360) % 360;
        }
        CameraParam.getInstance().orientation = result;
        return result;
    }

    /**
     * è®¾ç½®é¢„è§ˆè§’åº¦ï¼ŒsetDisplayOrientationæœ¬èº«å?ªèƒ½æ”¹å?˜é¢„è§ˆçš„è§’åº¦
     * previewFrameCallbackä»¥å?Šæ‹?æ‘„å‡ºæ?¥çš„ç…§ç‰‡æ˜¯ä¸?ä¼šå?‘ç”Ÿæ”¹å?˜çš„ï¼Œæ‹?æ‘„å‡ºæ?¥çš„ç…§ç‰‡è§’åº¦ä¾?æ—§ä¸?æ­£å¸¸çš„
     * æ‹?æ‘„çš„ç…§ç‰‡éœ€è¦?è‡ªè¡Œå¤„ç?†
     * è¿™é‡ŒNexus5Xçš„ç›¸æœºç®€ç›´æ²¡æ³•å??æ§½ï¼Œå?Žç½®æ‘„åƒ?å¤´å€’ç½®äº†ï¼Œåˆ‡æ?¢æ‘„åƒ?å¤´ä¹‹å?Žå°±å‡ºçŽ°é—®é¢˜äº†ã€‚
     * @param activity
     */
    private int calculateCameraPreviewOrientation(Activity activity, int cameraId) {
        Camera.CameraInfo info = new Camera.CameraInfo();
        Camera.getCameraInfo(cameraId, info);
        int rotation = activity.getWindowManager().getDefaultDisplay()
                .getRotation();
        int degrees = 0;
        switch (rotation) {
            case Surface.ROTATION_0:
                degrees = 0;
                break;
            case Surface.ROTATION_90:
                degrees = 90;
                break;
            case Surface.ROTATION_180:
                degrees = 180;
                break;
            case Surface.ROTATION_270:
                degrees = 270;
                break;
        }

        int result;
        if (info.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {
            result = (info.orientation + degrees) % 360;
            result = (360 - result) % 360;
        } else {
            result = (info.orientation - degrees + 360) % 360;
        }
        CameraParam.getInstance().orientation = result;
        return result;
    }

    /**
     * è®¾ç½®æ‰“å¼€é—ªå…‰ç?¯
     * @param on
     */
    public  void setFlashLight(boolean on) {
        if (mCamera != null) {
            Camera.Parameters parameters = mCamera.getParameters();
            if (on) {
                parameters.setFlashMode(Camera.Parameters.FLASH_MODE_TORCH);
            } else {
                parameters.setFlashMode(Camera.Parameters.FLASH_MODE_OFF);
            }
            mCamera.setParameters(parameters);
        }
    }

    /**
     * è®¾ç½®å¯¹ç„¦åŒºåŸŸ
     * @param rect      å·²ç»?è°ƒæ•´å¥½çš„åŒºåŸŸ
     * @param callback  è‡ªåŠ¨å¯¹ç„¦å›žè°ƒ
     */
    public void setFocusArea(Rect rect, Camera.AutoFocusCallback callback) {
        if (mCamera != null) {
            Camera.Parameters parameters = mCamera.getParameters(); // å…ˆèŽ·å?–å½“å‰?ç›¸æœºçš„å?‚æ•°é…?ç½®å¯¹è±¡
            parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_AUTO); // è®¾ç½®è?šç„¦æ¨¡å¼?
            if (parameters.getMaxNumFocusAreas() > 0) {
                List<Camera.Area> focusAreas = new ArrayList<Camera.Area>();
                focusAreas.add(new Camera.Area(rect, CameraParam.Weight));
                parameters.setFocusAreas(focusAreas);
                // å?–æ¶ˆæŽ‰è¿›ç¨‹ä¸­æ‰€æœ‰çš„è?šç„¦åŠŸèƒ½
                mCamera.cancelAutoFocus();
                mCamera.setParameters(parameters);
                mCamera.autoFocus(callback);
            }
        }
    }

    /**
     * è®¾ç½®å¯¹ç„¦
     * @param rect
     */
    public void setFocusArea(Rect rect) {
        if (mCamera != null) {
            final String focusMode = mCamera.getParameters().getFocusMode();
            Camera.Parameters parameters = mCamera.getParameters(); // å…ˆèŽ·å?–å½“å‰?ç›¸æœºçš„å?‚æ•°é…?ç½®å¯¹è±¡
            parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_AUTO); // è®¾ç½®è?šç„¦æ¨¡å¼?
            if (parameters.getMaxNumFocusAreas() > 0) {
                List<Camera.Area> focusAreas = new ArrayList<Camera.Area>();
                focusAreas.add(new Camera.Area(rect, CameraParam.Weight));
                // è®¾ç½®è?šç„¦åŒºåŸŸ
                if (parameters.getMaxNumFocusAreas() > 0) {
                    parameters.setFocusAreas(focusAreas);
                }
                // è®¾ç½®è®¡é‡?åŒºåŸŸ
                if (parameters.getMaxNumMeteringAreas() > 0) {
                    parameters.setMeteringAreas(focusAreas);
                }
                // å?–æ¶ˆæŽ‰è¿›ç¨‹ä¸­æ‰€æœ‰çš„è?šç„¦åŠŸèƒ½
                mCamera.cancelAutoFocus();
                mCamera.setParameters(parameters);
                mCamera.autoFocus(new Camera.AutoFocusCallback() {
                    @Override
                    public void onAutoFocus(boolean success, Camera camera) {
                        Camera.Parameters parame = camera.getParameters();
                        parame.setFocusMode(focusMode);
                        camera.setParameters(parame);
                    }
                });
            }
        }
    }

    /**
     * è®¡ç®—è§¦æ‘¸åŒºåŸŸ
     * @param x
     * @param y
     * @return
     */
    public static Rect getFocusArea(float x, float y, int width, int height, int focusSize) {
        return calculateTapArea(x, y, width, height, focusSize, 1.0f);
    }

    /**
     * è®¡ç®—ç‚¹å‡»åŒºåŸŸ
     * @param x
     * @param y
     * @param width
     * @param height
     * @param focusSize
     * @param coefficient
     * @return
     */
    private static Rect calculateTapArea(float x, float y, int width, int height,
                                         int focusSize, float coefficient) {
        int areaSize = Float.valueOf(focusSize * coefficient).intValue();
        int left = clamp(Float.valueOf((y / height) * 2000 - 1000).intValue(), areaSize);
        int top = clamp(Float.valueOf(((height - x) / width) * 2000 - 1000).intValue(), areaSize);
        return new Rect(left, top, left + areaSize, top + areaSize);
    }

    /**
     * ç¡®ä¿?æ‰€é€‰åŒºåŸŸåœ¨åœ¨å?ˆç?†èŒƒå›´å†…
     * @param touchCoordinateInCameraReper
     * @param focusAreaSize
     * @return
     */
    private static int clamp(int touchCoordinateInCameraReper, int focusAreaSize) {
        int result;
        if (Math.abs(touchCoordinateInCameraReper) + focusAreaSize  > 1000) {
            if (touchCoordinateInCameraReper > 0) {
                result = 1000 - focusAreaSize ;
            } else {
                result = -1000 + focusAreaSize ;
            }
        } else {
            result = touchCoordinateInCameraReper - focusAreaSize / 2;
        }
        return result;
    }

    /**
     * æ£€æŸ¥æ‘„åƒ?å¤´(å‰?ç½®/å?Žç½®)æ˜¯å?¦æ”¯æŒ?é—ªå…‰ç?¯
     * @param camera   æ‘„åƒ?å¤´
     * @return
     */
    public static boolean checkSupportFlashLight(Camera camera) {
        if (camera == null) {
            return false;
        }

        Camera.Parameters parameters = camera.getParameters();

        return checkSupportFlashLight(parameters);
    }

    /**
     * æ£€æŸ¥æ‘„åƒ?å¤´(å‰?ç½®/å?Žç½®)æ˜¯å?¦æ”¯æŒ?é—ªå…‰ç?¯
     * @param parameters æ‘„åƒ?å¤´å?‚æ•°
     * @return
     */
    public static boolean checkSupportFlashLight(Camera.Parameters parameters) {
        if (parameters.getFlashMode() == null) {
            return false;
        }

        List<String> supportedFlashModes = parameters.getSupportedFlashModes();
        if (supportedFlashModes == null
                || supportedFlashModes.isEmpty()
                || (supportedFlashModes.size() == 1
                && supportedFlashModes.get(0).equals(Camera.Parameters.FLASH_MODE_OFF))) {
            return false;
        }

        return true;
    }

    /**
     * èŽ·å?–ç›¸æœºå¯¹è±¡
     * @return
     */
    public  Camera getCamera() {
        return mCamera;
    }

    /**
     * è®¡ç®—æœ€å®Œç¾Žçš„Size
     * @param sizes
     * @param expectWidth
     * @param expectHeight
     * @return
     */
    private static Camera.Size calculatePerfectSize(List<Camera.Size> sizes, int expectWidth,
                                                    int expectHeight, CalculateType calculateType) {
        sortList(sizes); // æ ¹æ?®å®½åº¦è¿›è¡ŒæŽ’åº?

        // æ ¹æ?®å½“å‰?æœŸæœ›çš„å®½é«˜åˆ¤å®š
        List<Camera.Size> bigEnough = new ArrayList<>();
        List<Camera.Size> noBigEnough = new ArrayList<>();
        for (Camera.Size size : sizes) {
            if (size.height * expectWidth / expectHeight == size.width) {
                if (size.width > expectWidth && size.height > expectHeight) {
                    bigEnough.add(size);
                } else {
                    noBigEnough.add(size);
                }
            }
        }
        // æ ¹æ?®è®¡ç®—ç±»åž‹åˆ¤æ–­æ€Žä¹ˆå¦‚ä½•è®¡ç®—å°ºå¯¸
        Camera.Size perfectSize = null;
        switch (calculateType) {
            // ç›´æŽ¥ä½¿ç”¨æœ€å°?å€¼
            case Min:
                // ä¸?å¤§äºŽæœŸæœ›å€¼çš„åˆ†è¾¨çŽ‡åˆ—è¡¨æœ‰å?¯èƒ½ä¸ºç©ºæˆ–è€…å?ªæœ‰ä¸€ä¸ªçš„æƒ…å†µï¼Œ
                // Collections.minä¼šå› è¶Šç•ŒæŠ¥NoSuchElementException
                if (noBigEnough.size() > 1) {
                    perfectSize = Collections.min(noBigEnough, new CompareAreaSize());
                } else if (noBigEnough.size() == 1) {
                    perfectSize = noBigEnough.get(0);
                }
                break;

            // ç›´æŽ¥ä½¿ç”¨æœ€å¤§å€¼
            case Max:
                // å¦‚æžœbigEnoughå?ªæœ‰ä¸€ä¸ªå…ƒç´ ï¼Œä½¿ç”¨Collections.maxå°±ä¼šå› è¶Šç•ŒæŠ¥NoSuchElementException
                // å› æ­¤ï¼Œå½“å?ªæœ‰ä¸€ä¸ªå…ƒç´ æ—¶ï¼Œç›´æŽ¥ä½¿ç”¨è¯¥å…ƒç´ 
                if (bigEnough.size() > 1) {
                    perfectSize = Collections.max(bigEnough, new CompareAreaSize());
                } else if (bigEnough.size() == 1) {
                    perfectSize = bigEnough.get(0);
                }
                break;

            // å°?ä¸€ç‚¹
            case Lower:
                // ä¼˜å…ˆæŸ¥æ‰¾æ¯”æœŸæœ›å°ºå¯¸å°?ä¸€ç‚¹çš„ï¼Œå?¦åˆ™æ‰¾å¤§ä¸€ç‚¹çš„ï¼ŒæŽ¥å?—èŒƒå›´åœ¨0.8å·¦å?³
                if (noBigEnough.size() > 0) {
                    Camera.Size size = Collections.max(noBigEnough, new CompareAreaSize());
                    if (((float)size.width / expectWidth) >= 0.8
                            && ((float)size.height / expectHeight) > 0.8) {
                        perfectSize = size;
                    }
                } else if (bigEnough.size() > 0) {
                    Camera.Size size = Collections.min(bigEnough, new CompareAreaSize());
                    if (((float)expectWidth / size.width) >= 0.8
                            && ((float)(expectHeight / size.height)) >= 0.8) {
                        perfectSize = size;
                    }
                }
                break;

            // å¤§ä¸€ç‚¹
            case Larger:
                // ä¼˜å…ˆæŸ¥æ‰¾æ¯”æœŸæœ›å°ºå¯¸å¤§ä¸€ç‚¹çš„ï¼Œå?¦åˆ™æ‰¾å°?ä¸€ç‚¹çš„ï¼ŒæŽ¥å?—èŒƒå›´åœ¨0.8å·¦å?³
                if (bigEnough.size() > 0) {
                    Camera.Size size = Collections.min(bigEnough, new CompareAreaSize());
                    if (((float)expectWidth / size.width) >= 0.8
                            && ((float)(expectHeight / size.height)) >= 0.8) {
                        perfectSize = size;
                    }
                } else if (noBigEnough.size() > 0) {
                    Camera.Size size = Collections.max(noBigEnough, new CompareAreaSize());
                    if (((float)size.width / expectWidth) >= 0.8
                            && ((float)size.height / expectHeight) > 0.8) {
                        perfectSize = size;
                    }
                }
                break;
        }
        // å¦‚æžœç»?è¿‡å‰?é?¢çš„æ­¥éª¤æ²¡æ‰¾åˆ°å?ˆé€‚çš„å°ºå¯¸ï¼Œåˆ™è®¡ç®—æœ€æŽ¥è¿‘expectWidth * expectHeightçš„å€¼
        if (perfectSize == null) {
            Camera.Size result = sizes.get(0);
            boolean widthOrHeight = false; // åˆ¤æ–­å­˜åœ¨å®½æˆ–é«˜ç›¸ç­‰çš„Size
            // è¾—è½¬è®¡ç®—å®½é«˜æœ€æŽ¥è¿‘çš„å€¼
            for (Camera.Size size : sizes) {
                // å¦‚æžœå®½é«˜ç›¸ç­‰ï¼Œåˆ™ç›´æŽ¥è¿”å›ž
                if (size.width == expectWidth && size.height == expectHeight
                        && ((float) size.height / (float) size.width) == CameraParam.getInstance().currentRatio) {
                    result = size;
                    break;
                }
                // ä»…ä»…æ˜¯å®½åº¦ç›¸ç­‰ï¼Œè®¡ç®—é«˜åº¦æœ€æŽ¥è¿‘çš„size
                if (size.width == expectWidth) {
                    widthOrHeight = true;
                    if (Math.abs(result.height - expectHeight) > Math.abs(size.height - expectHeight)
                            && ((float) size.height / (float) size.width) == CameraParam.getInstance().currentRatio) {
                        result = size;
                        break;
                    }
                }
                // é«˜åº¦ç›¸ç­‰ï¼Œåˆ™è®¡ç®—å®½åº¦æœ€æŽ¥è¿‘çš„Size
                else if (size.height == expectHeight) {
                    widthOrHeight = true;
                    if (Math.abs(result.width - expectWidth) > Math.abs(size.width - expectWidth)
                            && ((float) size.height / (float) size.width) == CameraParam.getInstance().currentRatio) {
                        result = size;
                        break;
                    }
                }
                // å¦‚æžœä¹‹å‰?çš„æŸ¥æ‰¾ä¸?å­˜åœ¨å®½æˆ–é«˜ç›¸ç­‰çš„æƒ…å†µï¼Œåˆ™è®¡ç®—å®½åº¦å’Œé«˜åº¦éƒ½æœ€æŽ¥è¿‘çš„æœŸæœ›å€¼çš„Size
                else if (!widthOrHeight) {
                    if (Math.abs(result.width - expectWidth) > Math.abs(size.width - expectWidth)
                            && Math.abs(result.height - expectHeight) > Math.abs(size.height - expectHeight)
                            && ((float) size.height / (float) size.width) == CameraParam.getInstance().currentRatio) {
                        result = size;
                    }
                }
            }
            perfectSize = result;
        }
        return perfectSize;
    }

    /**
     * åˆ†è¾¨çŽ‡ç”±å¤§åˆ°å°?æŽ’åº?
     * @param list
     */
    private static void sortList(List<Camera.Size> list) {
        Collections.sort(list, new CompareAreaSize());
    }

    /**
     * æ¯”è¾ƒå™¨
     */
    private static class CompareAreaSize implements Comparator<Camera.Size> {
        @Override
        public int compare(Camera.Size pre, Camera.Size after) {
            return Long.signum((long) pre.width * pre.height -
                    (long) after.width * after.height);
        }
    }

    /**
     * é€‰æ‹©å?ˆé€‚çš„FPS
     * @param parameters
     * @param expectedThoudandFps æœŸæœ›çš„FPS
     * @return
     */
    public static int chooseFixedPreviewFps(Camera.Parameters parameters, int expectedThoudandFps) {
        List<int[]> supportedFps = parameters.getSupportedPreviewFpsRange();
        for (int[] entry : supportedFps) {
            if (entry[0] == entry[1] && entry[0] == expectedThoudandFps) {
                parameters.setPreviewFpsRange(entry[0], entry[1]);
                return entry[0];
            }
        }
        int[] temp = new int[2];
        int guess;
        parameters.getPreviewFpsRange(temp);
        if (temp[0] == temp[1]) {
            guess = temp[0];
        } else {
            guess = temp[1] / 2;
        }
        return guess;
    }
}
