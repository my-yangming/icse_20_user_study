package com.cgfay.filter.glfilter.stickers;

import android.graphics.Bitmap;
import android.net.Uri;
import android.text.TextUtils;
import android.util.Log;
import android.util.Pair;

import com.cgfay.filter.glfilter.resource.ResourceCodec;
import com.cgfay.filter.glfilter.resource.ResourceIndexCodec;
import com.cgfay.filter.glfilter.stickers.bean.DynamicStickerData;
import com.cgfay.filter.glfilter.utils.OpenGLUtils;
import com.cgfay.landmark.LandmarkEngine;
import com.cgfay.uitls.utils.BitmapUtils;

import java.io.IOException;
import java.lang.ref.WeakReference;

/**
 * åŠ¨æ€?è´´çº¸åŠ è½½å™¨
 */
public class DynamicStickerLoader {

    public boolean isStaticSticker=false;
    private static final String TAG = "DynamicStickerLoader";

    // è´´çº¸çº¹ç?†
    private int mStickerTexture;
    // æš‚å­˜çº¹ç?†idï¼Œç”¨äºŽå¤?ç”¨
    private int mRestoreTexture;
    // è´´çº¸æ‰€åœ¨çš„æ–‡ä»¶å¤¹
    private String mFolderPath;
    // è´´çº¸æ•°æ?®
    private DynamicStickerData mStickerData;
    // ç´¢å¼•ç´¢å¼•åŠ è½½å™¨
    private ResourceIndexCodec mResourceIndexCodec;
    // å½“å‰?ç´¢å¼•
    private int mFrameIndex = -1;
    // å½“å‰?æ—¶é—´
    private long mCurrentTime = -1L;
    // è´´çº¸æ»¤é•œ
    private final WeakReference<DynamicStickerBaseFilter> mWeakFilter;
    public DynamicStickerLoader(boolean isStaticSticker,DynamicStickerBaseFilter filter, DynamicStickerData stickerData, String folderPath) {
        this.isStaticSticker=isStaticSticker;
        mWeakFilter = new WeakReference<>(filter);
        mStickerTexture = OpenGLUtils.GL_NOT_TEXTURE;
        mRestoreTexture = OpenGLUtils.GL_NOT_TEXTURE;
        mFolderPath = folderPath.startsWith("file://") ? folderPath.substring("file://".length()) : folderPath;
        mStickerData = stickerData;
        Pair pair = ResourceCodec.getResourceFile(mFolderPath);
        if (pair != null) {
            mResourceIndexCodec = new ResourceIndexCodec(mFolderPath + "/" + (String) pair.first, mFolderPath + "/" + (String) pair.second);
        }
        if (mResourceIndexCodec != null) {
            try {
                mResourceIndexCodec.init();
            } catch (IOException e) {
                Log.e(TAG, "init merge res reader failed", e);
                mResourceIndexCodec = null;
            }
        }
        mStickerTexture = OpenGLUtils.GL_NOT_TEXTURE;
        mRestoreTexture = OpenGLUtils.GL_NOT_TEXTURE;
        // å¦‚æžœå­˜åœ¨çš„éŸ³ä¹?è·¯å¾„ï¼Œåˆ™æ’­æ”¾éœ€è¦?åˆ?å§‹åŒ–è·¯å¾„
        if (!TextUtils.isEmpty(mStickerData.audioPath)) {
            String str;
            if (mFolderPath.startsWith("file://")) {
                str = mFolderPath.substring("file://".length());
            } else {
                str = mFolderPath;
            }
            if (mWeakFilter.get() != null) {
                mWeakFilter.get().setAudioPath(Uri.parse(str + "/" + mStickerData.audioPath));
                mWeakFilter.get().setLooping(mStickerData.audioLooping);
            }
        }
    }
    public DynamicStickerLoader(DynamicStickerBaseFilter filter, DynamicStickerData stickerData, String folderPath) {
       this(false,filter,stickerData,folderPath);
    }

    /**
     * æ›´æ–°è´´çº¸çº¹ç?†
     */
    public void updateStickerTexture() {
        // åˆ¤æ–­äººè„¸æ˜¯å?¦å­˜åœ¨
        if (!LandmarkEngine.getInstance().hasFace()&&!isStaticSticker) {
            mCurrentTime = -1L;
            if (mWeakFilter.get() != null) {
                mWeakFilter.get().stopPlayer();
            }
            return;
        }

        // å¦‚æžœå¦‚æžœå­˜åœ¨éŸ³ä¹?å¹¶ä¸”åŠ¨ä½œæ ‡è®°ä¸º0ï¼Œåˆ™è¡¨ç¤ºå±žäºŽé»˜è®¤éŸ³ä¹?ï¼Œç›´æŽ¥å¼€å§‹æ’­æ”¾éŸ³ä¹?
        if (!TextUtils.isEmpty(mStickerData.audioPath) && mStickerData.action == 0) {
            if (mWeakFilter.get() != null) {
                mWeakFilter.get().startPlayer();
            }
        }

        // å¤„ç?†è´´çº¸ç´¢å¼•
        if (mCurrentTime == -1L) {
            mCurrentTime = System.currentTimeMillis();
        }
        int frameIndex = (int) ((System.currentTimeMillis() - mCurrentTime) / mStickerData.duration);
        if (frameIndex >= mStickerData.frames) {
            if (!mStickerData.stickerLooping) {
                mCurrentTime = -1L;
                mRestoreTexture = mStickerTexture;
                mStickerTexture = OpenGLUtils.GL_NOT_TEXTURE;
                mFrameIndex = -1;
                return;
            }
            frameIndex = 0;
            mCurrentTime = System.currentTimeMillis();
        }
        if (frameIndex < 0) {
            frameIndex = 0;
        }
        if (mFrameIndex == frameIndex) {
            return;
        }

        // é‡?æ–°æ’­æ”¾éŸ³ä¹?ï¼ŒéŸ³ä¹?å¯¹é½?
        if ((frameIndex == 0) && (mStickerData.audioLooping)) {
            if (mWeakFilter.get() != null) {
                mWeakFilter.get().restartPlayer();
            }
        }
        // æ ¹æ?®å¸§ç´¢å¼•è¯»å?–è´´çº¸
        Bitmap bitmap = null;
        if (mResourceIndexCodec != null) {
            bitmap = mResourceIndexCodec.loadResource(frameIndex);
        }
        if (bitmap == null) {
            String path = String.format(mStickerData.stickerName + "_%03d.png", new Object[]{frameIndex});
            bitmap = BitmapUtils.getBitmapFromFile(mFolderPath + "/" + path);
        }
        if (null != bitmap) {
            // å¦‚æžœæ­¤æ—¶æš‚å­˜çš„çº¹ç?†IDå­˜åœ¨ï¼Œåˆ™å¤?ç”¨è¯¥ID
            if (mStickerTexture == OpenGLUtils.GL_NOT_TEXTURE
                    && mRestoreTexture != OpenGLUtils.GL_NOT_TEXTURE) {
                mStickerTexture = mRestoreTexture;
            }
            if (mStickerTexture == OpenGLUtils.GL_NOT_TEXTURE) {
                mStickerTexture = OpenGLUtils.createTexture(bitmap);
            } else {
                mStickerTexture = OpenGLUtils.createTexture(bitmap, mStickerTexture);
            }
            mRestoreTexture = mStickerTexture;
            mFrameIndex = frameIndex;
            bitmap.recycle();
        } else {
            mRestoreTexture = mStickerTexture;
            mStickerTexture = OpenGLUtils.GL_NOT_TEXTURE;
            mFrameIndex = -1;
        }
    }

    /**
     * é‡Šæ”¾èµ„æº?
     */
    public void release() {
        if (mStickerTexture == OpenGLUtils.GL_NOT_TEXTURE) {
            mStickerTexture = mRestoreTexture;
        }
        OpenGLUtils.deleteTexture(mStickerTexture);
        mStickerTexture = OpenGLUtils.GL_NOT_TEXTURE;
        mRestoreTexture = OpenGLUtils.GL_NOT_TEXTURE;
        if (mWeakFilter.get() != null) {
            mWeakFilter.clear();
        }
    }

    /**
     * èŽ·å?–è´´çº¸çº¹ç?†
     * @return
     */
    public int getStickerTexture() {
        return mStickerTexture;
    }

    /**
     * æœ€å¤§è´´çº¸æ¸²æŸ“æ¬¡æ•°
     * @return
     */
    public int getMaxCount() {
        return mStickerData == null ? 0 : mStickerData.maxCount;
    }

    /**
     * èŽ·å?–è´´çº¸å?‚æ•°å¯¹è±¡
     * @return
     */
    public DynamicStickerData getStickerData() {
        return mStickerData;
    }
}
