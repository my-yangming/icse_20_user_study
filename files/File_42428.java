/*
 * Copyright 2015-2102 RonCoo(http://www.roncoo.com) Group.
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *  
 *      http://www.apache.org/licenses/LICENSE-2.0
 *  
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.roncoo.pay.common.core.utils;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.io.UnsupportedEncodingException;
import java.util.*;

/**
 * Stringå­—ç¬¦ä¸²å·¥å…·ç±».
 * @companyï¼šå¹¿å·žé¢†è¯¾ç½‘ç»œç§‘æŠ€æœ‰é™?å…¬å?¸ï¼ˆé¾™æžœå­¦é™¢ www.roncoo.comï¼‰.
 * @author zenghao
 */
public final class StringUtil {

    private static final Log LOG = LogFactory.getLog(StringUtil.class);

    /**
     * ç§?æœ‰æž„é€ æ–¹æ³•,å°†è¯¥å·¥å…·ç±»è®¾ä¸ºå?•ä¾‹æ¨¡å¼?.
     */
    private StringUtil() {
    }

    /**
     * å‡½æ•°åŠŸèƒ½è¯´æ˜Ž ï¼š åˆ¤æ–­å­—ç¬¦ä¸²æ˜¯å?¦ä¸ºç©º . ä¿®æ”¹è€…å??å­—ï¼š ä¿®æ”¹æ—¥æœŸï¼š ä¿®æ”¹å†…å®¹ï¼š
     * 
     * @å?‚æ•°ï¼š @param str
     * @å?‚æ•°ï¼š @return
     * @return boolean
     * @throws
     */
    public static boolean isEmpty(String str) {
        return null == str || "".equals(str);
    }

    /**
     * å‡½æ•°åŠŸèƒ½è¯´æ˜Ž ï¼š åˆ¤æ–­å¯¹è±¡æ•°ç»„æ˜¯å?¦ä¸ºç©º. ä¿®æ”¹è€…å??å­—ï¼š ä¿®æ”¹æ—¥æœŸï¼š ä¿®æ”¹å†…å®¹ï¼š
     * 
     * @å?‚æ•°ï¼š @param obj
     * @å?‚æ•°ï¼š @return
     * @return boolean
     * @throws
     */
    public static boolean isEmpty(Object[] obj) {
        return null == obj || 0 == obj.length;
    }

    /**
     * å‡½æ•°åŠŸèƒ½è¯´æ˜Ž ï¼š åˆ¤æ–­å¯¹è±¡æ˜¯å?¦ä¸ºç©º. ä¿®æ”¹è€…å??å­—ï¼š ä¿®æ”¹æ—¥æœŸï¼š ä¿®æ”¹å†…å®¹ï¼š
     * 
     * @å?‚æ•°ï¼š @param obj
     * @å?‚æ•°ï¼š @return
     * @return boolean
     * @throws
     */
    public static boolean isEmpty(Object obj) {
        if (null == obj) {
            return true;
        }
        if (obj instanceof String) {
            return ((String) obj).trim().isEmpty();
        }
        return !(obj instanceof Number) ? false : false;
    }

    /**
     * å‡½æ•°åŠŸèƒ½è¯´æ˜Ž ï¼š åˆ¤æ–­é›†å?ˆæ˜¯å?¦ä¸ºç©º. ä¿®æ”¹è€…å??å­—ï¼š ä¿®æ”¹æ—¥æœŸï¼š ä¿®æ”¹å†…å®¹ï¼š
     * 
     * @å?‚æ•°ï¼š @param obj
     * @å?‚æ•°ï¼š @return
     * @return boolean
     * @throws
     */
    public static boolean isEmpty(List<?> obj) {
        return null == obj || obj.isEmpty();
    }

    /**
     * å‡½æ•°åŠŸèƒ½è¯´æ˜Ž ï¼š åˆ¤æ–­Mapé›†å?ˆæ˜¯å?¦ä¸ºç©º. ä¿®æ”¹è€…å??å­—ï¼š ä¿®æ”¹æ—¥æœŸï¼š ä¿®æ”¹å†…å®¹ï¼š
     * 
     * @å?‚æ•°ï¼š @param obj
     * @å?‚æ•°ï¼š @return
     * @return boolean
     * @throws
     */
    public static boolean isEmpty(Map<?, ?> obj) {
        return null == obj || obj.isEmpty();
    }

    /**
     * å‡½æ•°åŠŸèƒ½è¯´æ˜Ž ï¼š èŽ·å¾—æ–‡ä»¶å??çš„å?Žç¼€å??. ä¿®æ”¹è€…å??å­—ï¼š ä¿®æ”¹æ—¥æœŸï¼š ä¿®æ”¹å†…å®¹ï¼š
     * 
     * @å?‚æ•°ï¼š @param fileName
     * @å?‚æ•°ï¼š @return
     * @return String
     * @throws
     */
    public static String getExt(String fileName) {
        return fileName.substring(fileName.lastIndexOf(".") + 1);
    }

    /**
     * èŽ·å?–åŽ»æŽ‰æ¨ªçº¿çš„é•¿åº¦ä¸º32çš„UUIDä¸².
     * 
     * @author WuShuicheng.
     * @return uuid.
     */
    public static String get32UUID() {
        return UUID.randomUUID().toString().replace("-", "");
    }

    /**
     * èŽ·å?–å¸¦æ¨ªçº¿çš„é•¿åº¦ä¸º36çš„UUIDä¸².
     * 
     * @author WuShuicheng.
     * @return uuid.
     */
    public static String get36UUID() {
        return UUID.randomUUID().toString();
    }

    /**
     * éªŒè¯?ä¸€ä¸ªå­—ç¬¦ä¸²æ˜¯å?¦å®Œå…¨ç”±çº¯æ•°å­—ç»„æˆ?çš„å­—ç¬¦ä¸²ï¼Œå½“å­—ç¬¦ä¸²ä¸ºç©ºæ—¶ä¹Ÿè¿”å›žfalse.
     * 
     * @author WuShuicheng .
     * @param str
     *            è¦?åˆ¤æ–­çš„å­—ç¬¦ä¸² .
     * @return true or false .
     */
    public static boolean isNumeric(String str) {
        if (StringUtils.isBlank(str)) {
            return false;
        } else {
            return str.matches("\\d*");
        }
    }

    /**
     * è®¡ç®—é‡‡ç”¨utf-8ç¼–ç ?æ–¹å¼?æ—¶å­—ç¬¦ä¸²æ‰€å? å­—èŠ‚æ•°
     * 
     * @param content
     * @return
     */
    public static int getByteSize(String content) {
        int size = 0;
        if (null != content) {
            try {
                // æ±‰å­—é‡‡ç”¨utf-8ç¼–ç ?æ—¶å? 3ä¸ªå­—èŠ‚
                size = content.getBytes("utf-8").length;
            } catch (UnsupportedEncodingException e) {
                LOG.error(e);
            }
        }
        return size;
    }

    /**
     * å‡½æ•°åŠŸèƒ½è¯´æ˜Ž ï¼š æˆªå?–å­—ç¬¦ä¸²æ‹¼æŽ¥inæŸ¥è¯¢å?‚æ•°. ä¿®æ”¹è€…å??å­—ï¼š ä¿®æ”¹æ—¥æœŸï¼š ä¿®æ”¹å†…å®¹ï¼š
     * 
     * @å?‚æ•°ï¼š @param ids
     * @å?‚æ•°ï¼š @return
     * @return String
     * @throws
     */
    public static List<String> getInParam(String param) {
        boolean flag = param.contains(",");
        List<String> list = new ArrayList<String>();
        if (flag) {
            list = Arrays.asList(param.split(","));
        } else {
            list.add(param);
        }
        return list;
    }

    /**
     * åˆ¤æ–­å¯¹è±¡æ˜¯å?¦ä¸ºç©º
     *
     * @param obj
     * @return
     */
    public static boolean isNotNull(Object obj) {
        if (obj != null && obj.toString() != null && !"".equals(obj.toString().trim())) {
            return true;
        } else {
            return false;
        }
    }

}
