package com.vondear.rxui.view.popupwindows;

import android.content.Context;
import android.graphics.Rect;
import android.graphics.drawable.BitmapDrawable;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.PopupWindow;
import android.widget.TextView;

import com.vondear.rxtool.RxDeviceTool;
import com.vondear.rxtool.RxImageTool;
import com.vondear.rxtool.model.ActionItem;
import com.vondear.rxui.R;

import java.util.ArrayList;

/***
 * @author vondear
 * åŠŸèƒ½æ??è¿°ï¼šæ ‡é¢˜æŒ‰é’®ä¸Šçš„å¼¹çª—ï¼ˆç»§æ‰¿è‡ªPopupWindowï¼‰
 */
public class RxPopupSingleView extends PopupWindow {
    // åˆ—è¡¨å¼¹çª—çš„é—´éš”
    protected final int LIST_PADDING = 10;
    // å??æ ‡çš„ä½?ç½®ï¼ˆxã€?yï¼‰
    private final int[] mLocation = new int[2];
    private Context mContext;
    // å®žä¾‹åŒ–ä¸€ä¸ªçŸ©å½¢
    private Rect mRect = new Rect();
    // å±?å¹•çš„å®½åº¦å’Œé«˜åº¦
    private int mScreenWidth, mScreenHeight;

    // åˆ¤æ–­æ˜¯å?¦éœ€è¦?æ·»åŠ æˆ–æ›´æ–°åˆ—è¡¨å­?ç±»é¡¹
    private boolean mIsDirty;

    // ä½?ç½®ä¸?åœ¨ä¸­å¿ƒ
    private int popupGravity = Gravity.NO_GRAVITY;

    // å¼¹çª—å­?ç±»é¡¹é€‰ä¸­æ—¶çš„ç›‘å?¬
    private OnItemOnClickListener mItemOnClickListener;

    // å®šä¹‰åˆ—è¡¨å¯¹è±¡
    private ListView mListView;

    // å®šä¹‰å¼¹çª—å­?ç±»é¡¹åˆ—è¡¨
    private ArrayList<ActionItem> mActionItems = new ArrayList<ActionItem>();
    private int colorItemText = 0;

    public RxPopupSingleView(Context context) {
        // è®¾ç½®å¸ƒå±€çš„å?‚æ•°
        this(context, LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
    }

    public RxPopupSingleView(Context context, int width, int height) {
        this.mContext = context;

        // è®¾ç½®å?¯ä»¥èŽ·å¾—ç„¦ç‚¹
        setFocusable(true);
        // è®¾ç½®å¼¹çª—å†…å?¯ç‚¹å‡»
        setTouchable(true);
        // è®¾ç½®å¼¹çª—å¤–å?¯ç‚¹å‡»
        setOutsideTouchable(true);

        // èŽ·å¾—å±?å¹•çš„å®½åº¦å’Œé«˜åº¦
        mScreenWidth = RxDeviceTool.getScreenWidth(mContext);
        mScreenHeight = RxDeviceTool.getScreenHeight(mContext);

        // è®¾ç½®å¼¹çª—çš„å®½åº¦å’Œé«˜åº¦
        setWidth(width);
        setHeight(height);

        setBackgroundDrawable(new BitmapDrawable());

        // è®¾ç½®å¼¹çª—çš„å¸ƒå±€ç•Œé?¢
        setContentView(LayoutInflater.from(mContext).inflate(
                R.layout.popupwindow_layout, null));

        initUI();
    }

    public RxPopupSingleView(Context context, int width, int height, int layout) {
        this.mContext = context;

        // è®¾ç½®å?¯ä»¥èŽ·å¾—ç„¦ç‚¹
        setFocusable(true);
        // è®¾ç½®å¼¹çª—å†…å?¯ç‚¹å‡»
        setTouchable(true);
        // è®¾ç½®å¼¹çª—å¤–å?¯ç‚¹å‡»
        setOutsideTouchable(true);

        // èŽ·å¾—å±?å¹•çš„å®½åº¦å’Œé«˜åº¦
        mScreenWidth = RxDeviceTool.getScreenWidth(mContext);
        mScreenHeight = RxDeviceTool.getScreenHeight(mContext);

        // è®¾ç½®å¼¹çª—çš„å®½åº¦å’Œé«˜åº¦
        setWidth(width);
        setHeight(height);

        setBackgroundDrawable(new BitmapDrawable());

        // è®¾ç½®å¼¹çª—çš„å¸ƒå±€ç•Œé?¢
        setContentView(LayoutInflater.from(mContext).inflate(
                layout, null));

        initUI();
    }

    /**
     * åˆ?å§‹åŒ–å¼¹çª—åˆ—è¡¨
     */
    private void initUI() {
        mListView = getContentView().findViewById(R.id.title_list);

        mListView.setOnItemClickListener(new OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> arg0, View arg1, int index,
                                    long arg3) {
                // ç‚¹å‡»å­?ç±»é¡¹å?Žï¼Œå¼¹çª—æ¶ˆå¤±
                dismiss();

                if (mItemOnClickListener != null) {
                    mItemOnClickListener.onItemClick(mActionItems.get(index),
                            index);
                }
            }
        });
    }

    /**
     * æ˜¾ç¤ºå¼¹çª—åˆ—è¡¨ç•Œé?¢
     */
    public void show(View view) {
        // èŽ·å¾—ç‚¹å‡»å±?å¹•çš„ä½?ç½®å??æ ‡
        view.getLocationOnScreen(mLocation);

        // è®¾ç½®çŸ©å½¢çš„å¤§å°?
        mRect.set(mLocation[0], mLocation[1], mLocation[0] + view.getWidth(),
                mLocation[1] + view.getHeight());

        // åˆ¤æ–­æ˜¯å?¦éœ€è¦?æ·»åŠ æˆ–æ›´æ–°åˆ—è¡¨å­?ç±»é¡¹
        if (mIsDirty) {
            populateActions();
        }

        // æ˜¾ç¤ºå¼¹çª—çš„ä½?ç½®
        showAtLocation(view, popupGravity, mScreenWidth - LIST_PADDING - (getWidth() / 2), mRect.bottom + RxImageTool.dp2px(7.5f));
    }

    /**
     * æ˜¾ç¤ºå¼¹çª—åˆ—è¡¨ç•Œé?¢
     */
    public void show(View view, int dex) {
        // èŽ·å¾—ç‚¹å‡»å±?å¹•çš„ä½?ç½®å??æ ‡
        view.getLocationOnScreen(mLocation);

        // è®¾ç½®çŸ©å½¢çš„å¤§å°?
        mRect.set(mLocation[0], mLocation[1], mLocation[0] + view.getWidth(),
                mLocation[1] + view.getHeight());

        // åˆ¤æ–­æ˜¯å?¦éœ€è¦?æ·»åŠ æˆ–æ›´æ–°åˆ—è¡¨å­?ç±»é¡¹
        if (mIsDirty) {
            populateActions();
        }

        // æ˜¾ç¤ºå¼¹çª—çš„ä½?ç½®
        showAtLocation(view, popupGravity, mLocation[0], mRect.bottom + dex);
    }

    public void setColorItemText(int colorItemText) {
        this.colorItemText = colorItemText;
    }

    /**
     * è®¾ç½®å¼¹çª—åˆ—è¡¨å­?é¡¹
     */
    private void populateActions() {
        mIsDirty = false;

        // è®¾ç½®åˆ—è¡¨çš„é€‚é…?å™¨
        mListView.setAdapter(new BaseAdapter() {
            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                TextView tv_itpop = null;
                ImageView iv_itpop = null;
                if (convertView == null) {
                    convertView = LayoutInflater.from(mContext).inflate(R.layout.item_listview_popup, null);
                }
                tv_itpop = convertView.findViewById(R.id.tv_itpop);
                iv_itpop = convertView.findViewById(R.id.iv_itpop);
                if (colorItemText == 0) {
                    colorItemText = mContext.getResources().getColor(android.R.color.white);
                }
                tv_itpop.setTextColor(colorItemText);
                tv_itpop.setTextSize(14);
                // è®¾ç½®æ–‡æœ¬å±…ä¸­
                tv_itpop.setGravity(Gravity.CENTER);
                // è®¾ç½®æ–‡æœ¬åŸŸçš„èŒƒå›´
                tv_itpop.setPadding(0, 10, 0, 10);
                // è®¾ç½®æ–‡æœ¬åœ¨ä¸€è¡Œå†…æ˜¾ç¤ºï¼ˆä¸?æ?¢è¡Œï¼‰
                tv_itpop.setSingleLine(true);

                ActionItem item = mActionItems.get(position);

                // è®¾ç½®æ–‡æœ¬æ–‡å­—
                tv_itpop.setText(item.mTitle);
                if (item.mResourcesId == 0) {
                    iv_itpop.setVisibility(View.GONE);
                } else {
                    iv_itpop.setVisibility(View.VISIBLE);
                    iv_itpop.setImageResource(item.mResourcesId);
                }

                return convertView;
            }

            @Override
            public long getItemId(int position) {
                return position;
            }

            @Override
            public Object getItem(int position) {
                return mActionItems.get(position);
            }

            @Override
            public int getCount() {
                return mActionItems.size();
            }
        });
    }

    /**
     * æ·»åŠ å­?ç±»é¡¹
     */
    public void addAction(ActionItem action) {
        if (action != null) {
            mActionItems.add(action);
            mIsDirty = true;
        }
    }

    /**
     * æ¸…é™¤å­?ç±»é¡¹
     */
    public void cleanAction() {
        if (mActionItems.isEmpty()) {
            mActionItems.clear();
            mIsDirty = true;
        }
    }

    /**
     * æ ¹æ?®ä½?ç½®å¾—åˆ°å­?ç±»é¡¹
     */
    public ActionItem getAction(int position) {
        if (position < 0 || position > mActionItems.size()) {
            return null;
        }
        return mActionItems.get(position);
    }

    /**
     * è®¾ç½®ç›‘å?¬äº‹ä»¶
     */
    public void setItemOnClickListener(
            OnItemOnClickListener onItemOnClickListener) {
        this.mItemOnClickListener = onItemOnClickListener;
    }

    /**
     * @author yangyu åŠŸèƒ½æ??è¿°ï¼šå¼¹çª—å­?ç±»é¡¹æŒ‰é’®ç›‘å?¬äº‹ä»¶
     */
    public interface OnItemOnClickListener {
        void onItemClick(ActionItem item, int position);
    }
}
