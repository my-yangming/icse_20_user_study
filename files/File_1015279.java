package info.xiaomo.core.untils;

import org.apache.commons.lang3.StringUtils;

import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;

/**
 * è¿™æ˜¯ä¸ªæ­£åˆ™è¡¨è¾¾å¼?åº”ç”¨ç±»ï¼Œç”¨æ?¥åŒ¹é…?å’Œæ›¿æ?¢å­—ä¸²ç”¨çš„
 *
 * @author xiaomo
 */

public class RegExUtil {

    /**
     * ç”¨æˆ·å??
     */
    public static final String USER_NAME = "^[a-zA-Z\\u4E00-\\u9FA5][a-zA-Z0-9_\\u4E00-\\u9FA5]{1,11}$";

    /**
     * å¯†ç ?
     */
    public static final String USER_PASSWORD = "^.{6,32}$";

    /**
     * é‚®ç®±
     */
    public static final String EMAIL = "^\\w+([-+.]*\\w+)*@([\\da-z](-[\\da-z])?)+(\\.{1,2}[a-z]+)+$";

    /**
     * æ‰‹æœºå?·
     */
    public static final String PHONE = "^1[34578]\\d{9}$";

    /**
     * æ‰‹æœºå?·æˆ–è€…é‚®ç®±
     */
    public static final String EMAIL_OR_PHONE = EMAIL + "|" + PHONE;

    /**
     * URLè·¯å¾„
     */
    public static final String URL = "^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})(:[\\d]+)?([\\/\\w\\.-]*)*\\/?$";

    /**
     * èº«ä»½è¯?æ ¡éªŒï¼Œåˆ?çº§æ ¡éªŒï¼Œå…·ä½“è§„åˆ™æœ‰ä¸€å¥—ç®—æ³•
     */
    public static final String ID_CARD = "^\\d{15}$|^\\d{17}([0-9]|X)$";

    /**
     * ç¼–è¯‘ä¼ å…¥æ­£åˆ™è¡¨è¾¾å¼?å’Œå­—ç¬¦ä¸²åŽ»åŒ¹é…?,å¿½ç•¥å¤§å°?å†™
     *
     * @param regex        regex
     * @param beTestString beTestString
     */
    public static boolean match(String regex, String beTestString) {
        Pattern pattern = Pattern.compile(regex, Pattern.CASE_INSENSITIVE);
        Matcher matcher = pattern.matcher(beTestString);
        return matcher.matches();
    }

    /**
     * ç¼–è¯‘ä¼ å…¥æ­£åˆ™è¡¨è¾¾å¼?åœ¨å­—ç¬¦ä¸²ä¸­å¯»æ‰¾ï¼Œå¦‚æžœåŒ¹é…?åˆ°åˆ™ä¸ºtrue
     *
     * @param regex        regex
     * @param beTestString beTestString
     */
    public static boolean find(String regex, String beTestString) {
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(beTestString);
        return matcher.find();
    }

    /**
     * ç¼–è¯‘ä¼ å…¥æ­£åˆ™è¡¨è¾¾å¼?åœ¨å­—ç¬¦ä¸²ä¸­å¯»æ‰¾ï¼Œå¦‚æžœæ‰¾åˆ°è¿”å›žç¬¬ä¸€ä¸ªç»“æžœ<br/>
     * æ‰¾ä¸?åˆ°è¿”å›žnull
     *
     * @param regex         regex
     * @param beFoundString beFoundString
     */
    public static String findResult(String regex, String beFoundString) {
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(beFoundString);
        if (matcher.find()) {
            return matcher.group();
        }
        return null;
    }

    /**
     * éš?è—?æ‰‹æœºå?·ä¸­é—´4ä½?
     *
     * @param phone phone
     * @return String
     */
    public static String encodePhone(String phone) {
        if (StringUtils.isBlank(phone)) {
            return "";
        }
        if (match(PHONE, phone)) {
            String begin = phone.substring(0, 3);
            String end = phone.substring(7, phone.length());
            return begin + "****" + end;
        }
        return phone;
    }

    /**
     * è¦?æ±‚å¤§å°?å†™éƒ½åŒ¹é…?æ­£åˆ™è¡¨è¾¾å¼?
     *
     * @param pattern æ­£åˆ™è¡¨è¾¾å¼?æ¨¡å¼?
     * @param str     è¦?åŒ¹é…?çš„å­—ä¸²
     * @return booleanå€¼
     * @since 1.0
     */
    public static boolean ereg(String pattern, String str) throws PatternSyntaxException {
        Pattern p = Pattern.compile(pattern);
        Matcher m = p.matcher(str);
        return m.find();
    }

    /**
     * åŒ¹é…?ä¸”æ›¿æ?¢å­—ä¸²
     *
     * @param pattern æ­£åˆ™è¡¨è¾¾å¼?æ¨¡å¼?
     * @param newstr  è¦?æ›¿æ?¢åŒ¹é…?åˆ°çš„æ–°å­—ä¸²
     * @param str     åŽŸå§‹å­—ä¸²
     * @return åŒ¹é…?å?Žçš„å­—ç¬¦ä¸²
     * @since 1.0
     */

    public static String eregReplace(String pattern, String newstr, String str) throws PatternSyntaxException {
        Pattern p = Pattern.compile(pattern);
        Matcher m = p.matcher(str);
        return m.replaceAll(newstr);
    }

    /**
     * ä¸»è¦?ç”¨äºŽæ¨¡æ?¿ä¸­æ¨¡å?—æ ‡è®°åˆ†æž?å‡½æ•° æŠŠæŸ¥æ‰¾åˆ°çš„å…ƒç´ åŠ åˆ°vectorä¸­
     *
     * @param pattern ä¸ºæ­£åˆ™è¡¨è¾¾å¼?æ¨¡å¼?
     * @param str     åŽŸå§‹å­—ä¸²
     * @return vector
     * @since 1.0
     */
    public static Vector<String> splitTags2Vector(String pattern, String str) throws PatternSyntaxException {
        Vector<String> vector = new Vector<>();
        Pattern p = Pattern.compile(pattern);
        Matcher m = p.matcher(str);
        while (m.find()) {
            vector.add(eregReplace("(\\[\\#)|(\\#\\])", "", m.group()));
        }
        return vector;
    }

    /**
     * æ¨¡å?—æ ‡è®°åˆ†æž?å‡½æ•°
     * åŠŸèƒ½ä¸»è¦?æ˜¯æŠŠæŸ¥æ‰¾åˆ°çš„å…ƒç´ åŠ åˆ°vectorä¸­
     *
     * @param pattern ä¸ºæ­£åˆ™è¡¨è¾¾å¼?æ¨¡å¼?
     * @param str     åŽŸå§‹å­—ä¸²
     * @since 1.0
     */
    public static String[] splitTags(String pattern, String str) {
        Pattern p = Pattern.compile(pattern);
        Matcher m = p.matcher(str);
        String[] array = new String[m.groupCount()];
        int i = 0;
        while (m.find()) {
            array[i] = eregReplace("(\\[\\#)|(\\#\\])", "", m.group());
            i++;
        }
        return array;
    }


    /**
     * åŒ¹é…?æ‰€æœ‰ç¬¦å?ˆæ¨¡å¼?è¦?æ±‚çš„å­—ä¸²å¹¶åŠ åˆ°çŸ¢é‡?vectoræ•°ç»„ä¸­
     *
     * @param pattern ä¸ºæ­£åˆ™è¡¨è¾¾å¼?æ¨¡å¼?
     * @param str     åŽŸå§‹å­—ä¸²
     * @return vector
     * @since 1.0
     */
    public static Vector<String> regMatchAll2Vector(String pattern, String str) throws PatternSyntaxException {
        Vector<String> vector = new Vector<>();
        Pattern p = Pattern.compile(pattern);
        Matcher m = p.matcher(str);
        while (m.find()) {
            vector.add(m.group());
        }
        return vector;
    }

    /**
     * åŒ¹é…?æ‰€æœ‰ç¬¦å?ˆæ¨¡å¼?è¦?æ±‚çš„å­—ä¸²å¹¶åŠ åˆ°å­—ç¬¦ä¸²æ•°ç»„ä¸­
     *
     * @param pattern ä¸ºæ­£åˆ™è¡¨è¾¾å¼?æ¨¡å¼?
     * @param str     åŽŸå§‹å­—ä¸²
     * @return array
     * @since 1.0
     */
    public static String[] regMatchAll2Array(String pattern, String str) throws PatternSyntaxException {
        Pattern p = Pattern.compile(pattern);
        Matcher m = p.matcher(str);
        String[] array = new String[m.groupCount()];
        int i = 0;
        while (m.find()) {
            array[i] = m.group();
            i++;
        }
        return array;
    }

    /**
     * è½¬ä¹‰æ­£åˆ™è¡¨è¾¾å¼?å­—ç¬¦(ä¹‹æ‰€ä»¥éœ€è¦?å°†\å’Œ$å­—ç¬¦ç”¨escapeDollarBackslashæ–¹æ³•çš„æ–¹å¼?æ˜¯å› ä¸ºç”¨repalceAllæ˜¯ä¸?è¡Œçš„ï¼Œç®€å?•çš„è¯•è¯•"$".repalceAll("\\$","\\\\$")ä½ ä¼šå?‘çŽ°è¿™ä¸ªè°ƒç”¨ä¼šå¯¼è‡´æ•°ç»„è¶Šç•Œé”™è¯¯)
     *
     * @param original ä¸ºæ­£åˆ™è¡¨è¾¾å¼?æ¨¡å¼?
     * @return array
     * @since 1.0
     */
    public static String escapeDollarBackslash(String original) {
        StringBuilder buffer = new StringBuilder(original.length());
        for (int i = 0; i < original.length(); i++) {
            char c = original.charAt(i);
            if (c == '\\' || c == '$') {
                buffer.append("\\").append(c);
            } else {
                buffer.append(c);
            }
        }
        return buffer.toString();
    }

    /**
     * æ??å?–æŒ‡å®šå­—ä¸²çš„å‡½æ•°
     * åŠŸèƒ½ä¸»è¦?æ˜¯æŠŠæŸ¥æ‰¾åˆ°çš„å…ƒç´ 
     *
     * @param pattern ä¸ºæ­£åˆ™è¡¨è¾¾å¼?æ¨¡å¼?
     * @param str     åŽŸå§‹å­—ä¸²
     * @since 1.0
     */
    public static String fetchStr(String pattern, String str) {
        String returnValue = null;
        try {
            Pattern p = Pattern.compile(pattern);
            Matcher m = p.matcher(str);
            while (m.find()) {
                returnValue = m.group();
            }
            return returnValue;
        } catch (PatternSyntaxException e) {
            return returnValue;
        }
    }


    public static void main(String[] args) {
        System.out.println(ereg(ID_CARD, "420325199210211911"));
    }
}
