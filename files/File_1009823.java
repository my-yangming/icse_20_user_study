/*
 * Copyright (C) 2017-2018 Manbang Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.wlqq.phantom.communication;


import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

/**
 * ç®¡ç?†æ?’ä»¶æˆ–å®¿ä¸»æ??ä¾›ç»™å…¶ä»–æ?’ä»¶/å®¿ä¸»è°ƒç”¨çš„åŠŸèƒ½æŽ¥å?£ï¼Œæ??ä¾›åŠŸèƒ½æ¨¡å?—çš„æ³¨å†Œã€?å?¸è½½ã€?æŸ¥è¯¢å’ŒèŽ·å?–åŠŸèƒ½ã€‚
 */
public class PhantomServiceManager {

    // { service_category -> { service_name -> service_object } }
    private static final HashMap<String, HashMap<String, Object>> CATEGORY_SERVICES_MAP = new HashMap<>();
    private static String sHostPackage;
    private static String sHostVersionName;
    private static int sHostVersionCode;
    private static String sPhantomVersionName;
    private static int sPhantomVersionCode;
    private static boolean sInitialized;

    private PhantomServiceManager() {
    }

    /**
     * åˆ?å§‹åŒ– {@link PhantomServiceManager}ï¼Œ<b>å¿…é¡»</b>åœ¨è°ƒç”¨è¯¥ç±»å…¶ä»–æ–¹æ³•ä¹‹å‰?è°ƒç”¨è¯¥æ–¹æ³•
     *
     * @param hostPackage        å®¿ä¸»åŒ…å??
     * @param hostVersionName    å®¿ä¸»ç‰ˆæœ¬å??
     * @param hostVersionCode    å®¿ä¸»ç‰ˆæœ¬å?·
     * @param phantomVersionName Phantom ç‰ˆæœ¬å??
     * @param phantomVersionCode Phantom ç‰ˆæœ¬å?·
     */
    public static synchronized void init(String hostPackage,
            String hostVersionName,
            int hostVersionCode,
            String phantomVersionName,
            int phantomVersionCode) {
        if (sInitialized) {
            return;
        }

        sHostPackage = hostPackage;
        sHostVersionName = hostVersionName;
        sHostVersionCode = hostVersionCode;
        sPhantomVersionName = phantomVersionName;
        sPhantomVersionCode = phantomVersionCode;

        sInitialized = true;
    }

    /**
     * èŽ·å?–å®¿ä¸»åŒ…å??
     *
     * @return å®¿ä¸»åŒ…å??
     */
    public static String getHostPackage() {
        return sHostPackage;
    }

    /**
     * èŽ·å?–å®¿ä¸»ç‰ˆæœ¬å??
     *
     * @return å®¿ä¸»ç‰ˆæœ¬å??
     */
    public static String getHostVersionName() {
        return sHostVersionName;
    }

    /**
     * èŽ·å?–å®¿ä¸»ç‰ˆæœ¬å?·
     *
     * @return å®¿ä¸»ç‰ˆæœ¬å?·
     */
    public static int getHostVersionCode() {
        return sHostVersionCode;
    }

    /**
     * èŽ·å?–æ?’ä»¶æ¡†æž¶ç‰ˆæœ¬å??
     *
     * @return æ?’ä»¶æ¡†æž¶ç‰ˆæœ¬å??
     */
    public static String getPhantomVersionName() {
        return sPhantomVersionName;
    }

    /**
     * èŽ·å?–æ?’ä»¶æ¡†æž¶ç‰ˆæœ¬å?·
     *
     * @return æ?’ä»¶æ¡†æž¶ç‰ˆæœ¬å?·
     */
    public static int getPhantomVersionCode() {
        return sPhantomVersionCode;
    }

    /**
     * æ³¨å†ŒåŠŸèƒ½æ¨¡å?—
     *
     * @param category åŠŸèƒ½æ¨¡å?—æ‰€å±žç±»åˆ«ï¼Œ å?Œä¸€ä¸ªæ?’ä»¶ç±»åˆ«åº”è¯¥ä¸€è‡´ï¼Œé€šå¸¸ä½¿ç”¨ <b>å®¿ä¸»/æ?’ä»¶ åŒ…å??</b>
     * @param name     åŠŸèƒ½æ¨¡å?—çš„å??å­—ï¼Œå?Œä¸€ç±»åˆ«å?¯ä»¥æœ‰å¤šä¸ªåŠŸèƒ½æ¨¡å?—
     * @param service  åŠŸèƒ½æ¨¡å?—çš„å®žçŽ°
     * @return æ³¨å†Œæˆ?åŠŸè¿”å›ž trueï¼Œå?¦åˆ™è¿”å›ž false
     */
    public static boolean registerService(String category, String name, Object service) {
        if (null == category || 0 == category.length()
                || null == name || 0 == name.length()
                || null == service) {
            return false;
        }

        synchronized (CATEGORY_SERVICES_MAP) {
            HashMap<String, Object> services = CATEGORY_SERVICES_MAP.get(category);
            if (null == services) {
                services = new HashMap<>();
                CATEGORY_SERVICES_MAP.put(category, services);
            }

            //å­˜åœ¨æœ?åŠ¡å??ç§°ç›¸å?Œè€Œç±»ä¸?å?Œçš„æƒ…å†µä¸?å…?è®¸æ³¨å†Œï¼Œæœ?åŠ¡å??ç§°å’Œæœ?åŠ¡ç±»éƒ½ç›¸å?Œå…?è®¸è¦†ç›–ä¹‹å‰?çš„æœ?åŠ¡
            Object hasService = services.get(name);
            if (null != hasService && !hasService.getClass().getName().equals(service.getClass().getName())) {
                return false;
            }

            services.put(name, service);
        }

        return true;
    }

    /**
     * æ³¨å†ŒåŠŸèƒ½æ¨¡å?—
     *
     * @param name    æœ?åŠ¡å??å­—æ ¼å¼? packageName/name, å¦‚æžœæœ?åŠ¡å??ç§°ä¸?åŠ  packageNameï¼Œåˆ™é»˜è®¤è¢«æ³¨å†Œæˆ? sHostPackage/nameï¼Œè¢«è®¤ä¸ºæ˜¯å®¿ä¸»æ??ä¾›çš„æœ?åŠ¡
     * @param service åŠŸèƒ½æ¨¡å?—çš„å®žçŽ°
     * @return æ³¨å†Œæˆ?åŠŸè¿”å›ž trueï¼Œå?¦åˆ™è¿”å›ž false
     */
    public static boolean registerService(String name, Object service) {
        if (null == name) {
            return false;
        }

        if (!name.contains("/") && null != sHostPackage) {
            return registerService(sHostPackage, name, service);
        }

        String[] items = name.split("/");
        if (items.length != 2) {
            return false;
        }

        return registerService(items[0], items[1], service);
    }

    /**
     * æ³¨å†ŒåŠŸèƒ½æ¨¡å?—, æœ?åŠ¡å¯¹è±¡<b>å¿…é¡»</b>ä½¿ç”¨ {@link PhantomService} æ³¨è§£
     *
     * @param service service çš„å®žçŽ°ç±»å¿…é¡»ä½¿ç”¨ {@link PhantomService} æ³¨è§£
     * @return æˆ?åŠŸè¿”å›ž trueï¼Œå?¦åˆ™è¿”å›ž false
     * @throws IllegalArgumentException è‹¥æœ?åŠ¡ä¸º <b>null</b> æˆ–æ²¡æœ‰ä½¿ç”¨ {@link PhantomService} æ³¨è§£
     */
    public static boolean registerService(Object service) throws IllegalArgumentException {
        PhantomService serviceTypeAnnotation = checkPhantomServiceAnnotation(service);

        String serviceType = serviceTypeAnnotation.name();
        return registerService(serviceType, service);
    }

    /**
     * æ£€æŸ¥æœ?åŠ¡å¯¹è±¡ç±»æ˜¯å?¦ç”¨ {@link PhantomService} æ³¨è§£
     *
     * @param service æœ?åŠ¡å¯¹è±¡
     * @return {@link PhantomService} è‹¥æœ?åŠ¡ä½¿ç”¨äº† {@link PhantomService} æ³¨è§£
     * @throws IllegalArgumentException è‹¥æœ?åŠ¡ä¸º <b>null</b> æˆ–æ²¡æœ‰ä½¿ç”¨ {@link PhantomService} æ³¨è§£
     */
    private static PhantomService checkPhantomServiceAnnotation(Object service)
            throws IllegalArgumentException {
        if (service == null) {
            throw new IllegalArgumentException("service object must not be null");
        }
        final Class<?> aClass = service.getClass();
        PhantomService serviceTypeAnnotation = aClass.getAnnotation(PhantomService.class);
        if (serviceTypeAnnotation == null) {
            throw new IllegalArgumentException(
                    "service class must has PhantomService annotation: " + aClass.getName());
        } else {
            return serviceTypeAnnotation;
        }
    }

    /**
     * å??æ³¨å†ŒæŒ‡å®šç±»åˆ«çš„æ‰€æœ‰æœ?åŠ¡
     *
     * @param category åŠŸèƒ½æ¨¡å?—æ‰€å±žç±»åˆ«ï¼Œé€šå¸¸ä½¿ç”¨ <b>å®¿ä¸»/æ?’ä»¶ åŒ…å??</b>
     */
    public static void unregisterService(String category) {
        synchronized (CATEGORY_SERVICES_MAP) {
            CATEGORY_SERVICES_MAP.remove(category);
        }
    }

    /**
     * å??æ³¨å†Œæ‰€æœ‰æœ?åŠ¡
     */
    public static void unregisterAllService() {
        synchronized (CATEGORY_SERVICES_MAP) {
            CATEGORY_SERVICES_MAP.clear();
        }
    }

    /**
     * èŽ·å?–æŒ‡å®šæ¨¡å?—ä¸‹çš„ service åˆ—è¡¨
     *
     * @param category åŠŸèƒ½æ¨¡å?—ç±»åˆ«ï¼Œé€šå¸¸ä½¿ç”¨ <b>å®¿ä¸»/æ?’ä»¶ åŒ…å??</b>
     * @return category ç±»åˆ«ä¸‹çš„ service åˆ—è¡¨
     */
    public static List<IService> getServices(String category) {
        List<IService> services;

        synchronized (CATEGORY_SERVICES_MAP) {
            HashMap<String, Object> serviceObjectMap = CATEGORY_SERVICES_MAP.get(category);
            if (serviceObjectMap == null) {
                services = new ArrayList<>(0);
            } else {
                services = new ArrayList<>(serviceObjectMap.size());
                for (Object serviceObject : serviceObjectMap.values()) {
                    services.add(new ServiceModule(serviceObject));
                }
            }
        }

        return services;
    }

    /**
     * èŽ·å?–æŒ‡å®šç±»åˆ«/å??å­—ä¸‹çš„åŠŸèƒ½æ¨¡å?—
     *
     * @param category åŠŸèƒ½æ¨¡å?—ç±»åˆ«ï¼Œé€šå¸¸ä½¿ç”¨ <b>å®¿ä¸»/æ?’ä»¶ åŒ…å??</b>
     * @param name     åŠŸèƒ½æ¨¡å?—å??å­—
     * @return æˆ?åŠŸè¿”å›žåŠŸèƒ½æ¨¡å?—å®žä¾‹ï¼Œå?¦åˆ™è¿”å›ž null
     */
    public static IService getService(String category, String name) {
        synchronized (CATEGORY_SERVICES_MAP) {
            final HashMap<String, Object> services = CATEGORY_SERVICES_MAP.get(category);
            if (services == null) {
                return null;
            }

            return new ServiceModule(services.get(name));
        }
    }

    /**
     * æ ¹æ?®å??å­—èŽ·å?–åŠŸèƒ½æ¨¡å?—ï¼Œè¿”å›žæ‰¾åˆ°çš„ç¬¬ä¸€ä¸ªå??å­—ä¸º name çš„åŠŸèƒ½æ¨¡å?—ï¼Œå?¦åˆ™è¿”å›ž null
     *
     * @param name æœ?åŠ¡å??å­—æ ¼å¼? packageName/name, å¦‚æžœå?‚æ•° name ä¸­çœ?åŽ»äº† packageNameï¼Œåˆ™è¢«è®¤ä¸ºæ˜¯æŸ¥æ‰¾å®¿ä¸»ä¸­çš„æœ?åŠ¡ sHostPackage/name
     * @return æˆ?åŠŸè¿”å›žåŠŸèƒ½æ¨¡å?—å®žä¾‹ï¼Œå?¦åˆ™è¿”å›ž null
     */
    public static IService getService(String name) {
        if (null == name) {
            return null;
        }

        if (!name.contains("/") && null != sHostPackage) {
            return getService(sHostPackage, name);
        }

        String[] items = name.split("/");
        if (items.length != 2) {
            return null;
        }

        return getService(items[0], items[1]);
    }

    /**
     * æ ¹æ?®å??å­—èŽ·å?–åŠŸèƒ½æ¨¡å?—ï¼Œè¿”å›žæ‰¾åˆ°çš„ç¬¬ä¸€ä¸ªå??å­—ä¸º name çš„åŠŸèƒ½æ¨¡å?—ï¼Œå¹¶è½¬æ?¢ä¸º type å?‚æ•°æŒ‡å®šçš„æŽ¥å?£ç±»åž‹ï¼Œå?¦åˆ™è¿”å›ž null
     *
     * @param <T>  interface ç±»åž‹
     * @param name æœ?åŠ¡å??å­—æ ¼å¼? packageName/nameï¼Œå¦‚æžœå?‚æ•° name ä¸­çœ?åŽ»äº† packageNameï¼Œåˆ™è¢«è®¤ä¸ºæ˜¯æŸ¥æ‰¾å®¿ä¸»ä¸­çš„æœ?åŠ¡ sHostPackage/name
     * @param type è¿”å›žçš„å¯¹è±¡ç±»åž‹ï¼Œ type ä¸ºå¿…é¡»ä¸ºä¸€ä¸ª interface
     * @return æˆ?åŠŸè¿”å›ž type çš„ä¸€ä¸ªå¯¹è±¡ï¼Œå?¦åˆ™è¿”å›ž null
     */
    public static <T> T getService(String name, Class<T> type) {
        IService service = getService(name);
        return asInterface(service, type);
    }

    /**
     * æ˜¯å?¦æœ‰æ³¨å†ŒæŒ‡å®šå??å­—çš„æœ?åŠ¡
     *
     * @param name æœ?åŠ¡å??å­—æ ¼å¼? packageName/nameï¼Œå¦‚æžœå?‚æ•° name ä¸­çœ?åŽ»äº† packageNameï¼Œåˆ™è¢«è®¤ä¸ºæ˜¯æŸ¥æ‰¾å®¿ä¸»ä¸­çš„æœ?åŠ¡ sHostPackage/name
     * @return å¦‚ä½•æœ‰æ³¨å†Œï¼Œè¿”å›ž trueï¼›å?¦åˆ™è¿”å›ž false
     */
    public static boolean hasService(String name) {
        boolean res = false;

        synchronized (CATEGORY_SERVICES_MAP) {
            Collection<HashMap<String, Object>> allServices = CATEGORY_SERVICES_MAP.values();
            Iterator<HashMap<String, Object>> iter = allServices.iterator();
            while (iter.hasNext() && (!res)) {
                HashMap<String, Object> services = iter.next();
                res = services.containsKey(name);
            }
        }

        return res;
    }

    /**
     * å°†åŠŸèƒ½æ¨¡å?— service è½¬æ?¢æˆ?è‡ªå®šä¹‰æŽ¥å?£ï¼Œæ–¹ä¾¿è°ƒç”¨ã€‚
     *
     * @param <T>     interface ç±»åž‹
     * @param service éœ€è¦?è½¬æ?¢çš„åŠŸèƒ½æ¨¡å?—
     * @param type    è‡ªå®šä¹‰æŽ¥å?£
     * @return è‡ªå®šä¹‰æŽ¥å?£çš„å®žçŽ°ç±»
     */
    public static <T> T asInterface(IService service, Class<T> type) {
        T res = null;
        if (type.isInterface()) {
            ServiceInvocationHandler handler = new ServiceInvocationHandler(service);
            res = (T) Proxy.newProxyInstance(type.getClassLoader(),
                    new Class[]{type, ServiceInfo.class}, handler);
        }
        return res;
    }

    /**
     * æ˜¯å?¦æœ‰æ³¨å†ŒæŒ‡å®šå??å­—çš„æœ?åŠ¡
     *
     * @param category åŠŸèƒ½æ¨¡å?—æ‰€å±žç±»åˆ«ï¼Œ å?Œä¸€ä¸ªæ?’ä»¶ç±»åˆ«åº”è¯¥ä¸€è‡´ï¼Œé€šå¸¸ä½¿ç”¨ <b>å®¿ä¸»/æ?’ä»¶ åŒ…å??</b>
     * @param name     åŠŸèƒ½æ¨¡å?—çš„å??å­—ï¼Œå?Œä¸€ç±»åˆ«å?¯ä»¥æœ‰å¤šä¸ªåŠŸèƒ½æ¨¡å?—
     * @return å¦‚ä½•æœ‰æ³¨å†Œï¼Œè¿”å›ž true; å?¦åˆ™è¿”å›ž false
     */
    public static boolean hasService(String category, String name) {
        boolean res = false;

        synchronized (CATEGORY_SERVICES_MAP) {
            if (CATEGORY_SERVICES_MAP.containsKey(category)) {
                res = CATEGORY_SERVICES_MAP.get(category).containsKey(name);
            }
        }

        return res;
    }

    private static class ServiceInvocationHandler implements InvocationHandler {
        private final IService mService;

        public ServiceInvocationHandler(IService service) {
            this.mService = service;
        }

        @Override
        public Object invoke(Object proxy, Method method, Object[] args) {
            if (null == mService) {
                return null;
            }
            try {
                if (method.getDeclaringClass() == ServiceInfo.class) {
                    Method targetMethod = ServiceInfo.class.getDeclaredMethod(method.getName());
                    return targetMethod.invoke(mService, args);
                }

                return mService.call(method.getName(), args);
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }
    }
}


