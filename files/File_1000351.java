package org.nutz.dao;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;

import org.nutz.dao.impl.DaoExecutor;
import org.nutz.dao.sql.DaoStatement;
import org.nutz.dao.sql.SqlContext;
import org.nutz.lang.random.R;
import org.nutz.log.Log;
import org.nutz.log.Logs;

/**
 * Daoæ‰§è¡Œæ‹¦æˆªå™¨é“¾.
 * 
 * @author wendal
 * @see org.nutz.dao.impl.interceptor.DaoLogInterceptor
 * @see org.nutz.dao.impl.interceptor.DaoTimeInterceptor
 */
public class DaoInterceptorChain implements ConnCallback {

    private static final Log log = Logs.get();

    protected int autoTransLevel;

    protected Connection connection;

    protected int current = 0;

    protected DaoStatement daoStatement;

    protected DaoExecutor executor;

    protected List<DaoInterceptor> interceptors = new ArrayList<DaoInterceptor>();

    protected int updateCount;

    protected DaoStatement[] sts;

    protected String id;

    /**
     * æ–°å»ºä¸€ä¸ªDaoInterceptorChain.
     * 
     * @param sts
     *            å°†è¦?è¿›è¡Œçš„Daoæ“?ä½œ(ä¸?ä¸€å®šæ˜¯SQLæ“?ä½œ,æœ‰å?¯èƒ½æ˜¯EL)
     */
    public DaoInterceptorChain(DaoStatement... sts) {
        this.sts = sts;
        id = R.UU32();
    }

    /**
     * ç»§ç»­ä¸‹ä¸€ä¸ªæ‹¦æˆªå™¨,å¦‚æžœå·²ç»?æ˜¯æœ€å?Žä¸€ä¸ªæ‹¦æˆªå™¨,é‚£ä¹ˆæ‰§è¡Œexecutor.exec
     * 
     * @return æœ¬å¯¹è±¡,ç”¨äºŽé“¾å¼?æ“?ä½œ
     * @throws Exception
     */
    public DaoInterceptorChain doChain() throws DaoException {
        if (hasNext()) {
            DaoInterceptor interceptor = next();
            current++;
            interceptor.filter(this);
        } else {
            executor.exec(getConnection(), getDaoStatement());
            updateCount += getDaoStatement().getUpdateCount();
        }
        return this;
    }

    /**
     * èŽ·å?–å½“å‰?è‡ªåŠ¨äº‹åŠ¡çº§åˆ«,DaoRunnerä¸­ä½¿ç”¨å¼ºåˆ¶äº‹åŠ¡æ—¶ä¼šä½¿ç”¨ä¹‹.æ‹¦æˆªå™¨ä¸?èƒ½ä¿®æ”¹,å?³ä½¿ä¿®æ”¹ä¹Ÿä¸?ä¼šç”Ÿæ•ˆ
     * 
     * @return å½“å‰?è‡ªåŠ¨(å¼ºåˆ¶)äº‹åŠ¡çº§åˆ«
     */
    public int getAutoTransLevel() {
        return autoTransLevel;
    }

    /**
     * å½“å‰?æ‰§è¡Œçš„DaoStatement
     * 
     * @return å½“å‰?æ‰§è¡Œçš„DaoStatement
     */
    public DaoStatement getDaoStatement() {
        return daoStatement;
    }

    /**
     * å…¨éƒ¨DaoStatement,å?¯èƒ½ä¸?æ­¢ä¸€æ?¡
     * 
     * @return å…¨éƒ¨DaoStatement
     */
    public DaoStatement[] getDaoStatements() {
        return sts;
    }

    /**
     * æ‹¦æˆªå™¨åˆ—è¡¨(æš‚ä¸?å¼€æ”¾ä¿®æ”¹)
     * 
     * @return å…¨ä½“æ‹¦æˆªå™¨åˆ—è¡¨
     */
    public List<DaoInterceptor> getInterceptors() {
        return interceptors;
    }

    /**
     * æ›´æ–°æ€»æ•°,ç”¨äºŽDaoSupport(NutDao)èŽ·å?–æ›´æ–°æ€»æ•°.
     * 
     * @return æ›´æ–°è®°å½•æ€»æ•°
     */
    public int getUpdateCount() {
        return updateCount;
    }

    /**
     * æ˜¯å?¦è¿˜æœ‰ä¸‹ä¸€ä¸ªæ‹¦æˆªå™¨
     * 
     * @return true,å¦‚æžœè¿˜æœ‰æ‹¦æˆªå™¨è¦?æ‰§è¡Œ
     */
    public boolean hasNext() {
        return current < interceptors.size();
    }

    /**
     * è¿™æ˜¯DaoExecutorä¼šæ‰§è¡Œçš„æ–¹æ³•,æ‹¦æˆªå™¨å†…ä¸?è¦?æ‰§è¡Œè¿™ä¸ªæ–¹æ³•!! è¿™é‡Œä¹Ÿæ˜¯æ‹¦æˆªå™¨å¼€å§‹ç”Ÿæ•ˆçš„åœ°æ–¹.
     */
    public void invoke(Connection conn) throws Exception {
        for (DaoStatement st : sts) {
            if (st == null) {
                if (log.isInfoEnabled())
                    log.info("Found a null DaoStatement(SQL), ingore it ~~");
                continue;
            }
            current = 0;
            daoStatement = st;
            this.connection = conn;
            doChain();
        }
    }

    /**
     * èŽ·å?–ä¸‹ä¸€ä¸ªæ‹¦æˆªå™¨. è°ƒç”¨å‰?å¿…é¡»å…ˆè°ƒç”¨hasNextè¿›è¡Œåˆ¤æ–­
     * 
     * @return ä¸‹ä¸€ä¸ªæ‹¦æˆªå™¨
     */
    public DaoInterceptor next() {
        return interceptors.get(current);
    }

    /**
     * è®¾ç½®å¼ºåˆ¶äº‹åŠ¡çš„çº§åˆ«,å¯¹æ‹¦æˆªå™¨æ?¥è¯´æ— æ„?ä¹‰.
     * 
     * @param autoTransLevel
     *            ä¸ŽDaoSupport(NutDao)å†…çš„å€¼ä¸€è‡´
     */
    public void setAutoTransLevel(int autoTransLevel) {
        this.autoTransLevel = autoTransLevel;
    }

    /**
     * è®¾ç½®å½“å‰?æ‹¦æˆªå™¨ç´¢å¼•. è‹¥è®¾ç½®å€¼å¤§äºŽæ‹¦æˆªå™¨åˆ—è¡¨çš„å¤§å°?,é‚£ä¹ˆæ•ˆæžœå°±ç­‰å?ŒäºŽè·³è¿‡å‰©ä½™æ‹¦æˆªå™¨,ç›´æŽ¥æ‰§è¡ŒDaoStatement
     * 
     * @param current
     */
    public void setCurrent(int current) {
        this.current = current;
    }

    /**
     * è®¾ç½®DaoExecutor. å…¸åž‹åº”ç”¨æ˜¯åœ¨æ‹¦æˆªå™¨ä¸­æ›¿æ?¢æˆ?daocacheæ??ä¾›çš„DaoExecutor
     * 
     * @param executor
     *            æ–°çš„DaoExecutor,ä¸?å?¯ä»¥æ˜¯null
     */
    public void setExecutor(DaoExecutor executor) {
        this.executor = executor;
    }

    /**
     * è®¾ç½®æ–°çš„æ‹¦æˆªå™¨åˆ—è¡¨.
     * 
     * @param interceptors
     *            æ–°çš„æ‹¦æˆªå™¨åˆ—è¡¨
     */
    public void setInterceptors(List<DaoInterceptor> interceptors) {
        this.interceptors = interceptors;
    }

    /**
     * è®¾ç½®å½“å‰?ä½¿ç”¨çš„æ•°æ?®åº“è¿žæŽ¥
     * 
     * @param connection
     *            æ–°çš„æ•°æ?®åº“è¿žæŽ¥,ä¸?å?¯ä»¥æ˜¯null
     */
    public void setConnection(Connection connection) {
        this.connection = connection;
    }

    /**
     * èŽ·å?–å½“å‰?æ•°æ?®åº“è¿žæŽ¥
     * 
     * @return å½“å‰?æ•°æ?®åº“è¿žæŽ¥
     */
    public Connection getConnection() {
        return connection;
    }

    /**
     * èŽ·å?–å½“å‰?DaoStatementçš„ä¸Šä¸‹æ–‡,æ³¨æ„?,ä¸€ä¸ªæ‹¦æˆªå™¨é“¾å?¯èƒ½åŒ…å?«å¤šä¸ªDaoStatement
     * 
     * @return å½“å‰?DaoStatementçš„ä¸Šä¸‹æ–‡
     */
    public SqlContext getSqlContext() {
        return getDaoStatement().getContext();
    }

    /**
     * æ‹¦æˆªå™¨é“¾çš„id, ä¸ºä¸€ä¸ªuu32è¯†åˆ«ç¬¦.
     * 
     * @return æœ¬æ‹¦æˆªå™¨é“¾çš„id
     */
    public String getId() {
        return id;
    }
    
    /**
     * æ›¿æ?¢å½“å‰?æ‰§è¡Œçš„DaoStatement
     * @param daoStatement
     */
    public void setDaoStatement(DaoStatement daoStatement) {
        this.daoStatement = daoStatement;
    }
}
