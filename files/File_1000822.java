package org.nutz.trans;

import java.sql.Connection;
import java.sql.SQLException;

import javax.sql.DataSource;

import org.nutz.lang.Lang;
import org.nutz.lang.Mirror;
import org.nutz.log.Log;
import org.nutz.log.Logs;

/**
 * ç”¨æ¨¡æ?¿çš„æ–¹å¼?æ“?ä½œäº‹åŠ¡
 * 
 * @author zozoh(zozohtnt@gmail.com)
 * @author wendal(wendal1985@gmail.com)
 */
public abstract class Trans {
    
    private static final Log log = Logs.get();

    private static Class<? extends Transaction> implClass;
    
    /**
     * è¿™ä¸ªç±»æ??ä¾›çš„å?‡ä¸ºé?™æ€?æ–¹æ³•.
     */
    Trans() {}

    static ThreadLocal<Transaction> trans = new ThreadLocal<Transaction>();
    static ThreadLocal<Integer> count = new ThreadLocal<Integer>();
    
    /**
     * äº‹åŠ¡debugå¼€å…³
     */
    public static boolean DEBUG = false;

    /**
     * @return å½“å‰?çº¿ç¨‹çš„äº‹åŠ¡ï¼Œå¦‚æžœæ²¡æœ‰äº‹åŠ¡ï¼Œè¿”å›ž null
     */
    public static Transaction get() {
        return trans.get();
    }

    /**
     * è¿™ä¸ªå‡½æ•°å…?è®¸ä½ æ‰©å±•é»˜è®¤çš„ Nutz äº‹åŠ¡å®žçŽ°æ–¹å¼?
     * 
     * @param classOfTransaction
     *            ä½ çš„äº‹åŠ¡å®žçŽ°
     */
    public static void setup(Class<? extends Transaction> classOfTransaction) {
        implClass = classOfTransaction;
    }

    static void _begain(int level) throws Exception {
        Transaction tn = trans.get();
        if (null == tn) {
            tn = New();
            tn.setLevel(level);
            trans.set(tn);
            count.set(0);
            if (DEBUG)
                log.debugf("Start New Transaction id=%d, level=%d", tn.getId(), level);
        } else {
            if (DEBUG)
                log.debugf("Attach Transaction    id=%d, level=%d", tn.getId(), level);
        }
        int tCount = count.get() + 1;
        count.set(tCount);
        //if (DEBUG)
        //    log.debugf("trans_begain: %d", tCount);

    }

    static void _commit() throws Exception {
        count.set(count.get() - 1);
        Transaction tn = trans.get();
        if (count.get() == 0) {
            if (DEBUG)
                log.debug("Transaction Commit id="+tn.getId());
            tn.commit();
        } else {
            if (DEBUG)
                log.debugf("Transaction delay Commit id=%d, count=%d", tn.getId(), count.get());
        }
    }

    static void _depose() {
        if (count.get() == 0)
            try {
                if (DEBUG)
                    log.debugf("Transaction depose id=%d, count=%s", trans.get().getId(), count.get());
                trans.get().close();
            }
            catch (Throwable e) {
                throw Lang.wrapThrow(e);
            }
            finally {
                trans.set(null);
            }
    }

    static void _rollback(Integer num) {
        count.set(num);
        if (count.get() == 0) {
            if (DEBUG)
                log.debugf("Transaction rollback id=%s, count=%s", trans.get().getId(), num);
            trans.get().rollback();
        } else {
            if (DEBUG)
                log.debugf("Transaction delay rollback id=%s, count=%s", trans.get().getId(), num);
        }
    }

    /**
     * æ˜¯å?¦åœ¨äº‹åŠ¡ä¸­
     * @return çœŸ,å¦‚æžœåœ¨ä¸?äº‹åŠ¡ä¸­
     */
    public static boolean isTransactionNone() {
        Transaction t = trans.get();
        return null == t || t.getLevel() == Connection.TRANSACTION_NONE;
    }

    /**
     * æ‰§è¡Œä¸€ç»„åŽŸå­?æ“?ä½œï¼Œé»˜è®¤çš„äº‹åŠ¡çº§åˆ«ä¸º: TRANSACTION_READ_COMMITTEDã€‚è¯¦ç»†è¯·çœ‹ exec(int level,
     * Atom... atoms) å‡½æ•°çš„è¯´æ˜Ž
     * 
     * @param atoms
     *            åŽŸå­?æ“?ä½œå¯¹è±¡
     */
    public static void exec(Atom... atoms) {
        exec(Connection.TRANSACTION_READ_COMMITTED, atoms);
    }

    /**
     * æ‰§è¡Œä¸€ç»„åŽŸå­?æ“?ä½œï¼Œå¹¶æŒ‡å®šäº‹åŠ¡çº§åˆ«ã€‚
     * <p>
     * è¿™é‡Œéœ€è¦?æ³¨æ„?çš„æ˜¯ï¼ŒNutz æ”¯æŒ?äº‹åŠ¡æ¨¡æ?¿çš„æ— é™?å±‚çº§åµŒå¥—ã€‚ è¿™é‡Œï¼Œå¦‚æžœæ¯?ä¸€å±‚åµŒå¥—ï¼ŒæŒ‡å®šçš„äº‹åŠ¡çº§åˆ«æœ‰æ‰€ä¸?å?Œï¼Œä¸?å?Œçš„æ•°æ?®åº“ï¼Œå?¯èƒ½å¼•å?‘ä¸?å?¯é¢„çŸ¥çš„é”™è¯¯ã€‚
     * <p>
     * æ‰€ä»¥ï¼ŒåµŒå¥—çš„äº‹åŠ¡æ¨¡æ?¿çš„äº‹åŠ¡ï¼Œå°†ä»¥æœ€é¡¶å±‚çš„äº‹åŠ¡ä¸ºçº§åˆ«ä¸ºæ ‡å‡†ã€‚å°±æ˜¯è¯´ï¼Œå¦‚æžœæœ€é¡¶å±‚çš„äº‹åŠ¡çº§åˆ«ä¸º
     * 'TRANSACTION_READ_COMMITTED'ï¼Œé‚£ä¹ˆä¸‹é?¢æ‰€åŒ…å?«çš„æ‰€æœ‰äº‹åŠ¡ï¼Œæ— è®ºä½ æŒ‡å®šä»€ä¹ˆæ ·çš„äº‹åŠ¡çº§åˆ«ï¼Œéƒ½æ˜¯
     * 'TRANSACTION_READ_COMMITTED'ï¼Œ è¿™ä¸€ç‚¹ï¼Œç”±æŠ½è±¡ç±» Transaction æ?¥ä¿?è¯?ã€‚å…¶ setLevel
     * å½“è¢«è®¾ç½®äº†ä¸€ä¸ªå¤§äºŽ 0 çš„æ•´æ•°ä»¥å?Žï¼Œå°†ä¸?å†? æŽ¥å?—ä»»ä½•å…¶ä»–çš„å€¼ã€‚
     * <p>
     * ä½ å?¯ä»¥é€šè¿‡ç»§æ‰¿ Transaction æ?¥ä¿®æ”¹è¿™ä¸ªé»˜è®¤çš„è¡Œä¸ºï¼Œå½“ç„¶ï¼Œè¿™ä¸ªè¡Œä¸ºä¿®æ”¹ä¸€èˆ¬æ˜¯æ²¡æœ‰å¿…è¦?çš„ã€‚
     * <p>
     * å?¦å¤–ï¼Œä½ è¿˜å?¯èƒ½éœ€è¦?çŸ¥é?“ï¼Œé€šè¿‡ Trans.setup æ–¹æ³•ï¼Œèƒ½è®©æ•´ä¸ªè™šæ‹Ÿæœºçš„ Nutz äº‹åŠ¡æ“?ä½œéƒ½ä½¿ç”¨ä½ çš„ Transaction å®žçŽ°
     * 
     * @param level
     *            äº‹åŠ¡çš„çº§åˆ«ã€‚
     *            <p>
     *            ä½ å?¯ä»¥è®¾ç½®çš„äº‹åŠ¡çº§åˆ«æ˜¯ï¼š
     *            <ul>
     *            <li>java.sql.Connection.TRANSACTION_NONE
     *            <li>java.sql.Connection.TRANSACTION_READ_UNCOMMITTED
     *            <li>java.sql.Connection.TRANSACTION_READ_COMMITTED
     *            <li>java.sql.Connection.TRANSACTION_REPEATABLE_READ
     *            <li>java.sql.Connection.TRANSACTION_SERIALIZABLE
     *            </ul>
     *            ä¸?å?Œçš„æ•°æ?®åº“ï¼Œå¯¹äºŽ JDBC äº‹åŠ¡çº§åˆ«çš„è§„èŒƒï¼Œæ”¯æŒ?çš„åŠ›åº¦ä¸?å?Œã€‚è¯·å?‚çœ‹ç›¸åº”æ•°æ?®åº“çš„æ–‡æ¡£ï¼Œå·²
     *            ç¡®å®šä½ è®¾ç½®çš„æ•°æ?®åº“äº‹åŠ¡çº§åˆ«æ˜¯å?¦è¢«æ”¯æŒ?ã€‚
     * @param atoms
     *            åŽŸå­?æ“?ä½œå¯¹è±¡
     * @see org.nutz.trans.Transaction
     * @see java.sql.Connection
     */
    public static void exec(int level, Atom... atoms) {
        if (null == atoms)
            return;
        int num = count.get() == null ? 0 : count.get();
        try {
            _begain(level);
            for (Atom atom : atoms)
                atom.run();
            _commit();
        }
        catch (Throwable e) {
            _rollback(num);
            throw Lang.wrapThrow(e);
        }
        finally {
            _depose();
        }
    }

    /**
     * æ‰§è¡Œä¸€ä¸ªåˆ†å­?ï¼Œå¹¶ç»™å‡ºè¿”å›žå€¼
     * 
     * @param <T>
     * @param molecule
     *            åˆ†å­?
     * @return åˆ†å­?è¿”å›žå€¼
     */
    public static <T> T exec(Molecule<T> molecule) {
        Trans.exec((Atom) molecule);
        return molecule.getObj();
    }

    /* ===========================ä¸‹é?¢æš´éœ²å‡ ä¸ªæ–¹æ³•ç»™å–œæ¬¢ try...catch...finally çš„äºº ===== */

    /**
     * å¼€å§‹ä¸€ä¸ªäº‹åŠ¡ï¼Œçº§åˆ«ä¸º TRANSACTION_READ_COMMITTED
     * <p>
     * ä½ éœ€è¦?æ‰‹å·¥ç”¨ try...catch...finally æ?¥ä¿?è¯?ä½ æ??äº¤å’Œå…³é—­è¿™ä¸ªäº‹åŠ¡
     * 
     * @throws Exception
     */
    public static void begin() throws Exception {
        Trans._begain(Connection.TRANSACTION_READ_COMMITTED);
    }

    /**
     * å¼€å§‹ä¸€ä¸ªæŒ‡å®šäº‹åŠ¡
     * <p>
     * ä½ éœ€è¦?æ‰‹å·¥ç”¨ try...catch...finally æ?¥ä¿?è¯?ä½ æ??äº¤å’Œå…³é—­è¿™ä¸ªäº‹åŠ¡
     * 
     * @param level
     *            æŒ‡å®šçº§åˆ«
     * 
     * @throws Exception
     */
    public static void begin(int level) throws Exception {
        Trans._begain(level);
    }

    /**
     * æ??äº¤äº‹åŠ¡ï¼Œæ‰§è¡Œå®ƒå‰?ï¼Œä½ å¿…éœ€ä¿?è¯?ä½ å·²ç»?æ‰‹å·¥å¼€å§‹äº†ä¸€ä¸ªäº‹åŠ¡
     * 
     * @throws Exception
     */
    public static void commit() throws Exception {
        Trans._commit();
    }

    /**
     * å›žæ»šäº‹åŠ¡ï¼Œæ‰§è¡Œå®ƒå‰?ï¼Œä½ å¿…éœ€ä¿?è¯?ä½ å·²ç»?æ‰‹å·¥å¼€å§‹äº†ä¸€ä¸ªäº‹åŠ¡
     * 
     * @throws Exception
     */
    public static void rollback() throws Exception {
        Integer c = Trans.count.get();
        if (c == null)
            c = Integer.valueOf(0);
        else if (c > 0)
        	c--;
        Trans._rollback(c);
    }

    /**
     * å…³é—­äº‹åŠ¡ï¼Œæ‰§è¡Œå®ƒå‰?ï¼Œä½ å¿…éœ€ä¿?è¯?ä½ å·²ç»?æ‰‹å·¥å¼€å§‹äº†ä¸€ä¸ªäº‹åŠ¡
     * 
     * @throws Exception
     */
    public static void close() throws Exception {
        Trans._depose();
    }

    /**
     * å¦‚æžœåœ¨äº‹åŠ¡ä¸­,åˆ™è¿”å›žäº‹åŠ¡çš„è¿žæŽ¥,å?¦åˆ™ç›´æŽ¥ä»Žæ•°æ?®æº?å?–ä¸€ä¸ªæ–°çš„è¿žæŽ¥
     */
    public static Connection getConnectionAuto(DataSource ds) throws SQLException {
        if (get() == null)
            return ds.getConnection();
        else
            return get().getConnection(ds);
    }

    /**
     * è‡ªåŠ¨åˆ¤æ–­æ˜¯å?¦å…³é—­å½“å‰?è¿žæŽ¥
     * @param conn æ•°æ?®åº“è¿žæŽ¥
     */
    public static void closeConnectionAuto(Connection conn) {
        if (get() == null && null != conn) {
            try {
                conn.close();
            }
            catch (SQLException e) {
                throw Lang.wrapThrow(e);
            }
        }
    }
    
    /**
     * å¼ºåˆ¶æ¸…ç?†äº‹åŠ¡ä¸Šä¸‹æ–‡
     * @param rollbackOrCommit æ£€æµ‹åˆ°æœªé—­å?ˆçš„äº‹åŠ¡æ—¶å›žæ»šè¿˜æ˜¯æ??äº¤ï¼Œtrueä¸ºå›žæ»šï¼Œfalseä¸ºæ??äº¤ã€‚
     */
    public static void clear(boolean rollbackOrCommit) {
        Integer c = Trans.count.get();
        if (c == null)
            return;
        if (c > 0) {
            for (int i = 0; i < c; i++) {
                try {
                    if (rollbackOrCommit)
                        Trans.rollback();
                    else
                        Trans.commit();
                    Trans.close();
                }
                catch (Exception e) {
                }
            }
        }
        Trans.count.set(null);
        Transaction t = get();
        if (t != null)
            t.close();
        Trans.trans.set(null);
    }
    
    public static void set(Transaction t) {
        Trans.trans.set(t);
    }
    
    public static Transaction New() {
        return null == implClass ? new NutTransaction() : Mirror.me(implClass).born();
    }
}
