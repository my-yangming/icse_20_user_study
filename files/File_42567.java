package com.roncoo.pay.reconciliation.utils.alipay;

import org.apache.commons.codec.digest.DigestUtils;

import java.io.UnsupportedEncodingException;
import java.security.SignatureException;

/** 
* åŠŸèƒ½ï¼šæ”¯ä»˜å®?MD5ç­¾å??å¤„ç?†æ ¸å¿ƒæ–‡ä»¶ï¼Œä¸?éœ€è¦?ä¿®æ”¹
* ç‰ˆæœ¬ï¼š3.3
* ä¿®æ”¹æ—¥æœŸï¼š2012-08-17
* è¯´æ˜Žï¼š
* ä»¥ä¸‹ä»£ç ?å?ªæ˜¯ä¸ºäº†æ–¹ä¾¿å•†æˆ·æµ‹è¯•è€Œæ??ä¾›çš„æ ·ä¾‹ä»£ç ?ï¼Œå•†æˆ·å?¯ä»¥æ ¹æ?®è‡ªå·±ç½‘ç«™çš„éœ€è¦?ï¼ŒæŒ‰ç…§æŠ€æœ¯æ–‡æ¡£ç¼–å†™,å¹¶é?žä¸€å®šè¦?ä½¿ç”¨è¯¥ä»£ç ?ã€‚
* è¯¥ä»£ç ?ä»…ä¾›å­¦ä¹ å’Œç ”ç©¶æ”¯ä»˜å®?æŽ¥å?£ä½¿ç”¨ï¼Œå?ªæ˜¯æ??ä¾›ä¸€ä¸ª
* */

public class MD5 {

    /**
     * ç­¾å??å­—ç¬¦ä¸²
     * @param text éœ€è¦?ç­¾å??çš„å­—ç¬¦ä¸²
     * @param key å¯†é’¥
     * @param input_charset ç¼–ç ?æ ¼å¼?
     * @return ç­¾å??ç»“æžœ
     */
    public static String sign(String text, String key, String input_charset) {
    	text = text + key;
        return DigestUtils.md5Hex(getContentBytes(text, input_charset));
    }
    
    /**
     * ç­¾å??å­—ç¬¦ä¸²
     * @param text éœ€è¦?ç­¾å??çš„å­—ç¬¦ä¸²
     * @param sign ç­¾å??ç»“æžœ
     * @param key å¯†é’¥
     * @param input_charset ç¼–ç ?æ ¼å¼?
     * @return ç­¾å??ç»“æžœ
     */
    public static boolean verify(String text, String sign, String key, String input_charset) {
    	text = text + key;
    	String mysign = DigestUtils.md5Hex(getContentBytes(text, input_charset));
    	if(mysign.equals(sign)) {
    		return true;
    	}
    	else {
    		return false;
    	}
    }

    /**
     * @param content
     * @param charset
     * @return
     * @throws SignatureException
     * @throws UnsupportedEncodingException 
     */
    private static byte[] getContentBytes(String content, String charset) {
        if (charset == null || "".equals(charset)) {
            return content.getBytes();
        }
        try {
            return content.getBytes(charset);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException("MD5ç­¾å??è¿‡ç¨‹ä¸­å‡ºçŽ°é”™è¯¯,æŒ‡å®šçš„ç¼–ç ?é›†ä¸?å¯¹,æ‚¨ç›®å‰?æŒ‡å®šçš„ç¼–ç ?é›†æ˜¯:" + charset);
        }
    }

}
