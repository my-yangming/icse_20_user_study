package apijson.demo.server;

import com.jfinal.config.Constants;
import com.jfinal.config.Handlers;
import com.jfinal.config.Interceptors;
import com.jfinal.config.JFinalConfig;
import com.jfinal.config.Plugins;
import com.jfinal.config.Routes;
import com.jfinal.server.undertow.UndertowServer;
import com.jfinal.template.Engine;

/**JFinalConfig
 * å?³é”®è¿™ä¸ªç±» > Run As > Java Application
 * @author Lemon
 * @see
 * <pre>
 * FIXME ç›®å‰?åœ¨ http://apijson.org è¯·æ±‚ä¼šå¯¼è‡´ JSON è§£æž?é—®é¢˜ï¼Œ
 * æŽ¨æµ‹åŽŸå› æ˜¯è¿™ä¸ª Demo ä¸?æ”¯æŒ?è·¨åŸŸ(HTTP OPTIONSè¯·æ±‚æŠ¥é”™)ï¼Œå¯¼è‡´ HttpKit.readData(getRequest()) è¿”å›žçš„å­—ç¬¦ä¸²ä¸?ç¬¦å?ˆ JSON æ ¼å¼?ã€‚
 * å?¯ä»¥å…ˆç”¨ Postman ç­‰å·¥å…·ï¼Œä¸?åŠ è¿™ä¸ªè¯·æ±‚å¤´ç›´æŽ¥å?‘é€? HTTP POST ä¼  JSON å?‚æ•°æ?¥è¯·æ±‚ã€‚
 * </pre>
 */
public class AppRunnableConfig extends JFinalConfig {

	public static void main(String[] args) {
		UndertowServer.start(AppRunnableConfig.class);
		
		System.out.println("\n\n\n\n\n<<<<<<<<<<<<<<<<<<<<<<<<< APIJSON >>>>>>>>>>>>>>>>>>>>>>>>\n");
		System.out.println("å¼€å§‹æµ‹è¯•:è¿œç¨‹å‡½æ•° <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");
		try {
			DemoFunction.test();
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println("\nå®Œæˆ?æµ‹è¯•:è¿œç¨‹å‡½æ•° >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");


		System.out.println("\n\n\nå¼€å§‹æµ‹è¯•:è¯·æ±‚æ ¡éªŒ <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");
		try {
			StructureUtil.test();
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println("\nå®Œæˆ?æµ‹è¯•:è¯·æ±‚æ ¡éªŒ >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");

		System.out.println("\n\n<<<<<<<<<<<<<<<<<<<<<<<<< APIJSONå·²å?¯åŠ¨ >>>>>>>>>>>>>>>>>>>>>>>>\n");
	}

	public void configRoute(Routes me) {
		me.add("/", Controller.class);
	}

	public void configEngine(Engine me) {
		me.setBaseTemplatePath("webapp").setToClassPathSourceFactory();
	}

	public void configConstant(Constants me) {}
	public void configPlugin(Plugins me) {}
	public void configInterceptor(Interceptors me) {}
	public void configHandler(Handlers me) {}
}
