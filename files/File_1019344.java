package cn.iocoder.mall.order.biz.service;

import cn.iocoder.common.framework.constant.DeletedStatusEnum;
import cn.iocoder.common.framework.util.DateUtil;
import cn.iocoder.common.framework.util.ServiceExceptionUtil;
import cn.iocoder.common.framework.vo.CommonResult;
import cn.iocoder.mall.order.api.OrderService;
import cn.iocoder.mall.order.api.bo.*;
import cn.iocoder.mall.order.api.constant.*;
import cn.iocoder.mall.order.api.dto.*;
import cn.iocoder.mall.order.biz.constants.OrderDeliveryTypeEnum;
import cn.iocoder.mall.order.biz.constants.OrderRecipientTypeEnum;
import cn.iocoder.mall.order.biz.convert.*;
import cn.iocoder.mall.order.biz.dao.*;
import cn.iocoder.mall.order.biz.dataobject.*;
import cn.iocoder.mall.pay.api.PayTransactionService;
import cn.iocoder.mall.pay.api.bo.transaction.PayTransactionBO;
import cn.iocoder.mall.pay.api.dto.transaction.PayTransactionCreateDTO;
import cn.iocoder.mall.product.api.ProductSpuService;
import cn.iocoder.mall.product.api.bo.ProductSkuDetailBO;
import cn.iocoder.mall.promotion.api.CouponService;
import cn.iocoder.mall.user.api.UserAddressService;
import cn.iocoder.mall.user.api.bo.UserAddressBO;
import io.seata.spring.annotation.GlobalTransactional;
import org.apache.dubbo.config.annotation.Reference;
import com.google.common.collect.Lists;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;
import org.springframework.util.CollectionUtils;

import java.util.*;
import java.util.stream.Collectors;

/**
 * è®¢å?• service impl
 *
 * @author Sin
 * @time 2019-03-16 15:08
 */
@Service
@org.apache.dubbo.config.annotation.Service(validation = "true", version = "${dubbo.provider.OrderService.version}")
public class OrderServiceImpl implements OrderService {

    /**
     * æ”¯ä»˜è¿‡æœŸæ—¶é—´ 120 åˆ†é’Ÿ
     */
    public static final int PAY_EXPIRE_TIME = 120;

    @Autowired
    private OrderMapper orderMapper;
    @Autowired
    private OrderItemMapper orderItemMapper;
    @Autowired
    private OrderLogisticsMapper orderLogisticsMapper;
    @Autowired
    private OrderLogisticsDetailMapper orderLogisticsDetailMapper;
    @Autowired
    private OrderRecipientMapper orderRecipientMapper;
    @Autowired
    private OrderCancelMapper orderCancelMapper;
    @Autowired
    private OrderReturnMapper orderReturnMapper;

    @Autowired
    private CartServiceImpl cartService;

    @Reference(validation = "true", version = "${dubbo.consumer.PromotionActivityService.version}")
    private ProductSpuService productSpuService;
    @Reference(validation = "true", version = "${dubbo.consumer.UserAddressService.version}")
    private UserAddressService userAddressService;
    @Reference(validation = "true", version = "${dubbo.consumer.PayTransactionService.version}")
    private PayTransactionService payTransactionService;
    @Reference(validation = "true", version = "${dubbo.consumer.CouponService.version}")
    private CouponService couponService;

    @Override
    public CommonResult<OrderPageBO> getOrderPage(OrderQueryDTO orderQueryDTO) {

        int totalCount = orderMapper.selectPageCount(orderQueryDTO);
        if (totalCount == 0) { // TODO FROM èŠ‹è‰¿ TO å°?èŒƒ Collections.EMPTY_LIST æ”¹æˆ? Collections.emptyList()
            return CommonResult.success(new OrderPageBO().setOrders(Collections.EMPTY_LIST).setTotal(0));
        }

        // èŽ·å?–è®¢å?•æ•°æ?®
        List<OrderDO> orderDOList = orderMapper.selectPage(orderQueryDTO);

        if (CollectionUtils.isEmpty(orderDOList)) {
            return CommonResult.success(new OrderPageBO().setOrders(Collections.EMPTY_LIST).setTotal(totalCount));
        }

        // èŽ·å?–è®¢å?• id
        Set<Integer> orderIds = orderDOList.stream()
                .map(orderDO -> orderDO.getId()) // TODO FROM èŠ‹è‰¿ to å°?èŒƒï¼Œè®°å¾—ç”¨ Lambda
                .collect(Collectors.toSet());

        // èŽ·å?–é…?é€?ä¿¡æ?¯
        List<OrderRecipientDO> orderRecipientDOList = orderRecipientMapper.selectByOrderIds(orderIds);
        List<OrderRecipientBO> orderRecipientBOList = OrderRecipientConvert.INSTANCE.convert(orderRecipientDOList);
        Map<Integer, OrderRecipientBO> orderRecipientBOMap
                = orderRecipientBOList.stream().collect(Collectors.toMap(OrderRecipientBO::getOrderId, obj -> obj));

        // èŽ·å?– è®¢å?•çš„ items
        List<OrderItemDO> orderItemDOList = orderItemMapper
                .selectByDeletedAndOrderIds(orderIds, DeletedStatusEnum.DELETED_NO.getValue());

        List<OrderItemBO> orderItemBOList = OrderItemConvert.INSTANCE.convertOrderItemDO(orderItemDOList);
        Map<Integer, List<OrderItemBO>> orderItemBOMultimap = orderItemBOList.stream().collect(
                Collectors.toMap(
                        OrderItemBO::getOrderId,
                        item -> Lists.newArrayList(item),
                        (oldVal, newVal) -> {
                            oldVal.addAll(newVal);
                            return oldVal;
                        }
                )
        );

        // è½¬æ?¢ orderDO ä¸º OrderBOï¼Œå¹¶è®¾ç½® item
        List<OrderBO> orderPageBOList = OrderConvert.INSTANCE.convertPageBO(orderDOList);
        List<OrderBO> result = orderPageBOList.stream().map(orderBO -> {
            if (orderItemBOMultimap.containsKey(orderBO.getId())) {
                orderBO.setOrderItems(orderItemBOMultimap.get(orderBO.getId()));
            }
            if (orderRecipientBOMap.containsKey(orderBO.getId())) {
                orderBO.setOrderRecipient(orderRecipientBOMap.get(orderBO.getId()));
            }
            return orderBO;
        }).collect(Collectors.toList());
            return CommonResult.success(
                new OrderPageBO()
                        .setTotal(totalCount)
                        .setOrders(result)
        );
    }

    @Override
    public CommonResult<List<OrderItemBO>> getOrderItems(Integer orderId) {
        if (orderMapper.selectById(orderId) == null) {
            return ServiceExceptionUtil.error(OrderErrorCodeEnum.ORDER_NOT_EXISTENT.getCode());
        }

        List<OrderItemDO> orderItemDOList = orderItemMapper
                .selectByDeletedAndOrderId(DeletedStatusEnum.DELETED_NO.getValue(), orderId);

        List<OrderItemBO> orderItemBOList = OrderItemConvert.INSTANCE.convertOrderItemBO(orderItemDOList);
        return CommonResult.success(orderItemBOList);
    }

    @Override
    public CommonResult<OrderRecipientBO> getOrderRecipientBO(Integer orderId) {
        if (orderMapper.selectById(orderId) == null) {
            return ServiceExceptionUtil.error(OrderErrorCodeEnum.ORDER_NOT_EXISTENT.getCode());
        }

        OrderRecipientDO orderRecipientDO = orderRecipientMapper.selectByOrderId(orderId);
        OrderRecipientBO orderRecipientBO = OrderRecipientConvert.INSTANCE.convert(orderRecipientDO);
        return CommonResult.success(orderRecipientBO);
    }

    @Override
    public CommonResult<OrderInfoBO> info(Integer userId, Integer orderId) {
        OrderDO orderDO = orderMapper.selectById(orderId);
        if (orderDO == null) {
            return ServiceExceptionUtil.error(OrderErrorCodeEnum.ORDER_NOT_EXISTENT.getCode());
        }

        List<OrderItemDO> itemDOList = orderItemMapper
                .selectByDeletedAndOrderId(DeletedStatusEnum.DELETED_NO.getValue(), orderId);

        List<OrderInfoBO.OrderItem> orderItems
                = OrderItemConvert.INSTANCE.convertOrderInfoWithOrderItem(itemDOList);

        Set<Integer> orderLogisticsIds = itemDOList.stream()
                .filter(o -> o.getOrderLogisticsId() != null)
                .map(o -> o.getOrderLogisticsId())
                .collect(Collectors.toSet());



        // æ”¶ä»¶äººä¿¡æ?¯
        OrderRecipientDO orderRecipientDO = orderRecipientMapper.selectByOrderId(orderId);

        // è®¢å?•ç‰©æµ?ä¿¡æ?¯
        OrderLogisticsDetailDO orderLogisticsDetailDO = null;
        if (!CollectionUtils.isEmpty(orderLogisticsIds)) {
            orderLogisticsDetailDO = orderLogisticsDetailMapper.selectLast(orderLogisticsIds);
        }

        // æ£€æŸ¥æ˜¯å?¦ç”³è¯·é€€è´§
        OrderReturnDO orderReturnDO = orderReturnMapper.selectByOrderId(orderId);

        // convert ä¿¡æ?¯
        OrderInfoBO.LogisticsDetail logisticsDetail
                = OrderLogisticsDetailConvert.INSTANCE.convertLogisticsDetail(orderLogisticsDetailDO);

        OrderInfoBO.Recipient recipient = OrderRecipientConvert.INSTANCE.convertOrderInfoRecipient(orderRecipientDO);
        OrderInfoBO orderInfoBO = OrderConvert.INSTANCE.convert(orderDO);
        orderInfoBO.setRecipient(recipient);
        orderInfoBO.setOrderItems(orderItems);
        orderInfoBO.setLatestLogisticsDetail(logisticsDetail);

        // æ˜¯å?¦é€€è´§
        if (orderReturnDO != null) {
            orderInfoBO.setHasOrderReturn(orderReturnDO.getStatus());
        } else {
            orderInfoBO.setHasOrderReturn(-1);
        }
        return CommonResult.success(orderInfoBO);
    }

    @Override
    @GlobalTransactional
//    @Transactional // ä½¿ç”¨ Seata åˆ†å¸ƒäº‹åŠ¡å?Žï¼Œæ— éœ€åœ¨ä½¿ç”¨ @Transactional æ³¨è§£ã€‚
    public CommonResult<OrderCreateBO> createOrder(OrderCreateDTO orderCreateDTO) {
        Integer userId = orderCreateDTO.getUserId();
        List<OrderCreateDTO.OrderItem> orderItemDTOList = orderCreateDTO.getOrderItems();
        List<OrderItemDO> orderItemDOList = OrderItemConvert.INSTANCE.convert(orderItemDTOList);

        // èŽ·å?–å•†å“?ä¿¡æ?¯
        Set<Integer> skuIds = orderItemDOList.stream().map(OrderItemDO::getSkuId).collect(Collectors.toSet());
        List<ProductSkuDetailBO> productList = productSpuService.getProductSkuDetailList(skuIds);
        if (orderItemDTOList.size() != productList.size()) { // æ ¡éªŒèŽ·å¾—çš„æ•°é‡?ï¼Œæ˜¯å?¦åŒ¹é…?
            return ServiceExceptionUtil.error(OrderErrorCodeEnum.ORDER_GET_GOODS_INFO_INCORRECT.getCode());
        }

        // ä»·æ ¼è®¡ç®—
        CalcOrderPriceBO calcOrderPrice = calcOrderPrice(productList, orderCreateDTO);

        // è®¾ç½® orderItem
        Map<Integer, ProductSkuDetailBO> productSpuBOMap = productList
                .stream().collect(Collectors.toMap(ProductSkuDetailBO::getId, o -> o)); // å•†å“? SKU ä¿¡æ?¯çš„é›†å?ˆ
        Map<Integer, CalcOrderPriceBO.Item> priceItemMap = new HashMap<>(); // å•†å“? SKU ä»·æ ¼çš„æ˜ å°„
        calcOrderPrice.getItemGroups().forEach(itemGroup ->
                itemGroup.getItems().forEach(item -> priceItemMap.put(item.getId(), item)));
        // é??åŽ† orderItemDOList æ•°ç»„ï¼Œå°†å•†å“?ä¿¡æ?¯ã€?å•†å“?ä»·æ ¼ï¼Œè®¾ç½®åˆ°å…¶ä¸­
        for (OrderItemDO orderItemDO : orderItemDOList) {
            ProductSkuDetailBO productSkuDetailBO = productSpuBOMap.get(orderItemDO.getSkuId());
            if (productSkuDetailBO.getQuantity() <= 0) {
                return ServiceExceptionUtil.error(OrderErrorCodeEnum.ORDER_INSUFFICIENT_INVENTORY.getCode());
            }
            if (productSkuDetailBO.getPrice() <= 0) {
                return ServiceExceptionUtil.error(OrderErrorCodeEnum.ORDER_GOODS_AMOUNT_INCORRECT.getCode());
            }
            // è®¾ç½® SKU ä¿¡æ?¯
            orderItemDO.setSkuImage(Optional.ofNullable(productSkuDetailBO.getSpu().getPicUrls().get(0)).get());
            orderItemDO.setSkuName(productSkuDetailBO.getSpu().getName());
            // è®¾ç½®ä»·æ ¼ä¿¡æ?¯
            CalcOrderPriceBO.Item priceItem = priceItemMap.get(orderItemDO.getSkuId());
            Assert.notNull(priceItem, "å•†å“?è®¡ç®—ä»·æ ¼ä¸ºç©º");
            orderItemDO.setOriginPrice(priceItem.getOriginPrice())
                .setBuyPrice(priceItem.getBuyPrice())
                .setPresentPrice(priceItem.getPresentPrice())
                .setBuyTotal(priceItem.getBuyTotal())
                .setDiscountTotal(priceItem.getDiscountTotal())
                .setPresentTotal(priceItem.getPresentTotal());
        }

        // æ ‡è®°ä¼˜æƒ åŠµå·²ä½¿ç”¨
        if (orderCreateDTO.getCouponCardId() != null) {
            couponService.useCouponCard(userId, orderCreateDTO.getCouponCardId());
        }

        // TODO èŠ‹è‰¿ï¼Œæ‰£é™¤åº“å­˜

        // order

        // TODO: 2019-04-11 Sin è®¢å?•å?·éœ€è¦?ç”Ÿæˆ?è§„åˆ™
        // TODO FROM èŠ‹è‰¿ to å°?èŒƒï¼šå?¯ä»¥è€ƒè™‘æŠ½è±¡æˆ?ä¸€ä¸ªæ–¹æ³•ï¼Œä¸‹é?¢å‡ ä¸ªä¹Ÿæ˜¯ã€‚
        String orderNo = UUID.randomUUID().toString().replace("-", "").substring(0, 16);
//        Integer totalAmount = orderCommon.calculatedAmount(orderItemDOList);
//        Integer totalPrice = orderCommon.calculatedPrice(orderItemDOList);
//        Integer totalLogisticsPrice = orderCommon.calculatedLogisticsPrice(orderItemDOList);
        OrderDO orderDO = new OrderDO()
                .setUserId(userId)
                .setOrderNo(orderNo)
                .setBuyPrice(calcOrderPrice.getFee().getBuyTotal())
                .setDiscountPrice(calcOrderPrice.getFee().getDiscountTotal())
                .setLogisticsPrice(calcOrderPrice.getFee().getPostageTotal())
                .setPresentPrice(calcOrderPrice.getFee().getPresentTotal())
                .setPayAmount(0)
                .setClosingTime(null)
                .setDeliveryTime(null)
                .setPaymentTime(null)
                .setStatus(OrderStatusEnum.WAITING_PAYMENT.getValue())
                .setHasReturnExchange(OrderHasReturnExchangeEnum.NO.getValue())
                .setRemark(Optional.ofNullable(orderCreateDTO.getRemark()).orElse(""));
        orderDO.setDeleted(DeletedStatusEnum.DELETED_NO.getValue());
//        orderDO.setCreateTime(new Date());
//        orderDO.setUpdateTime(null);
        orderMapper.insert(orderDO);

        // æ”¶ä»¶äººä¿¡æ?¯
        CommonResult<UserAddressBO> userAddressResult = userAddressService.getAddress(userId, orderCreateDTO.getUserAddressId());
        if (userAddressResult.isError()) {
            return ServiceExceptionUtil.error(OrderErrorCodeEnum.ORDER_GET_USER_ADDRESS_FAIL.getCode());
        }
        UserAddressBO userAddressBO = userAddressResult.getData();
        OrderRecipientDO orderRecipientDO = OrderRecipientConvert.INSTANCE.convert(userAddressBO);
        orderRecipientDO
                .setOrderId(orderDO.getId())
                .setType(OrderRecipientTypeEnum.EXPRESS.getValue())
                .setCreateTime(new Date())
                .setUpdateTime(null);
        orderRecipientMapper.insert(orderRecipientDO);

        // order item
        orderItemDOList.forEach(orderItemDO -> {
            orderItemDO
                    .setOrderId(orderDO.getId())
                    .setOrderNo(orderDO.getOrderNo())
                    .setPaymentTime(null)
                    .setDeliveryTime(null)
                    .setReceiverTime(null)
                    .setClosingTime(null)
                    .setHasReturnExchange(OrderStatusEnum.WAITING_PAYMENT.getValue())
                    .setDeliveryType(OrderDeliveryTypeEnum.NONE.getValue())
                    .setStatus(OrderStatusEnum.WAITING_PAYMENT.getValue())
                    .setDeleted(DeletedStatusEnum.DELETED_NO.getValue())
                    .setCreateTime(new Date())
                    .setUpdateTime(null);
        });
        // ä¸€æ¬¡æ€§æ?’å…¥
        orderItemMapper.insert(orderItemDOList);

        // åˆ›å»ºé¢„è®¢å?•
        createPayTransaction(orderDO, orderItemDOList, orderCreateDTO.getIp());

//        if (commonResult.isError()) {
//            //æ‰‹åŠ¨å¼€å?¯äº‹åŠ¡å›žæ»š
//            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
//            return ServiceExceptionUtil.error(OrderErrorCodeEnum.ORDER_GET_PAY_FAIL.getValue());
//        }

        // TODO: 2019-03-17 Sin éœ€è¦?å?‘é€? åˆ›å»ºæˆ?æžœ MQ æ¶ˆæ?¯ï¼Œä¸šåŠ¡æ‰©å±•å’Œç»Ÿè®¡
        return CommonResult.success(
                new OrderCreateBO()
                        .setId(orderDO.getId())
                        .setOrderNo(orderDO.getOrderNo())
                        .setPayAmount(orderDO.getPayAmount())
        );
    }

    private CalcOrderPriceBO calcOrderPrice(List<ProductSkuDetailBO> skus, OrderCreateDTO orderCreateDTO) {
        // åˆ›å»ºè®¡ç®—çš„ DTO
        CalcOrderPriceDTO calcOrderPriceDTO = new CalcOrderPriceDTO()
                .setUserId(orderCreateDTO.getUserId())
                .setItems(new ArrayList<>(skus.size()))
                .setCouponCardId(orderCreateDTO.getCouponCardId());
        for (OrderCreateDTO.OrderItem item : orderCreateDTO.getOrderItems()) {
            calcOrderPriceDTO.getItems().add(new CalcOrderPriceDTO.Item(item.getSkuId(), item.getQuantity(), true));
        }
        // æ‰§è¡Œè®¡ç®—
        return cartService.calcOrderPrice(calcOrderPriceDTO);
    }

    private PayTransactionBO createPayTransaction(OrderDO order, List<OrderItemDO> orderItems, String ip) {
        // TODO sin æ”¯ä»˜è®¢å?• orderSubject æš‚æ—¶å?–ç¬¬ä¸€ä¸ªå­?è®¢å?•å•†å“?ä¿¡æ?¯
        String orderSubject = orderItems.get(0).getSkuName();
        Date expireTime = DateUtil.addDate(Calendar.MINUTE, PAY_EXPIRE_TIME);
        return payTransactionService.createTransaction(
                new PayTransactionCreateDTO()
                        .setCreateIp(ip)
                        .setAppId(PayAppId.APP_ID_SHOP_ORDER)
                        .setOrderId(order.getId().toString())
                        .setExpireTime(expireTime)
                        .setPrice(order.getPresentPrice())
                        .setOrderSubject(orderSubject)
                        .setOrderMemo("æµ‹è¯•å¤‡æ³¨") // TODO èŠ‹è‰¿ï¼Œå?Žé?¢è¡¥å……
                        .setOrderDescription("æµ‹è¯•æ??è¿°") // TODO èŠ‹è‰¿ï¼Œå?Žé?¢è¡¥å……
        );
    }

    @Override // TODO èŠ‹è‰¿ï¼Œéœ€è¦?ç¡®è®¤ä¸‹è¿™ä¸ªæ–¹æ³•çš„ç”¨é€”ã€‚å› ä¸ºæ¶‰å?Šä¿®æ”¹ä»·æ ¼å’Œæ•°é‡?ã€‚
    public CommonResult updateOrderItem(OrderItemUpdateDTO orderUpdateDTO) {
        OrderItemDO orderItemDO = OrderItemConvert.INSTANCE.convert(orderUpdateDTO);
        orderItemMapper.updateById(orderItemDO);

        // TODO: 2019-03-24 sin éœ€è¦?é‡?æ–°è®¡ç®—é‡‘é¢?
        // TODO: 2019-03-24 sin éœ€è¦?è®°å½•æ—¥å¿—
        return CommonResult.success(null);
    }

    @Override
    @Transactional
    public CommonResult updateOrderItemPayAmount(Integer orderId, Integer orderItemId, Integer payAmount) {
        OrderDO orderDO = orderMapper.selectById(orderId);
        if (orderDO == null) {
            return ServiceExceptionUtil.error(OrderErrorCodeEnum.ORDER_NOT_EXISTENT.getCode());
        }
        if (payAmount < 0) {
            return ServiceExceptionUtil.error(OrderErrorCodeEnum.ORDER_PAY_AMOUNT_NOT_NEGATIVE.getCode());
        }

        // å…ˆæ›´æ–°é‡‘é¢?
        orderItemMapper.updateById(new OrderItemDO().setId(orderItemId)
//                .setPayAmount(payAmount) TODO èŠ‹è‰¿ï¼Œè¿™é‡Œè¦?ä¿®æ”¹
        );

        // å†?é‡?æ–°è®¡ç®—è®¢å?•é‡‘é¢?
        List<OrderItemDO> orderItemDOList = orderItemMapper
                .selectByDeletedAndOrderId(DeletedStatusEnum.DELETED_NO.getValue(), orderId);
//        Integer price = orderCommon.calculatedPrice(orderItemDOList);
//        Integer amount = orderCommon.calculatedAmount(orderItemDOList);
        Integer price = -1; // TODO èŠ‹è‰¿ï¼Œè¿™é‡Œè¦?ä¿®æ”¹ï¼Œä»·æ ¼
        Integer amount = -1;
        orderMapper.updateById(
                new OrderDO()
                        .setId(orderId)
//                        .setPrice(price) TODO èŠ‹è‰¿ï¼Œè¿™é‡Œè¦?ä¿®æ”¹
                        .setPayAmount(amount)
        );
        return CommonResult.success(null);
    }

    @Override
    @Transactional // TODO èŠ‹è‰¿ï¼Œè¦?æ ¡éªŒä¸‹ userId ã€‚ä¸?ç„¶å?¯ä»¥å?–æ¶ˆä»»ä½•ç”¨æˆ·çš„è®¢å?•åˆ—ã€‚
    public CommonResult cancelOrder(Integer orderId, Integer reason, String otherReason) {
        // å…³é—­è®¢å?•ï¼Œåœ¨ç”¨æˆ·è¿˜æœªä»˜æ¬¾çš„æ—¶å€™å?¯æ“?ä½œ
        OrderDO orderDO = orderMapper.selectById(orderId);
        if (orderDO == null) {
            return ServiceExceptionUtil.error(OrderErrorCodeEnum.ORDER_NOT_EXISTENT.getCode());
        }

        // æ£€æŸ¥ä¸“é¢˜ï¼Œå?ªæœ‰å¾…ä»˜æ¬¾çŠ¶æ€?æ‰?èƒ½æ“?ä½œ
        if (!orderDO.getStatus().equals(OrderStatusEnum.WAITING_PAYMENT.getValue())) {
            return ServiceExceptionUtil.error(OrderErrorCodeEnum.ORDER_STATUS_NOT_CANCEL.getCode());
        }

        OrderCancelDO orderCancelDO
                = (OrderCancelDO) new OrderCancelDO()
                .setOrderId(orderDO.getId())
                .setOrderNo(orderDO.getOrderNo())
                .setReason(reason)
                .setOtherReason(otherReason)
                .setCreateTime(new Date())
                .setUpdateTime(null);

        // å…³é—­è®¢å?•ï¼Œä¿®æ”¹çŠ¶æ€? item
        // TODO FROM èŠ‹è‰¿ TO å°?èŒƒï¼Œæ›´æ–°çš„æ—¶å€™ï¼Œwhere é‡Œé?¢å¸¦ä¸‹ status é?¿å…?å¹¶å?‘çš„é—®é¢˜
        orderItemMapper.updateByOrderId(
                orderId,
                new OrderItemDO().setStatus(OrderStatusEnum.CLOSED.getValue())
        );

        // å…³é—­è®¢å?•ï¼Œä¿®æ”¹çŠ¶æ€? order
        orderMapper.updateById(new OrderDO().setId(orderId).setStatus(OrderStatusEnum.CLOSED.getValue()));
        // ä¿?å­˜å?–æ¶ˆè®¢å?•åŽŸå› 
        orderCancelMapper.insert(orderCancelDO);
        return CommonResult.success(null);
    }

    @Override
    @Transactional // TODO FROM èŠ‹è‰¿ TO å°?èŒƒï¼šæ³›åž‹ï¼Œä¸€å®šè¦?æ˜Žç¡®å“ˆã€‚
    public CommonResult orderDelivery(OrderDeliveryDTO orderDelivery) {
        List<Integer> orderItemIds = orderDelivery.getOrderItemIds();

        // èŽ·å?–æ‰€æœ‰è®¢å?• items // TODO FROM èŠ‹è‰¿ TO å°?èŒƒï¼Œdeleted æ˜¯é»˜è®¤æ?¡ä»¶ï¼Œæ‰€ä»¥ by é‡Œé?¢å?¯ä»¥ä¸?å¸¦å“ˆ
        List<OrderItemDO> allOrderItems = orderItemMapper.selectByDeletedAndOrderId(orderDelivery.getOrderId(), DeletedStatusEnum.DELETED_NO.getValue());

        // å½“å‰?éœ€è¦?å?‘è´§è®¢å?•ï¼Œæ£€æŸ¥ id å’Œ status
        List<OrderItemDO> needDeliveryOrderItems = allOrderItems.stream()
                .filter(orderItemDO -> orderItemIds.contains(orderItemDO.getId())
                        && OrderStatusEnum.WAIT_SHIPMENT.getValue() == orderItemDO.getStatus())
                .collect(Collectors.toList()); // TODO èŠ‹è‰¿ï¼Œå¦‚æžœè¿™é‡Œå?ªæ˜¯æ¯”å¯¹æ•°å­—ï¼Œå?¯ä»¥ç”¨ Lambda æ±‚å’Œï¼Œä¸?éœ€è¦?å¼„æˆ?ä¸€ä¸ªé›†å?ˆçš„
        // å?‘è´§è®¢å?•ï¼Œæ£€æŸ¥
        if (needDeliveryOrderItems.size() != orderItemIds.size()) {
            return ServiceExceptionUtil.error(OrderErrorCodeEnum.ORDER_DELIVERY_INCORRECT_DATA.getCode());
        }

        OrderRecipientDO orderRecipientDO = orderRecipientMapper.selectByOrderId(orderDelivery.getOrderId());
        OrderLogisticsDO orderLogisticsDO = OrderLogisticsConvert.INSTANCE.convert(orderRecipientDO);
        // ä¿?å­˜ç‰©æµ?ä¿¡æ?¯
        orderLogisticsDO
                .setLogisticsNo(orderDelivery.getLogisticsNo())
                .setLogistics(orderDelivery.getLogistics())
                .setCreateTime(new Date())
                .setUpdateTime(null);
        orderLogisticsMapper.insert(orderLogisticsDO);

        // å…³è?”è®¢å?•item å’Œ ç‰©æµ?ä¿¡æ?¯
        // TODO FROM èŠ‹è‰¿ TO å°?èŒƒï¼Œæ›´æ–°çš„æ—¶å€™ï¼Œwhere é‡Œé?¢å¸¦ä¸‹ status é?¿å…?å¹¶å?‘çš„é—®é¢˜ï¼Œç„¶å?Žåˆ¤æ–­ä¸‹æ›´æ–°æ•°é‡?ï¼Œä¸?å¯¹ï¼Œå°±æŠ›å‡ºå¼‚å¸¸ã€‚
        orderItemMapper.updateByIds(
                orderItemIds,
                new OrderItemDO()
                        .setOrderLogisticsId(orderLogisticsDO.getId())
                        .setStatus(OrderStatusEnum.ALREADY_SHIPMENT.getValue())
        );

        // å­?è®¢å?•æ˜¯å?¦å…¨éƒ¨å?‘è´§ï¼Œå¦‚æžœå?‘å®Œï¼Œå°±æ›´æ–° order
        List<OrderItemDO> unShippedOrderItems = allOrderItems.stream()
                .filter(orderItemDO -> OrderStatusEnum.WAIT_SHIPMENT.getValue() == orderItemDO.getStatus()
                        && !orderItemIds.contains(orderItemDO.getId()))
                .collect(Collectors.toList());
        if (unShippedOrderItems.size() <= 0) {
            // TODO FROM èŠ‹è‰¿ TO å°?èŒƒï¼Œæ›´æ–°çš„æ—¶å€™ï¼Œwhere é‡Œé?¢å¸¦ä¸‹ status é?¿å…?å¹¶å?‘çš„é—®é¢˜
            orderMapper.updateById(
                    new OrderDO()
                            .setId(orderDelivery.getOrderId())
                            .setStatus(OrderStatusEnum.ALREADY_SHIPMENT.getValue())
            );
        }
        // è¿”å›žæˆ?åŠŸ
        return CommonResult.success(null);
    }

    @Override
    public CommonResult updateOrderRemake(Integer orderId, String remake) {
        // æ­¤å¤„ä¸?å?šè®¢å?•æ ¡éªŒï¼Œç›´æŽ¥è®¾ç½®å¤‡æ³¨å?³å?¯
        orderMapper.updateById(new OrderDO().setId(orderId).setRemark(remake));
        return CommonResult.success(null);
    }

    @Override
    @Transactional // TODO FROM èŠ‹è‰¿ to å°?èŒƒï¼Œå…ˆä¸?å?šè¿™ä¸ªåŠŸèƒ½ï¼Œç”µå•†ä¸€ç?­ä¸?å­˜åœ¨è¿™ä¸ªåŠŸèƒ½å“ˆã€‚
    public CommonResult deleteOrderItem(OrderItemDeletedDTO orderItemDeletedDTO) {
        Integer orderId = orderItemDeletedDTO.getOrderId();
        List<Integer> orderItemIds = orderItemDeletedDTO.getOrderItemIds();

        // èŽ·å?–å½“å‰?æœ‰æ•ˆçš„è®¢å?• item
        List<OrderItemDO> orderItemDOList = orderItemMapper
                .selectByDeletedAndOrderId(DeletedStatusEnum.DELETED_NO.getValue(), orderId);

        List<OrderItemDO> effectiveOrderItems = orderItemDOList.stream()
                .filter(orderItemDO -> !orderItemIds.contains(orderItemDO.getId()))
                .collect(Collectors.toList());

        // æ£€æŸ¥è®¢å?• itemï¼Œå¿…é¡»è¦?æœ‰ä¸€ä¸ª item
        if (CollectionUtils.isEmpty(effectiveOrderItems)) {
            return ServiceExceptionUtil.error(OrderErrorCodeEnum.ORDER_ITEM_ONLY_ONE.getCode());
        }

        // æ›´æ–°è®¢å?• item
        orderItemMapper.updateByIds(
                orderItemIds,
                (OrderItemDO) new OrderItemDO()
                        .setDeleted(DeletedStatusEnum.DELETED_YES.getValue())
        );

        // æ›´æ–°è®¢å?• amount
//        Integer totalAmount = orderCommon.calculatedAmount(effectiveOrderItems);
        Integer totalAmount = -1; // TODO èŠ‹è‰¿ï¼Œéœ€è¦?ä¿®æ”¹ä¸‹ï¼Œä»·æ ¼ç›¸å…³
        orderMapper.updateById(
                new OrderDO()
                        .setId(orderId)
                        .setPayAmount(totalAmount)
        );
        return CommonResult.success(null);
    }

    @Override
    public CommonResult confirmReceiving(Integer userId, Integer orderId) {
        OrderDO orderDO = orderMapper.selectById(orderId);

        // æ˜¯å?¦è¯¥ç”¨æˆ·çš„è®¢å?•
        if (!userId.equals(orderDO.getUserId())) {
            return ServiceExceptionUtil.error(OrderErrorCodeEnum.ORDER_NOT_USER_ORDER.getCode());
        }

        if (OrderStatusEnum.ALREADY_SHIPMENT.getValue() != orderDO.getStatus()) {
            return ServiceExceptionUtil.error(OrderErrorCodeEnum.ORDER_UNABLE_CONFIRM_ORDER.getCode());
        }

        // TODO FROM èŠ‹è‰¿ TO å°?èŒƒï¼Œæ›´æ–°çš„æ—¶å€™ï¼Œwhere é‡Œé?¢å¸¦ä¸‹ status é?¿å…?å¹¶å?‘çš„é—®é¢˜
        orderMapper.updateById(
                new OrderDO()
                        .setId(orderId)
                        .setReceiverTime(new Date())
                        .setStatus(OrderStatusEnum.COMPLETED.getValue())

        );

        orderItemMapper.updateByOrderId(
                orderId,
                new OrderItemDO()
                        .setStatus(OrderStatusEnum.COMPLETED.getValue())
                        .setReceiverTime(new Date())
        );
        return CommonResult.success(null);
    }

    @Override
    public CommonResult updateLogistics(OrderLogisticsUpdateDTO orderLogisticsDTO) {
        OrderLogisticsDO orderLogisticsDO = OrderLogisticsConvert.INSTANCE.convert(orderLogisticsDTO);
        orderLogisticsMapper.updateById(orderLogisticsDO);
        return CommonResult.success(null);
    }

    @Override
    public CommonResult deleteOrder(Integer id) {
        // åˆ é™¤è®¢å?•æ“?ä½œï¼Œä¸€èˆ¬ç”¨äºŽ ç”¨æˆ·ç«¯åˆ é™¤ï¼Œæ˜¯å?¦å­˜åœ¨æ£€æŸ¥å?¯ä»¥è¿‡æŽ‰
        orderMapper.updateById((OrderDO) new OrderDO()
                .setId(id)
                .setDeleted(DeletedStatusEnum.DELETED_YES.getValue())
        );
        return CommonResult.success(null);
    }

    @Override
    public String updatePaySuccess(String orderId, Integer payAmount) {
        OrderDO order = orderMapper.selectById(Integer.valueOf(orderId));
        if (order == null) { // è®¢å?•ä¸?å­˜åœ¨
            return ServiceExceptionUtil.error(OrderErrorCodeEnum.ORDER_NOT_EXISTENT.getCode()).getMessage();
        }
        if (!order.getStatus().equals(OrderStatusEnum.WAITING_PAYMENT.getValue())) { // çŠ¶æ€?ä¸?å¤„äºŽç­‰å¾…æ”¯ä»˜
            return ServiceExceptionUtil.error(OrderErrorCodeEnum.ORDER_STATUS_NOT_WAITING_PAYMENT.getCode()).getMessage();
        }
        if (!order.getPresentPrice().equals(payAmount)) { // æ”¯ä»˜é‡‘é¢?ä¸?æ­£ç¡®
            return ServiceExceptionUtil.error(OrderErrorCodeEnum.ORDER_PAY_AMOUNT_ERROR.getCode()).getMessage();
        }
        // æ›´æ–° OrderDO çŠ¶æ€?ä¸ºå·²æ”¯ä»˜ï¼Œç­‰å¾…å?‘è´§
        OrderDO updateOrderObj = new OrderDO()
                .setStatus(OrderStatusEnum.WAIT_SHIPMENT.getValue())
                .setPayAmount(payAmount)
                .setPaymentTime(new Date());
        int updateCount = orderMapper.updateByIdAndStatus(order.getId(), order.getStatus(), updateOrderObj);
        if (updateCount <= 0) {
            return ServiceExceptionUtil.error(OrderErrorCodeEnum.ORDER_STATUS_NOT_WAITING_PAYMENT.getCode()).getMessage();
        }
        // TODO FROM èŠ‹è‰¿ to å°?èŒƒï¼ŒæŠŠæ›´æ–° OrderItem ç»™è¡¥å…¨ã€‚
        return "success";
    }

    @Override
    public CommonResult listenerConfirmGoods() {
        return null;
    }

    @Override
    public CommonResult listenerExchangeGoods() {
        return null;
    }
}
