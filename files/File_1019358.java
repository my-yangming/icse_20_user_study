package cn.iocoder.mall.admin.application.controller.admins;

import cn.iocoder.common.framework.util.CollectionUtil;
import cn.iocoder.common.framework.vo.CommonResult;
import cn.iocoder.common.framework.vo.PageResult;
import cn.iocoder.mall.admin.api.ResourceService;
import cn.iocoder.mall.admin.api.RoleService;
import cn.iocoder.mall.admin.api.bo.resource.ResourceBO;
import cn.iocoder.mall.admin.api.bo.role.RoleBO;
import cn.iocoder.mall.admin.api.constant.ResourceConstants;
import cn.iocoder.mall.admin.api.dto.role.RoleAddDTO;
import cn.iocoder.mall.admin.api.dto.role.RoleAssignResourceDTO;
import cn.iocoder.mall.admin.api.dto.role.RolePageDTO;
import cn.iocoder.mall.admin.api.dto.role.RoleUpdateDTO;
import cn.iocoder.mall.admin.application.convert.ResourceConvert;
import cn.iocoder.mall.admin.application.vo.role.RoleResourceTreeNodeVO;
import cn.iocoder.mall.admin.sdk.context.AdminSecurityContextHolder;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import org.apache.dubbo.config.annotation.Reference;
import org.springframework.web.bind.annotation.*;

import java.util.*;
import java.util.stream.Collectors;

import static cn.iocoder.common.framework.vo.CommonResult.success;

@RestController
@RequestMapping("admins/role")
@Api("è§’è‰²æ¨¡å?—")
public class RoleController {

    @Reference(validation = "true", version = "${dubbo.provider.RoleService.version}")
    private RoleService roleService;

    @Reference(validation = "true", version = "${dubbo.provider.ResourceService.version}")
    private ResourceService resourceService;

    @GetMapping("/page")
    @ApiOperation(value = "è§’è‰²åˆ†é¡µ")
    public CommonResult<PageResult<RoleBO>> page(RolePageDTO rolePageDTO) {
        return success(roleService.getRolePage(rolePageDTO));
    }

    @PostMapping("/add")
    @ApiOperation(value = "åˆ›å»ºè§’è‰²")
    public CommonResult<RoleBO> add(RoleAddDTO roleAddDTO) {
        return success(roleService.addRole(AdminSecurityContextHolder.getContext().getAdminId(), roleAddDTO));
    }

    @PostMapping("/update")
    @ApiOperation(value = "æ›´æ–°è§’è‰²")
    public CommonResult<Boolean> update(RoleUpdateDTO roleUpdateDTO) {
        return success(roleService.updateRole(AdminSecurityContextHolder.getContext().getAdminId(), roleUpdateDTO));
    }

    @PostMapping("/delete")
    @ApiOperation(value = "åˆ é™¤è§’è‰²")
    @ApiImplicitParam(name = "id", value = "è§’è‰²ç¼–å?·", required = true, example = "1")
    public CommonResult<Boolean> delete(@RequestParam("id") Integer id) {
        return success(roleService.deleteRole(AdminSecurityContextHolder.getContext().getAdminId(), id));
    }

    @SuppressWarnings("Duplicates")
    @GetMapping("/resource_tree")
    @ApiOperation(value = "èŽ·å¾—è§’è‰²æ‹¥æœ‰çš„è?œå?•æ?ƒé™?", notes = "ä»¥æ ‘ç»“æž„è¿”å›ž")
    @ApiImplicitParam(name = "id", value = "è§’è‰²ç¼–å?·", required = true, example = "1")
    public CommonResult<List<RoleResourceTreeNodeVO>> resourceTree(@RequestParam("id") Integer id) {
        // èŠ‹è‰¿ï¼šæ­¤å¤„ï¼Œä¸¥æ ¼æ?¥è¯´å?¯ä»¥åœ¨æ ¡éªŒä¸‹è§’è‰²æ˜¯å?¦å­˜åœ¨ã€‚ä¸?è¿‡å‘¢ï¼Œæ ¡éªŒäº†ä¹Ÿæ²¡å•¥æ„?ä¹‰ï¼Œå› ä¸ºä¸€èˆ¬ä¸?å­˜åœ¨è¿™ä¸ªæƒ…å†µï¼Œä¸”ä¸?ä¼šæœ‰ä¸šåŠ¡ä¸Šçš„å½±å“?ã€‚å¹¶ä¸”ï¼Œå??å€’å¤šäº†ä¸€æ¬¡ rpc è°ƒç”¨ã€‚
        // ç¬¬ä¸€æ­¥ï¼ŒèŽ·å¾—è§’è‰²æ‹¥æœ‰çš„èµ„æº?æ•°ç»„
        Set<Integer> roleResources = resourceService.getResourcesByTypeAndRoleIds(null, CollectionUtil.asSet(id))
                .stream().map(ResourceBO::getId).collect(Collectors.toSet());
        // ç¬¬äºŒæ­¥ï¼ŒèŽ·å¾—èµ„æº?æ ‘
        List<ResourceBO> allResources = resourceService.getResourcesByType(null);
        // åˆ›å»º AdminMenuTreeNodeVO Map
        Map<Integer, RoleResourceTreeNodeVO> treeNodeMap = allResources.stream().collect(Collectors.toMap(ResourceBO::getId, ResourceConvert.INSTANCE::convert4));
        // å¤„ç?†çˆ¶å­?å…³ç³»
        treeNodeMap.values().stream()
                .filter(node -> !node.getPid().equals(ResourceConstants.PID_ROOT))
                .forEach((childNode) -> {
                    // èŽ·å¾—çˆ¶èŠ‚ç‚¹
                    RoleResourceTreeNodeVO parentNode = treeNodeMap.get(childNode.getPid());
                    if (parentNode.getChildren() == null) { // åˆ?å§‹åŒ– children æ•°ç»„
                        parentNode.setChildren(new ArrayList<>());
                    }
                    // å°†è‡ªå·±æ·»åŠ åˆ°çˆ¶èŠ‚ç‚¹ä¸­
                    parentNode.getChildren().add(childNode);
                });
        // èŽ·å¾—åˆ°æ‰€æœ‰çš„æ ¹èŠ‚ç‚¹
        List<RoleResourceTreeNodeVO> rootNodes = treeNodeMap.values().stream()
                .filter(node -> node.getPid().equals(ResourceConstants.PID_ROOT))
                .sorted(Comparator.comparing(RoleResourceTreeNodeVO::getSort))
                .collect(Collectors.toList());
        // ç¬¬ä¸‰æ­¥ï¼Œè®¾ç½®è§’è‰²æ˜¯å?¦æœ‰è¯¥è§’è‰²
        treeNodeMap.values().forEach(nodeVO -> nodeVO.setAssigned(roleResources.contains(nodeVO.getId())));
        // è¿”å›žç»“æžœ
        return success(rootNodes);
    }

    @PostMapping("/assign_resource")
    @ApiOperation(value = "åˆ†é…?è§’è‰²èµ„æº?")
    public CommonResult<Boolean> assignResource(RoleAssignResourceDTO roleAssignResourceDTO) {
        return success(roleService.assignRoleResource(AdminSecurityContextHolder.getContext().getAdminId(), roleAssignResourceDTO));
    }

}
