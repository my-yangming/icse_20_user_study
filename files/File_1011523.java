package jetbrains.mps.lang.makeup.plugin;

/*Generated by MPS */

import jetbrains.mps.make.facet.IFacet;
import java.util.List;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.make.resources.IPropertiesPersistence;
import jetbrains.mps.make.facet.ITargetEx;
import jetbrains.mps.make.script.IJob;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.resources.IPropertiesAccessor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.lang.core.plugin.TextGenOutcomeResource;
import java.util.stream.IntStream;
import jetbrains.mps.internal.make.runtime.java.FileProcessor;
import jetbrains.mps.make.delta.IDelta;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.text.TextUnit;
import jetbrains.mps.util.MacroHelper;
import jetbrains.mps.util.MacrosFactory;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.internal.make.runtime.util.FilesDelta;
import jetbrains.mps.internal.make.runtime.util.DeltaKey;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.make.script.IFeedback;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.smodel.resources.DResource;
import jetbrains.mps.make.script.IConfig;
import java.util.Map;
import jetbrains.mps.make.script.IPropertiesPool;

public class Makeup_Facet extends IFacet.Stub {
  private List<ITarget> targets = ListSequence.fromList(new ArrayList<ITarget>());
  private IFacet.Name name = new IFacet.Name("jetbrains.mps.lang.makeup.Makeup");
  public Makeup_Facet() {
    ListSequence.fromList(targets).addElement(new Makeup_Facet.Target_ProcessMakeup());
  }
  public Iterable<ITarget> targets() {
    return targets;
  }
  public Iterable<IFacet.Name> optional() {
    return null;
  }
  public Iterable<IFacet.Name> required() {
    return Sequence.fromArray(new IFacet.Name[]{new IFacet.Name("jetbrains.mps.lang.core.TextGen")});
  }
  public Iterable<IFacet.Name> extended() {
    return null;
  }
  public IFacet.Name getName() {
    return this.name;
  }
  public IPropertiesPersistence propertiesPersistence() {
    return new Makeup_Facet.TargetProperties();
  }
  public static class Target_ProcessMakeup implements ITargetEx {
    private static final ITarget.Name name = new ITarget.Name("jetbrains.mps.lang.makeup.Makeup.ProcessMakeup");
    public Target_ProcessMakeup() {
    }
    public IJob createJob() {
      return new IJob.Stub() {
        @Override
        public IResult execute(final Iterable<IResource> rawInput, final IJobMonitor monitor, final IPropertiesAccessor pa, @NotNull final ProgressMonitor progressMonitor) {
          Iterable<IResource> _output_izvpn8_a0a = null;
          final Iterable<TextGenOutcomeResource> input = (Iterable<TextGenOutcomeResource>) (Iterable) rawInput;
          progressMonitor.start("", IntStream.of(1000).sum());
          switch (0) {
            case 0:
              final ProgressMonitor subProgress_a0a0a = progressMonitor.subTask(1000);
              subProgress_a0a0a.start("Markup textgen outcome", Sequence.fromIterable(input).count() + 2);

              final FileProcessor fp = new FileProcessor(monitor.getSession().getMessageHandler());
              List<IDelta> deltas = ListSequence.fromList(new ArrayList<IDelta>());

              // XXX can I ask e.g. project for its FS? 
              final FileSystem localFileSystem = FileSystem.getInstance();

              for (TextGenOutcomeResource res : Sequence.fromIterable(input)) {
                final ArrayList<TextUnit> generatedTextUnits = new ArrayList<TextUnit>();
                for (TextUnit tu : res.getTextGenResult().getUnits()) {
                  if (tu.getState() == TextUnit.Status.Generated) {
                    generatedTextUnits.add(tu);
                  }
                }
                if (generatedTextUnits.isEmpty()) {
                  continue;
                }
                final MacroHelper moduleMacros = MacrosFactory.forModule(res.getModule());
                //  FIXME would be nice to have output repository in TextGenOutcomeResource, much like for generator outcome 
                // inspired by TextGen facet approach 
                SRepository outputModelRepo = res.getTextGenResult().getModel().getRepository();
                if (outputModelRepo == null) {
                  outputModelRepo = monitor.getSession().getProject().getRepository();
                }
                final FilesDelta d = new FilesDelta(new DeltaKey(res.getModule(), res.getModel()));
                outputModelRepo.getModelAccess().runReadAction(new Runnable() {
                  public void run() {
                    for (TextUnit tu : generatedTextUnits) {
                      SNode startNode = tu.getStartNode();
                      SNode annotationCopy = AttributeOperations.getAttribute(startNode, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xedf22a442bc4e5dL, 0x954f06aaaf51df00L, 0x10f9f9812b8fca93L, "jetbrains.mps.lang.makeup.structure.CopyOutcome")));
                      if ((annotationCopy == null)) {
                        continue;
                      }
                      // TODO process macro/property values in the location, but assume it's absolute path for now 
                      String destination = SPropertyOperations.getString(annotationCopy, MetaAdapterFactory.getProperty(0xedf22a442bc4e5dL, 0x954f06aaaf51df00L, 0x10f9f9812b8fca93L, 0x10f9f9812b8fca94L, "location"));
                      if ((destination == null || destination.length() == 0)) {
                        continue;
                      }
                      if (MacrosFactory.containsMacro(destination)) {
                        destination = moduleMacros.expandPath(destination);
                      }
                      monitor.reportFeedback(new IFeedback.INFORMATION(String.valueOf(String.format("copy textgen outcome: %s --> %s", tu.getFileName(), destination))));

                      // next code could be outside of model read 
                      IFile destFile = localFileSystem.getFile(destination);
                      boolean changed = fp.saveContent(destFile, tu.getBytes());
                      if (changed) {
                        d.written(destFile);
                      } else {
                        d.kept(destFile);
                      }
                    }
                  }
                });
                ListSequence.fromList(deltas).addElement(d);
                subProgress_a0a0a.advance(1);
                subProgress_a0a0a.step(res.getModel().getName().getLongName());
              }

              if (ListSequence.fromList(deltas).isNotEmpty()) {
                _output_izvpn8_a0a = Sequence.fromIterable(_output_izvpn8_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new DResource(deltas))));
              }

              subProgress_a0a0a.advance(1);

              localFileSystem.runWriteTransaction(new Runnable() {
                public void run() {
                  fp.flushChanges();
                }
              });

              subProgress_a0a0a.done();
            default:
              progressMonitor.done();
              return new IResult.SUCCESS(_output_izvpn8_a0a);
          }
        }
      };
    }
    public IConfig createConfig() {
      return null;
    }
    public Iterable<ITarget.Name> notAfter() {
      return null;
    }
    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.TextGen.textGen")});
    }
    public Iterable<ITarget.Name> notBefore() {
      return null;
    }
    public Iterable<ITarget.Name> before() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.make.facets.Make.reconcile")});
    }
    public ITarget.Name getName() {
      return name;
    }
    public boolean isOptional() {
      return true;
    }
    public boolean requiresInput() {
      return true;
    }
    public boolean producesOutput() {
      return true;
    }
    public Iterable<Class<? extends IResource>> expectedInput() {
      List<Class<? extends IResource>> rv = ListSequence.fromList(new ArrayList<Class<? extends IResource>>());
      ListSequence.fromList(rv).addElement(TextGenOutcomeResource.class);
      return rv;
    }
    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }
    public <T> T createParameters(Class<T> cls) {
      return null;
    }
    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      return t;
    }
  }
  public static class TargetProperties implements IPropertiesPersistence {
    public TargetProperties() {
    }
    public void storeValues(Map<String, String> store, IPropertiesPool properties) {
    }
    public void loadValues(Map<String, String> store, IPropertiesPool properties) {
      try {
      } catch (RuntimeException re) {
      }
    }
  }
}
