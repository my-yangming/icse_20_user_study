/*
 * <summary></summary>
 * <author>Hankcs</author>
 * <email>me@hankcs.com</email>
 * <create-date>2016-09-05 PM11:07</create-date>
 *
 * <copyright file="StructuredPerceptron.java" company="ç ?å†œåœº">
 * Copyright (c) 2008-2016, ç ?å†œåœº. All Right Reserved, http://www.hankcs.com/
 * This source is subject to Hankcs. Please contact Hankcs to get more information.
 * </copyright>
 */
package com.hankcs.hanlp.model.perceptron.model;

import com.hankcs.hanlp.model.perceptron.feature.FeatureMap;
import com.hankcs.hanlp.model.perceptron.tagset.TagSet;
import com.hankcs.hanlp.model.perceptron.instance.Instance;

/**
 * ç»“æž„åŒ–æ„ŸçŸ¥æœºç®—æ³•å­¦ä¹ çš„çº¿æ€§æ¨¡åž‹
 *
 * @author hankcs
 */
public class StructuredPerceptron extends LinearModel
{
    public StructuredPerceptron(FeatureMap featureMap, float[] parameter)
    {
        super(featureMap, parameter);
    }

    public StructuredPerceptron(FeatureMap featureMap)
    {
        super(featureMap);
    }

    /**
     * æ ¹æ?®ç­”æ¡ˆå’Œé¢„æµ‹æ›´æ–°å?‚æ•°
     *
     * @param goldIndex    ç­”æ¡ˆçš„ç‰¹å¾?å‡½æ•°ï¼ˆé?žåŽ‹ç¼©å½¢å¼?ï¼‰
     * @param predictIndex é¢„æµ‹çš„ç‰¹å¾?å‡½æ•°ï¼ˆé?žåŽ‹ç¼©å½¢å¼?ï¼‰
     */
    public void update(int[] goldIndex, int[] predictIndex)
    {
        for (int i = 0; i < goldIndex.length; ++i)
        {
            if (goldIndex[i] == predictIndex[i])
                continue;
            else // é¢„æµ‹ä¸Žç­”æ¡ˆä¸?ä¸€è‡´
            {
                parameter[goldIndex[i]]++; // å¥–åŠ±æ­£ç¡®çš„ç‰¹å¾?å‡½æ•°ï¼ˆå°†å®ƒçš„æ?ƒå€¼åŠ ä¸€ï¼‰
                if (predictIndex[i] >= 0 && predictIndex[i] < parameter.length)
                    parameter[predictIndex[i]]--; // æƒ©ç½šæ‹›è‡´é”™è¯¯çš„ç‰¹å¾?å‡½æ•°ï¼ˆå°†å®ƒçš„æ?ƒå€¼å‡?ä¸€ï¼‰
                else
                {
                    throw new IllegalArgumentException("æ›´æ–°å?‚æ•°æ—¶ä¼ å…¥äº†é?žæ³•çš„ä¸‹æ ‡");
                }
            }
        }
    }

    /**
     * åœ¨çº¿å­¦ä¹ 
     *
     * @param instance æ ·æœ¬
     */
    public void update(Instance instance)
    {
        int[] guessLabel = new int[instance.length()];
        viterbiDecode(instance, guessLabel);
        TagSet tagSet = featureMap.tagSet;
        for (int i = 0; i < instance.length(); i++)
        {
            int[] featureVector = instance.getFeatureAt(i);
            int[] goldFeature = new int[featureVector.length]; // æ ¹æ?®ç­”æ¡ˆåº”å½“è¢«æ¿€æ´»çš„ç‰¹å¾?
            int[] predFeature = new int[featureVector.length]; // å®žé™…é¢„æµ‹æ—¶æ¿€æ´»çš„ç‰¹å¾?
            for (int j = 0; j < featureVector.length - 1; j++)
            {
                goldFeature[j] = featureVector[j] * tagSet.size() + instance.tagArray[i];
                predFeature[j] = featureVector[j] * tagSet.size() + guessLabel[i];
            }
            goldFeature[featureVector.length - 1] = (i == 0 ? tagSet.bosId() : instance.tagArray[i - 1]) * tagSet.size() + instance.tagArray[i];
            predFeature[featureVector.length - 1] = (i == 0 ? tagSet.bosId() : guessLabel[i - 1]) * tagSet.size() + guessLabel[i];
            update(goldFeature, predFeature);
        }
    }
}
