package org.nutz.mvc.upload.util;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

class RingItem {

    byte[] buffer;

    int max;
    /**
     * å·¦æ ‡è®°ï¼ŒDUMP æ—¶åŒ…å?«
     */
    int l;
    /**
     * å?³æ ‡è®°ï¼ŒDUMP æ—¶ä¸?åŒ…å?«
     */
    int r;
    /**
     * ä¸‹ä¸€æ¬¡ Mark æ˜¯å¼€å§‹çš„ä½?ç½®
     */
    int nextmark;

    RingItem next;

    boolean isLoaded;
    boolean isStreamEnd;

    RingItem(int width) {
        this.buffer = new byte[width];
        this.next = this;
    }

    RingItem createNext() {
        RingItem ri = new RingItem(buffer.length);
        ri.next = next;
        next = ri;
        return ri;
    }

    void load(InputStream ins) throws IOException {
        if (isLoaded) {
            throw new ReloadLoadedRingItemException();
        }
        int bufferSize = buffer.length;
        max = ins.read(buffer, 0, bufferSize);

        // æµ?é‡Œä¸?åœ¨æœ‰å†…å®¹äº†
        if (max < 0) {
            max = 0;
            isStreamEnd = true;
        }
        // æ²¡æœ‰è¯»å…¨ï¼Œç»§ç»­è¯»ï¼Œç›´è‡³readæ–¹æ³•è¿”å›ž -1, æˆ–è€…è¯»æ»¡.
        else {
            while (max < bufferSize) {
                int re = ins.read(buffer, max, bufferSize - max);
                if (re == -1) {
                    isStreamEnd = true;
                    break;
                }
                max += re;
            }
        }

        l = 0;
        r = 0;
        nextmark = 0;
        isLoaded = true;
    }

    void dump(OutputStream ops) throws IOException {
        if (l < r) {
            ops.write(buffer, l, r - l);
        }
        l = nextmark;
        r = l;
        isLoaded = (l < max);
    }

    /**
     * è¯•å›¾ä»Žç¼“å†²å¼€å¤´åŒ¹é…?ï¼Œå¦‚æžœåŒ¹é…?å¤±è´¥ï¼Œç§»åŠ¨ 'r' å¹¶è¿”å›ž false<br>
     * å¦‚æžœåŒ¹é…?æˆ?åŠŸï¼Œåˆ™ç§»åŠ¨ 'l'ï¼ˆåŒ¹é…?çš„å†…å®¹ä¸?éœ€è¦?è¯»å?–ï¼‰ å¹¶è¿”å›ž true
     * <p>
     * è¿™ä¸ªå‡½æ•°ï¼Œåœ¨ BufferRing å?‘çŽ°å½“å‰?çš„çŽ¯èŠ‚ç‚¹è¿”å›ž '>0' æ—¶ï¼Œéœ€è¦?è°ƒç”¨ next çš„è¿™ä¸ªå‡½æ•°ï¼Œçœ‹çœ‹æ˜¯ä¸?æ˜¯å?¯ä»¥å®Œæ•´è¢«åŒ¹é…?
     * 
     * @param bs
     *            æ•°ç»„
     * @param offs
     *            å??ç§»é‡?
     * @return æœ¬èŠ‚ç‚¹å¼€å¤´æ˜¯å?¦åŒ¹é…?å‰©ä½™çš„éƒ¨åˆ†
     */
    boolean matchHeadingWithRemain(byte[] bs, int offs) {
        int i = 0;
        for (; offs < bs.length; offs++) {
            if (buffer[i++] != bs[offs]) {
                r = i;
                return false;
            }
        }
        // Matched, skip it
        l = i;
        r = i;
        nextmark = i;
        return true;
    }

    boolean isDone4Mark() {
        return nextmark == max;
    }

    /**
     * ä»Žç»™å®š offs å°½åŠ›åŒ¹é…?ç»™å‡ºçš„æ•°ç»„ã€‚
     * <p>
     * éœ€è¦?æ³¨æ„?çš„æ˜¯ï¼Œå¦‚æžœè¿”å›žçš„æ˜¯ >0 çš„æ•°ï¼Œå†…éƒ¨çš„æ ‡å¿—ä½?å°†è¢«è®¾ç½®åˆ°ç¬¬ä¸€ä¸ªåŒ¹é…?å­—ç¬¦ï¼Œä»¥ä¾¿ DUMP å†…å®¹ã€‚ <br>
     * æ‰€ä»¥ï¼Œå¦‚æžœä¸‹ä¸€ä¸ªèŠ‚ç‚¹ç»™å‡ºçš„ç»“è®ºæ˜¯ -1ï¼Œä½†æ˜¯ 'l' å¹¶ä¸?æ˜¯0ï¼Œé‚£ä¹ˆè¯´æ˜Žè¿™ä¸ªåŒ¹é…?æ˜¯å¤±è´¥çš„ï¼Œéœ€è¦?å°† æœ¬èŠ‚ç‚¹çš„ r ç½®åˆ° max å¤„ã€‚
     * <p>
     * è¿”å›žå€¼
     * <ul>
     * <li><b>-1</b> - å…¨éƒ¨è¢«åŒ¹é…?
     * <li><b>0</b> - æœªå?‘çŽ°åŒ¹é…?
     * <li><b>å¤§äºŽ 0</b> - åœ¨ç¼“å†²çš„æœ«å°¾å?‘çŽ°åŒ¹é…?ï¼Œä½†æ˜¯æ²¡æœ‰åŒ¹é…?å…¨ï¼Œå¸Œæœ›ä¸‹ä¸€ä¸ªèŠ‚ç‚¹ç»§ç»­ä»Žè¿™ä¸ªä½?ç½®åŒ¹é…?
     * </ul>
     * 
     * @param bs
     *            æ•°ç»„
     * @return -1, 0 æˆ–è€… +n
     */
    int mark(byte[] bs, int[] fails) {
        if (!isLoaded)
            throw new MarkUnloadedRingItemException();

        byte start = bs[0];

        for (; r < max; r++) {
            // å?¯èƒ½æ˜¯è¾¹ç•Œï¼Œå¼€å§‹åŒ¹é…?
            if (buffer[r] == start) {
                int re = 0; // å·²ç»?åŒ¹é…?é•¿åº¦
                int j = r; // åœ¨å†…å®¹å€¼å­—èŠ‚æ•°ç»„ä¸­çš„æŒ‡é’ˆ
                while (true) {
                    re++;
                    j++;
                    // å…¨éƒ¨åŒ¹é…?
                    if (re == bs.length) {
                        nextmark = j;
                        return -1;
                    }
                    // åˆ°è¾¾æœ¬é¡¹ç›®çš„ç»“å°¾ï¼Œä½†æ˜¯å¹¶ä¸?ç¡®å®šæ˜¯å?¦æ˜¯è¾¹ç•Œï¼Œå› ä¸ºè¿˜æœªåŒ¹é…?å®Œ
                    // å› æ­¤æš‚æ—¶å?‡è®¾è¿™ä¸ªä¸?ä¼šè¢«åŒ¹é…?
                    if (j == max) {
                        nextmark = max;
                        if (isStreamEnd) {
                            r = max;
                            return 0;
                        }
                        return re;
                    }
                    // å¦‚æžœå­—ç¬¦ä¸?ç›¸ç­‰ï¼Œé‚£ä¹ˆæŸ¥çœ‹ä¸€ä¸‹å›žé€€æ•°ç»„
                    // å¦‚æžœå›žé€€åˆ° 0ï¼Œåˆ™é€€å‡ºå¾ªçŽ¯ï¼Œå› ä¸ºè¿™ä¸?æ˜¯è¾¹ç•Œï¼Œå?¦åˆ™ç»§ç»­å¾ªçŽ¯åŒ¹é…?è¾¹ç•Œ
                    if (bs[re] != buffer[j]) {
                        re = fails[re];
                        // å†?æ¬¡åˆ¤æ–­å›žé€€å?Žä½?ç½®ï¼Œå¦‚æžœè¿˜æ˜¯ä¸?ç›¸å?Œï¼Œåˆ™é€€å‡ºå¾ªçŽ¯
                        if (bs[re] != buffer[j]) {
                            break;
                        }
                        // å¦‚æžœå·²ç»?å›žé€€åˆ°äº† 0ï¼Œä½ è¿™ä¹ˆå?³è¾¹ç•Œç½®ä¸º jï¼Œè¡¨ç¤ºä»Žå¤´æ?œç´¢
                        else if (re == 0) {
                            r = j;
                        }
                        // å?¦åˆ™æ‰©å¤§è¾¹ç•Œï¼Œå¹¶ç»§ç»­å¾ªçŽ¯
                        else {
                            r += re == 0 ? 1 : re;
                        }

                    }
                }
                // make 'r' jump to 'j'
                r = j;
            }
        }
        // Fail to found
        nextmark = max;
        return 0;
    }
}
