/*
 * Copyright 2015-2102 RonCoo(http://www.roncoo.com) Group.
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *  
 *      http://www.apache.org/licenses/LICENSE-2.0
 *  
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.roncoo.pay.app.reconciliation.parser;

import com.roncoo.pay.reconciliation.entity.RpAccountCheckBatch;
import com.roncoo.pay.reconciliation.enums.BatchStatusEnum;
import com.roncoo.pay.reconciliation.service.RpAccountCheckBatchService;
import com.roncoo.pay.reconciliation.utils.XmlUtils;
import com.roncoo.pay.reconciliation.vo.ReconciliationEntityVo;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.dom4j.DocumentException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * å¾®ä¿¡å¯¹è´¦å?•è§£æž?å™¨ .
 *
 * é¾™æžœå­¦é™¢ï¼šwww.roncoo.com
 * 
 * @authorï¼šshenjialong
 */
@Component("WEIXINParser")
public class WEIXINParser implements ParserInterface {

	private static final Log LOG = LogFactory.getLog(WEIXINParser.class);

	private static final String DATE_FORMAT_STYLE = "yyyy-MM-dd HH:mm:ss";

	@Autowired
	private RpAccountCheckBatchService rpAccountCheckBatchService;

	/**
	 * è§£æž?å™¨çš„å…¥å?£æ–¹æ³•ï¼Œæ¯?ä¸ªè§£æž?å™¨éƒ½å¿…é¡»æœ‰è¿™ä¸ªæ–¹æ³•
	 * 
	 * @param file
	 *            éœ€è¦?è§£æž?çš„æ–‡ä»¶
	 * @param billDate
	 *            è´¦å?•æ—¥
	 * @param batch
	 *            å¯¹è´¦æ‰¹æ¬¡è®°å½•
	 * @return
	 */
	public List<ReconciliationEntityVo> parser(File file, Date billDate, RpAccountCheckBatch batch) {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
		String billDateStr = sdf.format(billDate);

		// åˆ¤æ–­è¿”å›žçš„fileæ–‡ä»¶æ˜¯å?¦æ­£ç¡®
		this.isError(file, batch);
		if (batch.getStatus() != null) {
			if (batch.getStatus().equals(BatchStatusEnum.ERROR.name()) || batch.getStatus().equals(BatchStatusEnum.NOBILL.name())) {
				if (LOG.isDebugEnabled()) {
					LOG.debug("å¯¹è´¦å¤±è´¥, å¯¹è´¦æ—¥æœŸ: " + billDateStr + ", batchStatus: " + BatchStatusEnum.ERROR + ", bankMsg: [" + batch.getBankErrMsg() + "], checkFailMsg: [" + batch.getCheckFailMsg() + "]");
				}
				return null;
			}
		}
		// fileä¸­æœ‰æ•°æ?®ï¼Œè§£æž?
		try {
			List<String> list = FileUtils.readLines(file, "UTF-8");
			// å¯¹è´¦æ–‡ä»¶è¿‡æ»¤ç©ºå€¼
			for (Iterator<String> it = list.iterator(); it.hasNext();) {
				if (StringUtils.isBlank(it.next())) {
					it.remove();
				}
			}

			List<ReconciliationEntityVo> sheetList = null;
			sheetList = parseSuccess(list, billDateStr, batch);
			return sheetList;
		} catch (IOException e) {
			LOG.error("è§£æž?å¾®ä¿¡è´¦å?•æ–‡ä»¶å¤±è´¥", e);
			return null;
		}

	}

	/**
	 * è§£æž?æ–‡ä»¶
	 * 
	 * @param list
	 * @param billDate
	 *            è´¦å?•æ—¥
	 * @param batch
	 *            å¯¹è´¦æ‰¹æ¬¡è®°å½•
	 * @return
	 */
	private List<ReconciliationEntityVo> parseSuccess(List<String> list, String billDate, RpAccountCheckBatch batch) {
		// äº¤æ˜“æ—¶é—´,å…¬ä¼—è´¦å?·ID,å•†æˆ·å?·,å­?å•†æˆ·å?·,è®¾å¤‡å?·,å¾®ä¿¡è®¢å?•å?·,å•†æˆ·è®¢å?•å?·,ç”¨æˆ·æ ‡è¯†,äº¤æ˜“ç±»åž‹,äº¤æ˜“çŠ¶æ€?,ä»˜æ¬¾é“¶è¡Œ,è´§å¸?ç§?ç±»,æ€»é‡‘é¢?,ä¼?ä¸šçº¢åŒ…é‡‘é¢?,å•†å“?å??ç§°,å•†æˆ·æ•°æ?®åŒ…,æ‰‹ç»­è´¹,è´¹çŽ‡
		// `2016-02-16
		// 20:30:28,`wx3798432a27e0c92a,`1263453701,`1308363301,`,`1000010956201602163321502558,`PAY2016021610017753,`ozSK7wgGhLpgZ09x_OjkKgz0Zeis,`MICROPAY,`SUCCESS,`CFT,`CNY,`32.50,`0.00,`erp
		// product,`,`0.20000,`0.60%
		// `2016-02-16
		// 18:42:38,`wx3798432a27e0c92a,`1263453701,`1308363301,`,`1000020956201602163316153533,`PAY2016021610017685,`ozSK7wswIt3nBfUxsJDp5hWZSm_8,`MICROPAY,`SUCCESS,`CFT,`CNY,`95.00,`0.00,`erp
		// product,`,`0.57000,`0.60%

		// æ€»äº¤æ˜“å?•æ•°,æ€»äº¤æ˜“é¢?,æ€»é€€æ¬¾é‡‘é¢?,æ€»ä¼?ä¸šçº¢åŒ…é€€æ¬¾é‡‘é¢?,æ‰‹ç»­è´¹æ€»é‡‘é¢?
		// `383,`32903.45,`0.00,`0.00,`197.45000

		String title = "äº¤æ˜“æ—¶é—´,å…¬ä¼—è´¦å?·ID,å•†æˆ·å?·,å­?å•†æˆ·å?·,è®¾å¤‡å?·,å¾®ä¿¡è®¢å?•å?·,å•†æˆ·è®¢å?•å?·,ç”¨æˆ·æ ‡è¯†,äº¤æ˜“ç±»åž‹,äº¤æ˜“çŠ¶æ€?,ä»˜æ¬¾é“¶è¡Œ,è´§å¸?ç§?ç±»,æ€»é‡‘é¢?,ä¼?ä¸šçº¢åŒ…é‡‘é¢?,å•†å“?å??ç§°,å•†æˆ·æ•°æ?®åŒ…,æ‰‹ç»­è´¹,è´¹çŽ‡";
		String totalTitle = "æ€»äº¤æ˜“å?•æ•°,æ€»äº¤æ˜“é¢?,æ€»é€€æ¬¾é‡‘é¢?,æ€»ä¼?ä¸šçº¢åŒ…é€€æ¬¾é‡‘é¢?,æ‰‹ç»­è´¹æ€»é‡‘é¢?";

		Pattern titlePattern = Pattern.compile("(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?)$");
		Pattern pattern = Pattern.compile("^`(.*?),`(.*?),`(.*?),`(.*?),`(.*?),`(.*?),`(.*?),`(.*?),`(.*?),`(.*?),`(.*?),`(.*?),`(.*?),`(.*?),`(.*?),`(.*?),`(.*?),`(.*?)$");

		Pattern totalTitlePattern = Pattern.compile("(.*?),(.*?),(.*?),(.*?),(.*?)$");
		Pattern totalPattern = Pattern.compile("^`(.*?),`(.*?),`(.*?),`(.*?),`(.*?)$");

		// æ ¡éªŒæ ‡é¢˜è¡Œ
		String titleRawData = list.remove(0);
		if (!titlePattern.matcher(titleRawData).find()) {
			batch.setStatus(BatchStatusEnum.FAIL.name());
			batch.setCheckFailMsg("æ ¡éªŒæ ‡é¢˜è¡Œä¸?é€šè¿‡, rawdata[" + titleRawData + "], æœŸæœ›å€¼[" + title + "]");
			return null;
		}

		// è§£æž?ç»Ÿè®¡æ•°æ?®
		String totalRawData = list.remove(list.size() - 1); // è¿™ä¸¤è¡Œçš„é¡ºåº?ä¸?èƒ½å?˜
		String totalTitleRawData = list.remove(list.size() - 1);
		if (!totalTitlePattern.matcher(totalTitleRawData).find()) {
			batch.setStatus(BatchStatusEnum.FAIL.name());
			batch.setCheckFailMsg("æ ¡éªŒç»Ÿè®¡æ ‡é¢˜è¡Œä¸?é€šè¿‡, rawdata[" + totalTitleRawData + "], æœŸæœ›å€¼[" + totalTitle + "]");
			return new ArrayList<ReconciliationEntityVo>();
		}
		Matcher totalMatcher = totalPattern.matcher(totalRawData);
		if (totalMatcher.find()) {
			// æ€»äº¤æ˜“å?•æ•°
			String totalCount = totalMatcher.group(1);
			// æ€»äº¤æ˜“é¢?
			String totalAmountStr = totalMatcher.group(2);
			// æ€»é€€æ¬¾é‡‘é¢?
			String refundAmountStr = totalMatcher.group(3);
			// æ‰‹ç»­è´¹æ€»é‡‘é¢?
			String feeAmountStr = totalMatcher.group(5);

			try {
				batch.setBankTradeCount(Integer.parseInt(totalCount));
				// å¾®ä¿¡è´¦å?•é‡‘é¢?å?•ä½?æ˜¯å…ƒ
				batch.setBankTradeAmount(new BigDecimal(totalAmountStr));
				batch.setBankRefundAmount(new BigDecimal(refundAmountStr));
				batch.setBankFee(new BigDecimal(feeAmountStr));
			} catch (NumberFormatException e) {
				LOG.warn("è§£æž?ç»Ÿè®¡è¡Œå¤±è´¥, billDate[" + billDate + "], billType[SUCCESS], rawdata[" + totalRawData + "]", e);
				batch.setStatus(BatchStatusEnum.FAIL.name());
				batch.setCheckFailMsg("è§£æž?ç»Ÿè®¡è¡Œå¤±è´¥, rawdata[" + totalRawData + "]");
				// æ?¢å¤?ç©ºå€¼
				batch.setBankTradeCount(null);
				batch.setBankTradeAmount(null);
				batch.setBankRefundAmount(null);
				batch.setBankFee(null);
				return null;
			}
		} else {
			batch.setStatus(BatchStatusEnum.FAIL.name());
			batch.setCheckFailMsg("åŒ¹é…?ç»Ÿè®¡è¡Œå¤±è´¥, rawdata[" + totalRawData + "]");
			return new ArrayList<ReconciliationEntityVo>();
		}

		// è§£æž?å‡ºæ?¥çš„æ•°æ?®ä¿?å­˜åœ¨listä¸­
		List<ReconciliationEntityVo> entityVoList = new ArrayList<ReconciliationEntityVo>();
		for (String rawData : list) {
			ReconciliationEntityVo entityVo = new ReconciliationEntityVo();
			entityVoList.add(entityVo);

			Matcher matcher = pattern.matcher(rawData);
			if (matcher.find()) {

				// äº¤æ˜“æ—¶é—´
				String tradeTimeStr = matcher.group(1);
				// å¾®ä¿¡è®¢å?•å?·(å¾®ä¿¡æµ?æ°´å?·)
				String bankTrxNo = matcher.group(6);
				// å•†æˆ·è®¢å?•å?·(å¹³å?°ä¼ é€’ç»™å¾®ä¿¡çš„é“¶è¡Œè®¢å?•å?·)
				String bankOrderNo = matcher.group(7);
				// äº¤æ˜“çŠ¶æ€?
				String bankTradeStatus = matcher.group(10);
				// æ€»é‡‘é¢?
				String orderAmount = matcher.group(13);
				// ä¼?ä¸šçº¢åŒ…é‡‘é¢?
				// String discountAmount = matcher.group(14);
				// æ‰‹ç»­è´¹
				String bankFee = matcher.group(17);

				try {
					// è®¾ç½®æ”¯ä»˜æ—¶é—´
					SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT_STYLE);
					entityVo.setOrderTime(sdf.parse(tradeTimeStr));
				} catch (ParseException e) {
					LOG.warn("è§£æž?äº¤æ˜“æ—¶é—´å‡ºé”™, billDate[" + billDate + "], billType[SUCCESS], tradeTime[" + tradeTimeStr + "], rawdata[" + rawData + "]", e);
					batch.setStatus(BatchStatusEnum.FAIL.name());
					batch.setCheckFailMsg("è§£æž?äº¤æ˜“æ—¶é—´å‡ºé”™, tradeTime[" + tradeTimeStr + "], rawdata[" + rawData + "]");
					return null;
				}
				// è®¾ç½®å¾®ä¿¡æµ?æ°´å?·
				entityVo.setBankTrxNo(bankTrxNo);
				// è®¾ç½®å¹³å?°é“¶è¡Œè®¢å?•å?·
				entityVo.setBankOrderNo(bankOrderNo);
				// è®¾ç½®å¾®ä¿¡è®¢å?•çŠ¶æ€?ï¼ˆé»˜è®¤å…¨éƒ¨æ˜¯successï¼‰
				entityVo.setBankTradeStatus(bankTradeStatus);
				// è®¾ç½®å¾®ä¿¡è´¦å?•é‡‘é¢?:(å?•ä½?æ˜¯å…ƒ)
				entityVo.setBankAmount(new BigDecimal(orderAmount));
				// è®¾ç½®é“¶è¡Œ
				entityVo.setBankFee(new BigDecimal(bankFee));
			} else {
				batch.setStatus(BatchStatusEnum.FAIL.name());
				batch.setCheckFailMsg("åŒ¹é…?è´¦å?•æ˜Žç»†å¤±è´¥, rawdata[" + rawData + "]");
				return null;
			}
		}

		return entityVoList;
	}

	/**
	 * å¾®ä¿¡æŽ¥å?£è¿”å›žfailæ—¶
	 * 
	 * @param file
	 *            å¯¹è´¦æ–‡ä»¶
	 * @param batch
	 *            å¯¹è´¦æ‰¹æ¬¡è®°å½•
	 */
	public void isError(File file, RpAccountCheckBatch batch) {
		// <xml><return_code><![CDATA[FAIL]]></return_code>
		// <return_msg><![CDATA[No Bill Exist]]></return_msg>
		// </xml>
		try {
			String content = FileUtils.readFileToString(file, "UTF-8");
			if (content.contains("<return_code>")) {

				Map<String, Object> map = XmlUtils.xmlToMap(content);
				String returnMsg = map.get("return_msg") != null ? map.get("return_msg").toString() : "";
				batch.setBankErrMsg(returnMsg);
				// åˆ¤æ–­æ˜¯æ²¡æœ‰æ•°æ?®è¿˜æ˜¯ä¸‹è½½å¤±è´¥
				// æ³¨æ„?ï¼šå¦‚æžœæ˜¯æ²¡æœ‰æ•°æ?®ï¼Œè¿˜æ˜¯éœ€è¦?ç»§ç»­å¯¹è´¦å¤„ç?†ï¼Œä¸ºäº†æŠŠå¹³å?°æ•°æ?®æ”¾å…¥ç¼“å†²æ± ï¼Œå¦‚æžœæ˜¯ä¸‹è½½å¤±è´¥ï¼Œç›´æŽ¥ä¸?è¿›è¡Œä¸‹ä¸€æ­¥ï¼Œä¿?å­˜batch
				if (returnMsg.contains("No Bill Exist")) {
					batch.setStatus(BatchStatusEnum.NOBILL.name());
				} else {
					batch.setStatus(BatchStatusEnum.ERROR.name());
					rpAccountCheckBatchService.saveData(batch);
				}
			}
		} catch (DocumentException e) {
			LOG.error("è§£æž?å¾®ä¿¡è´¦å?•(åˆ¤æ–­è¿”å›žæ˜¯å?¦æ­£ç¡®)å¤±è´¥", e);
		} catch (IOException e) {
			LOG.error("è§£æž?å¾®ä¿¡è´¦å?•(åˆ¤æ–­è¿”å›žæ˜¯å?¦æ­£ç¡®)å¤±è´¥", e);
		}
	}

}
