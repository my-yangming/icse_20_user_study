package com.example.jingbin.cloudreader.utils;

import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.os.Environment;
import android.widget.ImageView;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.WriterException;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;


/**
 * Created by jingbin on 16/9/20.
 */
public class QRCodeUtil {
    /**
     * ç”Ÿæˆ?äºŒç»´ç ?Bitmap
     *
     * @param content   å†…å®¹
     * @param widthPix  å›¾ç‰‡å®½åº¦
     * @param heightPix å›¾ç‰‡é«˜åº¦
     * @param logoBm    äºŒç»´ç ?ä¸­å¿ƒçš„Logoå›¾æ ‡ï¼ˆå?¯ä»¥ä¸ºnullï¼‰
     * @param filePath  ç”¨äºŽå­˜å‚¨äºŒç»´ç ?å›¾ç‰‡çš„æ–‡ä»¶è·¯å¾„
     * @return ç”Ÿæˆ?äºŒç»´ç ?å?Šä¿?å­˜æ–‡ä»¶æ˜¯å?¦æˆ?åŠŸ
     */
    public static boolean createQRImage(String content, int widthPix, int heightPix, Bitmap logoBm, String filePath) {
        try {
            if (content == null || "".equals(content)) {
                return false;
            }

            //é…?ç½®å?‚æ•°
            Map<EncodeHintType, Object> hints = new HashMap<>();
            hints.put(EncodeHintType.CHARACTER_SET, "utf-8");
            //å®¹é”™çº§åˆ«
            hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);
            //è®¾ç½®ç©ºç™½è¾¹è·?çš„å®½åº¦
//            hints.put(EncodeHintType.MARGIN, 2); //default is 4

            // å›¾åƒ?æ•°æ?®è½¬æ?¢ï¼Œä½¿ç”¨äº†çŸ©é˜µè½¬æ?¢
            BitMatrix bitMatrix = new QRCodeWriter().encode(content, BarcodeFormat.QR_CODE, widthPix, heightPix, hints);
            int[] pixels = new int[widthPix * heightPix];
            // ä¸‹é?¢è¿™é‡ŒæŒ‰ç…§äºŒç»´ç ?çš„ç®—æ³•ï¼Œé€?ä¸ªç”Ÿæˆ?äºŒç»´ç ?çš„å›¾ç‰‡ï¼Œ
            // ä¸¤ä¸ªforå¾ªçŽ¯æ˜¯å›¾ç‰‡æ¨ªåˆ—æ‰«æ??çš„ç»“æžœ
            for (int y = 0; y < heightPix; y++) {
                for (int x = 0; x < widthPix; x++) {
                    if (bitMatrix.get(x, y)) {
                        pixels[y * widthPix + x] = 0xff000000;
                    } else {
                        pixels[y * widthPix + x] = 0xffffffff;
                    }
                }
            }

            // ç”Ÿæˆ?äºŒç»´ç ?å›¾ç‰‡çš„æ ¼å¼?ï¼Œä½¿ç”¨ARGB_8888
            Bitmap bitmap = Bitmap.createBitmap(widthPix, heightPix, Bitmap.Config.ARGB_8888);
            bitmap.setPixels(pixels, 0, widthPix, 0, 0, widthPix, heightPix);

            if (logoBm != null) {
                bitmap = addLogo(bitmap, logoBm);
            }

            //å¿…é¡»ä½¿ç”¨compressæ–¹æ³•å°†bitmapä¿?å­˜åˆ°æ–‡ä»¶ä¸­å†?è¿›è¡Œè¯»å?–ã€‚ç›´æŽ¥è¿”å›žçš„bitmapæ˜¯æ²¡æœ‰ä»»ä½•åŽ‹ç¼©çš„ï¼Œå†…å­˜æ¶ˆè€—å·¨å¤§ï¼?
            return bitmap != null && bitmap.compress(Bitmap.CompressFormat.JPEG, 100, new FileOutputStream(filePath));
        } catch (WriterException | IOException e) {
            e.printStackTrace();
        }

        return false;
    }

    /**
     * åœ¨äºŒç»´ç ?ä¸­é—´æ·»åŠ Logoå›¾æ¡ˆ
     */
    private static Bitmap addLogo(Bitmap src, Bitmap logo) {
        if (src == null) {
            return null;
        }

        if (logo == null) {
            return src;
        }

        //èŽ·å?–å›¾ç‰‡çš„å®½é«˜
        int srcWidth = src.getWidth();
        int srcHeight = src.getHeight();
        int logoWidth = logo.getWidth();
        int logoHeight = logo.getHeight();

        if (srcWidth == 0 || srcHeight == 0) {
            return null;
        }

        if (logoWidth == 0 || logoHeight == 0) {
            return src;
        }

        //logoå¤§å°?ä¸ºäºŒç»´ç ?æ•´ä½“å¤§å°?çš„1/5
        float scaleFactor = srcWidth * 1.0f / 5 / logoWidth;
        Bitmap bitmap = Bitmap.createBitmap(srcWidth, srcHeight, Bitmap.Config.ARGB_8888);
        try {
            Canvas canvas = new Canvas(bitmap);
            canvas.drawBitmap(src, 0, 0, null);
            canvas.scale(scaleFactor, scaleFactor, srcWidth / 2, srcHeight / 2);
            canvas.drawBitmap(logo, (srcWidth - logoWidth) / 2, (srcHeight - logoHeight) / 2, null);

//            canvas.save(Canvas.ALL_SAVE_FLAG);
            canvas.save();
            canvas.restore();
        } catch (Exception e) {
            bitmap = null;
            e.getStackTrace();
        }

        return bitmap;
    }

    //æ–‡ä»¶å­˜å‚¨æ ¹ç›®å½•
    private static String getFileRoot(Context context) {
        if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
            File external = context.getExternalFilesDir(null);
            if (external != null) {
                return external.getAbsolutePath();
            }
        }

        return context.getFilesDir().getAbsolutePath();
    }

    /**
     * @param text        ç”Ÿæˆ?äºŒç»´ç ?çš„å­—ç¬¦ä¸²
     * @param imageView   æ˜¾ç¤ºäºŒç»´ç ?çš„ImageView
     * @param centerPhoto äºŒç»´ç ?ä¸­é—´çš„å›¾ç‰‡
     */
    public static void showThreadImage(final Activity mContext, final String text, final ImageView imageView, final int centerPhoto) {
        String preContent = SPUtils.getString("share_code_content","");
        if (text.equals(preContent)) {
            String preFilePath = SPUtils.getString("share_code_filePath","");
            imageView.setImageBitmap(BitmapFactory.decodeFile(preFilePath));

        } else {
            SPUtils.putString("share_code_content",text);
            final String filePath = getFileRoot(mContext) + File.separator + "qr_" + System.currentTimeMillis() + ".jpg";
            SPUtils.putString("share_code_filePath",filePath);

            //äºŒç»´ç ?å›¾ç‰‡è¾ƒå¤§æ—¶ï¼Œç”Ÿæˆ?å›¾ç‰‡ã€?ä¿?å­˜æ–‡ä»¶çš„æ—¶é—´å?¯èƒ½è¾ƒé•¿ï¼Œå› æ­¤æ”¾åœ¨æ–°çº¿ç¨‹ä¸­
            new Thread(new Runnable() {
                @Override
                public void run() {
                    boolean success = QRCodeUtil.createQRImage(text, 800, 800, BitmapFactory.decodeResource(mContext.getResources(), centerPhoto),
                            filePath);

                    if (success) {
                        mContext.runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                imageView.setImageBitmap(BitmapFactory.decodeFile(filePath));
                            }
                        });
                    }
                }
            }).start();
        }

    }
}
