package com.xiaolyuh.lock;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.DataAccessException;
import org.springframework.data.redis.connection.RedisConnection;
import org.springframework.data.redis.core.RedisCallback;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.util.Assert;
import org.springframework.util.StringUtils;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisCluster;
import redis.clients.jedis.JedisCommands;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.UUID;

/**
 * Redisåˆ†å¸ƒå¼?é”?
 * ä½¿ç”¨ SET resource-name anystring NX EX max-lock-time å®žçŽ°
 * <p>
 * è¯¥æ–¹æ¡ˆåœ¨ Redis å®˜æ–¹ SET å‘½ä»¤é¡µæœ‰è¯¦ç»†ä»‹ç»?ã€‚
 * http://doc.redisfans.com/string/set.html
 * <p>
 * åœ¨ä»‹ç»?è¯¥åˆ†å¸ƒå¼?é”?è®¾è®¡ä¹‹å‰?ï¼Œæˆ‘ä»¬å…ˆæ?¥çœ‹ä¸€ä¸‹åœ¨ä»Ž Redis 2.6.12 å¼€å§‹ SET æ??ä¾›çš„æ–°ç‰¹æ€§ï¼Œ
 * å‘½ä»¤ SET key value [EX seconds] [PX milliseconds] [NX|XX]ï¼Œå…¶ä¸­ï¼š
 * <p>
 * EX seconds â€” ä»¥ç§’ä¸ºå?•ä½?è®¾ç½® key çš„è¿‡æœŸæ—¶é—´ï¼›
 * PX milliseconds â€” ä»¥æ¯«ç§’ä¸ºå?•ä½?è®¾ç½® key çš„è¿‡æœŸæ—¶é—´ï¼›
 * NX â€” å°†key çš„å€¼è®¾ä¸ºvalue ï¼Œå½“ä¸”ä»…å½“key ä¸?å­˜åœ¨ï¼Œç­‰æ•ˆäºŽ SETNXã€‚
 * XX â€” å°†key çš„å€¼è®¾ä¸ºvalue ï¼Œå½“ä¸”ä»…å½“key å­˜åœ¨ï¼Œç­‰æ•ˆäºŽ SETEXã€‚
 * <p>
 * å‘½ä»¤ SET resource-name anystring NX EX max-lock-time æ˜¯ä¸€ç§?åœ¨ Redis ä¸­å®žçŽ°é”?çš„ç®€å?•æ–¹æ³•ã€‚
 * <p>
 * å®¢æˆ·ç«¯æ‰§è¡Œä»¥ä¸Šçš„å‘½ä»¤ï¼š
 * <p>
 * å¦‚æžœæœ?åŠ¡å™¨è¿”å›ž OK ï¼Œé‚£ä¹ˆè¿™ä¸ªå®¢æˆ·ç«¯èŽ·å¾—é”?ã€‚
 * å¦‚æžœæœ?åŠ¡å™¨è¿”å›ž NIL ï¼Œé‚£ä¹ˆå®¢æˆ·ç«¯èŽ·å?–é”?å¤±è´¥ï¼Œå?¯ä»¥åœ¨ç¨?å?Žå†?é‡?è¯•ã€‚
 *
 * @author yuhao.wangwang
 * @version 1.0
 * @date 2017å¹´11æœˆ3æ—¥ ä¸Šå?ˆ10:21:27
 */
public class RedisLock {

    private static Logger logger = LoggerFactory.getLogger(RedisLock.class);

    private RedisTemplate<String, Object> redisTemplate;

    /**
     * å°†key çš„å€¼è®¾ä¸ºvalue ï¼Œå½“ä¸”ä»…å½“key ä¸?å­˜åœ¨ï¼Œç­‰æ•ˆäºŽ SETNXã€‚
     */
    public static final String NX = "NX";

    /**
     * seconds â€” ä»¥ç§’ä¸ºå?•ä½?è®¾ç½® key çš„è¿‡æœŸæ—¶é—´ï¼Œç­‰æ•ˆäºŽEXPIRE key seconds
     */
    public static final String EX = "EX";

    /**
     * è°ƒç”¨setå?Žçš„è¿”å›žå€¼
     */
    public static final String OK = "OK";

    /**
     * é»˜è®¤è¯·æ±‚é”?çš„è¶…æ—¶æ—¶é—´(ms æ¯«ç§’)
     */
    private static final long TIME_OUT = 100;

    /**
     * é»˜è®¤é”?çš„æœ‰æ•ˆæ—¶é—´(s)
     */
    public static final int EXPIRE = 60;

    /**
     * è§£é”?çš„luaè„šæœ¬
     */
    public static final String UNLOCK_LUA;

    static {
        StringBuilder sb = new StringBuilder();
        sb.append("if redis.call(\"get\",KEYS[1]) == ARGV[1] ");
        sb.append("then ");
        sb.append("    return redis.call(\"del\",KEYS[1]) ");
        sb.append("else ");
        sb.append("    return 0 ");
        sb.append("end ");
        UNLOCK_LUA = sb.toString();
    }

    /**
     * é”?æ ‡å¿—å¯¹åº”çš„key
     */
    private String lockKey;

    /**
     * è®°å½•åˆ°æ—¥å¿—çš„é”?æ ‡å¿—å¯¹åº”çš„key
     */
    private String lockKeyLog = "";

    /**
     * é”?å¯¹åº”çš„å€¼
     */
    private String lockValue;

    /**
     * é”?çš„æœ‰æ•ˆæ—¶é—´(s)
     */
    private int expireTime = EXPIRE;

    /**
     * è¯·æ±‚é”?çš„è¶…æ—¶æ—¶é—´(ms)
     */
    private long timeOut = TIME_OUT;

    /**
     * é”?æ ‡è®°
     */
    private volatile boolean locked = false;

    final Random random = new Random();

    /**
     * ä½¿ç”¨é»˜è®¤çš„é”?è¿‡æœŸæ—¶é—´å’Œè¯·æ±‚é”?çš„è¶…æ—¶æ—¶é—´
     *
     * @param redisTemplate
     * @param lockKey       é”?çš„keyï¼ˆRedisçš„Keyï¼‰
     */
    public RedisLock(RedisTemplate<String, Object> redisTemplate, String lockKey) {
        this.redisTemplate = redisTemplate;
        this.lockKey = lockKey + "_lock";
    }

    /**
     * ä½¿ç”¨é»˜è®¤çš„è¯·æ±‚é”?çš„è¶…æ—¶æ—¶é—´ï¼ŒæŒ‡å®šé”?çš„è¿‡æœŸæ—¶é—´
     *
     * @param redisTemplate
     * @param lockKey       é”?çš„keyï¼ˆRedisçš„Keyï¼‰
     * @param expireTime    é”?çš„è¿‡æœŸæ—¶é—´(å?•ä½?ï¼šç§’)
     */
    public RedisLock(RedisTemplate<String, Object> redisTemplate, String lockKey, int expireTime) {
        this(redisTemplate, lockKey);
        this.expireTime = expireTime;
    }

    /**
     * ä½¿ç”¨é»˜è®¤çš„é”?çš„è¿‡æœŸæ—¶é—´ï¼ŒæŒ‡å®šè¯·æ±‚é”?çš„è¶…æ—¶æ—¶é—´
     *
     * @param redisTemplate
     * @param lockKey       é”?çš„keyï¼ˆRedisçš„Keyï¼‰
     * @param timeOut       è¯·æ±‚é”?çš„è¶…æ—¶æ—¶é—´(å?•ä½?ï¼šæ¯«ç§’)
     */
    public RedisLock(RedisTemplate<String, Object> redisTemplate, String lockKey, long timeOut) {
        this(redisTemplate, lockKey);
        this.timeOut = timeOut;
    }

    /**
     * é”?çš„è¿‡æœŸæ—¶é—´å’Œè¯·æ±‚é”?çš„è¶…æ—¶æ—¶é—´éƒ½æ˜¯ç”¨æŒ‡å®šçš„å€¼
     *
     * @param redisTemplate
     * @param lockKey       é”?çš„keyï¼ˆRedisçš„Keyï¼‰
     * @param expireTime    é”?çš„è¿‡æœŸæ—¶é—´(å?•ä½?ï¼šç§’)
     * @param timeOut       è¯·æ±‚é”?çš„è¶…æ—¶æ—¶é—´(å?•ä½?ï¼šæ¯«ç§’)
     */
    public RedisLock(RedisTemplate<String, Object> redisTemplate, String lockKey, int expireTime, long timeOut) {
        this(redisTemplate, lockKey, expireTime);
        this.timeOut = timeOut;
    }

    /**
     * å°?è¯•èŽ·å?–é”? è¶…æ—¶è¿”å›ž
     *
     * @return
     */
    public boolean tryLock() {
        // ç”Ÿæˆ?éš?æœºkey
        lockValue = UUID.randomUUID().toString();
        // è¯·æ±‚é”?è¶…æ—¶æ—¶é—´ï¼Œçº³ç§’
        long timeout = timeOut * 1000000;
        // ç³»ç»Ÿå½“å‰?æ—¶é—´ï¼Œçº³ç§’
        long nowTime = System.nanoTime();
        while ((System.nanoTime() - nowTime) < timeout) {
            if (OK.equalsIgnoreCase(this.set(lockKey, lockValue, expireTime))) {
                locked = true;
                // ä¸Šé”?æˆ?åŠŸç»“æ?Ÿè¯·æ±‚
                return locked;
            }

            // æ¯?æ¬¡è¯·æ±‚ç­‰å¾…ä¸€æ®µæ—¶é—´
            seleep(10, 50000);
        }
        return locked;
    }

    /**
     * å°?è¯•èŽ·å?–é”? ç«‹å?³è¿”å›ž
     *
     * @return æ˜¯å?¦æˆ?åŠŸèŽ·å¾—é”?
     */
    public boolean lock() {
        lockValue = UUID.randomUUID().toString();
        //ä¸?å­˜åœ¨åˆ™æ·»åŠ  ä¸”è®¾ç½®è¿‡æœŸæ—¶é—´ï¼ˆå?•ä½?msï¼‰
        String result = set(lockKey, lockValue, expireTime);
        locked = OK.equalsIgnoreCase(result);
        return locked;
    }

    /**
     * ä»¥é˜»å¡žæ–¹å¼?çš„èŽ·å?–é”?
     *
     * @return æ˜¯å?¦æˆ?åŠŸèŽ·å¾—é”?
     */
    public boolean lockBlock() {
        lockValue = UUID.randomUUID().toString();
        while (true) {
            //ä¸?å­˜åœ¨åˆ™æ·»åŠ  ä¸”è®¾ç½®è¿‡æœŸæ—¶é—´ï¼ˆå?•ä½?msï¼‰
            String result = set(lockKey, lockValue, expireTime);
            if (OK.equalsIgnoreCase(result)) {
                locked = true;
                return locked;
            }

            // æ¯?æ¬¡è¯·æ±‚ç­‰å¾…ä¸€æ®µæ—¶é—´
            seleep(10, 50000);
        }
    }

    /**
     * è§£é”?
     * <p>
     * å?¯ä»¥é€šè¿‡ä»¥ä¸‹ä¿®æ”¹ï¼Œè®©è¿™ä¸ªé”?å®žçŽ°æ›´å?¥å£®ï¼š
     * <p>
     * ä¸?ä½¿ç”¨å›ºå®šçš„å­—ç¬¦ä¸²ä½œä¸ºé”®çš„å€¼ï¼Œè€Œæ˜¯è®¾ç½®ä¸€ä¸ªä¸?å?¯çŒœæµ‹ï¼ˆnon-guessableï¼‰çš„é•¿éš?æœºå­—ç¬¦ä¸²ï¼Œä½œä¸ºå?£ä»¤ä¸²ï¼ˆtokenï¼‰ã€‚
     * ä¸?ä½¿ç”¨ DEL å‘½ä»¤æ?¥é‡Šæ”¾é”?ï¼Œè€Œæ˜¯å?‘é€?ä¸€ä¸ª Lua è„šæœ¬ï¼Œè¿™ä¸ªè„šæœ¬å?ªåœ¨å®¢æˆ·ç«¯ä¼ å…¥çš„å€¼å’Œé”®çš„å?£ä»¤ä¸²ç›¸åŒ¹é…?æ—¶ï¼Œæ‰?å¯¹é”®è¿›è¡Œåˆ é™¤ã€‚
     * è¿™ä¸¤ä¸ªæ”¹åŠ¨å?¯ä»¥é˜²æ­¢æŒ?æœ‰è¿‡æœŸé”?çš„å®¢æˆ·ç«¯è¯¯åˆ çŽ°æœ‰é”?çš„æƒ…å†µå‡ºçŽ°ã€‚
     */
    public Boolean unlock() {
        // å?ªæœ‰åŠ é”?æˆ?åŠŸå¹¶ä¸”é”?è¿˜æœ‰æ•ˆæ‰?åŽ»é‡Šæ”¾é”?
        // å?ªæœ‰åŠ é”?æˆ?åŠŸå¹¶ä¸”é”?è¿˜æœ‰æ•ˆæ‰?åŽ»é‡Šæ”¾é”?
        if (locked) {
            return (Boolean) redisTemplate.execute(new RedisCallback<Boolean>() {
                @Override
                public Boolean doInRedis(RedisConnection connection) throws DataAccessException {
                    Object nativeConnection = connection.getNativeConnection();
                    Long result = 0L;

                    List<String> keys = new ArrayList<>();
                    keys.add(lockKey);
                    List<String> values = new ArrayList<>();
                    values.add(lockValue);

                    // é›†ç¾¤æ¨¡å¼?
                    if (nativeConnection instanceof JedisCluster) {
                        result = (Long) ((JedisCluster) nativeConnection).eval(UNLOCK_LUA, keys, values);
                    }

                    // å?•æœºæ¨¡å¼?
                    if (nativeConnection instanceof Jedis) {
                        result = (Long) ((Jedis) nativeConnection).eval(UNLOCK_LUA, keys, values);
                    }

                    if (result == 0 && !StringUtils.isEmpty(lockKeyLog)) {
                        logger.info("Redisåˆ†å¸ƒå¼?é”?ï¼Œè§£é”?{}å¤±è´¥ï¼?è§£é”?æ—¶é—´ï¼š{}", lockKeyLog, System.currentTimeMillis());
                    }

                    locked = result == 0;
                    return result == 1;
                }
            });
        }

        return true;
    }

    /**
     * èŽ·å?–é”?çŠ¶æ€?
     * @Title: isLock
     * @Description: TODO
     * @return  
     * @author yuhao.wang
     */
    public boolean isLock() {
		
		return locked;
	}
    
    /**
     * é‡?å†™redisTemplateçš„setæ–¹æ³•
     * <p>
     * å‘½ä»¤ SET resource-name anystring NX EX max-lock-time æ˜¯ä¸€ç§?åœ¨ Redis ä¸­å®žçŽ°é”?çš„ç®€å?•æ–¹æ³•ã€‚
     * <p>
     * å®¢æˆ·ç«¯æ‰§è¡Œä»¥ä¸Šçš„å‘½ä»¤ï¼š
     * <p>
     * å¦‚æžœæœ?åŠ¡å™¨è¿”å›ž OK ï¼Œé‚£ä¹ˆè¿™ä¸ªå®¢æˆ·ç«¯èŽ·å¾—é”?ã€‚
     * å¦‚æžœæœ?åŠ¡å™¨è¿”å›ž NIL ï¼Œé‚£ä¹ˆå®¢æˆ·ç«¯èŽ·å?–é”?å¤±è´¥ï¼Œå?¯ä»¥åœ¨ç¨?å?Žå†?é‡?è¯•ã€‚
     *
     * @param key     é”?çš„Key
     * @param value   é”?é‡Œé?¢çš„å€¼
     * @param seconds è¿‡åŽ»æ—¶é—´ï¼ˆç§’ï¼‰
     * @return
     */
    private String set(final String key, final String value, final long seconds) {
        Assert.isTrue(!StringUtils.isEmpty(key), "keyä¸?èƒ½ä¸ºç©º");
        return (String) redisTemplate.execute(new RedisCallback<String>() {
            @Override
            public String doInRedis(RedisConnection connection) throws DataAccessException {
                Object nativeConnection = connection.getNativeConnection();
                String result = null;
                if (nativeConnection instanceof JedisCommands) {
                    result = ((JedisCommands) nativeConnection).set(key, value, NX, EX, seconds);
                }

                if (!StringUtils.isEmpty(lockKeyLog) && !StringUtils.isEmpty(result)) {
                    logger.info("èŽ·å?–é”?{}çš„æ—¶é—´ï¼š{}", lockKeyLog, System.currentTimeMillis());
                }

                return result;
            }
        });
    }

    /**
     * @param millis æ¯«ç§’
     * @param nanos  çº³ç§’
     * @Title: seleep
     * @Description: çº¿ç¨‹ç­‰å¾…æ—¶é—´
     * @author yuhao.wang
     */
    private void seleep(long millis, int nanos) {
        try {
            Thread.sleep(millis, random.nextInt(nanos));
        } catch (InterruptedException e) {
            logger.info("èŽ·å?–åˆ†å¸ƒå¼?é”?ä¼‘çœ è¢«ä¸­æ–­ï¼š", e);
        }
    }

    public String getLockKeyLog() {
        return lockKeyLog;
    }

    public void setLockKeyLog(String lockKeyLog) {
        this.lockKeyLog = lockKeyLog;
    }

    public int getExpireTime() {
        return expireTime;
    }

    public void setExpireTime(int expireTime) {
        this.expireTime = expireTime;
    }

    public long getTimeOut() {
        return timeOut;
    }

    public void setTimeOut(long timeOut) {
        this.timeOut = timeOut;
    }

}
