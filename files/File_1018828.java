/*
 *
 * Copyright 2018 iQIYI.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.qiyi.pluginlibrary.utils;

import android.text.TextUtils;

import org.qiyi.pluginlibrary.exception.ReflectException;

import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.Proxy;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Vector;

public class ReflectionUtils {
    /* è¢«åŒ…è£…çš„å¯¹è±¡ï¼Œè®¿é—®ä¸€ä¸ªå®žä¾‹çš„æ–¹æ³•å’Œå­—æ®µ */
    private final Object object;
    /* è¢«è®¿é—®çš„å®žä¾‹çš„æ–¹æ³•æˆ–è€…å­—æ®µæ‰€åœ¨çš„ç±» */
    private final Class<?> clazz;
    /* å??å°„çš„æ˜¯ä¸€ä¸ªClassè¿˜æ˜¯ä¸€ä¸ªObjectå®žä¾‹? */
    private final boolean isClass;

    private ReflectionUtils(Class<?> type) {
        this.object = type;
        this.clazz = type;
        this.isClass = true;
    }

    private ReflectionUtils(Object object) {
        this.object = object;
        this.clazz = object != null ? object.getClass() : null;
        this.isClass = false;
    }

    private ReflectionUtils(Object object, Class<?> type) {
        this.object = object;
        this.clazz = type;
        this.isClass = false;
    }

    public static <T> T getFieldValue(Object obj, String fieldName)
            throws IllegalAccessException, IllegalArgumentException, NoSuchFieldException {
        return getFieldValue(obj, fieldName, true);
    }

    @SuppressWarnings("unchecked")
    public static <T> T getFieldValue(Object obj, String fieldName, boolean resolveParent)
            throws IllegalAccessException, IllegalArgumentException, NoSuchFieldException {
        Object[] rs = getField(obj, fieldName, resolveParent);
        if (rs == null) {
            throw new NoSuchFieldException("field:" + fieldName);
        }
        Field field = (Field) rs[0];
        Object targetObj = rs[1];
        return (T) field.get(targetObj);
    }

    public static void setFieldValue(Object obj, String fieldName, Object val)
            throws IllegalAccessException, IllegalArgumentException, NoSuchFieldException {
        setFieldValue(obj, fieldName, val, true);
    }

    public static void setFieldValue(Object obj, String fieldName, Object val, boolean resolveParent)
            throws IllegalAccessException, IllegalArgumentException, NoSuchFieldException {
        Object[] rs = getField(obj, fieldName, resolveParent);
        if (rs == null) {
            throw new NoSuchFieldException("field:" + fieldName);
        }
        Field field = (Field) rs[0];
        Object targetObj = rs[1];
        field.set(targetObj, val);
    }

    private static Object[] getField(Object obj, String elFieldName, boolean resolveParent)
            throws IllegalAccessException, IllegalArgumentException, NoSuchFieldException {
        if (obj == null) {
            return null;
        }
        String[] fieldNames = elFieldName.split("[.]");
        Object targetObj = obj;
        Class<?> targetClass = targetObj.getClass();
        Object val = null;
        int i = 0;
        Field field = null;
        Object[] rs = new Object[2];
        for (String fName : fieldNames) {
            i++;
            field = getField_(targetClass, fName, resolveParent);
            if (null != field) {
                field.setAccessible(true);
                rs[0] = field;
                rs[1] = targetObj;
                val = field.get(targetObj);
                if (val == null) {
                    if (i < fieldNames.length) {
                        throw new IllegalAccessException(
                                "can not getFieldValue as field '" + fName + "' value is null in '" + targetClass.getName() + "'");
                    }
                    break;
                }
                targetObj = val;
                targetClass = targetObj.getClass();
            }
        }
        return rs;
    }

    // ---------------------------------------------------------------------
    // æˆ?å‘˜
    // ---------------------------------------------------------------------

    public static Field getField_(Class<?> targetClass, String fieldName, boolean resolveParent)
            throws IllegalAccessException, IllegalArgumentException, NoSuchFieldException {
        NoSuchFieldException noSuchFieldExceptionOccor = null;
        Field rsField = null;
        try {
            Field field = targetClass.getDeclaredField(fieldName);
            rsField = field;
            if (!resolveParent) {
                field.setAccessible(true);
                return field;
            }
        } catch (NoSuchFieldException e) {
            noSuchFieldExceptionOccor = e;
        }
        if (noSuchFieldExceptionOccor != null) {
            if (resolveParent) {
                while (true) {
                    targetClass = targetClass.getSuperclass();
                    if (targetClass == null) {
                        break;
                    }
                    try {
                        Field field = targetClass.getDeclaredField(fieldName);
                        field.setAccessible(true);
                        return rsField = field;
                    } catch (NoSuchFieldException e) {
                        if (targetClass.getSuperclass() == null) {
                            throw e;
                        }
                    }
                }
            } else {
                throw noSuchFieldExceptionOccor;
            }
        }
        return rsField;
    }

    /**
     * å°?è£…Class.forName(name) <p/> å?¯ä»¥è¿™æ ·è°ƒç”¨: <code>on(Class.forName(name))</code>
     *
     * @param name å®Œæ•´ç±»å??
     * @return å·¥å…·ç±»è‡ªèº«
     * @throws ReflectException å??å°„æ—¶å?‘ç”Ÿçš„å¼‚å¸¸
     * @see #on(Class)
     */
    public static ReflectionUtils on(String name) throws ReflectException {
        return on(forName(name));
    }

    /**
     * å°?è£…Class.forName(name) <p/> å?¯ä»¥è¿™æ ·è°ƒç”¨: <code>on(Xxx.class)</code>
     *
     * @param clazz ç±»
     * @return å·¥å…·ç±»è‡ªèº«
     * @throws ReflectException å??å°„æ—¶å?‘ç”Ÿçš„å¼‚å¸¸
     * @see #on(Class)
     */
    public static ReflectionUtils on(Class<?> clazz) {
        return new ReflectionUtils(clazz);
    }

    // ---------------------------------------------------------------------
    // æž„é€ å™¨
    // ---------------------------------------------------------------------

    /**
     * åŒ…è£…èµ·ä¸€ä¸ªå¯¹è±¡ <p/> å½“ä½ éœ€è¦?è®¿é—®å®žä¾‹çš„å­—æ®µå’Œæ–¹æ³•æ—¶å?¯ä»¥ä½¿ç”¨æ­¤æ–¹æ³• {@link Object}
     *
     * @param object éœ€è¦?è¢«åŒ…è£…çš„å¯¹è±¡
     * @return å·¥å…·ç±»è‡ªèº«
     */
    public static ReflectionUtils on(Object object) {
        return new ReflectionUtils(object);
    }

    /**
     * åŒ…è£…èµ·ä¸€ä¸ªå¯¹è±¡ <p/> å½“ä½ éœ€è¦?è®¿é—®å®žä¾‹æˆ–å…¶çˆ¶ç±»çš„å­—æ®µå’Œæ–¹æ³•æ—¶å?¯ä»¥ä½¿ç”¨æ­¤æ–¹æ³• {@link Object}
     *
     * @param object éœ€è¦?è¢«åŒ…è£…çš„å¯¹è±¡
     * @param clazz  è¢«åŒ…è£…ç±»è‡ªèº«æˆ–å…¶çˆ¶ç±»
     */
    public static ReflectionUtils on(Object object, Class<?> clazz) {
        return new ReflectionUtils(object, clazz);
    }

    /**
     * ä½¿å?—è®¿é—®æ?ƒé™?é™?åˆ¶çš„å¯¹è±¡è½¬ä¸ºä¸?å?—é™?åˆ¶ã€‚ ä¸€èˆ¬æƒ…å†µä¸‹ï¼Œ ä¸€ä¸ªç±»çš„ç§?æœ‰å­—æ®µå’Œæ–¹æ³•æ˜¯æ— æ³•èŽ·å?–å’Œè°ƒç”¨çš„ï¼Œ åŽŸå› åœ¨äºŽè°ƒç”¨å‰?Javaä¼šæ£€æŸ¥æ˜¯å?¦å…·æœ‰å?¯è®¿é—®æ?ƒé™?ï¼Œ
     * å½“è°ƒç”¨æ­¤æ–¹æ³•å?Žï¼Œ è®¿é—®æ?ƒé™?æ£€æŸ¥æœºåˆ¶å°†è¢«å…³é—­ã€‚
     *
     * @param accessible å?—è®¿é—®é™?åˆ¶çš„å¯¹è±¡
     * @return ä¸?å?—è®¿é—®é™?åˆ¶çš„å¯¹è±¡
     */
    private static <T extends AccessibleObject> T accessible(T accessible) {

        // é»˜è®¤ä¸ºfalse,å?³å??å°„æ—¶æ£€æŸ¥è®¿é—®æ?ƒé™?ï¼Œ
        // è®¾ä¸ºtrueæ—¶ä¸?æ£€æŸ¥è®¿é—®æ?ƒé™?,å?¯ä»¥è®¿é—®privateå­—æ®µå’Œæ–¹æ³•
        if (!accessible.isAccessible()) {
            accessible.setAccessible(true);
        }

        if (accessible instanceof Member) {
            Member member = (Member) accessible;

            if (Modifier.isPublic(member.getModifiers())
                    && Modifier.isPublic(member.getDeclaringClass().getModifiers())) {
                return accessible;
            }
        }

        return accessible;
    }

    private static String property(String string) {
        int length = string.length();

        if (length == 0) {
            return "";
        } else if (length == 1) {
            return string.toLowerCase();
        } else {
            return string.substring(0, 1).toLowerCase() + string.substring(1);
        }
    }

    private static ReflectionUtils on(Constructor<?> constructor, Object... args) throws ReflectException {
        try {
            return on(accessible(constructor).newInstance(args));
        } catch (Exception e) {
            throw new ReflectException(e);
        }
    }

    private static ReflectionUtils on(Method method, Object object, Object... args) throws ReflectException {
        try {
            accessible(method);

            if (method.getReturnType() == void.class) {
                method.invoke(object, args);
                return on(object);
            } else {
                return on(method.invoke(object, args));
            }
        } catch (Exception e) {
            throw new ReflectException(e);
        }
    }

    /**
     * å†…éƒ¨ç±»ï¼Œä½¿ä¸€ä¸ªå¯¹è±¡è„±ç¦»åŒ…è£…
     */
    private static Object unwrap(Object object) {
        if (object instanceof ReflectionUtils) {
            return ((ReflectionUtils) object).get();
        }

        return object;
    }

    /**
     * å†…éƒ¨ç±»ï¼Œ ç»™å®šä¸€ç³»åˆ—å?‚æ•°ï¼Œè¿”å›žå®ƒä»¬çš„ç±»åž‹
     *
     * @see Object#getClass()
     */
    private static Class<?>[] types(Object... values) {
        if (values == null) {
            // ç©º
            return new Class[0];
        }

        Class<?>[] result = new Class[values.length];

        for (int i = 0; i < values.length; i++) {
            Object value = values[i];
            result[i] = value == null ? NULL.class : value.getClass();
        }

        return result;
    }

    /**
     * åŠ è½½ä¸€ä¸ªç±»
     *
     * @see Class#forName(String)
     */
    private static Class<?> forName(String name) throws ReflectException {
        try {
            return Class.forName(name);
        } catch (Exception e) {
            throw new ReflectException(e);
        }
    }

    /**
     * å¾—åˆ°åŒ…è£…çš„å¯¹è±¡çš„ç±»åž‹ï¼Œ å¦‚æžœæ˜¯åŸºæœ¬ç±»åž‹,åƒ?int,float,booleanè¿™ç§?, é‚£ä¹ˆå°†è¢«è½¬æ?¢æˆ?ç›¸åº”çš„å¯¹è±¡ç±»åž‹ã€‚
     */
    private static Class<?> wrapper(Class<?> type) {
        if (type.isPrimitive()) {
            if (boolean.class == type) {
                return Boolean.class;
            } else if (int.class == type) {
                return Integer.class;
            } else if (long.class == type) {
                return Long.class;
            } else if (short.class == type) {
                return Short.class;
            } else if (byte.class == type) {
                return Byte.class;
            } else if (double.class == type) {
                return Double.class;
            } else if (float.class == type) {
                return Float.class;
            } else if (char.class == type) {
                return Character.class;
            } else if (void.class == type) {
                return Void.class;
            }
        }

        return type;
    }

    /**
     * å¾—åˆ°å½“å‰?åŒ…è£…çš„å¯¹è±¡
     */
    public <T> T get() {
        return (T) object;
    }

    /**
     * ä¿®æ”¹ä¸€ä¸ªå­—æ®µçš„å€¼ <p/> ç­‰ä»·äºŽ
     * å¦‚æžœåŒ…è£…çš„å¯¹è±¡æ˜¯ä¸€ä¸ª{@link Class}, é‚£ä¹ˆä¿®æ”¹çš„å°†æ˜¯ä¸€ä¸ªé?™æ€?å­—æ®µï¼Œ å¦‚æžœåŒ…è£…çš„å¯¹è±¡æ˜¯ä¸€ä¸ª{@link Object}, é‚£ä¹ˆä¿®æ”¹çš„å°±æ˜¯ä¸€ä¸ªå®žä¾‹å­—æ®µã€‚
     *
     * @param name  å­—æ®µå??
     * @param value å­—æ®µçš„å€¼
     * @return å®Œäº‹å?Žçš„å·¥å…·ç±»
     * @throws ReflectException
     */
    public ReflectionUtils set(String name, Object value) throws ReflectException {
        try {
            Field field = field0(name);
            if (null != field) {
                field.set(object, unwrap(value));
            }
            return this;
        } catch (Exception e) {
            throw new ReflectException(e);
        }
    }

    /**
     * ä¿®æ”¹ä¸€ä¸ªå­—æ®µçš„å€¼ï¼Œä¸?æŠ›å‡ºå¼‚å¸¸
     *
     * @param name
     * @param value
     * @return
     */
    public ReflectionUtils setNoException(String name, Object value) {
        try {
            set(name, value);
        } catch (ReflectException re) {
            re.printStackTrace();
        }
        return this;
    }

    /**
     * å??å°„èŽ·å?–å­—æ®µçš„å€¼
     *
     * @param name å­—æ®µå??
     * @return The field value
     * @throws ReflectException
     * @see #field(String)
     */
    public <T> T get(String name) throws ReflectException {
        return field(name).<T>get();
    }

    /**
     * å??å°„èŽ·å?–å­—æ®µçš„å€¼ï¼Œä¸?æŠ›å‡ºå¼‚å¸¸
     *
     * @param name
     * @param <T>
     * @return
     */
    public <T> T getNoException(String name) {
        try {
            return get(name);
        } catch (ReflectException re) {
            re.printStackTrace();
        }
        return (T) null;
    }

    /**
     * å?–å¾—å­—æ®µ
     *
     * @param name å­—æ®µå??
     * @return å­—æ®µ
     * @throws ReflectException
     */
    private ReflectionUtils field(String name) throws ReflectException {
        try {
            Field field = field0(name);
            return on(field.get(object));
        } catch (Exception e) {
            throw new ReflectException(e);
        }
    }

    /**
     * å??å°„å¾—åˆ°Field
     *
     * @param name å­—æ®µå??
     * @return
     * @throws ReflectException
     */
    private Field field0(String name) throws ReflectException {
        Class<?> type = type();

        // å°?è¯•ä½œä¸ºå…¬æœ‰å­—æ®µå¤„ç?†
        try {
            return accessible(type.getField(name));
        }
        // å°?è¯•ä»¥ç§?æœ‰æ–¹å¼?å¤„ç?†
        catch (NoSuchFieldException e) {
            do {
                try {
                    return accessible(type.getDeclaredField(name));
                } catch (NoSuchFieldException ignore) {
                    /* ignore */
                }
                type = type.getSuperclass();
            } while (type != null);

            throw new ReflectException(e);
        }
    }

    /**
     * å°†ä¸€ä¸ªå¯¹è±¡çš„æ‰€æœ‰å¯¹è±¡æ˜ å°„åˆ°ä¸€ä¸ªMapä¸­,keyä¸ºå­—æ®µå??ã€‚
     *
     * @return åŒ…å?«æ‰€æœ‰å­—æ®µçš„map
     */
    public Map<String, ReflectionUtils> fields() {
        Map<String, ReflectionUtils> result = new LinkedHashMap<String, ReflectionUtils>();
        Class<?> type = type();

        do {
            for (Field field : type.getDeclaredFields()) {
                if (!isClass ^ Modifier.isStatic(field.getModifiers())) {
                    String name = field.getName();

                    if (!result.containsKey(name))
                        result.put(name, field(name));
                }
            }

            type = type.getSuperclass();
        } while (type != null);

        return result;
    }

    /**
     * ç»™å®šæ–¹æ³•å??ç§°ï¼Œè°ƒç”¨æ— å?‚æ–¹æ³• <p/> ç­‰ä»·äºŽ <code>call(name, new Object[0])</code>
     *
     * @param name æ–¹æ³•å??
     * @return å·¥å…·ç±»è‡ªèº«
     * @throws ReflectException
     * @see #call(String, Object...)
     */
    public ReflectionUtils call(String name) throws ReflectException {
        return call(name, new Object[0]);
    }

    /**
     * ç»™å®šæ–¹æ³•å??å’Œå?‚æ•°ï¼Œè°ƒç”¨ä¸€ä¸ªæ–¹æ³•ã€‚
     *
     * @param name æ–¹æ³•å??
     * @param args æ–¹æ³•å?‚æ•°
     * @return å·¥å…·ç±»è‡ªèº«
     * @throws ReflectException
     */
    public ReflectionUtils call(String name, Object... args) throws ReflectException {
        return call(name, null, null, args);
    }

    /**
     * ç»™å®šæ–¹æ³•å??å?‚æ•°ï¼ŒMethodCacheå?Šå?¯é€‰çš„å?‚æ•°ç±»åž‹åˆ—è¡¨ï¼Œè°ƒç”¨ä¸€ä¸ªæ–¹æ³•
     *
     * @param name
     * @param methodCache
     * @param paramTypes
     * @param args
     * @return
     * @throws ReflectException
     */
    public ReflectionUtils call(String name, Map<String, Vector<Method>> methodCache, Class<?>[] paramTypes, Object... args) throws ReflectException {
        Class<?>[] types = types(args);

        // å°?è¯•è°ƒç”¨æ–¹æ³•
        try {
            if (null != methodCache) {
                ReflectionUtils res = callInner(name, methodCache, types, args);
                if (null != res) {
                    return res;
                }
            }
            Method method;
            if (paramTypes != null) {
                try {
                    // å…ˆå°?è¯•ä½¿ç”¨å¤–éƒ¨ç›´æŽ¥ä¼ å…¥çš„ç±»åž‹å?‚æ•°èŽ·å?–Methodï¼Œç„¶å?Žå†?ä½¿ç”¨æŽ¨å¯¼çš„ç±»åž‹
                    method = exactMethod(name, paramTypes);
                } catch (NoSuchMethodException e) {
                    method = exactMethod(name, types);
                }
            } else {
                method = exactMethod(name, types);
            }

            if (null != methodCache && null != method) {
                Vector<Method> methods = methodCache.get(name);
                if (methods == null) {
                    methods = new Vector<Method>(4);
                    methodCache.put(name, methods);
                }
                methods.add(method);
            }
            return on(method, object, args);
        }
        // å¦‚æžœæ²¡æœ‰ç¬¦å?ˆå?‚æ•°çš„æ–¹æ³•ï¼Œ
        // åˆ™åŒ¹é…?ä¸€ä¸ªä¸Žæ–¹æ³•å??æœ€æŽ¥è¿‘çš„æ–¹æ³•ã€‚
        catch (NoSuchMethodException e) {
            try {
                Method method = similarMethod(name, types);
                if (null != methodCache && null != method) {
                    Vector<Method> methods = methodCache.get(name);
                    if (methods == null) {
                        methods = new Vector<Method>(4);
                        methodCache.put(name, methods);
                    }
                    methods.add(method);
                }
                return on(method, object, args);
            } catch (NoSuchMethodException e1) {
                throw new ReflectException(e1);
            }
        }
    }

    // æ??é«˜å??å°„å¤?ç”¨çŽ‡
    private ReflectionUtils callInner(String name, Map<String, Vector<Method>> methodCache, Class<?>[] types,
                                      Object... args) throws ReflectException {
        Vector<Method> temp = methodCache.get(name);
        if (null != temp) {
            for (Method method : temp) {
                if (null != method && method.getDeclaringClass().isAssignableFrom(type())
                        && isSimilarSignature(method, name, types)) {
                    return on(method, object, args);
                }
            }
        }

        return null;
    }

    // ---------------------------------------------------------------------
    // å¯¹è±¡API
    // ---------------------------------------------------------------------

    /**
     * æ ¹æ?®æ–¹æ³•å??å’Œæ–¹æ³•å?‚æ•°å¾—åˆ°è¯¥æ–¹æ³•ã€‚
     */
    private Method exactMethod(String name, Class<?>[] types) throws NoSuchMethodException {
        Class<?> type = type();

        // å…ˆå°?è¯•ç›´æŽ¥è°ƒç”¨
        try {
            return accessible(type.getMethod(name, types));
        }
        // ä¹Ÿè®¸è¿™æ˜¯ä¸€ä¸ªç§?æœ‰æ–¹æ³•
        catch (NoSuchMethodException e) {
            do {
                try {
                    return accessible(type.getDeclaredMethod(name, types));
                } catch (NoSuchMethodException ignore) {
                    /* ignore */
                }

                type = type.getSuperclass();
            } while (type != null);

            throw new NoSuchMethodException(e.getMessage());
        }
    }

    /**
     * ç»™å®šæ–¹æ³•å??å’Œå?‚æ•°ï¼ŒåŒ¹é…?ä¸€ä¸ªæœ€æŽ¥è¿‘çš„æ–¹æ³•
     */
    private Method similarMethod(String name, Class<?>[] types) throws NoSuchMethodException {
        Class<?> type = type();

        // å¯¹äºŽå…¬æœ‰æ–¹æ³•:
        try {
            for (Method method : type.getMethods()) {
                if (isSimilarSignature(method, name, types)) {
                    return accessible(method);
                }
            }
        } catch (NoClassDefFoundError e) {
            // å?¯èƒ½å› ä¸ºå¹³å?°å·®å¼‚ getMethods æ—¶å?‘ç”Ÿ NoClassDefFoundErrorï¼Œ
            // æ¯”å¦‚ 360 ä¿®æ”¹äº† Instrumentation å¹¶ä¸”æ–¹æ³•ç­¾å??å¼•ç”¨äº† 4.x è®¾å¤‡æ²¡æœ‰çš„ç±»
            // ç”±äºŽå?Žç»­ getDeclaredMethods ä¼šç»§ç»­åŽ»çˆ¶ç±»æŸ¥è¯¢ï¼Œè¿™é‡Œå?ªæ˜¯ç®€å?•çš„ try catch
            ErrorUtil.throwErrorIfNeed(e);
        }

        // å¯¹äºŽç§?æœ‰æ–¹æ³•ï¼š
        do {
            try {
                for (Method method : type.getDeclaredMethods()) {
                    if (isSimilarSignature(method, name, types)) {
                        return accessible(method);
                    }
                }
            } catch (NoClassDefFoundError e) {
                // å?¯èƒ½å› ä¸ºå¹³å?°å·®å¼‚ getDeclaredMethods æ—¶å?‘ç”Ÿ NoClassDefFoundErrorï¼Œ
                // æ¯”å¦‚ 360 ä¿®æ”¹äº† Instrumentation å¹¶ä¸”æ–¹æ³•ç­¾å??å¼•ç”¨äº† 4.x è®¾å¤‡æ²¡æœ‰çš„ç±»
                ErrorUtil.throwErrorIfNeed(e);
            }

            type = type.getSuperclass();
        } while (type != null);

        throw new NoSuchMethodException(
                "No similar method " + name + " with params " + Arrays.toString(types) + " could be found on type " + type() + ".");
    }

    /**
     * å†?æ¬¡ç¡®è®¤æ–¹æ³•ç­¾å??ä¸Žå®žé™…æ˜¯å?¦åŒ¹é…?ï¼Œ å°†åŸºæœ¬ç±»åž‹è½¬æ?¢æˆ?å¯¹åº”çš„å¯¹è±¡ç±»åž‹ï¼Œ å¦‚intè½¬æ?¢æˆ?Int
     */
    private boolean isSimilarSignature(Method possiblyMatchingMethod, String desiredMethodName, Class<?>[] desiredParamTypes) {
        return possiblyMatchingMethod.getName().equals(desiredMethodName)
                && match(possiblyMatchingMethod.getParameterTypes(), desiredParamTypes);
    }

    /**
     * è°ƒç”¨ä¸€ä¸ªæ— å?‚æž„é€ å™¨ <p/> ç­‰ä»·äºŽ <code>create(new Object[0])</code>
     *
     * @return å·¥å…·ç±»è‡ªèº«
     * @throws ReflectException
     * @see #create(Object...)
     */
    public ReflectionUtils create() throws ReflectException {
        return create(new Object[0]);
    }

    /**
     * è°ƒç”¨ä¸€ä¸ªæœ‰å?‚æž„é€ å™¨
     *
     * @param args æž„é€ å™¨å?‚æ•°
     * @return å·¥å…·ç±»è‡ªèº«
     * @throws ReflectException
     */
    public ReflectionUtils create(Object... args) throws ReflectException {
        Class<?>[] types = types(args);

        try {
            Constructor<?> constructor = type().getDeclaredConstructor(types);
            return on(constructor, args);
        }

        // è¿™ç§?æƒ…å†µä¸‹ï¼Œæž„é€ å™¨å¾€å¾€æ˜¯ç§?æœ‰çš„ï¼Œå¤šç”¨äºŽå·¥åŽ‚æ–¹æ³•ï¼Œåˆ»æ„?çš„éš?è—?äº†æž„é€ å™¨ã€‚
        catch (NoSuchMethodException e) {
            // privateé˜»æ­¢ä¸?äº†å??å°„çš„è„šæ­¥:)
            for (Constructor<?> constructor : type().getDeclaredConstructors()) {
                if (match(constructor.getParameterTypes(), types)) {
                    return on(constructor, args);
                }
            }

            throw new ReflectException(e);
        }
    }

    // ---------------------------------------------------------------------
    // å†…éƒ¨å·¥å…·æ–¹æ³•
    // ---------------------------------------------------------------------

    /**
     * ä¸ºåŒ…è£…çš„å¯¹è±¡åˆ›å»ºä¸€ä¸ªä»£ç?†ã€‚
     *
     * @param proxyType ä»£ç?†ç±»åž‹
     * @return åŒ…è£…å¯¹è±¡çš„ä»£ç?†è€…ã€‚
     */
    @SuppressWarnings("unchecked")
    public <P> P as(Class<P> proxyType) {
        final boolean isMap = (object instanceof Map);
        final InvocationHandler handler = new InvocationHandler() {
            @SuppressWarnings("null")
            @Override
            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                String name = method.getName();

                try {
                    return on(object).call(name, args).get();
                } catch (ReflectException e) {
                    if (isMap) {
                        Map<String, Object> map = (Map<String, Object>) object;
                        int length = (args == null ? 0 : args.length);

                        if (length == 0 && name.startsWith("get")) {
                            return map.get(property(name.substring(3)));
                        } else if (length == 0 && name.startsWith("is")) {
                            return map.get(property(name.substring(2)));
                        } else if (length == 1 && name.startsWith("set")) {
                            map.put(property(name.substring(3)), args[0]);
                            return null;
                        }
                    }

                    throw e;
                }
            }
        };

        return (P) Proxy.newProxyInstance(proxyType.getClassLoader(), new Class[]{proxyType}, handler);
    }

    private boolean match(Class<?>[] declaredTypes, Class<?>[] actualTypes) {
        if (declaredTypes.length == actualTypes.length) {
            for (int i = 0; i < actualTypes.length; i++) {
                if (actualTypes[i] == NULL.class)
                    continue;

                if (wrapper(declaredTypes[i]).isAssignableFrom(wrapper(actualTypes[i])))
                    continue;

                return false;
            }

            return true;
        } else {
            return false;
        }
    }

    private boolean same(Class<?>[] declaredTypes, Class<?>[] actualTypes) {
        if (declaredTypes.length == actualTypes.length) {
            for (int i = 0; i < actualTypes.length; i++) {
                if (actualTypes[i] == NULL.class) {
                    continue;
                }

                if (TextUtils.equals(wrapper(declaredTypes[i]).getName(), wrapper(actualTypes[i]).getName())) {
                    continue;
                }

                return false;
            }

            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return object.hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (obj instanceof ReflectionUtils) {
            return object.equals(((ReflectionUtils) obj).get());
        }

        return false;
    }

    @Override
    public String toString() {
        return object.toString();
    }

    /**
     * èŽ·å?–åŒ…è£…çš„å¯¹è±¡çš„ç±»åž‹
     *
     * @see Object#getClass()
     */
    private Class<?> type() {
        if (clazz != null) {
            return clazz;
        }

        if (isClass) {
            return (Class<?>) object;
        } else {
            return object.getClass();
        }
    }

    /**
     * å®šä¹‰äº†ä¸€ä¸ªNULLç±»åž‹
     */
    private static class NULL {
    }
}
