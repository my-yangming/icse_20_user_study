/**
 * IK ä¸­æ–‡åˆ†è¯?  ç‰ˆæœ¬ 5.0
 * IK Analyzer release 5.0
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * æº?ä»£ç ?ç”±æž—è‰¯ç›Š(linliangyi2005@gmail.com)æ??ä¾›
 * ç‰ˆæ?ƒå£°æ˜Ž 2012ï¼Œä¹Œé¾™èŒ¶å·¥ä½œå®¤
 * provided by Linliangyi and copyright 2012 by Oolong studio
 * 
 */
package org.wltea.analyzer.core;

import java.util.Stack;
import java.util.TreeSet;

/**
 * IKåˆ†è¯?æ­§ä¹‰è£?å†³å™¨
 */
class IKArbitrator {

	IKArbitrator(){
		
	}
	
	/**
	 * åˆ†è¯?æ­§ä¹‰å¤„ç?†
//	 * @param orgLexemes
	 * @param useSmart
	 */
	void process(AnalyzeContext context , boolean useSmart){
		QuickSortSet orgLexemes = context.getOrgLexemes();
		Lexeme orgLexeme = orgLexemes.pollFirst();
		
		LexemePath crossPath = new LexemePath();
		while(orgLexeme != null){
			if(!crossPath.addCrossLexeme(orgLexeme)){
				//æ‰¾åˆ°ä¸ŽcrossPathä¸?ç›¸äº¤çš„ä¸‹ä¸€ä¸ªcrossPath	
				if(crossPath.size() == 1 || !useSmart){
					//crossPathæ²¡æœ‰æ­§ä¹‰ æˆ–è€… ä¸?å?šæ­§ä¹‰å¤„ç?†
					//ç›´æŽ¥è¾“å‡ºå½“å‰?crossPath
					context.addLexemePath(crossPath);
				}else{
					//å¯¹å½“å‰?çš„crossPathè¿›è¡Œæ­§ä¹‰å¤„ç?†
					QuickSortSet.Cell headCell = crossPath.getHead();
					LexemePath judgeResult = this.judge(headCell, crossPath.getPathLength());
					//è¾“å‡ºæ­§ä¹‰å¤„ç?†ç»“æžœjudgeResult
					context.addLexemePath(judgeResult);
				}
				
				//æŠŠorgLexemeåŠ å…¥æ–°çš„crossPathä¸­
				crossPath = new LexemePath();
				crossPath.addCrossLexeme(orgLexeme);
			}
			orgLexeme = orgLexemes.pollFirst();
		}
		
		
		//å¤„ç?†æœ€å?Žçš„path
		if(crossPath.size() == 1 || !useSmart){
			//crossPathæ²¡æœ‰æ­§ä¹‰ æˆ–è€… ä¸?å?šæ­§ä¹‰å¤„ç?†
			//ç›´æŽ¥è¾“å‡ºå½“å‰?crossPath
			context.addLexemePath(crossPath);
		}else{
			//å¯¹å½“å‰?çš„crossPathè¿›è¡Œæ­§ä¹‰å¤„ç?†
			QuickSortSet.Cell headCell = crossPath.getHead();
			LexemePath judgeResult = this.judge(headCell, crossPath.getPathLength());
			//è¾“å‡ºæ­§ä¹‰å¤„ç?†ç»“æžœjudgeResult
			context.addLexemePath(judgeResult);
		}
	}
	
	/**
	 * æ­§ä¹‰è¯†åˆ«
	 * @param lexemeCell æ­§ä¹‰è·¯å¾„é“¾è¡¨å¤´
	 * @param fullTextLength æ­§ä¹‰è·¯å¾„æ–‡æœ¬é•¿åº¦
	 * @return
	 */
	private LexemePath judge(QuickSortSet.Cell lexemeCell , int fullTextLength){
		//å€™é€‰è·¯å¾„é›†å?ˆ
		TreeSet<LexemePath> pathOptions = new TreeSet<LexemePath>();
		//å€™é€‰ç»“æžœè·¯å¾„
		LexemePath option = new LexemePath();
		
		//å¯¹crossPathè¿›è¡Œä¸€æ¬¡é??åŽ†,å?Œæ—¶è¿”å›žæœ¬æ¬¡é??åŽ†ä¸­æœ‰å†²çª?çš„Lexemeæ ˆ
		Stack<QuickSortSet.Cell> lexemeStack = this.forwardPath(lexemeCell , option);
		
		//å½“å‰?è¯?å…ƒé“¾å¹¶é?žæœ€ç?†æƒ³çš„ï¼ŒåŠ å…¥å€™é€‰è·¯å¾„é›†å?ˆ
		pathOptions.add(option.copy());
		
		//å­˜åœ¨æ­§ä¹‰è¯?ï¼Œå¤„ç?†
		QuickSortSet.Cell c = null;
		while(!lexemeStack.isEmpty()){
			c = lexemeStack.pop();
			//å›žæ»šè¯?å…ƒé“¾
			this.backPath(c.getLexeme() , option);
			//ä»Žæ­§ä¹‰è¯?ä½?ç½®å¼€å§‹ï¼Œé€’å½’ï¼Œç”Ÿæˆ?å?¯é€‰æ–¹æ¡ˆ
			this.forwardPath(c , option);
			pathOptions.add(option.copy());
		}
		
		//è¿”å›žé›†å?ˆä¸­çš„æœ€ä¼˜æ–¹æ¡ˆ
		return pathOptions.first();

	}
	
	/**
	 * å?‘å‰?é??åŽ†ï¼Œæ·»åŠ è¯?å…ƒï¼Œæž„é€ ä¸€ä¸ªæ— æ­§ä¹‰è¯?å…ƒç»„å?ˆ
//	 * @param LexemePath path
	 * @return
	 */
	private Stack<QuickSortSet.Cell> forwardPath(QuickSortSet.Cell lexemeCell , LexemePath option){
		//å?‘ç”Ÿå†²çª?çš„Lexemeæ ˆ
		Stack<QuickSortSet.Cell> conflictStack = new Stack<QuickSortSet.Cell>();
		QuickSortSet.Cell c = lexemeCell;
		//è¿­ä»£é??åŽ†Lexemeé“¾è¡¨
		while(c != null && c.getLexeme() != null){
			if(!option.addNotCrossLexeme(c.getLexeme())){
				//è¯?å…ƒäº¤å?‰ï¼Œæ·»åŠ å¤±è´¥åˆ™åŠ å…¥lexemeStackæ ˆ
				conflictStack.push(c);
			}
			c = c.getNext();
		}
		return conflictStack;
	}
	
	/**
	 * å›žæ»šè¯?å…ƒé“¾ï¼Œç›´åˆ°å®ƒèƒ½å¤ŸæŽ¥å?—æŒ‡å®šçš„è¯?å…ƒ
//	 * @param lexeme
	 * @param l
	 */
	private void backPath(Lexeme l  , LexemePath option){
		while(option.checkCross(l)){
			option.removeTail();
		}
		
	}
	
}
