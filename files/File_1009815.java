package com.starrtc.demo.utils;

/**
 * Created by zhangjt on 2018/3/16.
 */

import android.app.Activity;
import android.content.ContentResolver;
import android.content.pm.ActivityInfo;
import android.provider.Settings;
import android.provider.Settings.SettingNotFoundException;
import android.view.OrientationEventListener;

/**
 * è¯¥ç±»å?¯ä»¥å¯¹Activityæ—‹è½¬å’Œæ–¹å?‘è¿›è¡Œæ›´åŠ ç?µæ´»çš„æŽ§åˆ¶ã€‚
 * æ³¨æ„?ï¼Œä½¿ç”¨è¯¥ç±»è¿›è¡Œæ–¹å?‘æŽ§åˆ¶çš„Activityä¸?è¦?åœ¨æ¸…å?•æ–‡ä»¶ä¸­æ·»åŠ ï¼š
 * android:configChanges="orientation"
 *
 * å…¸åž‹çš„åº”ç”¨åœºæ™¯ï¼š
 * è§†é¢‘æ’­æ”¾å™¨çš„å±?å¹•æ–¹å?‘é”?åŠŸèƒ½ã€‚
 * å½“é”?ä½?å±?å¹•æ–¹å?‘å?Žï¼ŒActivityå°±ä¸?ä¼šéš?ç?€æ‰‹æœºæ–¹å?‘çš„æ—‹è½¬è€Œæ”¹å?˜æ–¹å?‘ã€‚ä¸€æ—¦æ‰“å¼€é”?ï¼ŒActivityå°†ä¼šç«‹å?³éš?ç?€å±?å¹•çš„æ–¹å?‘è€Œæ”¹å?˜ã€‚
 *
 * ä¸€èˆ¬è°ƒç”¨ä»£ç ?ï¼š
 *
 * é»˜è®¤æ‰“å¼€é”?
 * ActivityRotationController controller=new ActivityRotationController(this);
 *
 * æ‰“å¼€é”?
 * controller.openActivityRotation();
 *
 * å…³é—­é”?
 * controller.closeActivityRotation();
 *
 * å…³é—­ç›‘å?¬ï¼Œæ?¢å¤?åˆ°ç³»ç»Ÿä¹‹å‰?æ—‹è½¬è®¾å®š
 * controller.disable()
 *
 * è¦?æ±‚çš„æ?ƒé™?
 * @permission android.permission.WRITE_SETTINGS
 */

public class ActivityRotationController extends OrientationEventListener {
    private int systemRotation;
    private boolean activityRotation;
    private int activityOrientation;
    private Activity activity;

    public ActivityRotationController(Activity activity) {
        super(activity);
        this.activity = activity;
        activityOrientation = activity.getResources().getConfiguration().orientation;
        try {
            systemRotation = getScreenRotation(activity.getContentResolver());
        } catch (SettingNotFoundException e) {
            e.printStackTrace();
            systemRotation = -1;
        }

        openActivityRotation();
        enable();
    }

    /**
     * æ‰“å¼€Activityæ—‹è½¬ã€‚
     * å¦‚æžœæ‰“å¼€äº†å±?å¹•æ—‹è½¬ï¼ŒActivityå°†æŽ¥æ”¶å±?å¹•æ—‹è½¬äº‹ä»¶å¹¶æ‰§è¡ŒonConfigurationChangedæ–¹æ³•ã€‚
     */
    public void openActivityRotation() {
        activityRotation = true;
    }

    /**
     * å…³é—­Activityæ—‹è½¬ã€‚
     * æ— è®ºæ˜¯å?¦æ‰“å¼€å±?å¹•æ—‹è½¬ï¼ŒActivityéƒ½ä¸?èƒ½æŽ¥æ”¶åˆ°å±?å¹•æ—‹è½¬äº‹ä»¶ã€‚
     */
    public void closeActivityRotation() {
        activityRotation = false;
    }

    /**
     * æ£€æŸ¥Activityèƒ½å?¦æ—‹è½¬
     */
    public boolean isActivityRotationEnabled() {
        return activityRotation;
    }

    /**
     * èŽ·å?–Activityå½“å‰?æ–¹å?‘ã€‚
     * æ³¨æ„?ï¼ŒActivityæ–¹å?‘ä¸?æ˜¯å±?å¹•æ–¹å?‘ã€‚å?ªæœ‰æ‰“å¼€Activityæ—‹è½¬ï¼ŒActivityæ–¹å?‘æ‰?å’Œå±?å¹•æ–¹å?‘ä¿?æŒ?ä¸€è‡´ã€‚
     */
    public int getActivityOrientation() {
        return activityOrientation;
    }

    /**
     * æ‰“å¼€å¯¹å±?å¹•æ—‹è½¬çš„ç›‘å?¬ï¼Œå¹¶è®¾ç½®å±?å¹•ä¸ºå?¯æ—‹è½¬ã€‚
     */
    @Override
    public void enable() {
        super.enable();
        setScreenRotation(activity.getContentResolver(), 0);
    }

    /**
     * å…³é—­å¯¹å±?å¹•æ—‹è½¬çš„ç›‘å?¬ï¼Œå¹¶æ?¢å¤?åˆ°ç³»ç»Ÿä¹‹å‰?æ—‹è½¬è®¾å®šã€‚
     */
    @Override
    public void disable() {
        super.disable();
        if (systemRotation == -1) {
            return;
        }
        setScreenRotation(activity.getContentResolver(), systemRotation);
    }

    @Override
    public void onOrientationChanged(int orientation) {
        if (orientation < 0) {
            return;
        }

        int newOrientation= ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED;
        if (orientation >= 0 && orientation <= 60) {
            newOrientation = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
        }else if (orientation >60 && orientation <120) {
            newOrientation = ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE;
        }else if (orientation >=120 && orientation <=240) {
            newOrientation = ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;
        }else if (orientation >240 && orientation <300) {
            newOrientation = ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
        }else if (orientation >=300 && orientation <=360) {
            newOrientation = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
        }else{
            return;
        }

        if ((newOrientation != orientation) && activityRotation) {
            activity.setRequestedOrientation(newOrientation);
            activityOrientation = newOrientation;
        }
    }

    private void setScreenRotation(ContentResolver cr, int rotation) {
        Settings.System.putInt(cr, Settings.System.ACCELEROMETER_ROTATION,
                rotation);
    }

    private int getScreenRotation(ContentResolver cr)
            throws SettingNotFoundException {
        return Settings.System.getInt(cr,
                Settings.System.ACCELEROMETER_ROTATION);
    }

}
