package org.nutz.ioc.impl;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

import org.nutz.ioc.IocEventTrigger;
import org.nutz.ioc.IocException;
import org.nutz.ioc.IocMaking;
import org.nutz.ioc.ObjectMaker;
import org.nutz.ioc.ObjectProxy;
import org.nutz.ioc.ValueProxy;
import org.nutz.ioc.meta.IocEventSet;
import org.nutz.ioc.meta.IocField;
import org.nutz.ioc.meta.IocObject;
import org.nutz.ioc.weaver.DefaultWeaver;
import org.nutz.ioc.weaver.FieldInjector;
import org.nutz.lang.Lang;
import org.nutz.lang.Mirror;
import org.nutz.lang.Strings;
import org.nutz.lang.born.Borning;
import org.nutz.lang.born.MethodBorning;
import org.nutz.lang.born.MethodCastingBorning;
import org.nutz.lang.reflect.FastClassFactory;
import org.nutz.lang.reflect.FastMethod;

/**
 * åœ¨è¿™é‡Œï¼Œéœ€è¦?è€ƒè™‘ AOP
 * 
 * @author zozoh(zozohtnt@gmail.com)
 * @author wendal(wendal1985@gmail.com)
 */
public class ObjectMakerImpl implements ObjectMaker {

    public ObjectProxy make(final IocMaking ing, IocObject iobj) {

        // èŽ·å?–é…?ç½®çš„å¯¹è±¡äº‹ä»¶é›†å?ˆ
        IocEventSet iocEventSet = iobj.getEvents();

        // å»ºç«‹å¯¹è±¡ä»£ç?†ï¼Œå¹¶ä¿?å­˜åœ¨ä¸Šä¸‹æ–‡çŽ¯å¢ƒä¸­ å?ªæœ‰å¯¹è±¡ä¸º singleton
        // å¹¶ä¸”æœ‰ä¸€ä¸ªé?ž null çš„å??ç§°çš„æ—¶å€™æ‰?ä¼šä¿?å­˜
        // å°±æ˜¯è¯´ï¼Œæ‰€æœ‰å†…éƒ¨å¯¹è±¡ï¼Œå°†ä¼šéš?è¿™å…¶æ‰€é™„å±žçš„å¯¹è±¡æ?¥ä¿?å­˜ï¼Œè€Œè‡ªå·±ä¸?ä¼šå?•ç‹¬ä¿?å­˜
        ObjectProxy op = new ObjectProxy();
        if (iobj.isSingleton() && null != ing.getObjectName())
            ing.getContext().save(iobj.getScope(), ing.getObjectName(), op);


        try {
            // å‡†å¤‡å¯¹è±¡çš„ç¼–ç»‡æ–¹å¼?
            DefaultWeaver dw = new DefaultWeaver();
            dw.setListeners(ing.getListeners());
            op.setWeaver(dw);

            // æž„é€ å‡½æ•°å?‚æ•°
            ValueProxy[] vps = new ValueProxy[Lang.eleSize(iobj.getArgs())];
            for (int i = 0; i < vps.length; i++)
                vps[i] = ing.makeValue(iobj.getArgs()[i]);
            dw.setArgs(vps);

            // å…ˆèŽ·å?–ä¸€é??ï¼Œæ ¹æ?®è¿™ä¸ªæ•°ç»„æ?¥èŽ·å¾—æž„é€ å‡½æ•°
            Object[] args = new Object[vps.length];
            boolean hasNullArg = false;
            for (int i = 0; i < args.length; i++) {
                args[i] = vps[i].get(ing);
                if (args[i] == null) {
                    hasNullArg = true;
                }
            }
            // èŽ·å?– Mirrorï¼Œ AOP å°†åœ¨è¿™ä¸ªæ–¹æ³•ä¸­è¿›è¡Œ
            Mirror<?> mirror = null;

            // ç¼“å­˜æž„é€ å‡½æ•°
            if (iobj.getFactory() != null) {
                // factoryè¿™å±žæ€§, æ ¼å¼?åº”è¯¥æ˜¯ ç±»å??#æ–¹æ³•å?? æˆ–è€… $iocbean#æ–¹æ³•å??
                final String[] ss = iobj.getFactory().split("#", 2);
                if (ss[0].startsWith("$")) {
                    dw.setBorning(new Borning<Object>() {
                        public Object born(Object... args) {
                            Object factoryBean = ing.getIoc().get(null, ss[0].substring(1));
                            return Mirror.me(factoryBean).invoke(factoryBean, ss[1], args);
                        }
                    });
                } else {
                    Mirror<?> mi = Mirror.me(Lang.loadClass(ss[0]));
                    Method m;
                    if (hasNullArg) {
                        m = (Method) Lang.first(mi.findMethods(ss[1],args.length));
                        if (m == null)
                            throw new IocException(ing.getObjectName(), "Factory method not found --> ", iobj.getFactory());
                        dw.setBorning(new MethodCastingBorning<Object>(m));
                    } else {
                        m = mi.findMethod(ss[1], args);
                        dw.setBorning(new MethodBorning<Object>(m));
                    }
                    if (iobj.getType() == null)
                        iobj.setType(m.getReturnType());
                }
                if (iobj.getType() != null)
                    mirror = ing.getMirrors().getMirror(iobj.getType(), ing.getObjectName());
            } else {
                mirror = ing.getMirrors().getMirror(iobj.getType(), ing.getObjectName());
                dw.setBorning((Borning<?>) mirror.getBorning(args));
            }
            

            // ä¸ºå¯¹è±¡ä»£ç?†è®¾ç½®è§¦å?‘äº‹ä»¶
            if (null != iobj.getEvents()) {
                op.setFetch(createTrigger(mirror, iocEventSet.getFetch()));
                op.setDepose(createTrigger(mirror, iocEventSet.getDepose()));
                dw.setCreate(createTrigger(mirror, iocEventSet.getCreate()));
            }

            // å¦‚æžœè¿™ä¸ªå¯¹è±¡æ˜¯å®¹å™¨ä¸­çš„å?•ä¾‹ï¼Œé‚£ä¹ˆå°±å?¯ä»¥ç”Ÿæˆ?å®žä¾‹äº†
            // è¿™ä¸€æ­¥é?žå¸¸é‡?è¦?ï¼Œå®ƒè§£é™¤äº†å­—æ®µäº’ç›¸å¼•ç”¨çš„é—®é¢˜
            Object obj = null;
            if (iobj.isSingleton()) {
                obj = dw.born(ing);
                op.setObj(obj);
            }

            // èŽ·å¾—æ¯?ä¸ªå­—æ®µçš„æ³¨å…¥æ–¹å¼?
            List<IocField> _fields = new ArrayList<IocField>(iobj.getFields().values());
            FieldInjector[] fields = new FieldInjector[_fields.size()];
            for (int i = 0; i < fields.length; i++) {
                IocField ifld = _fields.get(i);
                try {
                    ValueProxy vp = ing.makeValue(ifld.getValue());
                    fields[i] = FieldInjector.create(mirror, ifld.getName(), vp, ifld.isOptional());
                }
                catch (Exception e) {
                	throw Lang.wrapThrow(e, "Fail to eval Injector for field: '%s'", ifld.getName());
                }
            }
            dw.setFields(fields);

            // å¦‚æžœæ˜¯å?•ä¾‹å¯¹è±¡ï¼Œå‰?é?¢å·²ç»?ç”Ÿæˆ?å®žä¾‹äº†ï¼Œåœ¨è¿™é‡Œéœ€è¦?å¡«å……ä¸€ä¸‹å®ƒçš„å­—æ®µ
            if (null != obj)
                dw.fill(ing, obj);

            // å¯¹è±¡åˆ›å»ºå®Œæ¯•ï¼Œå¦‚æžœæœ‰ create äº‹ä»¶ï¼Œè°ƒç”¨å®ƒ
            Object tmp = dw.onCreate(obj);
            if (tmp != null)
                op.setObj(tmp);
        }
        catch (IocException e) {
            ing.getContext().remove(iobj.getScope(), ing.getObjectName());
            ((IocException)e).addBeanNames(ing.getObjectName());
            throw e;
        }
        // å½“å¼‚å¸¸å?‘ç”Ÿï¼Œä»Ž context é‡Œç§»é™¤ ObjectProxy
        catch (Throwable e) {
            ing.getContext().remove(iobj.getScope(), ing.getObjectName());
            throw new IocException(ing.getObjectName(), e, "throw Exception when creating");
        }

        // è¿”å›ž
        return op;
    }

    @SuppressWarnings({"unchecked"})
    private static IocEventTrigger<Object> createTrigger(Mirror<?> mirror, final String str) {
        if (Strings.isBlank(str))
            return null;
        if (str.contains(".")) {
            try {
                return (IocEventTrigger<Object>) Mirror.me(Lang.loadClass(str))
                                                       .born();
            }
            catch (Exception e) {
                throw Lang.wrapThrow(e);
            }
        }
        return new IocEventTrigger<Object>() {
        	protected FastMethod fm;
			public void trigger(Object obj) {
				try {
					if (fm == null) {
						Method method = Mirror.me(obj).findMethod(str);
						fm = FastClassFactory.get(method);
					}
					fm.invoke(obj);
				} catch (Exception e) {
					throw Lang.wrapThrow(e);
				}
			}
        };
    }

}
