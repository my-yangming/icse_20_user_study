/*
 * Copyright 1999-2015 dangdang.com.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * </p>
 */

package io.elasticjob.lite.internal.guarantee;

import io.elasticjob.lite.internal.config.ConfigurationService;
import io.elasticjob.lite.internal.storage.JobNodeStorage;
import io.elasticjob.lite.reg.base.CoordinatorRegistryCenter;

import java.util.Collection;

/**
 * ä¿?è¯?åˆ†å¸ƒå¼?ä»»åŠ¡å…¨éƒ¨å¼€å§‹å’Œç»“æ?ŸçŠ¶æ€?çš„æœ?åŠ¡.
 * 
 * @author zhangliang
 */
public final class GuaranteeService {
    
    private final JobNodeStorage jobNodeStorage;
    
    private final ConfigurationService configService;
    
    public GuaranteeService(final CoordinatorRegistryCenter regCenter, final String jobName) {
        jobNodeStorage = new JobNodeStorage(regCenter, jobName);
        configService = new ConfigurationService(regCenter, jobName);
    }
    
    /**
     * æ ¹æ?®åˆ†ç‰‡é¡¹æ³¨å†Œä»»åŠ¡å¼€å§‹è¿?è¡Œ.
     * 
     * @param shardingItems å¾…æ³¨å†Œçš„åˆ†ç‰‡é¡¹
     */
    public void registerStart(final Collection<Integer> shardingItems) {
        for (int each : shardingItems) {
            jobNodeStorage.createJobNodeIfNeeded(GuaranteeNode.getStartedNode(each));
        }
    }
    
    /**
     * åˆ¤æ–­æ˜¯å?¦æ‰€æœ‰çš„ä»»åŠ¡å?‡å?¯åŠ¨å®Œæ¯•.
     *
     * @return æ˜¯å?¦æ‰€æœ‰çš„ä»»åŠ¡å?‡å?¯åŠ¨å®Œæ¯•
     */
    public boolean isAllStarted() {
        return jobNodeStorage.isJobNodeExisted(GuaranteeNode.STARTED_ROOT)
                && configService.load(false).getTypeConfig().getCoreConfig().getShardingTotalCount() == jobNodeStorage.getJobNodeChildrenKeys(GuaranteeNode.STARTED_ROOT).size();
    }
    
    /**
     * æ¸…ç?†æ‰€æœ‰ä»»åŠ¡å?¯åŠ¨ä¿¡æ?¯.
     */
    public void clearAllStartedInfo() {
        jobNodeStorage.removeJobNodeIfExisted(GuaranteeNode.STARTED_ROOT);
    }
    
    /**
     * æ ¹æ?®åˆ†ç‰‡é¡¹æ³¨å†Œä»»åŠ¡å®Œæˆ?è¿?è¡Œ.
     *
     * @param shardingItems å¾…æ³¨å†Œçš„åˆ†ç‰‡é¡¹
     */
    public void registerComplete(final Collection<Integer> shardingItems) {
        for (int each : shardingItems) {
            jobNodeStorage.createJobNodeIfNeeded(GuaranteeNode.getCompletedNode(each));
        }
    }
    
    /**
     * åˆ¤æ–­æ˜¯å?¦æ‰€æœ‰çš„ä»»åŠ¡å?‡æ‰§è¡Œå®Œæ¯•.
     *
     * @return æ˜¯å?¦æ‰€æœ‰çš„ä»»åŠ¡å?‡æ‰§è¡Œå®Œæ¯•
     */
    public boolean isAllCompleted() {
        return jobNodeStorage.isJobNodeExisted(GuaranteeNode.COMPLETED_ROOT)
                && configService.load(false).getTypeConfig().getCoreConfig().getShardingTotalCount() <= jobNodeStorage.getJobNodeChildrenKeys(GuaranteeNode.COMPLETED_ROOT).size();
    }
    
    /**
     * æ¸…ç?†æ‰€æœ‰ä»»åŠ¡å?¯åŠ¨ä¿¡æ?¯.
     */
    public void clearAllCompletedInfo() {
        jobNodeStorage.removeJobNodeIfExisted(GuaranteeNode.COMPLETED_ROOT);
    }
}
