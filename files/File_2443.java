package com.hankcs.hanlp.algorithm.ahocorasick.trie;

import java.util.*;

/**
 * <p>
 * ä¸€ä¸ªçŠ¶æ€?æœ‰å¦‚ä¸‹å‡ ä¸ªåŠŸèƒ½
 * </p>
 * <p/>
 * <ul>
 * <li>success; æˆ?åŠŸè½¬ç§»åˆ°å?¦ä¸€ä¸ªçŠ¶æ€?</li>
 * <li>failure; ä¸?å?¯é¡ºç?€å­—ç¬¦ä¸²è·³è½¬çš„è¯?ï¼Œåˆ™è·³è½¬åˆ°ä¸€ä¸ªæµ…ä¸€ç‚¹çš„èŠ‚ç‚¹</li>
 * <li>emits; å‘½ä¸­ä¸€ä¸ªæ¨¡å¼?ä¸²</li>
 * </ul>
 * <p/>
 * <p>
 * æ ¹èŠ‚ç‚¹ç¨?æœ‰ä¸?å?Œï¼Œæ ¹èŠ‚ç‚¹æ²¡æœ‰ failure åŠŸèƒ½ï¼Œå®ƒçš„â€œfailureâ€?æŒ‡çš„æ˜¯æŒ‰ç…§å­—ç¬¦ä¸²è·¯å¾„è½¬ç§»åˆ°ä¸‹ä¸€ä¸ªçŠ¶æ€?ã€‚å…¶ä»–èŠ‚ç‚¹åˆ™éƒ½æœ‰failureçŠ¶æ€?ã€‚
 * </p>
 *
 * @author Robert Bor
 */
public class State
{

    /**
     * æ¨¡å¼?ä¸²çš„é•¿åº¦ï¼Œä¹Ÿæ˜¯è¿™ä¸ªçŠ¶æ€?çš„æ·±åº¦
     */
    protected final int depth;

    /**
     * fail å‡½æ•°ï¼Œå¦‚æžœæ²¡æœ‰åŒ¹é…?åˆ°ï¼Œåˆ™è·³è½¬åˆ°æ­¤çŠ¶æ€?ã€‚
     */
    private State failure = null;

    /**
     * å?ªè¦?è¿™ä¸ªçŠ¶æ€?å?¯è¾¾ï¼Œåˆ™è®°å½•æ¨¡å¼?ä¸²
     */
    private Set<String> emits = null;
    /**
     * goto è¡¨ï¼Œä¹Ÿç§°è½¬ç§»å‡½æ•°ã€‚æ ¹æ?®å­—ç¬¦ä¸²çš„ä¸‹ä¸€ä¸ªå­—ç¬¦è½¬ç§»åˆ°ä¸‹ä¸€ä¸ªçŠ¶æ€?
     */
    private Map<Character, State> success = new TreeMap<Character, State>();

    /**
     * æž„é€ æ·±åº¦ä¸º0çš„èŠ‚ç‚¹
     */
    public State()
    {
        this(0);
    }

    /**
     * æž„é€ æ·±åº¦ä¸ºdepthçš„èŠ‚ç‚¹
     * @param depth
     */
    public State(int depth)
    {
        this.depth = depth;
    }

    /**
     * èŽ·å?–èŠ‚ç‚¹æ·±åº¦
     * @return
     */
    public int getDepth()
    {
        return this.depth;
    }

    /**
     * æ·»åŠ ä¸€ä¸ªåŒ¹é…?åˆ°çš„æ¨¡å¼?ä¸²ï¼ˆè¿™ä¸ªçŠ¶æ€?å¯¹åº”ç?€è¿™ä¸ªæ¨¡å¼?ä¸²)
     * @param keyword
     */
    public void addEmit(String keyword)
    {
        if (this.emits == null)
        {
            this.emits = new TreeSet<String>();
        }
        this.emits.add(keyword);
    }

    /**
     * æ·»åŠ ä¸€äº›åŒ¹é…?åˆ°çš„æ¨¡å¼?ä¸²
     * @param emits
     */
    public void addEmit(Collection<String> emits)
    {
        for (String emit : emits)
        {
            addEmit(emit);
        }
    }

    /**
     * èŽ·å?–è¿™ä¸ªèŠ‚ç‚¹ä»£è¡¨çš„æ¨¡å¼?ä¸²ï¼ˆä»¬ï¼‰
     * @return
     */
    public Collection<String> emit()
    {
        return this.emits == null ? Collections.<String>emptyList() : this.emits;
    }

    /**
     * èŽ·å?–failureçŠ¶æ€?
     * @return
     */
    public State failure()
    {
        return this.failure;
    }

    /**
     * è®¾ç½®failureçŠ¶æ€?
     * @param failState
     */
    public void setFailure(State failState)
    {
        this.failure = failState;
    }

    /**
     * è½¬ç§»åˆ°ä¸‹ä¸€ä¸ªçŠ¶æ€?
     * @param character å¸Œæœ›æŒ‰æ­¤å­—ç¬¦è½¬ç§»
     * @param ignoreRootState æ˜¯å?¦å¿½ç•¥æ ¹èŠ‚ç‚¹ï¼Œå¦‚æžœæ˜¯æ ¹èŠ‚ç‚¹è‡ªå·±è°ƒç”¨åˆ™åº”è¯¥æ˜¯trueï¼Œå?¦åˆ™ä¸ºfalse
     * @return è½¬ç§»ç»“æžœ
     */
    private State nextState(Character character, boolean ignoreRootState)
    {
        State nextState = this.success.get(character);
        if (!ignoreRootState && nextState == null && this.depth == 0)
        {
            nextState = this;
        }
        return nextState;
    }

    /**
     * æŒ‰ç…§characterè½¬ç§»ï¼Œæ ¹èŠ‚ç‚¹è½¬ç§»å¤±è´¥ä¼šè¿”å›žè‡ªå·±ï¼ˆæ°¸è¿œä¸?ä¼šè¿”å›žnullï¼‰
     * @param character
     * @return
     */
    public State nextState(Character character)
    {
        return nextState(character, false);
    }

    /**
     * æŒ‰ç…§characterè½¬ç§»ï¼Œä»»ä½•èŠ‚ç‚¹è½¬ç§»å¤±è´¥ä¼šè¿”å›žnull
     * @param character
     * @return
     */
    public State nextStateIgnoreRootState(Character character)
    {
        return nextState(character, true);
    }

    public State addState(Character character)
    {
        State nextState = nextStateIgnoreRootState(character);
        if (nextState == null)
        {
            nextState = new State(this.depth + 1);
            this.success.put(character, nextState);
        }
        return nextState;
    }

    public Collection<State> getStates()
    {
        return this.success.values();
    }

    public Collection<Character> getTransitions()
    {
        return this.success.keySet();
    }

    @Override
    public String toString()
    {
        final StringBuilder sb = new StringBuilder("State{");
        sb.append("depth=").append(depth);
        sb.append(", emits=").append(emits);
        sb.append(", success=").append(success.keySet());
        sb.append(", failure=").append(failure);
        sb.append('}');
        return sb.toString();
    }
}
