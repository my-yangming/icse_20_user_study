package com.limpoxe.fairy.core;


import android.annotation.TargetApi;
import android.app.Activity;
import android.app.Application;
import android.app.Application.ActivityLifecycleCallbacks;
import android.app.Instrumentation;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.ContentProvider;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.res.Resources;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;

import com.limpoxe.fairy.content.LoadedPlugin;
import com.limpoxe.fairy.content.PluginDescriptor;
import com.limpoxe.fairy.content.PluginProviderInfo;
import com.limpoxe.fairy.core.android.HackActivityThread;
import com.limpoxe.fairy.core.android.HackActivityThreadProviderClientRecord;
import com.limpoxe.fairy.core.android.HackApplication;
import com.limpoxe.fairy.core.android.HackContentProvider;
import com.limpoxe.fairy.core.android.HackSupportV4LocalboarcastManager;
import com.limpoxe.fairy.core.compat.CompatForFragmentClassCache;
import com.limpoxe.fairy.core.compat.CompatForWebViewFactoryApi21;
import com.limpoxe.fairy.core.exception.PluginNotFoundError;
import com.limpoxe.fairy.core.exception.PluginResInitError;
import com.limpoxe.fairy.core.localservice.LocalServiceManager;
import com.limpoxe.fairy.core.proxy.systemservice.AndroidWebkitWebViewFactoryProvider;
import com.limpoxe.fairy.manager.PluginActivityMonitor;
import com.limpoxe.fairy.manager.PluginManagerHelper;
import com.limpoxe.fairy.util.LogUtil;
import com.limpoxe.fairy.util.ProcessUtil;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;


/**
 * <Pre>
 * @author cailiming
 * </Pre>
 *
 */
public class PluginLauncher implements Serializable {

	private static PluginLauncher runtime;

	private ConcurrentHashMap<String, LoadedPlugin> loadedPluginMap = new ConcurrentHashMap<String, LoadedPlugin>();

	private PluginLauncher() {
		if (!ProcessUtil.isPluginProcess()) {
			throw new IllegalAccessError("æœ¬ç±»ä»…åœ¨æ?’ä»¶è¿›ç¨‹ä½¿ç”¨");
		}
	}

	public static PluginLauncher instance() {
		if (runtime == null) {
			synchronized (PluginLauncher.class) {
				if (runtime == null) {
					runtime = new PluginLauncher();
				}
			}
		}
		return runtime;
	}

	public LoadedPlugin getRunningPlugin(String packageName) {
		return loadedPluginMap.get(packageName);
	}

	public LoadedPlugin startPlugin(String packageName) {
		PluginDescriptor pluginDescriptor = PluginManagerHelper.getPluginDescriptorByPluginId(packageName);
		if (pluginDescriptor != null) {
			return startPlugin(pluginDescriptor);
		} else {
			LogUtil.e("æ?’ä»¶æœªæ‰¾åˆ°", packageName);
		}
		return null;
	}

	public synchronized LoadedPlugin startPlugin(PluginDescriptor pluginDescriptor) {
		LoadedPlugin plugin = loadedPluginMap.get(pluginDescriptor.getPackageName());
		if (plugin == null) {

			long startAt = System.currentTimeMillis();
			LogUtil.i("æ­£åœ¨åˆ?å§‹åŒ–æ?’ä»¶ " + pluginDescriptor.getPackageName() + ": Resources, DexClassLoader, Context, Application");
			LogUtil.v("æ?’ä»¶ä¿¡æ?¯", pluginDescriptor.getVersion(), pluginDescriptor.getInstalledPath());

			Resources pluginRes = PluginCreator.createPluginResource(
					FairyGlobal.getHostApplication().getApplicationInfo().sourceDir,
					FairyGlobal.getHostApplication().getResources(), pluginDescriptor);

			if (pluginRes == null) {
				LogUtil.e("åˆ?å§‹åŒ–æ?’ä»¶å¤±è´¥ : res");
                throw new PluginResInitError("åˆ?å§‹åŒ–æ?’ä»¶å¤±è´¥ : res");
			}

			long t1 = System.currentTimeMillis();
			LogUtil.i("åˆ?å§‹åŒ–æ?’ä»¶èµ„æº?è€—æ—¶:" + (t1 - startAt));

			ClassLoader pluginClassLoader = PluginCreator.createPluginClassLoader(
							pluginDescriptor.getPackageName(),
							pluginDescriptor.getInstalledPath(),
							pluginDescriptor.isStandalone(),
							pluginDescriptor.getDependencies(),
							pluginDescriptor.getMuliDexList());

			long t12 = System.currentTimeMillis();
			LogUtil.i("åˆ?å§‹åŒ–æ?’ä»¶DexClassLoaderè€—æ—¶:" + (t12 - t1));

			PluginContextTheme pluginContext = (PluginContextTheme)PluginCreator.createPluginContext(
					pluginDescriptor,
					FairyGlobal.getHostApplication().getBaseContext(),
					pluginRes,
					pluginClassLoader);

			//æ?’ä»¶Contexté»˜è®¤ä¸»é¢˜è®¾ç½®ä¸ºæ?’ä»¶applicationä¸»é¢˜
			pluginContext.setTheme(pluginDescriptor.getApplicationTheme());

			long t13 = System.currentTimeMillis();
			LogUtil.i("åˆ?å§‹åŒ–æ?’ä»¶Themeè€—æ—¶:" + (t13 - t12));

			plugin = new LoadedPlugin(pluginDescriptor.getPackageName(),
					pluginDescriptor.getInstalledPath(),
					pluginContext,
					pluginClassLoader);

			loadedPluginMap.put(pluginDescriptor.getPackageName(), plugin);

			//inflate data in meta-data
			pluginDescriptor.inflateMetaData(pluginDescriptor, pluginRes);

			if (Thread.currentThread() == Looper.getMainLooper().getThread()) {
				LogUtil.i("å½“å‰?æ‰§è¡Œæ?’ä»¶åˆ?å§‹åŒ–çš„çº¿ç¨‹æ˜¯ä¸»çº¿ç¨‹ï¼Œå¼€å§‹åˆ?å§‹åŒ–æ?’ä»¶Application");
				initApplication(pluginContext, pluginClassLoader, pluginRes, pluginDescriptor, plugin);
			} else {
				LogUtil.i("å½“å‰?æ‰§è¡Œæ?’ä»¶åˆ?å§‹åŒ–çš„çº¿ç¨‹ä¸?æ˜¯ä¸»çº¿ç¨‹ï¼Œå¼‚æ­¥é€šçŸ¥ä¸»çº¿ç¨‹åˆ?å§‹åŒ–æ?’ä»¶Application", Thread.currentThread().getId(), Thread.currentThread().getName() );
				final LoadedPlugin finalLoadedPlugin = plugin;
				new Handler(Looper.getMainLooper()).post(new Runnable() {
					@Override
					public void run() {
						if (finalLoadedPlugin.pluginApplication == null) {
							initApplication(finalLoadedPlugin.pluginContext,
									finalLoadedPlugin.pluginClassLoader,
									finalLoadedPlugin.pluginContext.getResources(),
									((PluginContextTheme)finalLoadedPlugin.pluginContext).getPluginDescriptor(),
									finalLoadedPlugin);
						}
					}
				});
			}

		} else {
			//LogUtil.d("IS RUNNING", packageName);
		}

		return plugin;
	}

	private void initApplication(Context pluginContext, ClassLoader pluginClassLoader, Resources pluginRes, PluginDescriptor pluginDescriptor, LoadedPlugin plugin) {

		LogUtil.i("å¼€å§‹åˆ?å§‹åŒ–æ?’ä»¶ " + pluginDescriptor.getPackageName() + " " + pluginDescriptor.getApplicationName());

		long t13 = System.currentTimeMillis();

		Application pluginApplication = callPluginApplicationOnCreate(pluginContext, pluginClassLoader, pluginDescriptor);

		plugin.pluginApplication = pluginApplication;//è¿™é‡Œä¹‹æ‰€ä»¥ä¸?æ”¾åœ¨LoadedPluginçš„æž„é€ å™¨é‡Œé?¢ï¼Œæ˜¯å› ä¸ºcontentprovideråœ¨å®‰è£…æ—¶loadclassï¼Œé€ æˆ?æ­»å¾ªçŽ¯

		long t3 = System.currentTimeMillis();
		LogUtil.i("åˆ?å§‹åŒ–æ?’ä»¶ " + pluginDescriptor.getPackageName() + " " + pluginDescriptor.getApplicationName() + ", è€—æ—¶:" + (t3 - t13));

		try {
			HackActivityThread.installPackageInfo(FairyGlobal.getHostApplication(), pluginDescriptor.getPackageName(), pluginDescriptor,
					pluginClassLoader, pluginRes, pluginApplication);
		} catch (ClassNotFoundException e) {
			LogUtil.printException("PluginLauncher.initApplication", e);
		}

        // è§£å†³æ?’ä»¶ä¸­webviewåŠ è½½htmlæ—¶<input type=date />æŽ§ä»¶å‡ºé”™çš„é—®é¢˜ï¼Œå…¼å®¹æ€§å¾…éªŒè¯?
        CompatForWebViewFactoryApi21.addWebViewAssets(pluginRes.getAssets());

		LogUtil.w("åˆ?å§‹åŒ–æ?’ä»¶" + pluginDescriptor.getPackageName() + "å®Œæˆ?");
	}

	private Application callPluginApplicationOnCreate(Context pluginContext, ClassLoader classLoader, PluginDescriptor pluginDescriptor) {

		Application pluginApplication = null;

		try {
			LogUtil.d("åˆ›å»ºæ?’ä»¶Application", pluginDescriptor.getApplicationName());

			//ä¸ºäº†æ”¯æŒ?æ?’ä»¶ä¸­ä½¿ç”¨multidex
			((PluginContextTheme)pluginContext).setCrackPackageManager(true);

            pluginApplication = Instrumentation.newApplication(classLoader.loadClass(pluginDescriptor.getApplicationName()),
					pluginContext);

			//ä¸ºäº†æ”¯æŒ?æ?’ä»¶ä¸­ä½¿ç”¨multidex
			((PluginContextTheme)pluginContext).setCrackPackageManager(false);

		} catch (Exception e) {

			//java.io.IOException: Failed to find magic in xxx.apk
			if (pluginDescriptor != null) {
				LogUtil.e("error, remove " + pluginDescriptor.getPackageName());
				PluginManagerHelper.remove(pluginDescriptor.getPackageName());
			}

            throw new PluginNotFoundError(e);
		}

		//å®‰è£…ContentProvider, åœ¨æ?’ä»¶Applicationå¯¹è±¡æž„é€ ä»¥å?Žï¼Œoncreateè°ƒç”¨ä¹‹å‰?
		PluginInjector.installContentProviders(FairyGlobal.getHostApplication(), pluginApplication, pluginDescriptor.getProviderInfos().values());

		//æ‰§è¡ŒonCreate

        ((PluginContextTheme)pluginContext).setPluginApplication(pluginApplication);

        LogUtil.v("å±?è”½æ?’ä»¶ä¸­çš„UncaughtExceptionHandler");
        //å…ˆæ‹¿åˆ°å®¿ä¸»çš„crashHandler
        Thread.UncaughtExceptionHandler old = Thread.getDefaultUncaughtExceptionHandler();
        Thread.setDefaultUncaughtExceptionHandler(null);

        pluginApplication.onCreate();

        Thread.UncaughtExceptionHandler pluginExHandler = Thread.getDefaultUncaughtExceptionHandler();

        // å†?è¿˜åŽŸå®¿ä¸»çš„crashHandlerï¼Œè¿™é‡Œä¹‹æ‰€ä»¥éœ€è¦?è¿˜åŽŸCrashHandlerï¼Œ
        // æ˜¯å› ä¸ºå¦‚æžœæ?’ä»¶ä¸­è‡ªå·±è®¾ç½®äº†è‡ªå·±çš„crashHandlerï¼ˆé€šå¸¸æ˜¯åœ¨oncreateä¸­ï¼‰ï¼Œ
        // ä¼šå¯¼è‡´å½“å‰?è¿›ç¨‹çš„ä¸»çº¿ç¨‹çš„handlerè¢«æ„?å¤–ä¿®æ”¹ã€‚
        // å¦‚æžœæœ‰å¤šä¸ªæ?’ä»¶éƒ½æœ‰è®¾ç½®è‡ªå·±çš„crashHandlerï¼Œä¹Ÿä¼šå¯¼è‡´æ··ä¹±
        if (old == null && pluginExHandler == null) {
            //do nothing
        } else if (old == null && pluginExHandler != null) {
            UncaugthExceptionWrapper handlerWrapper = new UncaugthExceptionWrapper();
            handlerWrapper.addHandler(pluginDescriptor.getPackageName(), pluginExHandler);
            Thread.setDefaultUncaughtExceptionHandler(handlerWrapper);
        } else if (old != null && pluginExHandler == null) {
            Thread.setDefaultUncaughtExceptionHandler(old);
        } else if (old != null && pluginExHandler != null) {
            if (old == pluginExHandler) {
                //do nothing
            } else {
                if (old instanceof UncaugthExceptionWrapper) {
                    ((UncaugthExceptionWrapper) old).addHandler(pluginDescriptor.getPackageName(), pluginExHandler);
                    Thread.setDefaultUncaughtExceptionHandler(old);
                } else {
                    //oldæ˜¯å®¿ä¸»è®¾ç½®å’Œhandler
                    UncaugthExceptionWrapper handlerWrapper = new UncaugthExceptionWrapper();
                    handlerWrapper.setHostHandler(old);
                    handlerWrapper.addHandler(pluginDescriptor.getPackageName(), pluginExHandler);

                    Thread.setDefaultUncaughtExceptionHandler(handlerWrapper);
                }
            }
        }

        if (Build.VERSION.SDK_INT >= 14) {
            // ActivityLifecycleCallbacks çš„å›žè°ƒå®žé™…æ˜¯ç”±Activityå†…éƒ¨åœ¨è‡ªå·±çš„å£°æ˜Žå‘¨æœŸå‡½æ•°å†…ä¸»åŠ¨è°ƒç”¨applicationçš„æ³¨å†Œçš„callbackè§¦å?‘çš„
            //ç”±äºŽæˆ‘ä»¬æŠŠæ?’ä»¶Activityå†…éƒ¨çš„applicationæˆ?å‘˜å?˜é‡?æ›¿æ?¢è°ƒç”¨äº†  ä¼šå¯¼è‡´ä¸?ä¼šè§¦å?‘å®¿ä¸»ä¸­æ³¨å†Œçš„ActivityLifecycleCallbacks
            //é‚£ä¹ˆæˆ‘ä»¬åœ¨è¿™é‡Œç»™æ?’ä»¶çš„Applicationå¯¹è±¡æ³¨å†Œä¸€ä¸ªcallback bridgeã€‚å°†æ?’ä»¶çš„callå?‘ç»™å®¿ä¸»çš„callï¼Œ
            //ä»Žè€Œä½¿å¾—å®¿ä¸»applicationä¸­æ³¨å†Œçš„callbackèƒ½ç›‘å?¬åˆ°æ?’ä»¶Activityçš„å£°æ˜Žå‘¨æœŸ
            pluginApplication.registerActivityLifecycleCallbacks(new LifecycleCallbackBridge(FairyGlobal.getHostApplication()));
        } else {
            //å¯¹äºŽå°?äºŽ14çš„ç‰ˆæœ¬ï¼Œå½±å“?æ˜¯ï¼ŒStubActivityçš„ç»‘å®šå…³ç³»ä¸?èƒ½è¢«å›žæ”¶ï¼Œ
            // æ„?å‘³ç?€å®¿ä¸»é…?ç½®çš„é?žStandçš„StubActivityçš„ä¸ªæ•°ä¸?èƒ½å°?äºŽæ?’ä»¶ä¸­å¯¹åº”çš„ç±»åž‹çš„ä¸ªæ•°çš„æ€»æ•°ï¼Œå?¦åˆ™å?¯èƒ½ä¼šå‡ºçŽ°æ‰¾ä¸?åˆ°æ˜ å°„çš„StubActivity
        }

		return pluginApplication;
	}

	public void stopPlugin(String packageName, PluginDescriptor pluginDescriptor) {

		if (pluginDescriptor == null) {
			LogUtil.w("æ?’ä»¶ä¸?å­˜åœ¨", packageName);
			return;
		}

		final LoadedPlugin plugin = getRunningPlugin(packageName);

		if (plugin == null) {
			LogUtil.w("æ?’ä»¶æœªè¿?è¡Œ", packageName);
			return;
		}

		//é€€å‡ºLocalService
		LogUtil.d("é€€å‡ºLocalService");
		LocalServiceManager.unRegistService(pluginDescriptor);
		//TODO è¿˜è¦?é€šçŸ¥å®¿ä¸»è¿›ç¨‹é€€å‡ºlocalServiceï¼Œä¸?è¿‡ä¸?é€šçŸ¥å…¶å®žæœ¬èº«ä¹Ÿä¸?ä¼šå??å½±å“?ã€‚

		//é€€å‡ºActivity
		LogUtil.d("é€€å‡ºActivity");
		FairyGlobal.getHostApplication().sendBroadcast(new Intent(plugin.pluginPackageName + PluginActivityMonitor.ACTION_UN_INSTALL_PLUGIN));

		//é€€å‡º LocalBroadcastManager
		LogUtil.d("é€€å‡ºLocalBroadcastManager");
		Object mInstance = HackSupportV4LocalboarcastManager.getInstance();
		if (mInstance != null) {
			HackSupportV4LocalboarcastManager hackSupportV4LocalboarcastManager = new HackSupportV4LocalboarcastManager(mInstance);
			HashMap<BroadcastReceiver, ArrayList<IntentFilter>> mReceivers = hackSupportV4LocalboarcastManager.getReceivers();
			if (mReceivers != null) {
				Iterator<BroadcastReceiver> ir = mReceivers.keySet().iterator();
				while(ir.hasNext()) {
					BroadcastReceiver item = ir.next();
					if (item.getClass().getClassLoader() == plugin.pluginClassLoader.getParent()
							|| (item.getClass().getClassLoader() instanceof RealPluginClassLoader
							&& ((RealPluginClassLoader)item.getClass().getClassLoader()).pluginPackageName.equals(plugin.pluginPackageName))) {//RealPluginClassLoader
						hackSupportV4LocalboarcastManager.unregisterReceiver(item);
					}
				}
			}
		}

		//é€€å‡ºService
		//bindservieå?¯åŠ¨çš„serviceåº”è¯¥ä¸?éœ€è¦?å¤„ç?†ï¼Œé€€å‡ºactivityçš„æ—¶å€™ä¼šunbind
		Map<IBinder, Service> map = HackActivityThread.get().getServices();
		if (map != null) {
			Collection<Service> list = map.values();
			for (Service s :list) {
				if (s.getClass().getClassLoader() == plugin.pluginClassLoader.getParent()  //RealPluginClassLoader
						//è¿™é‡Œåˆ¤æ–­æ˜¯å?¦æ˜¯å½“å‰?è¢«stopçš„æ?’ä»¶çš„ç»„ä»¶æ—¶ï¼Œä¸Žä¸Šé?¢LocalBroadcastçš„åˆ¤æ–­é€»è¾‘æ—¶ä¸€æ ·çš„
						//å?ªä¸?è¿‡sercieæœ‰getPackageNameå‡½æ•°ï¼Œæ‰€ä»¥ä¸?éœ€è¦?é€šè¿‡classloaderçš„pluginPackageNameæ?¥åˆ¤æ–­äº†
						|| s.getPackageName().equals(plugin.pluginPackageName)) {
					Intent intent = new Intent();
					intent.setClassName(plugin.pluginPackageName, s.getClass().getName());
					s.stopService(intent);
				}
			}
		}

		//é€€å‡ºwebview
		LogUtil.d("è¿˜åŽŸWebView Context");
		new Handler(Looper.getMainLooper()).post(new Runnable() {
			@Override
			public void run() {
				//è¿™ä¸ªæ–¹æ³•éœ€è¦?åœ¨UIçº¿ç¨‹è¿?è¡Œ
				AndroidWebkitWebViewFactoryProvider.switchWebViewContext(FairyGlobal.getHostApplication());

				//é€€å‡ºBroadcastReceiver
				//å¹¿æ’­ä¸€èˆ¬æœ‰ä¸ªæ³¨å†Œæ–¹å¼?
				//1ã€?activityã€?serviceæ³¨å†Œ
				//		è¿™ç§?æ–¹å¼?ï¼Œåœ¨ä¸Šä¸€æ­¥Activitiyã€?serviceé€€å‡ºæ—¶ä¼šè‡ªç„¶é€€å‡ºï¼Œæ‰€ä»¥ä¸?ç”¨å¤„ç?†
				//2ã€?applicationæ³¨å†Œ
				//      è¿™é‡Œéœ€è¦?å¤„ç?†è¿™ç§?æ–¹å¼?æ³¨å†Œçš„å¹¿æ’­ï¼Œè¿™ç§?æ–¹å¼?æ³¨å†Œçš„å¹¿æ’­ä¼šè¢«PluginContextThemeå¯¹è±¡è®°å½•ä¸‹æ?¥
				LogUtil.d("é€€å‡ºBroadcastReceiver");
				((PluginContextTheme) plugin.pluginApplication.getBaseContext()).unregisterAllReceiver();
			}
		});

		//é€€å‡ºAssetManager
		//pluginDescriptor.getPluginContext().getResources().getAssets().close();

		LogUtil.d("é€€å‡ºContentProvider");
		HashMap<String, PluginProviderInfo> pluginProviderMap  = pluginDescriptor.getProviderInfos();
		if (pluginProviderMap != null) {
			HackActivityThread hackActivityThread = HackActivityThread.get();
			// The lock of mProviderMap protects the following variables.
			Map mProviderMap = hackActivityThread.getProviderMap();
			if (mProviderMap != null) {

				Map mLocalProviders = hackActivityThread.getLocalProviders();
				Map mLocalProvidersByName = hackActivityThread.getLocalProvidersByName();

				Collection<PluginProviderInfo> collection = pluginProviderMap.values();
				for(PluginProviderInfo pluginProviderInfo : collection) {
					String auth = pluginProviderInfo.getAuthority();
					synchronized (mProviderMap) {
						removeProvider(auth, mProviderMap);
						removeProvider(auth, mLocalProviders);
						removeProvider(auth, mLocalProvidersByName);
					}
				}
			}
		}

		//é€€å‡ºfragment
		//å?³é€€å‡ºç”±FragmentManagerä¿?å­˜çš„Fragment
        CompatForFragmentClassCache.clearFragmentClassCache();
        CompatForFragmentClassCache.clearSupportV4FragmentClassCache();

        //ç»™æ?’ä»¶ä¸€ä¸ªæœºä¼šè‡ªå·±å?šä¸€äº›æ¸…ç?†å·¥ä½œ
		plugin.pluginApplication.onTerminate();

        //ç§»é™¤æ?’ä»¶æ³¨å†Œçš„crashHandler
        //è¿™é‡Œä¸?ä¸€å®šèƒ½æ¸…ç?†å¹²å‡€ï¼Œå› ä¸ºUncaugthExceptionWrapperå?¯èƒ½ä¼šè¢«åˆ›å»ºå¤šä¸ªå®žä¾‹ã€‚ä¸?è¿‡ä¹Ÿæ²¡ä»€ä¹ˆå¤§çš„å½±å“?
        Thread.UncaughtExceptionHandler exceptionHandler = Thread.getDefaultUncaughtExceptionHandler();
        if (exceptionHandler instanceof UncaugthExceptionWrapper) {
            ((UncaugthExceptionWrapper) exceptionHandler).removeHandler(packageName);
        }

		loadedPluginMap.remove(packageName);

		LogUtil.d("stopPlugin done");
	}

	private static void removeProvider(String authority, Map map) {
		if (map == null || authority == null) {
			return;
		}
		Iterator<Map.Entry> iterator = map.entrySet().iterator();
		while(iterator.hasNext()) {
			Map.Entry entry = iterator.next();
			ContentProvider contentProvider = new HackActivityThreadProviderClientRecord(entry.getValue()).getProvider();
			if (contentProvider != null && authority.equals(new HackContentProvider(contentProvider).getAuthority())) {
				iterator.remove();
				LogUtil.e("remove plugin contentprovider from map for " + authority);
				break;
			}
		}
	}

	public boolean isRunning(String packageName) {
		return loadedPluginMap.get(packageName) != null;
	}

	@TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
	static class LifecycleCallbackBridge implements ActivityLifecycleCallbacks {

		private HackApplication hackPluginApplication;

		public LifecycleCallbackBridge(Application pluginApplication) {
			this.hackPluginApplication = new HackApplication(pluginApplication);
		}

		@Override
		public void onActivityCreated(Activity activity, Bundle savedInstanceState) {
			hackPluginApplication.dispatchActivityCreated(activity, savedInstanceState);
		}

		@Override
		public void onActivityStarted(Activity activity) {
			hackPluginApplication.dispatchActivityStarted(activity);
		}

		@Override
		public void onActivityResumed(Activity activity) {
			hackPluginApplication.dispatchActivityResumed(activity);
		}

		@Override
		public void onActivityPaused(Activity activity) {
			hackPluginApplication.dispatchActivityPaused(activity);
		}

		@Override
		public void onActivityStopped(Activity activity) {
			hackPluginApplication.dispatchActivityStopped(activity);
		}

		@Override
		public void onActivitySaveInstanceState(Activity activity, Bundle outState) {
			hackPluginApplication.dispatchActivitySaveInstanceState(activity, outState);
		}

		@Override
		public void onActivityDestroyed(Activity activity) {
			hackPluginApplication.dispatchActivityDestroyed(activity);
		}
	}
}
