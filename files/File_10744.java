package com.vondear.rxtool;

import android.os.Build;
import android.text.Html;
import android.util.Base64;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;

/**
 *
 * @author vondear
 * @date 2016/1/24
 * ç¼–ç ?è§£ç ?ç›¸å…³å·¥å…·ç±»
 */
public class RxEncodeTool {

    /**
     * URLç¼–ç ?
     * <p>è‹¥æƒ³è‡ªå·±æŒ‡å®šå­—ç¬¦é›†,å?¯ä»¥ä½¿ç”¨{@link #urlEncode(String input, String charset)}æ–¹æ³•</p>
     *
     * @param input è¦?ç¼–ç ?çš„å­—ç¬¦
     * @return ç¼–ç ?ä¸ºUTF-8çš„å­—ç¬¦ä¸²
     */
    public static String urlEncode(String input) {
        return urlEncode(input, "UTF-8");
    }

    /**
     * URLç¼–ç ?
     * <p>è‹¥ç³»ç»Ÿä¸?æ”¯æŒ?æŒ‡å®šçš„ç¼–ç ?å­—ç¬¦é›†,åˆ™ç›´æŽ¥å°†inputåŽŸæ ·è¿”å›ž</p>
     *
     * @param input   è¦?ç¼–ç ?çš„å­—ç¬¦
     * @param charset å­—ç¬¦é›†
     * @return ç¼–ç ?ä¸ºå­—ç¬¦é›†çš„å­—ç¬¦ä¸²
     */
    public static String urlEncode(String input, String charset) {
        try {
            return URLEncoder.encode(input, charset);
        } catch (UnsupportedEncodingException e) {
            return input;
        }
    }

    /**
     * URLè§£ç ?
     * <p>è‹¥æƒ³è‡ªå·±æŒ‡å®šå­—ç¬¦é›†,å?¯ä»¥ä½¿ç”¨ {@link #urlDecode(String input, String charset)}æ–¹æ³•</p>
     *
     * @param input è¦?è§£ç ?çš„å­—ç¬¦ä¸²
     * @return URLè§£ç ?å?Žçš„å­—ç¬¦ä¸²
     */
    public static String urlDecode(String input) {
        return urlDecode(input, "UTF-8");
    }

    /**
     * URLè§£ç ?
     * <p>è‹¥ç³»ç»Ÿä¸?æ”¯æŒ?æŒ‡å®šçš„è§£ç ?å­—ç¬¦é›†,åˆ™ç›´æŽ¥å°†inputåŽŸæ ·è¿”å›ž</p>
     *
     * @param input   è¦?è§£ç ?çš„å­—ç¬¦ä¸²
     * @param charset å­—ç¬¦é›†
     * @return URLè§£ç ?ä¸ºæŒ‡å®šå­—ç¬¦é›†çš„å­—ç¬¦ä¸²
     */
    public static String urlDecode(String input, String charset) {
        try {
            return URLDecoder.decode(input, charset);
        } catch (UnsupportedEncodingException e) {
            return input;
        }
    }

    /**
     * Base64ç¼–ç ?
     *
     * @param input è¦?ç¼–ç ?çš„å­—ç¬¦ä¸²
     * @return Base64ç¼–ç ?å?Žçš„å­—ç¬¦ä¸²
     */
    public static byte[] base64Encode(String input) {
        return base64Encode(input.getBytes());
    }

    /**
     * Base64ç¼–ç ?
     *
     * @param input è¦?ç¼–ç ?çš„å­—èŠ‚æ•°ç»„
     * @return Base64ç¼–ç ?å?Žçš„å­—ç¬¦ä¸²
     */
    public static byte[] base64Encode(byte[] input) {
        return Base64.encode(input, Base64.NO_WRAP);
    }

    /**
     * Base64ç¼–ç ?
     *
     * @param input è¦?ç¼–ç ?çš„å­—èŠ‚æ•°ç»„
     * @return Base64ç¼–ç ?å?Žçš„å­—ç¬¦ä¸²
     */
    public static String base64Encode2String(byte[] input) {
        return Base64.encodeToString(input, Base64.NO_WRAP);
    }

    /**
     * Base64è§£ç ?
     *
     * @param input è¦?è§£ç ?çš„å­—ç¬¦ä¸²
     * @return Base64è§£ç ?å?Žçš„å­—ç¬¦ä¸²
     */
    public static byte[] base64Decode(String input) {
        return Base64.decode(input, Base64.NO_WRAP);
    }

    /**
     * Base64è§£ç ?
     *
     * @param input è¦?è§£ç ?çš„å­—ç¬¦ä¸²
     * @return Base64è§£ç ?å?Žçš„å­—ç¬¦ä¸²
     */
    public static byte[] base64Decode(byte[] input) {
        return Base64.decode(input, Base64.NO_WRAP);
    }

    /**
     * Base64URLå®‰å…¨ç¼–ç ?
     * <p>å°†Base64ä¸­çš„URLé?žæ³•å­—ç¬¦ï¿½?,/=è½¬ä¸ºå…¶ä»–å­—ç¬¦, è§?RFC3548</p>
     *
     * @param input è¦?Base64URLå®‰å…¨ç¼–ç ?çš„å­—ç¬¦ä¸²
     * @return Base64URLå®‰å…¨ç¼–ç ?å?Žçš„å­—ç¬¦ä¸²
     */
    public static byte[] base64UrlSafeEncode(String input) {
        return Base64.encode(input.getBytes(), Base64.URL_SAFE);
    }

    /**
     * Htmlç¼–ç ?
     *
     * @param input è¦?Htmlç¼–ç ?çš„å­—ç¬¦ä¸²
     * @return Htmlç¼–ç ?å?Žçš„å­—ç¬¦ä¸²
     */
    public static String htmlEncode(String input) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
            return Html.escapeHtml(input);
        } else {
            // å?‚ç…§Html.escapeHtml()ä¸­ä»£ç ?
            StringBuilder out = new StringBuilder();
            for (int i = 0, len = input.length(); i < len; i++) {
                char c = input.charAt(i);
                if (c == '<') {
                    out.append("&lt;");
                } else if (c == '>') {
                    out.append("&gt;");
                } else if (c == '&') {
                    out.append("&amp;");
                } else if (c >= 0xD800 && c <= 0xDFFF) {
                    if (c < 0xDC00 && i + 1 < len) {
                        char d = input.charAt(i + 1);
                        if (d >= 0xDC00 && d <= 0xDFFF) {
                            i++;
                            int codepoint = 0x010000 | (int) c - 0xD800 << 10 | (int) d - 0xDC00;
                            out.append("&#").append(codepoint).append(";");
                        }
                    }
                } else if (c > 0x7E || c < ' ') {
                    out.append("&#").append((int) c).append(";");
                } else if (c == ' ') {
                    while (i + 1 < len && input.charAt(i + 1) == ' ') {
                        out.append("&nbsp;");
                        i++;
                    }
                    out.append(' ');
                } else {
                    out.append(c);
                }
            }
            return out.toString();
        }
    }

    /**
     * Htmlè§£ç ?
     *
     * @param input å¾…è§£ç ?çš„å­—ç¬¦ä¸²
     * @return Htmlè§£ç ?å?Žçš„å­—ç¬¦ä¸²
     */
    public static String htmlDecode(String input) {
        return Html.fromHtml(input).toString();
    }
}
