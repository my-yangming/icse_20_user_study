package com.zinc.bezier.widget;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.PointF;
import android.graphics.RectF;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.Nullable;
import android.util.AttributeSet;
import android.view.MotionEvent;

import com.zinc.bezier.utils.BezierUtils;
import com.zinc.bezier.activity.BezierActivity;
import com.zinc.lib_base.BaseView;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Jiang zinc
 * @date åˆ›å»ºæ—¶é—´ï¼š2018/10/30
 * @description
 */
public class BezierView extends BaseView {

    // å¸§æ•°ï¼š1000ï¼Œå?³1000ä¸ªç‚¹æ?¥ç»˜åˆ¶ä¸€æ?¡çº¿
    private static final int FRAME = 1000;

    // handler äº‹ä»¶
    private static final int HANDLE_EVENT = 12580;

    // å‡†å¤‡çŠ¶æ€?
    public static final int PREPARE = 0x0001;
    // è¿?è¡ŒçŠ¶æ€?
    public static final int RUNNING = 0x0002;
    // å?œæ­¢çŠ¶æ€?
    public static final int STOP = 0x0004;

    // é»˜è®¤çš„æŽ§åˆ¶ç‚¹
    private List<PointF> DEFAULT_POINT;

    // æœ‰æ•ˆè§¦ç¢°çš„èŒƒå›´
    private int mTouchRegionWidth;

    // å½“å‰?çŠ¶æ€?
    private int mState = PREPARE;
    // æ™®é€šçº¿çš„å®½åº¦
    private int LINE_WIDTH;
    // è´?å¡žå°”æ›²çº¿çš„å®½åº¦
    private int BEZIER_LINE_WIDTH;
    // æŽ§åˆ¶ç‚¹çš„å?Šå¾„
    private int POINT_RADIO_WIDTH;

    // é€ŸçŽ‡ï¼Œæ¯?æ¬¡ç»˜åˆ¶è·³è¿‡çš„å¸§æ•°ï¼Œç­‰äºŽ10ï¼Œå?³è¡¨ç¤ºæ¯?æ¬¡ç»˜åˆ¶è·³è¿‡10å¸§
    private int mRate = 10;

    // ç»˜åˆ¶è´?å¡žå°”æ›²çº¿çš„ç”»ç¬”
    private Paint mBezierPaint;
    // è´?å¡žå°”æ›²çº¿çš„è·¯å¾„
    private Path mBezierPath;
    // æŽ§åˆ¶ç‚¹çš„ç”»ç¬”
    private Paint mControlPaint;
    // ç»˜åˆ¶ç«¯ç‚¹çš„ç”»ç¬”
    private Paint mPointPaint;
    // ä¸­é—´é˜¶å±‚çš„çº¿ç”»ç¬”
    private Paint mIntermediatePaint;
    // ç»˜å­—ç¬”
    private Paint mTextPaint;

    // å½“å‰?çš„æ¯”ä¾‹
    private float mCurRatio;

    // æŽ§åˆ¶ç‚¹çš„å??æ ‡
    private List<PointF> mControlPointList;
    // è´?å¡žå°”æ›²çº¿çš„è·¯å¾„ç‚¹
    private List<PointF> mBezierPointList;
    // è‰²å€¼ï¼Œæ¯?ä¸€é˜¶çš„è‰²å€¼
    private List<String> mLineColor;

    private Handler mHandler;

    // æœ€é«˜é˜¶çš„æŽ§åˆ¶ç‚¹ä¸ªæ•°
    private int mPointCount;
    // æ˜¯å?¦ç»˜åˆ¶é™?é˜¶çº¿
    private boolean mIsShowReduceOrderLine;
    // æ˜¯å?¦å¾ªçŽ¯æ’­æ”¾
    private boolean mIsLoop;

    /**
     * å±‚çº§è¯´æ˜Žï¼š
     * ç¬¬1å±‚list.å­˜æ”¾æ¯?ä¸€é˜¶çš„å€¼
     * å?³ï¼šmIntermediateList.get(0) å?³ä¸ºç¬¬(n-1)é˜¶çš„è´?å¡žå°”æ›²çº¿çš„æ•°å€¼
     * mIntermediateList.get(1) å?³ä¸ºç¬¬(n-2)é˜¶çš„è´?å¡žå°”æ›²çº¿çš„æ•°å€¼
     * ç¬¬2å±‚list.å­˜æ”¾è¯¥é˜¶çš„æ¯?æ?¡è¾¹çš„æ•°æ?®
     * ç¬¬3å±‚list.å­˜æ”¾è¿™æ?¡è¾¹ç‚¹çš„æ•°æ?®
     */
    private final List<List<List<PointF>>> mIntermediateList = new ArrayList<>();

    /**
     * å±‚çº§è¯´æ˜Žï¼š
     * ç¬¬1å±‚ï¼šè¾¹çš„æ•°æ?®
     * ç¬¬2å±‚ï¼šè¾¹ä¸­çš„ç‚¹æ•°æ?®
     */
    private final List<List<PointF>> mIntermediateDrawList = new ArrayList<>();

    // ç»˜åˆ¶æ—¶ï¼Œè´?å¡žå°”æ›²çº¿çš„ç‚¹
    private PointF mCurBezierPoint;
    // å½“å‰?é€‰ä¸­çš„ç‚¹
    private PointF mCurSelectPoint;

    public BezierView(Context context) {
        super(context);
    }

    public BezierView(Context context, @Nullable AttributeSet attrs) {
        super(context, attrs);
    }

    public BezierView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
    }

    /**
     * è®¾ç½®é€ŸçŽ‡
     *
     * @param rate é€ŸçŽ‡
     */
    public void setRate(int rate) {
        this.mRate = rate;
    }

    /**
     * è®¾ç½®é˜¶ [2-7]
     *
     * @param order
     */
    public void setOrder(int order) {
        this.mPointCount = order + 1;
        mControlPointList.clear();
        for (int i = 0; i < mPointCount; ++i) {
            if (i >= DEFAULT_POINT.size()) {
                break;
            }
            mControlPointList.add(DEFAULT_POINT.get(i));
        }
    }

    /**
     * è®¾ç½®æ˜¯å?¦æ˜¾ç¤ºé™?é˜¶çº¿
     *
     * @param isShowReduceOrderLine
     */
    public void setIsShowReduceOrderLine(boolean isShowReduceOrderLine) {
        this.mIsShowReduceOrderLine = isShowReduceOrderLine;
    }

    public boolean isShowReduceOrderLine() {
        return mIsShowReduceOrderLine;
    }

    /**
     * è®¾ç½®æ˜¯å?¦å¾ªçŽ¯æ’­æ”¾
     *
     * @param isLoop
     */
    public void setIsLoop(boolean isLoop) {
        this.mIsLoop = isLoop;
    }

    public boolean isLoop() {
        return mIsLoop;
    }

    public int getState() {
        return mState;
    }

    public void setCurRatio(float curRatio) {
        this.mCurRatio = curRatio;
    }

    @Override
    protected void init(Context context) {
        LINE_WIDTH = dpToPx(2);
        BEZIER_LINE_WIDTH = dpToPx(3);
        POINT_RADIO_WIDTH = dpToPx(4);

        // åˆ?å§‹åŒ–ä¸ºå‡†å¤‡çŠ¶æ€?
        mState = PREPARE;

        mHandler = new MyHandler(this);

        // åˆ?å§‹åŒ–é¢œè‰²
        mLineColor = new ArrayList<>();
        mLineColor.add("#f4ea2a");    //é»„è‰²
        mLineColor.add("#1afa29");    //ç»¿è‰²
        mLineColor.add("#13227a");    //è“?è‰²
        mLineColor.add("#515151");    //é»‘è‰²
        mLineColor.add("#e89abe");    //ç²‰è‰²
        mLineColor.add("#efb336");    //æ©™è‰²

        int width = context.getResources().getDisplayMetrics().widthPixels;
        DEFAULT_POINT = new ArrayList<>();
        DEFAULT_POINT.add(new PointF(width / 5, width / 5));
        DEFAULT_POINT.add(new PointF(width / 3, width / 2));
        DEFAULT_POINT.add(new PointF(width / 3 * 2, width / 4));
        DEFAULT_POINT.add(new PointF(width / 2, width / 3));
        DEFAULT_POINT.add(new PointF(width / 4 * 2, width / 8));
        DEFAULT_POINT.add(new PointF(width / 5 * 4, width / 12));
        DEFAULT_POINT.add(new PointF(width / 5 * 4, width));
        DEFAULT_POINT.add(new PointF(width / 2, width));

        // åˆ?å§‹åŒ– æŽ§åˆ¶ç‚¹
        mControlPointList = new ArrayList<>();
        mPointCount = 8;
        for (int i = 0; i < mPointCount; ++i) {
            if (i >= DEFAULT_POINT.size()) {
                break;
            }
            mControlPointList.add(DEFAULT_POINT.get(i));
        }

        // åˆ?å§‹åŒ–è´?å¡žå°”çš„è·¯å¾„çš„ç”»ç¬”
        mBezierPaint = new Paint();
        mBezierPaint.setAntiAlias(true);
        mBezierPaint.setColor(getBezierLineColor());
        mBezierPaint.setStrokeWidth(BEZIER_LINE_WIDTH);
        mBezierPaint.setStyle(Paint.Style.STROKE);
        mBezierPaint.setStrokeCap(Paint.Cap.ROUND);

        // åˆ?å§‹ æŽ§åˆ¶ç‚¹ç”»ç¬”
        mControlPaint = new Paint();
        mControlPaint.setAntiAlias(true);
        mControlPaint.setColor(getControlLineColor());
        mControlPaint.setStrokeWidth(LINE_WIDTH);

        // åˆ?å§‹åŒ– ç«¯ç‚¹ç”»ç¬”
        mPointPaint = new Paint();
        mPointPaint.setAntiAlias(true);

        mTextPaint = new Paint();
        mTextPaint.setAntiAlias(true);
        mTextPaint.setTextAlign(Paint.Align.CENTER);
        mTextPaint.setTextSize(spToPx(15));

        // åˆ?å§‹åŒ–ä¸­é—´é˜¶çº§çš„ç”»ç¬”
        mIntermediatePaint = new Paint();
        mIntermediatePaint.setAntiAlias(true);
        mIntermediatePaint.setStrokeWidth(LINE_WIDTH);

        // åˆ?å§‹åŒ–å­˜æ”¾è´?å¡žå°”æ›²çº¿æœ€ç»ˆç»“æžœçš„è·¯å¾„
        mBezierPath = new Path();

        // è§¦ç¢°èŒƒå›´
        mTouchRegionWidth = dpToPx(20);

    }


    public void start() {

        // é‡?ç½® è´?å¡žå°”æ›²çº¿ç»“æžœ çš„è·¯å¾„
        mBezierPath.reset();

        // çŠ¶æ€?è‡³ä¸ºè¿?è¡Œä¸­
        mState = RUNNING;

        // è®¡ç®— è´?å¡žå°”æ›²çº¿ç»“æžœ çš„æ¯?ä¸ªç‚¹
        mBezierPointList = BezierUtils.buildBezierPoint(mControlPointList, FRAME);
        // å°†è®¡ç®—å¥½çš„ è´?å¡žå°”æ›²çº¿çš„ç‚¹ ç»„è£…æˆ?è·¯å¾„
        prepareBezierPath();

        if (mIsShowReduceOrderLine) {
            // è®¡ç®— ä¸­é—´é˜¶çº§çš„æŽ§åˆ¶ç‚¹
            BezierUtils.calculateIntermediateLine(mIntermediateList, mControlPointList, FRAME);
        }

        mCurRatio = 0;

        setCurBezierPoint(mBezierPointList.get(0));

        invalidate();

    }

    /**
     * æš‚å?œ æˆ– ç»§ç»­
     */
    public void pause() {
        if (mState == RUNNING) {
            mState = STOP;
        } else if (mState == STOP) {
            mState = RUNNING;
            mHandler.sendEmptyMessage(HANDLE_EVENT);
        }
    }

    @Override
    protected void onDraw(Canvas canvas) {
        // ç”»å??æ ‡å’Œç½‘æ ¼
        drawCoordinate(canvas);

        // ç»˜åˆ¶æŽ§åˆ¶åŸºçº¿å’Œç‚¹
        drawControlLine(canvas);

        // ç»˜åˆ¶è´?å¡žå°”æ›²çº¿
        canvas.drawPath(mBezierPath, mBezierPaint);

        if (mState != PREPARE) {
            mPointPaint.setStyle(Paint.Style.FILL);
            if (mIsShowReduceOrderLine) {
                // ç”»ä¸­é—´é˜¶å±‚çš„çº¿
                for (int i = 0; i < mIntermediateDrawList.size(); ++i) {

                    List<PointF> lineList = mIntermediateDrawList.get(i);
                    mIntermediatePaint.setColor(getColor(i));
                    mPointPaint.setColor(getColor(i));

                    for (int j = 0; j < lineList.size() - 1; ++j) {

                        // ç”»çº¿
                        canvas.drawLine(lineList.get(j).x,
                                lineList.get(j).y,
                                lineList.get(j + 1).x,
                                lineList.get(j + 1).y,
                                mIntermediatePaint);

                        // ç”»ç‚¹
                        canvas.drawCircle(lineList.get(j).x,
                                lineList.get(j).y,
                                POINT_RADIO_WIDTH,
                                mPointPaint);
                    }

                    canvas.drawCircle(lineList.get(lineList.size() - 1).x,
                            lineList.get(lineList.size() - 1).y,
                            POINT_RADIO_WIDTH,
                            mPointPaint);
                }
            }

            mPointPaint.setColor(getBezierLineColor());
            canvas.drawCircle(mCurBezierPoint.x,
                    mCurBezierPoint.y,
                    POINT_RADIO_WIDTH,
                    mPointPaint);

            mHandler.sendEmptyMessage(HANDLE_EVENT);

        }

        if (mCurRatio == 1 && !mIsLoop && getContext() instanceof BezierActivity) {
            ((BezierActivity) getContext()).resetPlayBtn();
        }

        canvas.drawText("u = " + mCurRatio, mWidth / 4, mHeight * 11 / 12, mTextPaint);

    }

    /**
     * ç»˜åˆ¶ æŽ§åˆ¶åŸºçº¿ å’Œ ç‚¹
     */
    private void drawControlLine(Canvas canvas) {
        mPointPaint.setColor(getControlLineColor());

        // ç»˜åˆ¶ æŽ§åˆ¶ç‚¹
        for (PointF point : mControlPointList) {
            mPointPaint.setStyle(Paint.Style.FILL);
            mPointPaint.setStrokeWidth(0);
            canvas.drawCircle(point.x, point.y, POINT_RADIO_WIDTH, mPointPaint);

            mPointPaint.setStyle(Paint.Style.STROKE);
            mPointPaint.setStrokeWidth(1);
            canvas.drawCircle(point.x, point.y, POINT_RADIO_WIDTH + 2, mPointPaint);
        }

        // ç»˜åˆ¶ç¬¬ n é˜¶çš„æŽ§åˆ¶åŸºçº¿
        for (int i = 0; i < mControlPointList.size() - 1; ++i) {
            canvas.drawLine(mControlPointList.get(i).x,
                    mControlPointList.get(i).y,
                    mControlPointList.get(i + 1).x,
                    mControlPointList.get(i + 1).y,
                    mControlPaint);
        }
    }

    /**
     * å°†è®¡ç®—å¥½çš„ è´?å¡žå°”æ›²çº¿çš„ç‚¹ ç»„è£…æˆ?è·¯å¾„
     * è‡³äºŽè¿™è·¯å¾„ä¸­æœ‰å¤šå°‘ä¸ªç‚¹ï¼Œå?–å†³äºŽ{@link #FRAME}å±žæ€§çš„å€¼
     */
    private void prepareBezierPath() {
        for (int i = 0; i < mBezierPointList.size(); ++i) {
            PointF point = mBezierPointList.get(i);
            if (i == 0) {
                mBezierPath.moveTo(point.x, point.y);
            } else {
                mBezierPath.lineTo(point.x, point.y);
            }
        }
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {

        // æ²¡æœ‰åœ¨å‡†å¤‡çŠ¶æ€?ä¸?èƒ½è¿›è¡Œæ“?ä½œ
        if (mState != PREPARE) {
            return true;
        }

        // è§¦ç¢°çš„å??æ ‡
        float x = event.getX();
        float y = event.getY();

        switch (event.getAction()) {
            case MotionEvent.ACTION_DOWN:
                isLegalControlPoint(x, y);
                break;

            case MotionEvent.ACTION_MOVE:
                if (mCurSelectPoint == null) {
                    return true;
                }

                mCurSelectPoint.x = x;
                mCurSelectPoint.y = y;

                mIntermediateList.clear();
                mIntermediateDrawList.clear();
                if (mBezierPointList != null) {
                    mBezierPointList.clear();
                }
                mBezierPath.reset();

                invalidate();

                break;

            case MotionEvent.ACTION_UP:
                mCurSelectPoint = null;
                break;
        }

        return true;
    }

    /**
     * èŽ·å?– è§¦ç¢°ç‚¹ èŒƒå›´å†…æœ‰æ•ˆçš„ æŽ§åˆ¶ç‚¹
     *
     * @param x
     * @param y
     */
    private void isLegalControlPoint(float x, float y) {

        if (mCurSelectPoint == null) {

            for (PointF controlPoint : mControlPointList) {
                RectF pointRange = new RectF(controlPoint.x - mTouchRegionWidth,
                        controlPoint.y - mTouchRegionWidth,
                        controlPoint.x + mTouchRegionWidth,
                        controlPoint.y + mTouchRegionWidth);

                // å¦‚æžœåŒ…å?«äº†å°±ï¼Œè¿”å›žtrue
                if (pointRange.contains(x, y)) {
                    mCurSelectPoint = controlPoint;
                    return;
                }

            }
        }

    }

    /**
     * èŽ·å?–æŽ§åˆ¶çº¿ã€?æŽ§åˆ¶ç‚¹çš„è‰²å€¼
     *
     * @return
     */
    private int getControlLineColor() {
        return getColor("#1296db");
    }

    /**
     * èŽ·å?–è´?å¡žå°”æ›²çº¿çš„è‰²å€¼
     *
     * @return
     */
    private int getBezierLineColor() {
        return getColor("#d81e06");
    }

    /**
     * èŽ·å?– {@link #mLineColor} çš„å¯¹åº”ä¸‹æ ‡è‰²å€¼ï¼Œå¦‚æžœè¶Šç•Œåˆ™å?–ä½™
     *
     * @param index è‰²å€¼ä¸‹æ ‡
     * @return
     */
    private int getColor(int index) {
        return getColor(mLineColor.get(index % mLineColor.size()));
    }

    /**
     * èŽ·å?–é¢œè‰²
     *
     * @param color è‰²å€¼ï¼Œæ ¼å¼?ï¼š#xxxxxx
     * @return
     */
    private int getColor(String color) {
        return Color.parseColor(color);
    }

    /**
     * è®¾ç½®ç»˜åˆ¶å€¼
     *
     * @param intermediateDrawList
     */
    private void setIntermediateDrawList(List<List<PointF>> intermediateDrawList) {
        mIntermediateDrawList.clear();
        mIntermediateDrawList.addAll(intermediateDrawList);
    }

    private void setState(int state) {
        this.mState = state;
    }

    private int getRate() {
        return mRate;
    }

    private int getSize() {
        return mBezierPointList.size();
    }

    private void setCurBezierPoint(PointF curBezierPoint) {
        this.mCurBezierPoint = curBezierPoint;
    }

    private List<PointF> getBezierPointList() {
        return mBezierPointList;
    }

    private List<List<List<PointF>>> getIntermediateList() {
        return mIntermediateList;
    }

    private static final class MyHandler extends Handler {

        // è´?å¡žå°”æ›²çº¿çš„è§†å›¾
        private final BezierView mView;
        // å½“å‰?å¸§æ•°
        private int mCurFrame;

        public MyHandler(BezierView bezierView) {
            this.mView = bezierView;
            this.mCurFrame = 0;
        }

        @Override
        public void handleMessage(Message msg) {
            if (msg.what == HANDLE_EVENT) {

                // æŒ‰äº† æš‚å?œï¼Œåˆ™ä¸?åœ¨è¿›è¡Œ
                if (mView.getState() == STOP) {
                    return;
                }

                // å¢žåŠ  å¸§æ•°ï¼Œè®©çº¿ç§»åŠ¨èµ·æ?¥
                mCurFrame += mView.getRate();
                // å½“å¸§æ•°è¶…å‡ºç•Œé™?åˆ™ä¸?åœ¨è¿?è¡Œï¼Œè®©å½“å‰? å¸§æ•° å’Œ çŠ¶æ€?å¤?ä½?ï¼Œå¹¶ä¸”æ¸…ç©ºé™?é˜¶çº¿çš„æ•°æ?®
                if (mCurFrame >= mView.getSize()) {

                    mCurFrame = 0;

                    if (!mView.isLoop()) {
                        mView.setState(PREPARE);
                        mView.setIntermediateDrawList(new ArrayList<List<PointF>>());
                        mView.setCurRatio(1);
                        mView.invalidate();
                        return;
                    }

                }

                // èŽ·å?–å½“å‰?çš„è´?å¡žå°”æ›²çº¿ç‚¹
                List<PointF> bezierPointList = mView.getBezierPointList();
                mView.setCurBezierPoint(bezierPointList.get(mCurFrame));

                // æ˜¯å?¦è¦?æ˜¾ç¤º é™?é˜¶çº¿
                if (mView.isShowReduceOrderLine()) {
                    List<List<List<PointF>>> intermediateList = mView.getIntermediateList();

                    // å®žæ—¶å?˜åŠ¨çš„çº¿
                    List<List<PointF>> intermediateDrawList = new ArrayList<>();

                    for (int i = 0; i < intermediateList.size(); ++i) {

                        List<List<PointF>> lineList = intermediateList.get(i);
                        List<PointF> intermediatePoint = new ArrayList<>();

                        for (int j = 0; j < lineList.size(); ++j) {
                            float x = lineList.get(j).get(mCurFrame).x;
                            float y = lineList.get(j).get(mCurFrame).y;
                            intermediatePoint.add(new PointF(x, y));
                        }

                        intermediateDrawList.add(intermediatePoint);

                    }

                    mView.setIntermediateDrawList(intermediateDrawList);
                }


//                if (mCurFrame >= mView.getSize() - 1 && !mView.isLoop()) {
//                    mCurFrame = 0;
//                    mView.setState(PREPARE);
//                    mView.setIntermediateDrawList(new ArrayList<List<PointF>>());
//                }

                float ratio = (int) (((float) mCurFrame / mView.getSize()) * 100) / 100f;
                mView.setCurRatio(ratio > 1 ? 1 : ratio);

                // åˆ·æ–°è§†å›¾
                mView.invalidate();

            }

        }
    }

}
