package com.xiaolyuh.redis.lock;

import java.util.Random;
import java.util.concurrent.TimeUnit;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.redis.core.StringRedisTemplate;

/**
 * Redisåˆ†å¸ƒå¼?é”?ï¼ˆå?¯èƒ½æ­»é”?ï¼‰
 * <p>
 * æ‰§è¡Œæ­¥éª¤
 * 1. setnx(lockkey, 1)  å¦‚æžœè¿”å›ž0ï¼Œåˆ™è¯´æ˜Žå? ä½?å¤±è´¥ï¼›å¦‚æžœè¿”å›ž1ï¼Œåˆ™è¯´æ˜Žå? ä½?æˆ?åŠŸ
 * <p>
 * 2 . expire()å‘½ä»¤å¯¹lockkeyè®¾ç½®è¶…æ—¶æ—¶é—´ï¼Œä¸ºçš„æ˜¯é?¿å…?æ­»é”?é—®é¢˜ã€‚
 * <p>
 * 3. æ‰§è¡Œå®Œä¸šåŠ¡ä»£ç ?å?Žï¼Œå?¯ä»¥é€šè¿‡deleteå‘½ä»¤åˆ é™¤keyã€‚
 * <p>
 * è¿™ä¸ªæ–¹æ¡ˆå…¶å®žæ˜¯å?¯ä»¥è§£å†³æ—¥å¸¸å·¥ä½œä¸­çš„éœ€æ±‚çš„ï¼Œä½†ä»ŽæŠ€æœ¯æ–¹æ¡ˆçš„æŽ¢è®¨ä¸Šæ?¥è¯´ï¼Œå?¯èƒ½è¿˜æœ‰ä¸€äº›å?¯ä»¥å®Œå–„çš„åœ°æ–¹ã€‚
 * æ¯”å¦‚ï¼Œå¦‚æžœåœ¨ç¬¬ä¸€æ­¥setnxæ‰§è¡Œæˆ?åŠŸå?Žï¼Œåœ¨expire()å‘½ä»¤æ‰§è¡Œæˆ?åŠŸå‰?ï¼Œå?‘ç”Ÿäº†å®•æœºçš„çŽ°è±¡ï¼Œ
 * é‚£ä¹ˆå°±ä¾?ç„¶ä¼šå‡ºçŽ°æ­»é”?çš„é—®é¢˜ï¼Œæ‰€ä»¥å¦‚æžœè¦?å¯¹å…¶è¿›è¡Œå®Œå–„çš„è¯?ï¼Œ
 * å?¯ä»¥ä½¿ç”¨redisçš„setnx()ã€?get()å’Œgetset()æ–¹æ³•æ?¥å®žçŽ°åˆ†å¸ƒå¼?é”?ã€‚
 *
 * @author xin.yuan
 * @version 1.0
 * @date 2017å¹´11æœˆ3æ—¥ ä¸Šå?ˆ10:21:27
 */
public class RedisLock {
    private static Logger logger = LoggerFactory.getLogger(RedisLock.class);

    //////////////////// é?™æ€?å¸¸é‡?å®šä¹‰å¼€å§‹///////////////////////
    /**
     * å­˜å‚¨åˆ°redisä¸­çš„é”?æ ‡å¿—
     */
    private static final String LOCKED = "LOCKED";

    /**
     * é»˜è®¤è¯·æ±‚é”?çš„è¶…æ—¶æ—¶é—´(ms æ¯«ç§’)
     */
    private static final long TIME_OUT = 100;

    /**
     * é»˜è®¤é”?çš„æœ‰æ•ˆæ—¶é—´(s)
     */
    public static final int EXPIRE = 60;
    //////////////////// é?™æ€?å¸¸é‡?å®šä¹‰ç»“æ?Ÿ///////////////////////

    /**
     * é”?æ ‡å¿—å¯¹åº”çš„key
     */
    private String key;

    /**
     * é”?çš„æœ‰æ•ˆæ—¶é—´(s)
     */
    private int expireTime = EXPIRE;

    /**
     * è¯·æ±‚é”?çš„è¶…æ—¶æ—¶é—´(ms)
     */
    private long timeOut = TIME_OUT;

    /**
     * é”?flag
     */
    private volatile boolean isLocked = false;
    /**
     * Redisç®¡ç?†æ¨¡æ?¿
     */
    private StringRedisTemplate redisTemplate;

    /**
     * æž„é€ æ–¹æ³•
     *
     * @param redisTemplate Redisç®¡ç?†æ¨¡æ?¿
     * @param key           é”?å®škey
     * @param expireTime    é”?è¿‡æœŸæ—¶é—´ ï¼ˆç§’ï¼‰
     * @param timeOut       è¯·æ±‚é”?è¶…æ—¶æ—¶é—´ (æ¯«ç§’)
     */
    public RedisLock(StringRedisTemplate redisTemplate, String key, int expireTime, long timeOut) {
        this.key = key;
        this.expireTime = expireTime;
        this.timeOut = timeOut;
        this.redisTemplate = redisTemplate;
    }

    /**
     * æž„é€ æ–¹æ³•
     *
     * @param redisTemplate Redisç®¡ç?†æ¨¡æ?¿
     * @param key           é”?å®škey
     * @param expireTime    é”?è¿‡æœŸæ—¶é—´
     */
    public RedisLock(StringRedisTemplate redisTemplate, String key, int expireTime) {
        this.key = key;
        this.expireTime = expireTime;
        this.redisTemplate = redisTemplate;
    }

    /**
     * æž„é€ æ–¹æ³•(é»˜è®¤è¯·æ±‚é”?è¶…æ—¶æ—¶é—´30ç§’ï¼Œé”?è¿‡æœŸæ—¶é—´60ç§’)
     *
     * @param redisTemplate Redisç®¡ç?†æ¨¡æ?¿
     * @param key           é”?å®škey
     */
    public RedisLock(StringRedisTemplate redisTemplate, String key) {
        this.key = key;
        this.redisTemplate = redisTemplate;
    }

    public boolean lock() {
        // ç³»ç»Ÿå½“å‰?æ—¶é—´ï¼Œçº³ç§’
        long nowTime = System.nanoTime();
        // è¯·æ±‚é”?è¶…æ—¶æ—¶é—´ï¼Œçº³ç§’
        long timeout = timeOut * 1000000;
        final Random random = new Random();

        // ä¸?æ–­å¾ªçŽ¯å?‘MasterèŠ‚ç‚¹è¯·æ±‚é”?ï¼Œå½“è¯·æ±‚æ—¶é—´(System.nanoTime() - nano)è¶…è¿‡è®¾å®šçš„è¶…æ—¶æ—¶é—´åˆ™æ”¾å¼ƒè¯·æ±‚é”?
        // è¿™ä¸ªå?¯ä»¥é˜²æ­¢ä¸€ä¸ªå®¢æˆ·ç«¯åœ¨æŸ?ä¸ªå®•æŽ‰çš„masterèŠ‚ç‚¹ä¸Šé˜»å¡žè¿‡é•¿æ—¶é—´
        // å¦‚æžœä¸€ä¸ªmasterèŠ‚ç‚¹ä¸?å?¯ç”¨äº†ï¼Œåº”è¯¥å°½å¿«å°?è¯•ä¸‹ä¸€ä¸ªmasterèŠ‚ç‚¹
        while ((System.nanoTime() - nowTime) < timeout) {
            // å°†é”?ä½œä¸ºkeyå­˜å‚¨åˆ°redisç¼“å­˜ä¸­ï¼Œå­˜å‚¨æˆ?åŠŸåˆ™èŽ·å¾—é”?
            if (redisTemplate.opsForValue().setIfAbsent(key, LOCKED)) {
                isLocked = true;
                // è®¾ç½®é”?çš„æœ‰æ•ˆæœŸï¼Œä¹Ÿæ˜¯é”?çš„è‡ªåŠ¨é‡Šæ”¾æ—¶é—´ï¼Œä¹Ÿæ˜¯ä¸€ä¸ªå®¢æˆ·ç«¯åœ¨å…¶ä»–å®¢æˆ·ç«¯èƒ½æŠ¢å? é”?ä¹‹å‰?å?¯ä»¥æ‰§è¡Œä»»åŠ¡çš„æ—¶é—´
                // å?¯ä»¥é˜²æ­¢å› å¼‚å¸¸æƒ…å†µæ— æ³•é‡Šæ”¾é”?è€Œé€ æˆ?æ­»é”?æƒ…å†µçš„å?‘ç”Ÿ
                redisTemplate.expire(key, expireTime, TimeUnit.SECONDS);

                // ä¸Šé”?æˆ?åŠŸç»“æ?Ÿè¯·æ±‚
                break;
            }
            // èŽ·å?–é”?å¤±è´¥æ—¶ï¼Œåº”è¯¥åœ¨éš?æœºå»¶æ—¶å?Žè¿›è¡Œé‡?è¯•ï¼Œé?¿å…?ä¸?å?Œå®¢æˆ·ç«¯å?Œæ—¶é‡?è¯•å¯¼è‡´è°?éƒ½æ— æ³•æ‹¿åˆ°é”?çš„æƒ…å†µå‡ºçŽ°
            // ç?¡çœ 10æ¯«ç§’å?Žç»§ç»­è¯·æ±‚é”?
            try {
                Thread.sleep(10, random.nextInt(50000));
            } catch (InterruptedException e) {
                logger.error("èŽ·å?–åˆ†å¸ƒå¼?é”?ä¼‘çœ è¢«ä¸­æ–­ï¼š", e);
            }
        }
        return isLocked;

    }

    public boolean isLock() {

        return redisTemplate.hasKey(key);
    }

    public void unlock() {
        // é‡Šæ”¾é”?
        // ä¸?ç®¡è¯·æ±‚é”?æ˜¯å?¦æˆ?åŠŸï¼Œå?ªè¦?å·²ç»?ä¸Šé”?ï¼Œå®¢æˆ·ç«¯éƒ½ä¼šè¿›è¡Œé‡Šæ”¾é”?çš„æ“?ä½œ
        if (isLocked) {
            redisTemplate.delete(key);
        }
    }

}
