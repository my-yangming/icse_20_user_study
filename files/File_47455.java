package com.abel.quartz.config;

import java.beans.PropertyVetoException;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import com.zaxxer.hikari.HikariDataSource;
import org.quartz.Job;
import org.quartz.JobDetail;
import org.quartz.Trigger;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.quartz.CronTriggerFactoryBean;
import org.springframework.scheduling.quartz.JobDetailFactoryBean;
import org.springframework.scheduling.quartz.SchedulerFactoryBean;

/**
 * Created by yangyibo on 2019/1/16.
 */
@Configuration
public class QuartzConfig {

    /**
     * 1.é€šè¿‡name+groupèŽ·å?–å”¯ä¸€çš„jobKey;2.é€šè¿‡groupnameæ?¥èŽ·å?–å…¶ä¸‹çš„æ‰€æœ‰jobkey
     */
    final static String GROUP_NAME = "QuartzJobGroups";

    @Value("${quartz.scheduler.instanceName}")
    private String quartzInstanceName;

    @Value("${spring.datasource.driverClassName}")
    private String myDSDriver;

    @Value("${spring.datasource.url}")
    private String myDSUrl;

    @Value("${spring.datasource.username}")
    private String myDSUser;

    @Value("${spring.datasource.password}")
    private String myDSPassword;

    @Value("${org.quartz.dataSource.myDS.maxConnections}")
    private int myDSMaxConnections;

    /**
     * è®¾ç½®å±žæ€§
     *
     * @return
     * @throws IOException
     */
    private Properties quartzProperties() throws IOException {
        Properties prop = new Properties();
        // è°ƒåº¦æ ‡è¯†å?? é›†ç¾¤ä¸­æ¯?ä¸€ä¸ªå®žä¾‹éƒ½å¿…é¡»ä½¿ç”¨ç›¸å?Œçš„å??ç§°
        prop.put("quartz.scheduler.instanceName", quartzInstanceName);
        // IDè®¾ç½®ä¸ºè‡ªåŠ¨èŽ·å?– æ¯?ä¸€ä¸ªå¿…é¡»ä¸?å?Œ
        prop.put("org.quartz.scheduler.instanceId", "AUTO");
        // ç¦?ç”¨quartzè½¯ä»¶æ›´æ–°
        prop.put("org.quartz.scheduler.skipUpdateCheck", "true");
        prop.put("org.quartz.scheduler.jmx.export", "true");


        // æ•°æ?®åº“ä»£ç?†ç±»ï¼Œä¸€èˆ¬org.quartz.impl.jdbcjobstore.StdJDBCDelegateå?¯ä»¥æ»¡è¶³å¤§éƒ¨åˆ†æ•°æ?®åº“
        prop.put("org.quartz.jobStore.driverDelegateClass", "org.quartz.impl.jdbcjobstore.StdJDBCDelegate");
        // æ•°æ?®ä¿?å­˜æ–¹å¼?ä¸ºæ•°æ?®åº“æŒ?ä¹…åŒ–
        prop.put("org.quartz.jobStore.class", "org.quartz.impl.jdbcjobstore.JobStoreTX");
        // æ•°æ?®åº“åˆ«å?? éš?ä¾¿å?–
        prop.put("org.quartz.jobStore.dataSource", "quartzDataSource");
        //prop.put("org.quartz.jobStore.dataSource", "myDS");
        // è¡¨çš„å‰?ç¼€ï¼Œé»˜è®¤QRTZ_
        prop.put("org.quartz.jobStore.tablePrefix", "QRTZ_");
        // æ˜¯å?¦åŠ å…¥é›†ç¾¤
        prop.put("org.quartz.jobStore.isClustered", "true");

        // è°ƒåº¦å®žä¾‹å¤±æ•ˆçš„æ£€æŸ¥æ—¶é—´é—´éš”
        prop.put("org.quartz.jobStore.clusterCheckinInterval", "20000");
        prop.put("org.quartz.jobStore.maxMisfiresToHandleAtATime", "1");
        // ä¿¡æ?¯ä¿?å­˜æ—¶é—´ ms é»˜è®¤å€¼60ç§’
        prop.put("org.quartz.jobStore.misfireThreshold", "120000");
        prop.put("org.quartz.jobStore.txIsolationLevelSerializable", "true");
        prop.put("org.quartz.jobStore.selectWithLockSQL", "SELECT * FROM {0}LOCKS WHERE LOCK_NAME = ? FOR UPDATE");

        // ç¨‹æ± çš„å®žçŽ°ç±»ï¼ˆä¸€èˆ¬ä½¿ç”¨SimpleThreadPoolå?³å?¯æ»¡è¶³å‡ ä¹Žæ‰€æœ‰ç”¨æˆ·çš„éœ€æ±‚ï¼‰
        prop.put("org.quartz.threadPool.class", "org.quartz.simpl.SimpleThreadPool");
        // å®šçº¿ç¨‹æ•°ï¼Œè‡³å°‘ä¸º1ï¼ˆæ— é»˜è®¤å€¼ï¼‰(ä¸€èˆ¬è®¾ç½®ä¸º1-100ä¹‹é—´çš„æ•´æ•°å?ˆé€‚)
        prop.put("org.quartz.threadPool.threadCount", "10");
        // è®¾ç½®çº¿ç¨‹çš„ä¼˜å…ˆçº§ï¼ˆæœ€å¤§ä¸ºjava.lang.Thread.MAX_PRIORITY 10ï¼Œæœ€å°?ä¸ºThread.MIN_PRIORITY 1ï¼Œé»˜è®¤ä¸º5ï¼‰
        prop.put("org.quartz.threadPool.threadPriority", "5");
        prop.put("org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread", "true");

        prop.put("org.quartz.plugin.triggHistory.class", "org.quartz.plugins.history.LoggingJobHistoryPlugin");
        prop.put("org.quartz.plugin.shutdownhook.class", "org.quartz.plugins.management.ShutdownHookPlugin");
        prop.put("org.quartz.plugin.shutdownhook.cleanShutdown", "true");

        //#è‡ªå®šä¹‰è¿žæŽ¥æ± 
        //org.quartz.dataSource.myDS.connectionProvider.class=com.poly.pay.schedule.DruidConnectionProvider

        return prop;
    }

    /**
     * æ•°æ?®æº?
     *
     * @return
     * @throws PropertyVetoException
     */
    @Bean
    public HikariDataSource createDataSource() throws PropertyVetoException {
        HikariDataSource dataSource = new HikariDataSource();
        dataSource.setJdbcUrl(myDSUrl);
        dataSource.setDriverClassName(myDSDriver);
        dataSource.setUsername(myDSUser);
        dataSource.setPassword(myDSPassword);
        dataSource.setMaximumPoolSize(myDSMaxConnections);
        return dataSource;
    }


    /**
     * åˆ›å»ºè§¦å?‘å™¨å·¥åŽ‚
     *
     * @param jobDetail
     * @param cronExpression
     * @return
     */
    private static CronTriggerFactoryBean cronTriggerFactoryBean(JobDetail jobDetail, String cronExpression) {
        CronTriggerFactoryBean factoryBean = new CronTriggerFactoryBean();
        factoryBean.setJobDetail(jobDetail);
        factoryBean.setCronExpression(cronExpression);
        return factoryBean;
    }


/****************************************************ä»¥ä¸‹é…?ç½®éœ€è¦?æ³¨æ„?******************************************************/


    /**
     * è°ƒåº¦å·¥åŽ‚
     * æ­¤å¤„é…?ç½®éœ€è¦?è°ƒåº¦çš„è§¦å?‘å™¨ ä¾‹å¦‚ executeJobTrigger
     *
     * @param executeJobTrigger
     * @return
     * @throws IOException
     * @throws PropertyVetoException
     */
    @Bean
    public SchedulerFactoryBean schedulerFactoryBean(@Qualifier("executeJobTrigger") Trigger executeJobTrigger) throws IOException, PropertyVetoException {
        SchedulerFactoryBean factory = new SchedulerFactoryBean();
        // this allows to update triggers in DB when updating settings in config file:
        //ç”¨äºŽquartzé›†ç¾¤,QuartzScheduler å?¯åŠ¨æ—¶æ›´æ–°å·±å­˜åœ¨çš„Jobï¼Œè¿™æ ·å°±ä¸?ç”¨æ¯?æ¬¡ä¿®æ”¹targetObjectå?Žåˆ é™¤qrtz_job_detailsè¡¨å¯¹åº”è®°å½•äº†
        factory.setOverwriteExistingJobs(true);
        //ç”¨äºŽquartzé›†ç¾¤,åŠ è½½quartzæ•°æ?®æº?
        //factory.setDataSource(dataSource);
        //QuartzScheduler å»¶æ—¶å?¯åŠ¨ï¼Œåº”ç”¨å?¯åŠ¨å®Œ10ç§’å?Ž QuartzScheduler å†?å?¯åŠ¨
        //factory.setStartupDelay(10);
        //ç”¨äºŽquartzé›†ç¾¤,åŠ è½½quartzæ•°æ?®æº?é…?ç½®
        factory.setAutoStartup(true);
        factory.setQuartzProperties(quartzProperties());
        factory.setApplicationContextSchedulerContextKey("applicationContext");
        factory.setDataSource(createDataSource());
        //æ³¨å†Œè§¦å?‘å™¨
        Trigger[] triggers = {executeJobTrigger};
        factory.setTriggers(triggers);

        return factory;
    }


    /**
     * åŠ è½½è§¦å?‘å™¨
     *
     * æ–°å»ºè§¦å?‘å™¨è¿›è¡Œjob çš„è°ƒåº¦  ä¾‹å¦‚ executeJobDetail
     * @param jobDetail
     * @return
     */
    @Bean(name = "executeJobTrigger")
    public CronTriggerFactoryBean executeJobTrigger(@Qualifier("executeJobDetail") JobDetail jobDetail) {
        //æ¯?å¤©å‡Œæ™¨3ç‚¹æ‰§è¡Œ
        return cronTriggerFactoryBean(jobDetail, "0 1 0 * * ? ");
    }


    /**
     * åŠ è½½job
     *
     * æ–°å»ºjob ç±»ç”¨æ?¥ä»£ç?†
     *
     *
     * @return
     */
    @Bean
    public JobDetailFactoryBean executeJobDetail() {
        return createJobDetail(InvokingJobDetailFactory.class, GROUP_NAME, "executeJob");
    }


    /**
     * æ‰§è¡Œè§„åˆ™jobå·¥åŽ‚
     *
     * é…?ç½®job ç±»ä¸­éœ€è¦?å®šæ—¶æ‰§è¡Œçš„ æ–¹æ³•  execute
     * @param jobClass
     * @param groupName
     * @param targetObject
     * @return
     */
    private static JobDetailFactoryBean createJobDetail(Class<? extends Job> jobClass,
                                                        String groupName,
                                                        String targetObject) {
        JobDetailFactoryBean factoryBean = new JobDetailFactoryBean();
        factoryBean.setJobClass(jobClass);
        factoryBean.setDurability(true);
        factoryBean.setRequestsRecovery(true);
        factoryBean.setGroup(groupName);
        Map<String, String> map = new HashMap<>();
        map.put("targetMethod", "execute");
        map.put("targetObject", targetObject);
        factoryBean.setJobDataAsMap(map);
        return factoryBean;
    }

}
