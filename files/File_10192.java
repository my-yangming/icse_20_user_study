/*
 * Symphony - A modern community (forum/BBS/SNS/blog) platform written in Java.
 * Copyright (C) 2012-present, b3log.org
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package org.b3log.symphony.util;

import jodd.io.FileUtil;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang.StringUtils;
import org.b3log.latke.Latkes;
import org.b3log.latke.ioc.BeanManager;
import org.b3log.latke.logging.Level;
import org.b3log.latke.logging.Logger;
import org.b3log.latke.service.LangPropsService;
import org.b3log.latke.util.Strings;
import org.b3log.symphony.SymphonyServletListener;
import org.b3log.symphony.model.Common;
import org.b3log.symphony.model.Option;
import org.b3log.symphony.service.OptionQueryService;
import org.json.JSONObject;

import javax.net.ssl.KeyManager;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.SecureRandom;
import java.security.cert.X509Certificate;
import java.util.*;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ThreadPoolExecutor;

/**
 * Symphony utilities.
 *
 * @author <a href="http://88250.b3log.org">Liang Ding</a>
 * @version 1.9.0.6, May 9, 2019
 * @since 0.1.0
 */
public final class Symphonys {

    /**
     * Logger.
     */
    private static final Logger LOGGER = Logger.getLogger(Symphonys.class);

    /**
     * Configurations.
     */
    private static final Properties CFG = new Properties();

    /**
     * User-Agent.
     */
    public static final String USER_AGENT_BOT = "Sym/" + SymphonyServletListener.VERSION + "; +https://github.com/b3log/symphony";

    /**
     * Reserved tags.
     */
    public static final String[] RESERVED_TAGS;

    /**
     * White list - tags.
     */
    public static final String[] WHITE_LIST_TAGS;

    /**
     * Reserved user names.
     */
    public static final String[] RESERVED_USER_NAMES;

    /**
     * Thread pool.
     */
    public static final ThreadPoolExecutor EXECUTOR_SERVICE = (ThreadPoolExecutor) Executors.newFixedThreadPool(128);

    /**
     * Cron thread pool.
     */
    public static final ScheduledExecutorService SCHEDULED_EXECUTOR_SERVICE = Executors.newScheduledThreadPool(4);

    /**
     * Available processors.
     */
    public static final int PROCESSORS = Runtime.getRuntime().availableProcessors();

    static {
        try {
            InputStream resourceAsStream;
            final String symPropsEnv = System.getenv("SYM_PROPS");
            if (StringUtils.isNotBlank(symPropsEnv)) {
                LOGGER.trace("Loading symphony.properties from env var [$SYM_PROPS=" + symPropsEnv + "]");
                resourceAsStream = new FileInputStream(symPropsEnv);
            } else {
                LOGGER.trace("Loading symphony.properties from classpath [/symphony.properties]");
                resourceAsStream = Latkes.class.getResourceAsStream("/symphony.properties");
            }

            CFG.load(resourceAsStream);
        } catch (final Exception e) {
            LOGGER.log(Level.ERROR, "Loads symphony.properties failed, exited", e);

            System.exit(-1);
        }
    }

    /**
     * å?‘å¸–æœ€å°?æ—¶é—´é—´éš”ï¼Œç”¨äºŽé˜²æ­¢åˆ·å±?ï¼Œå?•ä½?æ¯«ç§’.
     */
    public static final long MIN_STEP_ARTICLE_TIME = getLong("minStepArticleTime");

    /**
     * å›žå¸–æœ€å°?æ—¶é—´é—´éš”ï¼Œç”¨äºŽé˜²æ­¢åˆ·å±?ï¼Œå?•ä½?æ¯«ç§’.
     */
    public static final long MIN_STEP_CMT_TIME = getLong("minStepCmtTime");

    /**
     * è?Šå¤©å®¤æœ€å°?å?‘è¨€æ—¶é—´é—´éš”ï¼Œç”¨äºŽé˜²æ­¢åˆ·å±?ï¼Œå?•ä½?æ¯«ç§’.
     */
    public static final long MIN_STEP_CHAT_TIME = getLong("minStepChatTime");

    /**
     * ç”¨æˆ·å?‘å¸ƒå¸–å­?å¿…é¡»æ³¨å†Œæ—¶é—´è¶…è¿‡è¯¥è®¾ç½®ï¼Œå?•ä½?æ¯«ç§’ã€‚é»˜è®¤ 0 ä¸ºä¸?é™?åˆ¶ï¼Œåˆšæ³¨å†Œå®Œå°±å?¯ä»¥å?‘å¸–.
     */
    public static final long NEWBIE_FIRST_ARTICLE = getLong("newbieFirstArticle");

    /**
     * å¸–å­?åˆ—è¡¨å¤§å°?.
     */
    public static final int ARTICLE_LIST_CNT = getInt("articleListCnt");

    /**
     * å¸–å­?åˆ—è¡¨åˆ†é¡µçª—å?£å¤§å°?.
     */
    public static final int ARTICLE_LIST_WIN_SIZE = getInt("articleListWindowSize");

    /**
     * å¸–å­?åˆ—è¡¨æ¯?ç¯‡å¸–å­?çš„å?‚ä¸Žè€…æ˜¾ç¤ºæ•°.
     */
    public static final int ARTICLE_LIST_PARTICIPANTS_CNT = getInt("articleListParticipantsCnt");

    /**
     * é¦–é¡µã€?ä¾§æ ?è¿‘æœŸçƒ­è®®å¸–å­?æ˜¾ç¤ºæ•°.
     */
    public static final int SIDE_HOT_ARTICLES_CNT = getInt("sideHotArticlesCnt");

    /**
     * é¦–é¡µã€?ä¾§æ ?æ¸…é£Žæ˜Žæœˆæ˜¾ç¤ºæ•°.
     */
    public static final int SIDE_BREEZEMOON_CNT = getInt("sideBreezemoonsCnt");

    /**
     * é¦–é¡µã€?ä¾§æ ?è?Šå¤©å®¤æ˜¾ç¤ºæ•°.
     */
    public static final int SIDE_CHATROOM_MSG_CNT = getInt("sideChatroommsgsCnt");

    /**
     * ä¾§æ ?éš?æœºæ–‡ç« æ˜¾ç¤ºæ•°.
     */
    public static final int SIDE_RANDOM_ARTICLES_CNT = getInt("sideRandomArticlesCnt");

    /**
     * ä¾§æ ?æ ‡ç­¾æ˜¾ç¤ºæ•°.
     */
    public static final int SIDE_TAGS_CNT = getInt("sideTagsCnt");

    /**
     * ç›¸å…³æ–‡ç« æ˜¾ç¤ºæ•°.
     */
    public static final int SIDE_RELEVANT_ARTICLES_CNT = getInt("sideRelevantArticlesCnt");

    /**
     * ç”¨æˆ·ä¸»é¡µåˆ—è¡¨å¤§å°?.
     */
    public static final int USER_HOME_LIST_CNT = getInt("userHomeListCnt");

    /**
     * ç”¨æˆ·ä¸»é¡µåˆ—è¡¨åˆ†é¡µçª—å?£å¤§å°?
     */
    public static final int USER_HOME_LIST_WIN_SIZE = getInt("userHomeListWindowSize");

    /**
     * é€šçŸ¥åˆ—è¡¨å¤§å°?.
     */
    public static final int NOTIFICATION_LIST_CNT = getInt("notificationListCnt");

    /**
     * é€šçŸ¥åˆ—è¡¨åˆ†é¡µçª—å?£å¤§å°?.
     */
    public static final int NOTIFICATION_LIST_WIN_SIZE = getInt("notificationListWindowSize");

    /**
     * å¸–å­?å›žå¸–åˆ—è¡¨å¤§å°?.
     */
    public static final int ARTICLE_COMMENTS_CNT = getInt("articleCommentsCnt");

    /**
     * å¸–å­?å›žå¸–åˆ—è¡¨åˆ†é¡µçª—å?£å¤§å°?.
     */
    public static final int ARTICLE_COMMENTS_WIN_SIZE = getInt("articleCommentsWindowSize");

    /**
     * æ ‡ç­¾åˆ—è¡¨ï¼ˆ/tagsï¼‰å¤§å°?.
     */
    public static final int TAGS_CNT = getInt("tagsCnt");

    /**
     * æ ‡ç­¾åˆ—è¡¨åˆ†é¡µçª—å?£å¤§å°?.
     */
    public static final int TAGS_WIN_SIZE = getInt("tagsWindowSize");

    /**
     * æ ‡ç­¾çš„ç›¸å…³æ ‡ç­¾æ˜¾ç¤ºæ•°.
     */
    public static final int TAG_RELATED_TAGS_CNT = getInt("tagRelatedTagsCnt");

    /**
     * æ ‡ç­¾çš„ç›¸å…³æ ‡ç­¾æŸ¥è¯¢æ?ƒé‡?ï¼Œå?ªæœ‰è¶…è¿‡è¯¥å€¼æ‰?ä¼šè¢«è®¤ä¸ºæ˜¯ç›¸å…³æ ‡ç­¾.
     */
    public static final int TAG_RELATED_WEIGHT = getInt("tagRelatedWeight");

    /**
     * æ ‡ç­¾å…³æ³¨è€…åˆ—è¡¨å¤§å°?.
     */
    public static final int TAG_FOLLOWERS_CNT = getInt("tagFollowersCnt");

    /**
     * æ ‡ç­¾å…³æ³¨è€…åˆ—è¡¨åˆ†é¡µçª—å?£å¤§å°?.
     */
    public static final int TAG_FOLLOWERS_WIN_SIZE = getInt("tagFollowersWindowSize");

    /**
     * å?ŒåŸŽç”¨æˆ·åˆ—è¡¨å¤§å°?.
     */
    public static final int CITY_USERS_CNT = getInt("cityUsersCnt");

    /**
     * å?ŒåŸŽç”¨æˆ·åˆ—è¡¨åˆ†é¡µçª—å?£å¤§å°?.
     */
    public static final int CITY_USERS_WIN_SIZE = getInt("cityUsersWindowSize");

    /**
     * æŽ’è¡Œæ¦œå¤§å°?.
     */
    public static final int TOP_CNT = getInt("topCnt");

    /**
     * è?Šå¤©å®¤æ¶ˆæ?¯æ˜¾ç¤ºæ•°.
     */
    public static final int CHATROOMMSGS_CNT = getInt("chatroommsgsCnt");

    /**
     * è?Šå¤©å®¤æ¶ˆæ?¯åˆ—è¡¨åˆ†é¡µçª—å?£å¤§å°?.
     */
    public static final int CHATROOMMSGS_WIN_SIZE = getInt("chatroommsgsWindowSize");

    /**
     * PC ç«¯é»˜è®¤ä¸»é¢˜å??.
     */
    public static final String SKIN_DIR_NAME = get("skinDirName");

    /**
     * ç§»åŠ¨ç«¯é»˜è®¤ä¸»é¢˜å??.
     */
    public static final String MOBILE_SKIN_DIR_NAME = get("mobileSkinDirName");

    /**
     * ç¬¬ä¸‰æ–¹ç«™ç‚¹ç»Ÿè®¡ä»£ç ?é…?ç½®. å¦‚æžœéœ€è¦?æ?¢è¡Œè¯·åœ¨è¡Œå°¾åŠ ä¸Š '\'ï¼Œæ¯”å¦‚ç™¾åº¦ç»Ÿè®¡çš„ä»£ç ?å¦‚ä¸‹ï¼š
     *
     * <pre><code>
     * &lt;script&gt;\
     * var _hmt = _hmt || [];\
     * (function() {\
     *   var hm = document.createElement("script");\
     *   hm.src = "//hm.baidu.com/hm.js?f241a238dc8343347478081db6c7cf5c";\
     *   var s = document.getElementsByTagName("script")[0];\
     *   s.parentNode.insertBefore(hm, s);\
     * })();\
     * &lt;/script&gt;
     * </code>
     * </pre>
     */
    public static final String SITE_VISIT_STATISTIC_CODE = get("siteVisitStatCode");

    /**
     * ä¸Šä¼ æ¸ é?“é…?ç½®ï¼Œå?¯é…?ç½®ä¸ºä¸ƒç‰›äº‘ {@code qiniu} æˆ–è€…æœ¬åœ° {@code local}.
     */
    public static final String UPLOAD_CHANNEL = Symphonys.get("upload.channel");

    /**
     * æ˜¯å?¦å?¯ç”¨ä¸ƒç‰›äº‘æ¸ é?“ä¸Šä¼ .
     */
    public static final boolean QN_ENABLED = "qiniu".equalsIgnoreCase(UPLOAD_CHANNEL);

    /**
     * å…?è®¸ä¸Šä¼ å›¾ç‰‡æœ€å¤§å€¼ï¼Œå?•ä½?å­—èŠ‚.
     */
    public static final long UPLOAD_IMG_MAX = Symphonys.getLong("upload.img.maxSize");

    /**
     * å…?è®¸ä¸Šä¼ æ–‡ä»¶ï¼ˆé?žå›¾ç‰‡ï¼‰çš„æœ€å¤§å€¼ï¼Œå?•ä½?å­—èŠ‚.
     */
    public static final long UPLOAD_FILE_MAX = Symphonys.getLong("upload.file.maxSize");

    /**
     * å…?è®¸ä¸Šä¼ æ–‡ä»¶çš„å?Žç¼€ï¼Œä½¿ç”¨ {@code ,} åˆ†éš”.
     */
    public static final String UPLOAD_SUFFIX = get("upload.suffix");

    /**
     * æœ¬åœ°ä¸Šä¼ ç›®å½•ï¼Œå¦‚æžœå?¯ç”¨äº†ä¸ƒç‰›äº‘çš„è¯?è¯¥é¡¹é…?ç½®ä¼šè¢«å¿½ç•¥.
     * ä½¿ç”¨ç»?å¯¹è·¯å¾„æŒ‡å®šæ–‡ä»¶å­˜æ”¾è·¯å¾„ï¼Œä¸?è¦?æŒ‡å®šåˆ°å®¹å™¨ä¸‹ï¼Œä»¥å…?ç•™ä¸‹å®‰å…¨éš?æ‚£.
     */
    public static String UPLOAD_LOCAL_DIR = get("upload.local.dir");

    static {
        final String userHome = System.getProperty("user.home");
        UPLOAD_LOCAL_DIR = StringUtils.replace(UPLOAD_LOCAL_DIR, "~", userHome);
        // åˆ?å§‹åŒ–ä¸Šä¼ ç›®å½•ï¼Œè¯·æ³¨æ„?æœ?åŠ¡å™¨ä¸Šæ–‡ä»¶è¯»å†™æ?ƒé™?
        if (!Symphonys.QN_ENABLED) {
            final File file = new File(Symphonys.UPLOAD_LOCAL_DIR);
            if (!FileUtil.isExistingFolder(file)) {
                try {
                    FileUtil.mkdirs(Symphonys.UPLOAD_LOCAL_DIR);
                } catch (IOException ex) {
                    LOGGER.log(Level.ERROR, "Init upload dir failed", ex);

                    System.exit(-1);
                }
            }

            LOGGER.info("Uses dir [" + file.getAbsolutePath() + "] for file uploading");
        }
    }

    /**
     * ä¸Šä¼ ä¸ƒç‰›äº‘ AK.
     */
    public static final String UPLOAD_QINIU_AK = get("upload.qiniu.accessKey");

    /**
     * ä¸Šä¼ ä¸ƒç‰›äº‘ SK.
     */
    public static final String UPLOAD_QINIU_SK = get("upload.qiniu.secretKey");

    /**
     * ä¸Šä¼ ä¸ƒç‰›äº‘åŸŸå??. ä½¿ç”¨å?•ç‹¬çš„åŸŸå??ï¼Œé?¿å…?å‡ºçŽ°å®‰å…¨éš?æ‚£.
     */
    public static final String UPLOAD_QINIU_DOMAIN = get("upload.qiniu.domain");

    /**
     * ä¸Šä¼ ä¸ƒç‰›äº‘å­˜å‚¨ç©ºé—´.
     */
    public static final String UPLOAD_QINIU_BUCKET = get("upload.qiniu.bucket");

    /**
     * ç”¨æˆ·æ³¨å†Œåˆ?å§‹åŒ–çš„ç§¯åˆ†å€¼.
     */
    public static final int POINT_INIT = getInt("pointInit");

    /**
     * å?‘å¸–æ‰€éœ€ç§¯åˆ†å€¼.
     */
    public static final int POINT_ADD_ARTICLE = getInt("pointAddArticle");

    /**
     * æ›´æ–°å¸–å­?æ‰€éœ€ç§¯åˆ†å€¼.
     */
    public static final int POINT_UPDATE_ARTICLE = getInt("pointUpdateArticle");

    /**
     * å›žå¸–æ‰€éœ€ç§¯åˆ†å€¼.
     */
    public static final int POINT_ADD_COMMENT = getInt("pointAddComment");

    /**
     * æ›´æ–°å›žå¸–æ‰€éœ€ç§¯åˆ†å€¼.
     */
    public static final int POINT_UPDATE_COMMENT = getInt("pointUpdateComment");

    /**
     * å›žå¸–ç»™è‡ªå·±çš„å¸–å­?æ‰€éœ€ç§¯åˆ†å€¼.
     */
    public static final int POINT_ADD_SELF_ARTICLE_COMMENT = getInt("pointAddSelfArticleComment");

    /**
     * é‚€è¯·æ–°ç”¨æˆ·æ³¨å†ŒèŽ·å¾—å¥–åŠ±ç§¯åˆ†å€¼ï¼ˆé‚€è¯·äººå’Œè¢«é‚€è¯·äººéƒ½ä¼šèŽ·å¾—å¥–åŠ±ï¼‰.
     */
    public static final int POINT_INVITE_REGISTER = getInt("pointInviteRegister");

    /**
     * æ¯?æ—¥ç­¾åˆ°æ´»åŠ¨å¥–åŠ±éš?æœºç§¯åˆ†å€¼ä¸‹é™?.
     */
    public static final int POINT_ACTIVITY_CHECKIN_MIN = getInt("pointActivityCheckinMin");

    /**
     * æ¯?æ—¥ç­¾åˆ°æ´»åŠ¨å¥–åŠ±éš?æœºç§¯åˆ†å€¼ä¸Šé™?.
     */
    public static final int POINT_ACTIVITY_CHECKIN_MAX = getInt("pointActivityCheckinMax");

    /**
     * æ¯?æ—¥ç­¾åˆ°æ´»åŠ¨è¿žç»­ç­¾åˆ° 10 å¤©å¥–åŠ±ç§¯åˆ†å€¼.
     */
    public static final int POINT_ACTIVITY_CHECKINT_STREAK = getInt("pointActivityCheckinStreak");

    /**
     * æ„Ÿè°¢å›žå¸–ç§¯åˆ†å€¼.
     */
    public static final int POINT_THANK_COMMENT = getInt("pointThankComment");

    /**
     * å?‘å¸ƒå?ŒåŸŽå¹¿æ’­æ‰€éœ€ç§¯åˆ†å€¼.
     */
    public static final int POINT_ADD_ARTICLE_BROADCAST = getInt("pointAddArticleBroadcast");

    /**
     * å?¯ç”¨å¸–å­?æ‰“èµ?åŒºæ‰€éœ€ç§¯åˆ†å€¼.
     */
    public static final int POINT_ADD_ARTICLE_REWARD = getInt("pointAddArticleReward");

    /**
     * è‰¾ç‰¹æ‰€æœ‰å›žå¸–å?‚ä¸Žè€…æ¯?ä¸ªå›žå¸–è€…æ‰€éœ€ç§¯åˆ†å€¼.
     */
    public static final int POINT_AT_PARTICIPANTS = getInt("pointAtParticipants");

    /**
     * ç½®é¡¶å¸–å­?æ‰€éœ€ç§¯åˆ†å€¼.
     */
    public static final int POINT_STICK_ARTICLE = getInt("pointStickArticle");

    /**
     * æ„Ÿè°¢å¸–å­?ç§¯åˆ†å€¼.
     */
    public static final int POINT_THANK_ARTICLE = getInt("pointThankArticle");

    /**
     * ç½®é¡¶å¸–å­?æ—¶é•¿ï¼Œå?•ä½?æ¯«ç§’.
     */
    public static final long STICK_ARTICLE_TIME = getLong("stickArticleTime");

    /**
     * å†™å­—æ´»åŠ¨å¥–åŠ±ç§¯åˆ†å€¼.
     */
    public static final int POINT_ACTIVITY_CHAR = getInt("pointActivityCharacter");

    /**
     * æ•°æ?®å¯¼å‡ºæ‰€éœ€ç§¯åˆ†å€¼.
     */
    public static final int POINT_DATA_EXPORT = getInt("pointDataExport");

    /**
     * è´­ä¹°é‚€è¯·ç ?æ‰€éœ€ç§¯åˆ†å€¼.
     */
    public static final int POINT_BUY_INVITECODE = getInt("pointBuyInvitecode");

    /**
     * é‚€è¯·ç ?è¢«ä½¿ç”¨å¥–åŠ±ç§¯åˆ†å€¼.
     */
    public static final int POINT_INVITECODE_USED = getInt("pointInvitecodeUsed");

    /**
     * è´ªå?ƒè›‡æ‰€éœ€ç§¯åˆ†å€¼.
     */
    public static final int POINT_ACTIVITY_EATINGSNAKE = getInt("pointActivityEatingSnake");

    /**
     * è´ªå?ƒè›‡å¥–åŠ±ç§¯åˆ†å€¼ä¸Šé™?.
     */
    public static final int POINT_ACTIVITY_EATINGSNAKE_COLLECT_MAX = getInt("pointActivityEatingSnakeCollectMax");

    /**
     * ä¼˜å…ˆï¼ˆåŠ ç²¾ï¼‰å¸–å­?å¥–åŠ±ç§¯åˆ†å€¼.
     */
    public static final int POINT_PERFECT_ARTICLE = getInt("pointPerfectArticle");

    /**
     * äº”å­?æ£‹è¾“èµ¢ç§¯åˆ†å€¼.
     */
    public static final int POINT_ACTIVITY_GOBANG = getInt("pointActivityGobang");

    /**
     * ä¸¾æŠ¥ç»?ç®¡ç?†å‘˜å¤„ç?†å?Žå¥–åŠ±ç§¯åˆ†å€¼.
     */
    public static final int POINT_REPORT_HANDLED = getInt("pointReportHandled");

    /**
     * æ›´æ–°ç”¨æˆ·æ‰€éœ€ç§¯åˆ†å€¼.
     */
    public static final int POINT_CHANGE_USERNAME = getInt("pointChangeUsername");

    /**
     * ç§¯åˆ†è½¬è´¦åŠŸèƒ½æœ€ä½Žé—¨æ§›ç§¯åˆ†å€¼ï¼Œè½¬è´¦å?Žä½™é¢?å¿…é¡»å¤§äºŽç­‰äºŽè¯¥å€¼. è®¾ç½®ä¸€å®šçš„é—¨æ§›å€¼æœ‰åŠ©äºŽé˜²æ­¢ç”¨æˆ·é€šè¿‡è´¦å?·äº’è½¬åˆ·ç§¯åˆ†ã€‚
     */
    public static final int POINT_TRANSER_MIN = getInt("pointTransferMin");

    /**
     * ç§¯åˆ†å…‘æ?¢çº¢åŒ…æœ€ä½Žé—¨æ§›ç§¯åˆ†å€¼ï¼Œå…‘æ?¢å?Žä½™é¢?å¿…é¡»å¤§äºŽç­‰äºŽè¯¥å€¼.
     */
    public static final int POINT_EXCHANGE_MIN = getInt("pointExchangeMin");

    /**
     * ç§¯åˆ†å…‘æ?¢çº¢åŒ…å…‘æ?¢æ¯”ï¼Œé»˜è®¤æ˜¯ 150 ç§¯åˆ†å…‘æ?¢ ï¿¥1.
     */
    public static final int POINT_EXCHANGE_UNIT = getInt("pointExchangeUnit");

    /**
     * æ˜¯å?¦å…³é—­ä¸Šè¯?å?šå½©æ´»åŠ¨.
     */
    public static final boolean ACTIVITY_1A0001_CLOSED = getBoolean("activity1A0001Closed");

    /**
     * å?‚ä¸Žä¸Šè¯?å?šå½©æ´»åŠ¨æ´»è·ƒåº¦é—¨æ§›å€¼ï¼Œé…?ç½®çš„æ˜¯ç™¾åˆ†æ¯”ï¼Œä¸€èˆ¬ç”¨é»˜è®¤å€¼å°±å¥½.
     */
    public static final float ACTIVITY_1A0001_LIVENESS_THRESHOLD = getFloat("activity1A0001LivenessThreshold");

    /**
     * æ˜¨æ—¥æ´»è·ƒå¥–åŠ± - å?‚ä¸Žä¸€ä¸ªæ´»åŠ¨çš„è¿”ç‚¹.
     */
    public static final float ACTIVITY_YESTERDAY_REWARD_ACTIVITY_PER = getFloat("activitYesterdayLivenessReward.activity.perPoint");

    /**
     * æ˜¨æ—¥æ´»è·ƒå¥–åŠ± - å?‘å¸ƒä¸€ç¯‡å¸–å­?çš„è¿”ç‚¹.
     */
    public static final float ACTIVITY_YESTERDAY_REWARD_ARTICLE_PER = getFloat("activitYesterdayLivenessReward.article.perPoint");

    /**
     * æ˜¨æ—¥æ´»è·ƒå¥–åŠ± - å?‘å¸ƒä¸€æ?¡å›žå¸–çš„è¿”ç‚¹
     */
    public static final float ACTIVITY_YESTERDAY_REWARD_COMMENT_PER = getFloat("activitYesterdayLivenessReward.comment.perPoint");

    /**
     * æ˜¨æ—¥æ´»è·ƒå¥–åŠ± - ä¸€ä¸ª PV çš„è¿”ç‚¹
     */
    public static final float ACTIVITY_YESTERDAY_REWARD_PV_PER = getFloat("activitYesterdayLivenessReward.pv.perPoint");

    /**
     * æ˜¨æ—¥æ´»è·ƒå¥–åŠ± - ä¸€æ¬¡æ‰“èµ?çš„è¿”ç‚¹.
     */
    public static final float ACTIVITY_YESTERDAY_REWARD_REWARD_PER = getFloat("activitYesterdayLivenessReward.reward.perPoint");

    /**
     * æ˜¨æ—¥æ´»è·ƒå¥–åŠ± - ä¸€æ¬¡æ„Ÿè°¢æ“?ä½œçš„è¿”ç‚¹.
     */
    public static final float ACTIVITY_YESTERDAY_REWARD_THANK_PER = getFloat("activitYesterdayLivenessReward.thank.perPoint");

    /**
     * æ˜¨æ—¥æ´»è·ƒå¥–åŠ± - ä¸€æ¬¡ç‚¹èµžç‚¹è¸©çš„è¿”ç‚¹.
     */
    public static final float ACTIVITY_YESTERDAY_REWARD_VOTE_PER = getFloat("activitYesterdayLivenessReward.vote.perPoint");

    /**
     * æ˜¨æ—¥æ´»è·ƒå¥–åŠ± - ä¸€æ¬¡é‡‡çº³å›žç­”çš„è¿”ç‚¹.
     */
    public static final float ACTIVITY_YESTERDAY_REWARD_ACCEPT_ANSWER_PER = getFloat("activitYesterdayLivenessReward.acceptAnswer.perPoint");

    /**
     * æ˜¨æ—¥æ´»è·ƒå¥–åŠ±ç§¯åˆ†å€¼ä¸Šé™?.
     */
    public static final int ACTIVITY_YESTERDAY_REWARD_MAX = getInt("activitYesterdayLivenessReward.maxPoint");

    /**
     * é‚®ä»¶æ¸ é?“ï¼Œå?¯é…?ç½®ä¸ºæœ¬åœ° {@code local}ã€?é˜¿é‡Œäº‘ {@code aliyun} æˆ–è€… SendCloud {@code sendcloud}.
     * ä¸?å»ºè®®ç”¨æœ¬åœ°æ¸ é?“ï¼Œä¼šæœ‰å¾ˆé«˜æ¦‚çŽ‡è¢«æ”¶ä»¶æ–¹æœ?åŠ¡æ‹’ä¿¡ã€‚
     */
    public static final String MAIL_CHANNEL = get("mail.channel");

    /**
     * æŒ‰é‚®ç®±å?Žç¼€æŒ‡å®šé‚®ä»¶æ¸ é?“ï¼Œæ¯”å¦‚é…?ç½® {@literal mail.channel.mailDomains=aliyun:163.com,126.com;sendcloud:qq.com} è¡¨ç¤º
     *
     * <ul>
     * <li>163.com, 126.com ä½¿ç”¨ aliyun æ¸ é?“</li>
     * <li>qq.com ä½¿ç”¨ sendcloud</li>
     * </ul>
     * <p>
     * å…¶ä»–å?Žç¼€é»˜è®¤ä½¿ç”¨ {@code mail.channel} çš„é…?ç½®
     */
    public static final String MAIL_CHANNEL_MAIL_DOMAINS = get("mail.channel.mailDomains");

    /**
     * å…?è®¸ä½¿ç”¨çš„é‚®ç®±å?Žç¼€ï¼Œç•™ç©ºåˆ™ä¸?åˆ¤æ–­
     */
    public static final String MAIL_DOMAINS = get("mail.domains");

    /**
     * ç¾¤å?‘é‚®ä»¶è®¢é˜…æ—¶çš„æŽ¨è??å¸–å­?åˆ—è¡¨å¤§å°?.
     */
    public static final int MAIL_BATCH_ARTICLE_SIZE = getInt("mail.batch.articleSize");

    /**
     * é‚®ä»¶æ¸ é?“ {@code sendcloud} API USER.
     */
    public static final String MAIL_SENDCLOUD_API_USER = get("mail.sendcloud.apiUser");

    /**
     * é‚®ä»¶æ¸ é?“ {@code sendcloud} API KEY.
     */
    public static final String MAIL_SENDCLOUD_API_KEY = get("mail.sendcloud.apiKey");

    /**
     * é‚®ä»¶æ¸ é?“ {@code sendcloud} å?‘ä¿¡åœ°å?€.
     */
    public static final String MAIL_SENDCLOUD_FROM = get("mail.sendcloud.from");

    /**
     * é‚®ä»¶æ¸ é?“ {@code sendcloud} æ‰¹é‡?å?‘é€? API USER.
     */
    public static final String MAIL_SENDCLOUD_BATCH_API_USER = get("mail.sendcloud.batch.apiUser");

    /**
     * é‚®ä»¶æ¸ é?“ {@code sendcloud} æ‰¹é‡?å?‘é€? API KEY.
     */
    public static final String MAIL_SENDCLOUD_BATCH_API_KEY = get("mail.sendcloud.batch.apiKey");

    /**
     * é‚®ä»¶æ¸ é?“ {@code sendcloud} æ‰¹é‡?å?‘é€?å?‘ä¿¡åœ°å?€.
     */
    public static final String MAIL_SENDCLOUD_BATCH_FROM = get("mail.sendcloud.batch.from");

    /**
     * é‚®ä»¶æ¸ é?“ {@code aliyun} Access Key.
     */
    public static final String MAIL_ALIYUN_AK = get("mail.aliyun.accessKey");

    /**
     * é‚®ä»¶æ¸ é?“ {@code aliyun} Secret Key.
     */
    public static final String MAIL_ALIYUN_SK = get("mail.aliyun.accessSecret");

    /**
     * é‚®ä»¶æ¸ é?“ {@code aliyun} å?‘ä¿¡åœ°å?€.
     */
    public static final String MAIL_ALIYUN_FROM = get("mail.aliyun.from");

    /**
     * é‚®ä»¶æ¸ é?“ {@code aliyun} æ‰¹é‡?å?‘é€?å?‘ä¿¡åœ°å?€.
     */
    public static final String MAIL_ALIYUN_BATCH_FROM = get("mail.aliyun.batch.from");

    /**
     * é‚®ä»¶æ¸ é?“ {@code local} æ˜¯å?¦å¼€å?¯ debug..
     */
    public static final boolean MAIL_LOCAL_ISDEBUG = getBoolean("mail.local.isdebug");

    /**
     * é‚®ä»¶æ¸ é?“ {@code local} å?‘ä¿¡å??è®®.
     */
    public static final String MAIL_LOCAL_TRANSPORT_PROTOCOL = get("mail.local.transport.protocol");

    /**
     * é‚®ä»¶æ¸ é?“ {@code local} å?‘ä¿¡æœ?åŠ¡åœ°å?€.
     */
    public static final String MAIL_LOCAL_HOST = get("mail.local.host");

    /**
     * é‚®ä»¶æ¸ é?“ {@code local} å?‘ä¿¡æœ?åŠ¡ç«¯å?£.
     */
    public static final String MAIL_LOCAL_PORT = get("mail.local.port");

    /**
     * é‚®ä»¶æ¸ é?“ {@code local} æ˜¯å?¦å¼€å?¯ SMTP éªŒè¯?.
     */
    public static final String MAIL_LOCAL_SMTP_AUTH = get("mail.local.smtp.auth");

    /**
     * é‚®ä»¶æ¸ é?“ {@code local} SMTP æ˜¯å?¦å?¯ç”¨ SSL.
     */
    public static final String MAIL_LOCAL_SMTP_SSL = get("mail.local.smtp.ssl.enable");

    /**
     * é‚®ä»¶æ¸ é?“ {@code local} SMTP æ˜¯å?¦å?¯ç”¨ TLS.
     */
    public static final String MAIL_LOCAL_SMTP_STARTTLS = get("mail.local.smtp.starttls.enable");

    /**
     * é‚®ä»¶æ¸ é?“ {@code local} å?‘ä¿¡åœ°å?€.
     */
    public static final String MAIL_LOCAL_SMTP_SENDER = get("mail.local.smtp.sender");

    /**
     * é‚®ä»¶æ¸ é?“ {@code local} SMTP ç”¨æˆ·å??.
     */
    public static final String MAIL_LOCAL_SMTP_USERNAME = get("mail.local.smtp.username");

    /**
     * é‚®ä»¶æ¸ é?“ {@code local} SMPT å¯†ç ?.
     */
    public static final String MAIL_LOCAL_SMTP_PASSWORD = get("mail.local.smtp.passsword");

    /**
     * ç™¾åº¦ LBS æŽ¥å?£å‡­è¯?ï¼Œç”¨äºŽ IP å®šä½?.
     */
    public static final String BAIDU_LBS_AK = get("baidu.lbs.ak");

    /**
     * ç™¾åº¦æ?œç´¢æŽ¨é€?æŽ¥å?£å‡­è¯?.
     */
    public static final String BAIDU_DATA_TOKEN = get("baidu.data.token");

    /**
     * ç™¾åº¦è¯­éŸ³æŽ¥å?£å‡­è¯?ï¼Œç”¨äºŽæ–‡å­—è½¬è¯­éŸ³.
     */
    public static final String BAIDU_YUYIN_API_KEY = Symphonys.get("baidu.yuyin.apiKey");

    /**
     * ç™¾åº¦è¯­éŸ³æŽ¥å?£å‡­è¯?.
     */
    public static final String BAIDU_YUYIN_SECRET_KEY = Symphonys.get("baidu.yuyin.secretKey");

    /**
     * æ˜¯å?¦å?¯ç”¨æœ¬åœ° Elasticsearch æ?œç´¢.
     */
    public static final boolean ES_ENABLED = getBoolean("es.enabled");

    /**
     * Elasticsearch æœ?åŠ¡å™¨åœ°å?€.
     */
    public static final String ES_SERVER = get("es.server");

    /**
     * æ˜¯å?¦å?¯ç”¨ <a href="https://www.algolia.com" target="_blank">Algolia</a>æ?œç´¢.
     */
    public static final boolean ALGOLIA_ENABLED = getBoolean("algolia.enabled");

    /**
     * Algolia App Id.
     */
    public static final String ALGOLIA_APP_ID = get("algolia.appId");

    /**
     * Algolia æ?œç´¢ keyï¼Œå?¯ä»¥æš´éœ²ç»™å‰?ç«¯.
     */
    public static final String ALGOLIA_SEARCH_KEY = get("algolia.searchKey");

    /**
     * Algolia ç®¡ç?† key.
     */
    public static final String ALGOLIA_ADMIN_KEY = get("algolia.adminKey");

    /**
     * Algolia Index.
     */
    public static final String ALGOLIA_INDEX = get("algolia.index");

    /**
     * ä¿?ç•™æ ‡ç­¾ï¼Œå?ªæœ‰ç®¡ç?†å‘˜å?¯ä»¥ä½¿ç”¨.
     */
    public static final String RESERVEDTAGS = get("reservedTags");

    static {
        final String[] tags = RESERVEDTAGS.split(",");
        RESERVED_TAGS = new String[tags.length];
        for (int i = 0; i < tags.length; i++) {
            RESERVED_TAGS[i] = StringUtils.trim(tags[i]);
        }
    }

    /**
     * ç³»ç»Ÿå…¬å‘Šæ ‡ç­¾å??.
     */
    public static final String SYS_ANNOUNCE_TAG = get("systemAnnounce");

    /**
     * ä¿?ç•™çš„ç”¨æˆ·å??.
     */
    public static final String RESERVED_USERNAMES = get("reservedUserNames");

    static {
        final String[] userNames = RESERVED_USERNAMES.split(",");
        RESERVED_USER_NAMES = new String[userNames.length];
        for (int i = 0; i < userNames.length; i++) {
            RESERVED_USER_NAMES[i] = StringUtils.trim(userNames[i]);
        }
    }

    /**
     * ç™½å??å?•æ ‡ç­¾ï¼Œæ ‡ç­¾è§„èŒƒåŒ–æ“?ä½œä¼šè¿‡æ»¤æŽ‰ä¸?ç¬¦å?ˆæ ¼å¼?çš„æ ‡ç­¾ï¼Œé€šè¿‡è¿™é‡Œçš„ç™½å??å?•é˜»æ­¢è¿‡æ»¤.
     */
    public static final String WHITELIST_TAGS = get("whitelist.tags");

    static {
        final String[] wlTags = WHITELIST_TAGS.split(",");
        WHITE_LIST_TAGS = new String[wlTags.length];
        for (int i = 0; i < wlTags.length; i++) {
            WHITE_LIST_TAGS[i] = StringUtils.trim(wlTags[i]);
        }
    }

    /**
     * æ€§èƒ½ç›‘æŽ§é˜ˆå€¼ï¼Œå?•ä½?æ¯«ç§’ï¼Œå¦‚æžœ {@link org.b3log.latke.util.Stopwatchs} åŸ‹ç‚¹æ‰§è¡Œè¶…è¿‡è¯¥å€¼åˆ™ä¼šæ‰“å?°è€—æ—¶æ—¥å¿—.
     * ç”Ÿäº§çŽ¯å¢ƒå»ºè®®é…?ç½®ä¸º {@code 0}ï¼Œå¼€å?‘ã€?æµ‹è¯•çŽ¯å¢ƒæŒ‰éœ€é…?ç½®ã€‚
     */
    public static final int PERFORMANCE_THRESHOLD = getInt("performance.threshold");

    /**
     * Cookie åŠ å¯†å¯†é’¥ï¼Œ<b>ç”Ÿäº§çŽ¯å¢ƒå¿…é¡»ä¿®æ”¹</b>.
     */
    public static final String COOKIE_SECRET = get("cookie.secret");

    /**
     * ç§¯åˆ†è¶…è¿‡è¯¥å€¼æ‰?èƒ½ä½¿ç”¨åŒ¿å??å?‘å¸ƒå¸–å­?æˆ–è€…å›žå¸–.
     */
    public static final int ANONYMOUS_POST_POINT = getInt("anonymous.postPoint");

    /**
     * å?³ä½¿ã€?ç®¡ç?†å?Žå?° - å…¶ä»–ç®¡ç?† - å…?è®¸åŒ¿å??æµ?è§ˆã€‘è®¾ç½®ä¸ºå?¦ï¼Œè¯¥é¡¹é…?ç½®çš„ URIs ä¹Ÿå…?è®¸åŒ¿å??æµ?è§ˆ.
     * åŒ¿å??æµ?è§ˆæŒ‡çš„æ˜¯é?žç™»å½•çŠ¶æ€?ä¸‹æµ?è§ˆã€‚
     */
    public static final String ANONYMOUS_VIEW_SKIPS = get("anonymous.viewSkips");

    /**
     * é?žç™»å½•æ—¶æœ€å¤šå…?è®¸æµ?è§ˆå¤šå°‘ä¸ª URIs. å’Œä¸Šé?¢ä¸€æ ·ï¼Œéœ€è¦?åŒ¿å??æµ?è§ˆè®¾ç½®ä¸ºå?¦è¯¥é¡¹æ‰?æœ‰æ„?ä¹‰.
     */
    public static final int ANONYMOUS_VIEW_URIS = getInt("anonymous.viewURIs");

    /**
     * é‚€è¯·ç ?è¿‡æœŸæ—¶é—´ï¼Œå?•ä½?æ¯«ç§’.
     */
    public static final long INVITECODE_EXPIRED = getLong("invitecode.expired");

    /**
     * é¡µè„šå¤‡æ¡ˆå?·é…?ç½®.
     */
    public static final String FOOTER_BEIANHAO = get("footerBeiAnHao");

    /**
     * Markdown å¤„ç?†è¶…æ—¶ï¼Œå?•ä½?æ¯«ç§’. æœ‰çš„æ—¶å€™å?¯èƒ½ä¼šå› ä¸º MD å¼•æ“Žç¼ºé™·å¯¼è‡´å¤„ç?†é?žå¸¸è€—æ—¶ï¼Œæ‰€ä»¥éœ€è¦?è®¾ç½®è¶…æ—¶ä»¥é‡Šæ”¾è¯·æ±‚çº¿ç¨‹å’Œç›¸å…³èµ„æº?.
     */
    public static final int MARKDOWN_TIMEOUT = getInt("markdown.timeout");

    /**
     * URL æ?ƒé™?è§„åˆ™.
     * <p>
     * &lt;"url:method", permissions&gt;
     * </p>
     */
    public static final Map<String, Set<String>> URL_PERMISSION_RULES = new HashMap<>();

    static {
        // Loads permission URL rules
        final String prefix = "permission.rule.url.";

        final Set<String> keys = CFG.stringPropertyNames();
        for (final String key : keys) {
            if (key.startsWith(prefix)) {
                final String value = Symphonys.CFG.getProperty(key);
                final Set<String> permissions = new HashSet<>(Arrays.asList(value.split(",")));

                URL_PERMISSION_RULES.put(key, permissions);
            }
        }
    }

    static {
        try {
            final SSLContext ctx = SSLContext.getInstance("TLS");
            ctx.init(new KeyManager[0], new TrustManager[]{new X509TrustManager() {
                @Override
                public void checkClientTrusted(final X509Certificate[] arg0, final String arg1) {
                }

                @Override
                public void checkServerTrusted(final X509Certificate[] arg0, final String arg1) {
                }

                @Override
                public X509Certificate[] getAcceptedIssuers() {
                    return null;
                }
            }}, new SecureRandom());
            SSLContext.setDefault(ctx);
        } catch (final Exception e) {
            // ignore
        }

        // å?‘ Rhy å?‘é€?ç»Ÿè®¡æ•°æ?®ï¼Œä»…å?‘é€?ç«™ç‚¹å??ç§°ã€?URLã€‚ç”¨äºŽ Sym ä½¿ç”¨ç»Ÿè®¡ï¼Œå¦‚æžœä¸?æƒ³å?‘é€?è¯·ç§»é™¤è¯¥ä»£ç ?
        new Timer(true).schedule(new TimerTask() {
            @Override
            public void run() {
                final String symURL = Latkes.getServePath();
                if (Strings.isIPv4(symURL)) {
                    return;
                }

                HttpURLConnection httpConn = null;
                try {
                    final BeanManager beanManager = BeanManager.getInstance();
                    final OptionQueryService optionQueryService = beanManager.getReference(OptionQueryService.class);

                    final JSONObject statistic = optionQueryService.getStatistic();
                    final int articleCount = statistic.optInt(Option.ID_C_STATISTIC_ARTICLE_COUNT);
                    if (articleCount < 66) {
                        return;
                    }

                    final LangPropsService langPropsService = beanManager.getReference(LangPropsService.class);

                    httpConn = (HttpURLConnection) new URL("https://rhythm.b3log.org/sym").openConnection();
                    httpConn.setConnectTimeout(10000);
                    httpConn.setReadTimeout(10000);
                    httpConn.setDoOutput(true);
                    httpConn.setRequestMethod("POST");
                    httpConn.setRequestProperty(Common.USER_AGENT, USER_AGENT_BOT);

                    httpConn.connect();

                    try (final OutputStream outputStream = httpConn.getOutputStream()) {
                        final JSONObject sym = new JSONObject();
                        sym.put("symURL", symURL);
                        sym.put("symTitle", langPropsService.get("symphonyLabel", Latkes.getLocale()));

                        IOUtils.write(sym.toString(), outputStream, "UTF-8");
                        outputStream.flush();
                    }

                    httpConn.getResponseCode();
                } catch (final Exception e) {
                    // ignore
                } finally {
                    if (null != httpConn) {
                        try {
                            httpConn.disconnect();
                        } catch (final Exception e) {
                            // ignore
                        }
                    }
                }
            }
        }, 1000 * 60 * 60 * 2, 1000 * 60 * 60 * 12);
    }

    /**
     * Gets active thread count of thread pool.
     *
     * @return active thread count
     */
    public static int getActiveThreadCount() {
        return EXECUTOR_SERVICE.getActiveCount();
    }

    /**
     * Gets the max thread count of thread pool.
     *
     * @return max thread count
     */
    public static int getMaxThreadCount() {
        return EXECUTOR_SERVICE.getMaximumPoolSize();
    }

    /**
     * Gets a configuration string property with the specified key.
     *
     * @param key the specified key
     * @return string property value corresponding to the specified key, returns {@code null} if not found
     */
    private static String get(final String key) {
        return CFG.getProperty(key);
    }

    /**
     * Gets a configuration boolean property with the specified key.
     *
     * @param key the specified key
     * @return boolean property value corresponding to the specified key, returns {@code null} if not found
     */
    private static Boolean getBoolean(final String key) {
        final String stringValue = get(key);
        if (null == stringValue) {
            return null;
        }

        return Boolean.valueOf(stringValue);
    }

    /**
     * Gets a configuration float property with the specified key.
     *
     * @param key the specified key
     * @return float property value corresponding to the specified key, returns {@code null} if not found
     */
    private static Float getFloat(final String key) {
        final String stringValue = get(key);
        if (null == stringValue) {
            return null;
        }

        return Float.valueOf(stringValue);
    }

    /**
     * Gets a configuration integer property with the specified key.
     *
     * @param key the specified key
     * @return integer property value corresponding to the specified key, returns {@code null} if not found
     */
    private static Integer getInt(final String key) {
        final String stringValue = get(key);
        if (null == stringValue) {
            return null;
        }

        return Integer.valueOf(stringValue);
    }

    /**
     * Gets a configuration long property with the specified key.
     *
     * @param key the specified key
     * @return long property value corresponding to the specified key, returns {@code null} if not found
     */
    private static Long getLong(final String key) {
        final String stringValue = get(key);
        if (null == stringValue) {
            return null;
        }

        return Long.valueOf(stringValue);
    }

    /**
     * Private constructor.
     */
    private Symphonys() {
    }
}
