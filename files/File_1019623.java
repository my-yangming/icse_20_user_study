package Algorithm.Algorithms_4thEdition.c_Graph;

import lombok.Getter;
import org.apache.commons.collections4.CollectionUtils;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;

/**
 * å›¾çš„è¡¨ç¤ºï¼Œæœ¬ä¹¦ä½¿ç”¨é‚»æŽ¥è¡¨æ•°ç»„ï¼ˆadjoinï¼‰
 */
@Getter
public class Graph {

    private int edgeCount;              //è¾¹çš„æ•°ç›®
    private Map<String, Set<String>> adjoinMap;   //é‚»æŽ¥è¡¨ï¼ˆä½¿ç”¨Set ä¸ºäº†é?¿å…?å¹³è¡Œè¾¹ï¼‰

    /**
     * ä»Žæ–‡ä»¶åˆ?å§‹åŒ–å›¾
     * æ–‡ä»¶æ ¼å¼?ï¼š
     * vertexCount  ç¬¬ä¸€ä¸ªæ•°å­—ï¼šé¡¶ç‚¹çš„æ•°ç›®
     * edgeCount    ç¬¬äºŒä¸ªæ•°å­—ï¼šè¾¹çš„æ•°ç›®
     * x    y       æŽ¥ä¸‹æ?¥çš„æ²¡ä¸¤ä¸ªç‚¹ç»„å?ˆæˆ?ä¸€æ?¡è¾¹
     * x    z
     *
     * @param filePath
     * @throws IOException
     */
    public Graph(Path filePath) throws IOException {
        InputStream inputStream = Files.newInputStream(filePath);
        Scanner scanner = new Scanner(new BufferedInputStream(inputStream));
        this.init(scanner.nextInt());
        scanner.nextLine();
        for (int i = 0; i < this.edgeCount; i++) {
            //å°†æ¯?ä¸ªé¡¶ç‚¹æ‰€å¯¹åº”çš„è¾¹ï¼Œæ”¾å…¥é‚»æŽ¥è¡¨æ•°ç»„ä¸­
            String[] split = scanner.nextLine().split(" ");
            String x = split[0];
            String y = split[1];
            addEdge(x, y);
            addEdge(y, x);  //æ— å?‘å›¾
        }
    }

    private void addEdge(String x, String y) {
        Set<String> adjoinVertexSet = adjoinMap.get(x);
        if (adjoinVertexSet != null) {
            adjoinVertexSet.add(y);
            adjoinMap.put(x, adjoinVertexSet);
        } else {
            adjoinVertexSet = new HashSet<>();
            adjoinVertexSet.add(y);
            adjoinMap.put(x, adjoinVertexSet);
        }
    }

    /**
     * åˆ?å§‹åŒ–è¾¹å’Œé¡¶ç‚¹ï¼Œä»¥å?Šé‚»æŽ¥Setè¡¨
     *
     * @param edgeCount
     */
    private void init(int edgeCount) {
        this.edgeCount = edgeCount;
        this.adjoinMap = new HashMap<>();
    }

}
