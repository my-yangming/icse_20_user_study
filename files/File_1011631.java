package jetbrains.mps.build.mps.util;

/*Generated by MPS */

import jetbrains.mps.generator.template.TemplateQueryContext;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.build.mps.behavior.BuildMps_IdeaPluginContent__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.build.util.DependenciesHelper;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.build.behavior.BuildLayout_PathElement__BehaviorDescriptor;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.internal.collections.runtime.NotNullWhereFilter;

public class ModulePlugins {
  private final TemplateQueryContext myContext;
  private final SNode myInitialProject;
  private final Set<SNode> myPluginDependencies = SetSequence.fromSet(new HashSet<SNode>());

  public ModulePlugins(SNode initialProject, TemplateQueryContext context) {
    myContext = context;
    myInitialProject = initialProject;
  }

  @Deprecated
  public void collect(@NotNull MPSModulesClosure closure, @NotNull List<SNode> additionalPlugins) {
    collect(closure.getAllModules(), additionalPlugins);
  }

  public void collect(@NotNull Iterable<SNode> modules, @NotNull List<SNode> additionalPlugins) {
    List<SNode> initialPlugins = ListSequence.fromListWithValues(new ArrayList<SNode>(), additionalPlugins);
    for (final SNode module : Sequence.fromIterable(modules)) {
      List<SNode> projectPlugins = SNodeOperations.getNodeDescendants(SNodeOperations.cast(SNodeOperations.getContainingRoot(module), MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4df58c6f18f84a13L, "jetbrains.mps.build.structure.BuildProject")), MetaAdapterFactory.getConcept(0xcf935df46994e9cL, 0xa132fa109541cba3L, 0x5b7be37b4de9bb74L, "jetbrains.mps.build.mps.structure.BuildMps_IdeaPlugin"), false, new SAbstractConcept[]{});
      for (SNode plugin : ListSequence.fromList(projectPlugins)) {
        if (ListSequence.fromList(SLinkOperations.getChildren(plugin, MetaAdapterFactory.getContainmentLink(0xcf935df46994e9cL, 0xa132fa109541cba3L, 0x5b7be37b4de9bb74L, 0x5b7be37b4de9bbeaL, "content"))).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return (boolean) BuildMps_IdeaPluginContent__BehaviorDescriptor.exports_id5FtnUVJQES1.invoke(it, module);
          }
        })) {
          ListSequence.fromList(initialPlugins).addElement(plugin);
          break;
        }
      }
    }

    SetSequence.fromSet(myPluginDependencies).addSequence(Sequence.fromIterable(new RequiredPlugins(initialPlugins).returnDepsWithInitial()));
  }

  public Iterable<SNode> getDependency() {
    // XXX here, usage suggests return value may list elements from transient (non-original) model 
    return myPluginDependencies;
  }

  public String[] getPluginPaths() {
    return ListSequence.fromList(getPlugins()).select(new ISelector<Tuples._2<String, String>, String>() {
      public String select(Tuples._2<String, String> it) {
        return it._0();
      }
    }).toGenericArray(String.class);
  }

  public List<Tuples._2<String, String>> getPlugins() {
    final DependenciesHelper helper = new DependenciesHelper(myContext, myInitialProject);
    return Sequence.fromIterable(this.getDependency()).select(new ISelector<SNode, Tuples._2<String, String>>() {
      public Tuples._2<String, String> select(SNode it) {
        SNode layoutNode = helper.getArtifact(it);
        if ((layoutNode == null)) {
          myContext.showWarningMessage(myInitialProject, "The plugin '" + SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + "' was not found in the layout of `" + SPropertyOperations.getString(myInitialProject, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + "'");
          return null;
        }
        String val = BuildLayout_PathElement__BehaviorDescriptor.location_id6b4RkXS8sT2.invoke(layoutNode, helper, it);
        if (val == null) {
          myContext.showWarningMessage(myInitialProject, "Found no location for plugin '" + SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + "'");
          return null;
        }
        return MultiTuple.<String,String>from(val, SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(0xcf935df46994e9cL, 0xa132fa109541cba3L, 0x5b7be37b4de9bb74L, 0x5b7be37b4de9bb6fL, "id")));
      }
    }).where(new NotNullWhereFilter<Tuples._2<String, String>>()).sort(new ISelector<Tuples._2<String, String>, String>() {
      public String select(Tuples._2<String, String> it) {
        return it._0();
      }
    }, true).toListSequence();
  }
}
