package cn.iocoder.common.framework.util;

import cn.iocoder.common.framework.exception.ServiceException;
import cn.iocoder.common.framework.vo.CommonResult;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

/**
 * {@link ServiceException} å·¥å…·ç±»
 *
 * ç›®çš„åœ¨äºŽï¼Œæ ¼å¼?åŒ–å¼‚å¸¸ä¿¡æ?¯æ??ç¤ºã€‚
 * è€ƒè™‘åˆ° String.format åœ¨å?‚æ•°ä¸?æ­£ç¡®æ—¶ä¼šæŠ¥é”™ï¼Œå› æ­¤ä½¿ç”¨ {} ä½œä¸ºå? ä½?ç¬¦ï¼Œå¹¶ä½¿ç”¨ {@link #doFormat(int, String, Object...)} æ–¹æ³•æ?¥æ ¼å¼?åŒ–
 *
 * å› ä¸º {@link #messages} é‡Œé?¢é»˜è®¤æ˜¯æ²¡æœ‰å¼‚å¸¸ä¿¡æ?¯æ??ç¤ºçš„æ¨¡æ?¿çš„ï¼Œæ‰€ä»¥éœ€è¦?ä½¿ç”¨æ–¹è‡ªå·±åˆ?å§‹åŒ–è¿›åŽ»ã€‚ç›®å‰?æƒ³åˆ°çš„æœ‰å‡ ç§?æ–¹å¼?ï¼š
 *
 * 1. å¼‚å¸¸æ??ç¤ºä¿¡æ?¯ï¼Œå†™åœ¨æžšä¸¾ç±»ä¸­ï¼Œä¾‹å¦‚è¯´ï¼Œcn.iocoder.oceans.user.api.constants.ErrorCodeEnum ç±» + ServiceExceptionConfiguration
 * 2. å¼‚å¸¸æ??ç¤ºä¿¡æ?¯ï¼Œå†™åœ¨ .properties ç­‰ç­‰é…?ç½®æ–‡ä»¶
 * 3. å¼‚å¸¸æ??ç¤ºä¿¡æ?¯ï¼Œå†™åœ¨ Apollo ç­‰ç­‰é…?ç½®ä¸­å¿ƒä¸­ï¼Œä»Žè€Œå®žçŽ°å?¯åŠ¨æ€?åˆ·æ–°
 * 4. å¼‚å¸¸æ??ç¤ºä¿¡æ?¯ï¼Œå­˜å‚¨åœ¨ db ç­‰ç­‰æ•°æ?®åº“ä¸­ï¼Œä»Žè€Œå®žçŽ°å?¯åŠ¨æ€?åˆ·æ–°
 */
public class ServiceExceptionUtil {

    private static final Logger LOGGER = LoggerFactory.getLogger(ServiceExceptionUtil.class);

    /**
     * é”™è¯¯ç ?æ??ç¤ºæ¨¡æ?¿
     */
    private static ConcurrentMap<Integer, String> messages = new ConcurrentHashMap<>();

    public static void putAll(Map<Integer, String> messages) {
        ServiceExceptionUtil.messages.putAll(messages);
    }

    public static void put(Integer code, String message) {
        ServiceExceptionUtil.messages.put(code, message);
    }

    // TODO èŠ‹è‰¿ï¼Œå?¯èƒ½ä¸?æ˜¯ç›®å‰?æœ€ä¼˜è§£ï¼Œç›®å‰?æš‚æ—¶è¿™æ ·
    public static <T> CommonResult<T> error(Integer code) {
        return CommonResult.error(code, messages.get(code));
    }

    public static CommonResult error(Integer code, Object... params) {
        String message = doFormat(code, messages.get(code), params);
        return CommonResult.error(code, message);
    }

    /**
     * åˆ›å»ºæŒ‡å®šç¼–å?·çš„ ServiceException çš„å¼‚å¸¸
     *
     * @param code ç¼–å?·
     * @return å¼‚å¸¸
     */
    public static ServiceException exception(Integer code) {
        return new ServiceException(code, messages.get(code));
    }

    /**
     * åˆ›å»ºæŒ‡å®šç¼–å?·çš„ ServiceException çš„å¼‚å¸¸
     *
     * @param code ç¼–å?·
     * @param params æ¶ˆæ?¯æ??ç¤ºçš„å? ä½?ç¬¦å¯¹åº”çš„å?‚æ•°
     * @return å¼‚å¸¸
     */
    public static ServiceException exception(Integer code, Object... params) {
        String message = doFormat(code, messages.get(code), params);
        return new ServiceException(code, message);
    }

    public static ServiceException exception(Integer code, String messagePattern, Object... params) {
        String message = doFormat(code, messagePattern, params);
        return new ServiceException(code, message);
    }

    /**
     * å°†é”™è¯¯ç¼–å?·å¯¹åº”çš„æ¶ˆæ?¯ä½¿ç”¨ params è¿›è¡Œæ ¼å¼?åŒ–ã€‚
     *
     * @param code           é”™è¯¯ç¼–å?·
     * @param messagePattern æ¶ˆæ?¯æ¨¡ç‰ˆ
     * @param params         å?‚æ•°
     * @return æ ¼å¼?åŒ–å?Žçš„æ??ç¤º
     */
    private static String doFormat(int code, String messagePattern, Object... params) {
        StringBuilder sbuf = new StringBuilder(messagePattern.length() + 50);
        int i = 0;
        int j;
        int l;
        for (l = 0; l < params.length; l++) {
            j = messagePattern.indexOf("{}", i);
            if (j == -1) {
                LOGGER.error("[doFormat][å?‚æ•°è¿‡å¤šï¼šé”™è¯¯ç ?({})|é”™è¯¯å†…å®¹({})|å?‚æ•°({})", code, messagePattern, params);
                if (i == 0) {
                    return messagePattern;
                } else {
                    sbuf.append(messagePattern.substring(i, messagePattern.length()));
                    return sbuf.toString();
                }
            } else {
                sbuf.append(messagePattern.substring(i, j));
                sbuf.append(params[l]);
                i = j + 2;
            }
        }
        if (messagePattern.indexOf("{}", i) != -1) {
            LOGGER.error("[doFormat][å?‚æ•°è¿‡å°‘ï¼šé”™è¯¯ç ?({})|é”™è¯¯å†…å®¹({})|å?‚æ•°({})", code, messagePattern, params);
        }
        sbuf.append(messagePattern.substring(i, messagePattern.length()));
        return sbuf.toString();
    }

}
