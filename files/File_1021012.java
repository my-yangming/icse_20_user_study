/**
 * Copyright (c) 2015-2019, Michael Yang æ?¨ç¦?æµ· (fuhai999@gmail.com).
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 *  http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.jboot.support.redis;

import io.jboot.Jboot;

/**
 * Created by michael.
 * <p>
 * Redis åˆ†å¸ƒå¼?é”?
 * <p>
 * ä½¿ç”¨æ–¹æ³•ï¼š
 * <p>
 * JbootRedisLock lock = new JbootRedisLock("lockName");
 * try{
 * boolean acquire = lock.acquire();
 * if(acquire){
 * // do your something
 * }
 * }finally {
 * lock.release();
 * }
 * <p>
 * ä½¿ç”¨æ–¹æ³•2ï¼š
 * JbootRedisLock lock = new JbootRedisLock("lockName");
 * lock.runIfAcquired(new Runnable(){
 * <p>
 * public void run() {
 * //do your something
 * }
 * });
 */
public class JbootRedisLock {

    long expireMsecs = 1000 * 60;//60ç§’expireMsecs é”?æŒ?æœ‰è¶…æ—¶ï¼Œé˜²æ­¢çº¿ç¨‹åœ¨å…¥é”?ä»¥å?Žï¼Œæ— é™?çš„æ‰§è¡Œä¸‹åŽ»ï¼Œè®©é”?æ— æ³•é‡Šæ”¾
    long timeoutMsecs = 0;// é”?ç­‰å¾…è¶…æ—¶

    private String lockName;
    private boolean locked = false;
    private JbootRedis redis;

    /**
     * åˆ›å»ºredisåˆ†å¸ƒå¼?é”?
     *
     * @param lockName é”?çš„å??ç§°
     */
    public JbootRedisLock(String lockName) {
        if (lockName == null) {
            throw new NullPointerException("lockName must not null !");
        }
        this.lockName = lockName;
        this.redis = Jboot.getRedis();
    }

    /**
     * åˆ›å»ºredisåˆ†å¸ƒå¼?é”?
     *
     * @param lockName     é”?å??ç§°
     * @param timeoutMsecs èŽ·å?–é”?çš„æ—¶å€™ï¼Œç­‰å¾…æ—¶é•¿
     */
    public JbootRedisLock(String lockName, long timeoutMsecs) {
        if (lockName == null) {
            throw new NullPointerException("lockName must not null !");
        }
        this.lockName = lockName;
        this.timeoutMsecs = timeoutMsecs;
        this.redis = Jboot.getRedis();
    }


    public void runIfAcquired(Runnable runnable) {
        if (runnable == null) {
            throw new NullPointerException("runnable must not null!");
        }
        try {
            if (acquire()) {
                runnable.run();
            }
        } finally {
            //æ‰§è¡Œå®Œæ¯•ï¼Œé‡Šæ”¾é”?
            release();
        }
    }


    /**
     * èŽ·å?–é”?
     *
     * @return trueï¼šæ´»åŠ¨é”?äº† ï¼Œ false ï¼šæ²¡èŽ·å¾—é”?ã€‚ å¦‚æžœè®¾ç½®äº†timeoutMsecsï¼Œé‚£ä¹ˆè¿™ä¸ªæ–¹æ³•å?¯èƒ½è¢«å»¶è¿Ÿ timeoutMsecs æ¯«ç§’ã€‚
     */
    public boolean acquire() {
        long timeout = timeoutMsecs;

        do {
            long expires = System.currentTimeMillis() + expireMsecs + 1;

            Long result = redis.setnx(lockName, expires);
            if (result != null && result == 1) {
                // lock acquired
                locked = true;
                return true;
            }

            Long currentValue = redis.get(lockName);
            if (currentValue != null && currentValue < System.currentTimeMillis()) {
                //åˆ¤æ–­æ˜¯å?¦ä¸ºç©ºï¼Œä¸?ä¸ºç©ºçš„æƒ…å†µä¸‹ï¼Œå¦‚æžœè¢«å…¶ä»–çº¿ç¨‹è®¾ç½®äº†å€¼ï¼Œåˆ™ç¬¬äºŒä¸ªæ?¡ä»¶åˆ¤æ–­æ˜¯è¿‡ä¸?åŽ»çš„
                // lock is expired

                Long oldValue = redis.getSet(lockName, expires);
                //èŽ·å?–ä¸Šä¸€ä¸ªé”?åˆ°æœŸæ—¶é—´ï¼Œå¹¶è®¾ç½®çŽ°åœ¨çš„é”?åˆ°æœŸæ—¶é—´ï¼Œ
                //å?ªæœ‰ä¸€ä¸ªçº¿ç¨‹æ‰?èƒ½èŽ·å?–ä¸Šä¸€ä¸ªçº¿ä¸Šçš„è®¾ç½®æ—¶é—´ï¼Œå› ä¸ºjedis.getSetæ˜¯å?Œæ­¥çš„
                if (oldValue != null && oldValue.equals(currentValue)) {
                    //å¦‚æžœè¿™ä¸ªæ—¶å€™ï¼Œå¤šä¸ªçº¿ç¨‹æ?°å¥½éƒ½åˆ°äº†è¿™é‡Œ
                    //å?ªæœ‰ä¸€ä¸ªçº¿ç¨‹çš„è®¾ç½®å€¼å’Œå½“å‰?å€¼ç›¸å?Œï¼Œä»–æ‰?æœ‰æ?ƒåˆ©èŽ·å?–é”?
                    //lock acquired
                    locked = true;
                    return true;
                }
            }

            if (timeout > 0) {
                timeout -= 100;
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

        } while (timeout > 0);
        return false;
    }


    /**
     * æ˜¯å?¦èŽ·å¾— é”? äº†
     *
     * @return
     */
    public boolean isLocked() {
        return locked;
    }

    /**
     * é‡Šæ”¾ é”?
     */
    public void release() {
        if (!isLocked()) {
            return;
        }
        if (Jboot.getRedis().del(lockName) > 0) {
            locked = false;
        }
    }
}
