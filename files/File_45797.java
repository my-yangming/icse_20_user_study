/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.alipay.sofa.rpc.client;

import com.alipay.sofa.rpc.bootstrap.ConsumerBootstrap;
import com.alipay.sofa.rpc.common.struct.ConcurrentHashSet;
import com.alipay.sofa.rpc.common.struct.ListDifference;
import com.alipay.sofa.rpc.common.struct.NamedThreadFactory;
import com.alipay.sofa.rpc.common.struct.ScheduledService;
import com.alipay.sofa.rpc.common.utils.CommonUtils;
import com.alipay.sofa.rpc.common.utils.ExceptionUtils;
import com.alipay.sofa.rpc.common.utils.NetUtils;
import com.alipay.sofa.rpc.config.ConsumerConfig;
import com.alipay.sofa.rpc.context.AsyncRuntime;
import com.alipay.sofa.rpc.ext.Extension;
import com.alipay.sofa.rpc.listener.ConsumerStateListener;
import com.alipay.sofa.rpc.log.Logger;
import com.alipay.sofa.rpc.log.LoggerFactory;
import com.alipay.sofa.rpc.transport.ClientTransport;
import com.alipay.sofa.rpc.transport.ClientTransportConfig;
import com.alipay.sofa.rpc.transport.ClientTransportFactory;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * å…¨éƒ¨å»ºç«‹é•¿è¿žæŽ¥ï¼Œè‡ªåŠ¨ç»´æŠ¤é•¿è¿žæŽ¥
 *
 * @author <a href=mailto:zhanggeng.zg@antfin.com>GengZhang</a>
 */
@Extension("all")
public class AllConnectConnectionHolder extends ConnectionHolder {

    /**
     * slf4j Logger for this class
     */
    private final static Logger LOGGER = LoggerFactory.getLogger(AllConnectConnectionHolder.class);

    /**
     * æœ?åŠ¡æ¶ˆè´¹è€…é…?ç½®
     */
    protected ConsumerConfig    consumerConfig;

    /**
     * æž„é€ å‡½æ•°
     *
     * @param consumerBootstrap æœ?åŠ¡æ¶ˆè´¹è€…é…?ç½®
     */
    protected AllConnectConnectionHolder(ConsumerBootstrap consumerBootstrap) {
        super(consumerBootstrap);
        this.consumerConfig = consumerBootstrap.getConsumerConfig();
    }

    /**
     * æœªåˆ?å§‹åŒ–çš„ï¼ˆä»Žæœªè¿žæŽ¥è¿‡ï¼Œä¾‹å¦‚lazy=trueï¼‰
     */
    protected ConcurrentMap<ProviderInfo, ClientTransport> uninitializedConnections = new ConcurrentHashMap<ProviderInfo, ClientTransport>();

    /**
     * å­˜æ´»çš„å®¢æˆ·ç«¯åˆ—è¡¨ï¼ˆä¿?æŒ?äº†é•¿è¿žæŽ¥ï¼Œä¸”ä¸€åˆ‡æ­£å¸¸çš„ï¼‰
     */
    protected ConcurrentMap<ProviderInfo, ClientTransport> aliveConnections         = new ConcurrentHashMap<ProviderInfo, ClientTransport>();

    /**
     * å­˜æ´»ä½†æ˜¯äºšå?¥åº·èŠ‚ç‚¹ï¼ˆè¿žç»­å¿ƒè·³è¶…æ—¶ï¼Œè¿™ç§?å?ªå?‘å¿ƒè·³ï¼Œä¸?å?‘è¯·æ±‚ï¼‰
     */
    protected ConcurrentMap<ProviderInfo, ClientTransport> subHealthConnections     = new ConcurrentHashMap<ProviderInfo, ClientTransport>();

    /**
     * å¤±è´¥å¾…é‡?è¯•çš„å®¢æˆ·ç«¯åˆ—è¡¨ï¼ˆè¿žä¸Šå?Žæ–­å¼€çš„ï¼‰
     */
    protected ConcurrentMap<ProviderInfo, ClientTransport> retryConnections         = new ConcurrentHashMap<ProviderInfo, ClientTransport>();

    /**
     * last address for registry pushed
     */
    protected Set<ProviderInfo>                            lastAddresses            = new HashSet<ProviderInfo>();

    /**
     * å®¢æˆ·ç«¯å?˜åŒ–providerçš„é”?
     */
    private Lock                                           providerLock             = new ReentrantLock();

    /**
     * Gets retry connections.
     *
     * @return the retry connections
     */
    public ConcurrentMap<ProviderInfo, ClientTransport> getRetryConnections() {
        return retryConnections;
    }

    /**
     * Add alive.
     *
     * @param providerInfo the provider
     * @param transport    the transport
     */
    protected void addAlive(ProviderInfo providerInfo, ClientTransport transport) {
        if (checkState(providerInfo, transport)) {
            aliveConnections.put(providerInfo, transport);
        }
    }

    /**
     * Add retry.
     *
     * @param providerInfo the provider
     * @param transport    the transport
     */
    protected void addRetry(ProviderInfo providerInfo, ClientTransport transport) {
        retryConnections.put(providerInfo, transport);
    }

    /**
     * ä»Žå­˜æ´»ä¸¢åˆ°é‡?è¯•åˆ—è¡¨
     *
     * @param providerInfo Provider
     * @param transport    è¿žæŽ¥
     */
    protected void aliveToRetry(ProviderInfo providerInfo, ClientTransport transport) {
        providerLock.lock();
        try {
            if (aliveConnections.remove(providerInfo) != null) {
                retryConnections.put(providerInfo, transport);
            }
        } finally {
            providerLock.unlock();
        }
    }

    /**
     * ä»Žé‡?è¯•ä¸¢åˆ°å­˜æ´»åˆ—è¡¨
     *
     * @param providerInfo Provider
     * @param transport    è¿žæŽ¥
     */
    protected void retryToAlive(ProviderInfo providerInfo, ClientTransport transport) {
        providerLock.lock();
        try {
            if (retryConnections.remove(providerInfo) != null) {
                if (checkState(providerInfo, transport)) {
                    aliveConnections.put(providerInfo, transport);
                }
            }
        } finally {
            providerLock.unlock();
        }
    }

    /**
     * æ£€æŸ¥çŠ¶æ€?æ˜¯å?¦å?¯ç”¨
     *
     * @param providerInfo    æœ?åŠ¡æ??ä¾›è€…ä¿¡æ?¯
     * @param clientTransport å®¢æˆ·ç«¯é•¿è¿žæŽ¥
     * @return çŠ¶æ€?æ˜¯å?¦å?¯ç”¨
     */
    protected boolean checkState(ProviderInfo providerInfo, ClientTransport clientTransport) {
        //        Protocol protocol = ProtocolFactory.getProtocol(providerInfo.getProtocolType());
        //        ProtocolNegotiator negotiator = protocol.negotiator();
        //        if (negotiator != null) {
        //            return negotiator.handshake(providerInfo, clientTransport);
        //        } else {
        return true;
        //        }
    }

    /**
     * ä»Žå­˜æ´»ä¸¢åˆ°äºšå?¥åº·åˆ—è¡¨
     *
     * @param providerInfo Provider
     * @param transport    è¿žæŽ¥
     */
    protected void aliveToSubHealth(ProviderInfo providerInfo, ClientTransport transport) {
        providerLock.lock();
        try {
            if (aliveConnections.remove(providerInfo) != null) {
                subHealthConnections.put(providerInfo, transport);
            }
        } finally {
            providerLock.unlock();
        }
    }

    /**
     * ä»Žäºšå?¥åº·ä¸¢åˆ°å­˜æ´»åˆ—è¡¨
     *
     * @param providerInfo Provider
     * @param transport    è¿žæŽ¥
     */
    protected void subHealthToAlive(ProviderInfo providerInfo, ClientTransport transport) {
        providerLock.lock();
        try {
            if (subHealthConnections.remove(providerInfo) != null) {
                if (checkState(providerInfo, transport)) {
                    aliveConnections.put(providerInfo, transport);
                }
            }
        } finally {
            providerLock.unlock();
        }
    }

    /**
     * ä»Žäºšå?¥åº·ä¸¢åˆ°é‡?è¯•åˆ—è¡¨
     *
     * @param providerInfo Provider
     * @param transport    è¿žæŽ¥
     */
    protected void subHealthToRetry(ProviderInfo providerInfo, ClientTransport transport) {
        providerLock.lock();
        try {
            if (subHealthConnections.remove(providerInfo) != null) {
                retryConnections.put(providerInfo, transport);
            }
        } finally {
            providerLock.unlock();
        }
    }

    /**
     * åˆ é™¤provider
     *
     * @param providerInfo the provider
     * @return å¦‚æžœå·²ç»?å»ºç«‹è¿žæŽ¥ ï¼Œè¿”å›žClientTransport
     */
    protected ClientTransport remove(ProviderInfo providerInfo) {
        providerLock.lock();
        try {
            ClientTransport transport = uninitializedConnections.remove(providerInfo);
            if (transport == null) {
                transport = aliveConnections.remove(providerInfo);
                if (transport == null) {
                    transport = subHealthConnections.remove(providerInfo);
                    if (transport == null) {
                        transport = retryConnections.remove(providerInfo);
                    }
                }
            }
            return transport;
        } finally {
            providerLock.unlock();
        }
    }

    /**
     * é€šçŸ¥çŠ¶æ€?å?˜æˆ?ä¸?å?¯ç”¨,ä¸»è¦?æ˜¯ï¼š<br>
     * 1.æ³¨å†Œä¸­å¿ƒåˆ é™¤ï¼Œæ›´æ–°èŠ‚ç‚¹å?Žå?˜æˆ?ä¸?å?¯ç”¨æ—¶<br>
     * 2.è¿žæŽ¥æ–­çº¿å?Žï¼ˆå¿ƒè·³+è°ƒç”¨ï¼‰ï¼Œå¦‚æžœæ˜¯å?¯ç”¨èŠ‚ç‚¹ä¸ºç©º
     */
    public void notifyStateChangeToUnavailable() {
        final List<ConsumerStateListener> onAvailable = consumerConfig.getOnAvailable();
        if (onAvailable != null) {
            AsyncRuntime.getAsyncThreadPool().execute(new Runnable() {
                @Override
                public void run() {
                    // çŠ¶æ€?å?˜åŒ–é€šçŸ¥ç›‘å?¬å™¨
                    for (ConsumerStateListener listener : onAvailable) {
                        try {
                            listener.onUnavailable(consumerConfig.getConsumerBootstrap().getProxyIns());
                        } catch (Exception e) {
                            LOGGER.errorWithApp(consumerConfig.getAppName(),
                                "Failed to notify consumer state listener when state change to unavailable");
                        }
                    }
                }
            });
        }
    }

    /**
     * é€šçŸ¥çŠ¶æ€?å?˜æˆ?å?¯ç”¨,ä¸»è¦?æ˜¯ï¼š<br>
     * 1.å?¯åŠ¨æˆ?åŠŸå?˜æˆ?å?¯ç”¨æ—¶<br>
     * 2.æ³¨å†Œä¸­å¿ƒå¢žåŠ ï¼Œæ›´æ–°èŠ‚ç‚¹å?Žå?˜æˆ?å?¯ç”¨æ—¶<br>
     * 3.é‡?è¿žä¸Šä»Žä¸€ä¸ªå?¯ç”¨èŠ‚ç‚¹éƒ½æ²¡æœ‰å?˜æˆ?æœ‰å?¯ç”¨èŠ‚ç‚¹æ—¶
     */
    public void notifyStateChangeToAvailable() {
        final List<ConsumerStateListener> onAvailable = consumerConfig.getOnAvailable();
        if (onAvailable != null) {
            AsyncRuntime.getAsyncThreadPool().execute(new Runnable() {
                @Override
                public void run() {
                    // çŠ¶æ€?å?˜åŒ–é€šçŸ¥ç›‘å?¬å™¨
                    for (ConsumerStateListener listener : onAvailable) {
                        try {
                            listener.onAvailable(consumerConfig.getConsumerBootstrap().getProxyIns());
                        } catch (Exception e) {
                            LOGGER.warnWithApp(consumerConfig.getAppName(),
                                "Failed to notify consumer state listener when state change to available");
                        }
                    }
                }
            });
        }
    }

    @Override
    public void init() {
        if (reconThread == null) {
            startReconnectThread();
        }
    }

    @Override
    public void addProvider(ProviderGroup providerGroup) {
        // å¿½ç•¥äº†tagså±žæ€§
        if (!ProviderHelper.isEmpty(providerGroup)) {
            addNode(providerGroup.getProviderInfos());
        }
    }

    @Override
    public void removeProvider(ProviderGroup providerGroup) {
        // å¿½ç•¥äº†tagså±žæ€§
        if (!ProviderHelper.isEmpty(providerGroup)) {
            removeNode(providerGroup.getProviderInfos());
        }
    }

    @Override
    public void updateProviders(ProviderGroup providerGroup) {
        try {
            if (ProviderHelper.isEmpty(providerGroup)) {
                if (CommonUtils.isNotEmpty(currentProviderList())) {
                    if (LOGGER.isInfoEnabled(consumerConfig.getAppName())) {
                        LOGGER.infoWithApp(consumerConfig.getAppName(),
                            "Clear all providers, may be this consumer has been add to blacklist");
                    }
                    closeAllClientTransports(null);
                }
            } else {
                Collection<ProviderInfo> nowall = currentProviderList();
                List<ProviderInfo> oldAllP = providerGroup.getProviderInfos();
                List<ProviderInfo> nowAllP = new ArrayList<ProviderInfo>(nowall);// å½“å‰?å…¨éƒ¨

                // æ¯”è¾ƒå½“å‰?çš„å’Œæœ€æ–°çš„
                ListDifference<ProviderInfo> diff = new ListDifference<ProviderInfo>(oldAllP, nowAllP);
                List<ProviderInfo> needAdd = diff.getOnlyOnLeft(); // éœ€è¦?æ–°å»º
                List<ProviderInfo> needDelete = diff.getOnlyOnRight(); // éœ€è¦?åˆ æŽ‰
                if (!needAdd.isEmpty()) {
                    addNode(needAdd);
                }
                if (!needDelete.isEmpty()) {
                    removeNode(needDelete);
                }
            }
        } catch (Exception e) {
            if (LOGGER.isErrorEnabled(consumerConfig.getAppName())) {
                LOGGER.errorWithApp(consumerConfig.getAppName(), "update " + consumerConfig.getInterfaceId() +
                    " provider (" + providerGroup
                    + ") from list error:", e);
            }
        }
    }

    @Override
    public void updateAllProviders(List<ProviderGroup> providerGroups) {
        List<ProviderInfo> mergePs = new ArrayList<ProviderInfo>();
        if (CommonUtils.isNotEmpty(providerGroups)) {
            for (ProviderGroup providerGroup : providerGroups) {
                if (!ProviderHelper.isEmpty(providerGroup)) {
                    mergePs.addAll(providerGroup.getProviderInfos());
                }
            }
        }
        updateProviders(new ProviderGroup().addAll(mergePs));
    }

    protected void addNode(List<ProviderInfo> providerInfoList) {

        //first update last all providers
        lastAddresses.addAll(providerInfoList);

        final String interfaceId = consumerConfig.getInterfaceId();
        int providerSize = providerInfoList.size();
        String appName = consumerConfig.getAppName();
        if (LOGGER.isInfoEnabled(appName)) {
            LOGGER.infoWithApp(appName, "Add provider of {}, size is : {}", interfaceId, providerSize);
        }
        if (providerSize > 0) {
            // å¤šçº¿ç¨‹å»ºç«‹è¿žæŽ¥
            int threads = Math.min(10, providerSize); // æœ€å¤§10ä¸ª
            final CountDownLatch latch = new CountDownLatch(providerSize);
            ThreadPoolExecutor initPool = new ThreadPoolExecutor(threads, threads,
                0L, TimeUnit.MILLISECONDS,
                new LinkedBlockingQueue<Runnable>(providerInfoList.size()),
                new NamedThreadFactory("CLI-CONN-" + interfaceId, true));
            int connectTimeout = consumerConfig.getConnectTimeout();
            for (final ProviderInfo providerInfo : providerInfoList) {
                initClientRunnable(initPool, latch, providerInfo);
            }

            try {
                int totalTimeout = ((providerSize % threads == 0) ? (providerSize / threads) : ((providerSize /
                    threads) + 1)) * connectTimeout + 500;
                latch.await(totalTimeout, TimeUnit.MILLISECONDS); // ä¸€ç›´ç­‰åˆ°å­?çº¿ç¨‹éƒ½ç»“æ?Ÿ
            } catch (InterruptedException e) {
                LOGGER.errorWithApp(appName, "Exception when add provider", e);
            } finally {
                initPool.shutdown(); // å…³é—­çº¿ç¨‹æ± 
            }
        }
    }

    /**
     * çº¿ç¨‹æ± å»ºç«‹é•¿è¿žæŽ¥
     */
    protected void initClientRunnable(ThreadPoolExecutor initPool, final CountDownLatch latch,
                                      final ProviderInfo providerInfo) {
        final ClientTransportConfig config = providerToClientConfig(providerInfo);
        initPool.execute(new Runnable() {
            @Override
            public void run() {
                ClientTransport transport = ClientTransportFactory.getClientTransport(config);
                if (consumerConfig.isLazy()) {
                    uninitializedConnections.put(providerInfo, transport);
                    latch.countDown();
                } else {
                    try {
                        initClientTransport(consumerConfig.getInterfaceId(), providerInfo, transport);
                    } finally {
                        latch.countDown(); // è¿žä¸Šæˆ–è€…æŠ›å¼‚å¸¸
                    }
                }
            }
        });
    }

    protected void initClientTransport(String interfaceId, ProviderInfo providerInfo, ClientTransport transport) {
        try {
            transport.connect();
            if (doubleCheck(interfaceId, providerInfo, transport)) {
                printSuccess(interfaceId, providerInfo, transport);
                addAlive(providerInfo, transport);
            } else {
                printFailure(interfaceId, providerInfo, transport);
                addRetry(providerInfo, transport);
            }
        } catch (Exception e) {
            if (LOGGER.isDebugEnabled(consumerConfig.getAppName())) {
                LOGGER.debugWithApp(consumerConfig.getAppName(), "Failed to connect " + providerInfo, e);
            }
            printDead(interfaceId, providerInfo, transport, e);
            addRetry(providerInfo, transport);
        }
    }

    public void removeNode(List<ProviderInfo> providerInfos) {

        //first update last all providers
        lastAddresses.removeAll(providerInfos);

        String interfaceId = consumerConfig.getInterfaceId();
        String appName = consumerConfig.getAppName();
        if (LOGGER.isInfoEnabled(appName)) {
            LOGGER.infoWithApp(appName, "Remove provider of {}, size is : {}", interfaceId, providerInfos.size());
        }
        for (ProviderInfo providerInfo : providerInfos) {
            try {
                // ä»Žå­˜æ´»å’Œé‡?è¯•åˆ—è¡¨é‡Œéƒ½åˆ é™¤
                //  åˆ¤æ–­ä¸€ä¸ªåˆ æˆ?åŠŸ å°±ä¸?èµ°ä¸‹ä¸€ä¸ª
                ClientTransport transport = remove(providerInfo);
                if (LOGGER.isInfoEnabled(appName)) {
                    LOGGER.infoWithApp(appName, "Remove provider of {}: {} from list success !", interfaceId,
                        providerInfo);
                }
                if (transport != null) {
                    ClientTransportFactory.releaseTransport(transport, consumerConfig.getDisconnectTimeout());
                }
            } catch (Exception e) {
                LOGGER.errorWithApp(appName, "Remove provider of " + consumerConfig.getInterfaceId() + ": " +
                    providerInfo
                    + " from list error:", e);
            }
        }
    }

    @Override
    public ConcurrentMap<ProviderInfo, ClientTransport> getAvailableConnections() {
        return aliveConnections.isEmpty() ? subHealthConnections : aliveConnections;
    }

    @Override
    public List<ProviderInfo> getAvailableProviders() {
        // å­˜æ´»ä¸ºç©ºçš„ï¼Œé‚£å°±ç”¨äºšå?¥åº·çš„
        ConcurrentMap<ProviderInfo, ClientTransport> map =
                aliveConnections.isEmpty() ? subHealthConnections : aliveConnections;
        return new ArrayList<ProviderInfo>(map.keySet());
    }

    @Override
    public ClientTransport getAvailableClientTransport(ProviderInfo providerInfo) {
        // å…ˆåŽ»å­˜æ´»åˆ—è¡¨
        ClientTransport transport = aliveConnections.get(providerInfo);
        if (transport != null) {
            return transport;
        }
        // å†?åŽ»äºšå?¥åº·åˆ—è¡¨
        transport = subHealthConnections.get(providerInfo);
        if (transport != null) {
            return transport;
        }
        // æœ€å?Žçœ‹çœ‹æ˜¯å?¦ç¬¬ä¸€æ¬¡è°ƒç”¨æœªåˆ?å§‹åŒ–
        transport = uninitializedConnections.get(providerInfo);
        if (transport != null) {
            // æœªåˆ?å§‹åŒ–åˆ™åˆ?å§‹åŒ–
            synchronized (this) {
                transport = uninitializedConnections.get(providerInfo);
                if (transport != null) {
                    initClientTransport(consumerConfig.getInterfaceId(), providerInfo, transport);
                    uninitializedConnections.remove(providerInfo);
                }
                return getAvailableClientTransport(providerInfo);
            }
        }
        return null;
    }

    @Override
    public boolean isAvailableEmpty() {
        return aliveConnections.isEmpty() && subHealthConnections.isEmpty();
    }

    /**
     * Providerå¯¹è±¡å¾—åˆ° ClientTransportConfig
     *
     * @param providerInfo Provider
     * @return ClientTransportConfig
     */
    protected ClientTransportConfig providerToClientConfig(ProviderInfo providerInfo) {
        return new ClientTransportConfig()
            .setConsumerConfig(consumerConfig)
            .setProviderInfo(providerInfo)
            .setContainer(consumerConfig.getProtocol())
            .setConnectTimeout(consumerConfig.getConnectTimeout())
            .setInvokeTimeout(consumerConfig.getTimeout())
            .setDisconnectTimeout(consumerConfig.getDisconnectTimeout())
            .setConnectionNum(consumerConfig.getConnectionNum())
            .setChannelListeners(consumerConfig.getOnConnect());
    }

    /**
     * èŽ·å?–å½“å‰?çš„Provideråˆ—è¡¨ï¼ˆåŒ…æ‹¬è¿žä¸Šå’Œæ²¡è¿žä¸Šçš„ï¼‰
     *
     * @return å½“å‰?çš„Provideråˆ—è¡¨ set
     */
    @Override
    public Set<ProviderInfo> currentProviderList() {
        providerLock.lock();
        try {
            ConcurrentHashSet<ProviderInfo> providerInfos = new ConcurrentHashSet<ProviderInfo>();
            providerInfos.addAll(lastAddresses);
            return providerInfos;
        } finally {
            providerLock.unlock();
        }
    }

    @Override
    public void setUnavailable(ProviderInfo providerInfo, ClientTransport transport) {
        providerLock.lock();
        try {
            boolean first = isAvailableEmpty();
            if (aliveConnections.remove(providerInfo) != null) {
                retryConnections.put(providerInfo, transport);
                if (!first && isAvailableEmpty()) { // åŽŸæ?¥ä¸?ç©ºï¼Œå?˜æˆ?ç©º
                    notifyStateChangeToUnavailable();
                }
            }
        } finally {
            providerLock.unlock();
        }
    }

    @Override
    public void destroy() {
        destroy(null);
    }

    @Override
    public void destroy(DestroyHook destroyHook) {
        // å…³é—­é‡?è¿žçº¿ç¨‹
        shutdownReconnectThread();
        // å…³é—­å…¨éƒ¨é•¿è¿žæŽ¥
        closeAllClientTransports(destroyHook);
    }

    /**
     * æ¸…ç©ºæœ?åŠ¡åˆ—è¡¨
     *
     * @return å¸¦å›žæ”¶çš„æœ?åŠ¡åˆ—è¡¨
     */
    protected Map<ProviderInfo, ClientTransport> clearProviders() {
        providerLock.lock();
        try {
            // å½“å‰?å­˜æ´»+é‡?è¯•çš„
            HashMap<ProviderInfo, ClientTransport> all = new HashMap<ProviderInfo, ClientTransport>(aliveConnections);
            all.putAll(subHealthConnections);
            all.putAll(retryConnections);
            all.putAll(uninitializedConnections);
            subHealthConnections.clear();
            aliveConnections.clear();
            retryConnections.clear();
            uninitializedConnections.clear();
            lastAddresses.clear();
            return all;
        } finally {
            providerLock.unlock();
        }
    }

    /**
     * é”€æ¯?å…¨éƒ¨è¿žæŽ¥
     *
     * @param destroyHook é”€æ¯?é’©å­?
     */
    @Override
    public void closeAllClientTransports(DestroyHook destroyHook) {

        // æ¸…ç©ºæ‰€æœ‰åˆ—è¡¨,ä¸?è®©å†?è°ƒäº†
        Map<ProviderInfo, ClientTransport> all = clearProviders();
        if (destroyHook != null) {
            try {
                destroyHook.preDestroy();
            } catch (Exception e) {
                if (LOGGER.isWarnEnabled(consumerConfig.getAppName())) {
                    LOGGER.warnWithApp(consumerConfig.getAppName(), e.getMessage(), e);
                }
            }
        }
        // å¤šçº¿ç¨‹é”€æ¯?å·²ç»?å»ºç«‹çš„è¿žæŽ¥
        int providerSize = all.size();
        if (providerSize > 0) {
            int timeout = consumerConfig.getDisconnectTimeout();
            int threads = Math.min(10, providerSize); // æœ€å¤§10ä¸ª
            final CountDownLatch latch = new CountDownLatch(providerSize);
            ThreadPoolExecutor closePool = new ThreadPoolExecutor(threads, threads,
                0L, TimeUnit.MILLISECONDS,
                new LinkedBlockingQueue<Runnable>(providerSize),
                new NamedThreadFactory("CLI-DISCONN-" + consumerConfig.getInterfaceId(), true));
            for (Map.Entry<ProviderInfo, ClientTransport> entry : all.entrySet()) {
                final ProviderInfo providerInfo = entry.getKey();
                final ClientTransport transport = entry.getValue();
                closePool.execute(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            ClientTransportFactory.releaseTransport(transport, 0);
                        } catch (Exception e) {
                            if (LOGGER.isWarnEnabled(consumerConfig.getAppName())) {
                                LOGGER.warnWithApp(consumerConfig.getAppName(),
                                    "catch exception but ignore it when close alive client : {}", providerInfo);
                            }
                        } finally {
                            latch.countDown();
                        }
                    }
                });
            }
            try {
                int totalTimeout = ((providerSize % threads == 0) ? (providerSize / threads) : ((providerSize /
                    threads) + 1)) * timeout + 500;
                latch.await(totalTimeout, TimeUnit.MILLISECONDS); // ä¸€ç›´ç­‰åˆ°
            } catch (InterruptedException e) {
                LOGGER.errorWithApp(consumerConfig.getAppName(), "Exception when close transport", e);
            } finally {
                closePool.shutdown();
            }
        }
    }

    /**
     * æ‰“å?°è¿žæŽ¥æˆ?åŠŸæ—¥å¿—
     *
     * @param interfaceId  æŽ¥å?£å??ç§°
     * @param providerInfo æœ?åŠ¡ç«¯
     * @param transport    è¿žæŽ¥
     */
    protected void printSuccess(String interfaceId, ProviderInfo providerInfo, ClientTransport transport) {
        if (LOGGER.isInfoEnabled(consumerConfig.getAppName())) {
            LOGGER.infoWithApp(consumerConfig.getAppName(), "Connect to {} provider:{} success ! The connection is "
                + NetUtils.connectToString(transport.remoteAddress(), transport.localAddress())
                , interfaceId, providerInfo);
        }
    }

    /**
     * æ‰“å?°è¿žæŽ¥å¤±è´¥æ—¥å¿—
     *
     * @param interfaceId  æŽ¥å?£å??ç§°
     * @param providerInfo æœ?åŠ¡ç«¯
     * @param transport    è¿žæŽ¥
     */
    protected void printFailure(String interfaceId, ProviderInfo providerInfo, ClientTransport transport) {
        if (LOGGER.isInfoEnabled(consumerConfig.getAppName())) {
            LOGGER.infoWithApp(consumerConfig.getAppName(), "Connect to {} provider:{} failure !", interfaceId,
                providerInfo);
        }
    }

    /**
     * æ‰“å?°è¿žä¸?ä¸Šæ—¥å¿—
     *
     * @param interfaceId  æŽ¥å?£å??ç§°
     * @param providerInfo æœ?åŠ¡ç«¯
     * @param transport    è¿žæŽ¥
     * @param e            é”™è¯¯
     */
    protected void printDead(String interfaceId, ProviderInfo providerInfo, ClientTransport transport, Exception e) {
        Throwable cause = e.getCause();
        if (LOGGER.isWarnEnabled(consumerConfig.getAppName())) {
            LOGGER.warnWithApp(consumerConfig.getAppName(),
                "Connect to {} provider:{} failure !! The exception is " + ExceptionUtils.toShortString(e, 1)
                    + (cause != null ? ", cause by " + cause.getMessage() + "." : "."),
                interfaceId, providerInfo);
        }
    }

    /**
     * èŽ·å?–å½“å‰?çš„Provideråˆ—è¡¨ï¼ˆåŒ…æ‹¬è¿žä¸Šå’Œæ²¡è¿žä¸Šçš„ï¼‰
     *
     * @return å½“å‰?çš„Provideråˆ—è¡¨ set
     */
    public Map<String, Set<ProviderInfo>> currentProviderMap() {
        providerLock.lock();
        try {
            Map<String, Set<ProviderInfo>> tmp = new LinkedHashMap<String, Set<ProviderInfo>>();
            tmp.put("alive", new HashSet<ProviderInfo>(aliveConnections.keySet()));
            tmp.put("subHealth", new HashSet<ProviderInfo>(subHealthConnections.keySet()));
            tmp.put("retry", new HashSet<ProviderInfo>(retryConnections.keySet()));
            tmp.put("uninitialized", new HashSet<ProviderInfo>(uninitializedConnections.keySet()));
            tmp.put("all", new HashSet<ProviderInfo>(lastAddresses));
            return tmp;
        } finally {
            providerLock.unlock();
        }
    }

    /**
     * ä¸¤æ¬¡éªŒè¯?æ£€æŸ¥ClientTransportæ˜¯å?¦å­˜æ´»
     *
     * @param interfaceId æŽ¥å?£
     * @param transport   ClientTransportå¯¹è±¡
     * @return æ˜¯å?¦å­˜æ´»
     */
    protected boolean doubleCheck(String interfaceId, ProviderInfo providerInfo, ClientTransport transport) {
        if (transport.isAvailable()) {
            try { // ç?¡ä¸€ä¸‹ä¸‹ é˜²æ­¢è¢«è¿žä¸Šå?ˆè¢«æœ?åŠ¡ç«¯è¸¢ä¸‹çº¿
                Thread.sleep(100);
            } catch (InterruptedException e) {
                // ignore
            }
            if (transport.isAvailable()) { // double check
                return true;
            } else { // å?¯èƒ½åœ¨é»‘å??å?•é‡Œï¼Œåˆšè¿žä¸Šå°±æ–­å¼€äº†
                if (LOGGER.isWarnEnabled(consumerConfig.getAppName())) {
                    LOGGER.warnWithApp(consumerConfig.getAppName(),
                        "Connection has been closed after connected (in last 100ms)!" +
                            " Maybe connectionNum of provider has been reached limit," +
                            " or your host is in the blacklist of provider {}/{}",
                        interfaceId, transport.getConfig().getProviderInfo());
                }
                providerInfo.setDynamicAttr(ProviderInfoAttrs.ATTR_RC_PERIOD_COEFFICIENT, 5);
                return false;
            }
        } else {
            return false;
        }
    }

    /**
     * é‡?è¿žçº¿ç¨‹
     */
    private volatile ScheduledService reconThread;

    /**
     * å?¯åŠ¨é‡?è¿ž+å¿ƒè·³çº¿ç¨‹
     */
    protected void startReconnectThread() {
        final String interfaceId = consumerConfig.getInterfaceId();
        // å?¯åŠ¨çº¿ç¨‹æ± 
        // é»˜è®¤æ¯?éš”10ç§’é‡?è¿ž
        int reconnect = consumerConfig.getReconnectPeriod();
        if (reconnect > 0) {
            reconnect = Math.max(reconnect, 2000); // æœ€å°?2000
            reconThread = new ScheduledService("CLI-RC-" + interfaceId, ScheduledService.MODE_FIXEDDELAY, new
                Runnable() {
                    @Override
                    public void run() {
                        try {
                            doReconnect();
                        } catch (Throwable e) {
                            LOGGER.errorWithApp(consumerConfig.getAppName(),
                                "Exception when retry connect to provider", e);
                        }
                    }
                }, reconnect, reconnect, TimeUnit.MILLISECONDS).start();
        }
    }

    /**
     * é‡?è¯•æ¬¡æ•°æ ‡è®°ï¼ˆé’ˆå¯¹æ¯?ä¸ªProviderä¸?ä¸€æ ·ï¼‰
     */
    private AtomicInteger reconnectFlag = new AtomicInteger();

    /**
     * é‡?è¿žæ–­å¼€å’Œæ­»äº¡çš„èŠ‚ç‚¹
     */
    private void doReconnect() {
        String interfaceId = consumerConfig.getInterfaceId();
        String appName = consumerConfig.getAppName();
        int thisTime = reconnectFlag.incrementAndGet();
        boolean print = thisTime % 6 == 0; //æ˜¯å?¦æ‰“å?°error,æ¯?6æ¬¡æ‰“å?°ä¸€æ¬¡
        boolean isAliveEmptyFirst = isAvailableEmpty();
        // æ£€æŸ¥å?¯ç”¨è¿žæŽ¥  todo subHealth
        for (Map.Entry<ProviderInfo, ClientTransport> alive : aliveConnections.entrySet()) {
            ClientTransport connection = alive.getValue();
            if (connection != null && !connection.isAvailable()) {
                aliveToRetry(alive.getKey(), connection);
            }
        }
        for (Map.Entry<ProviderInfo, ClientTransport> entry : getRetryConnections()
            .entrySet()) {
            ProviderInfo providerInfo = entry.getKey();
            int providerPeriodCoefficient = CommonUtils.parseNum((Integer)
                providerInfo.getDynamicAttr(ProviderInfoAttrs.ATTR_RC_PERIOD_COEFFICIENT), 1);
            if (thisTime % providerPeriodCoefficient != 0) {
                continue; // å¦‚æžœå‘½ä¸­é‡?è¿žå‘¨æœŸï¼Œåˆ™è¿›è¡Œé‡?è¿ž
            }
            ClientTransport transport = entry.getValue();
            if (LOGGER.isDebugEnabled(appName)) {
                LOGGER.debugWithApp(appName, "Retry connect to {} provider:{} ...", interfaceId, providerInfo);
            }
            try {
                transport.connect();
                if (doubleCheck(interfaceId, providerInfo, transport)) {
                    providerInfo.setDynamicAttr(ProviderInfoAttrs.ATTR_RC_PERIOD_COEFFICIENT, 1);
                    retryToAlive(providerInfo, transport);
                }
            } catch (Exception e) {
                if (print) {
                    if (LOGGER.isWarnEnabled(appName)) {
                        LOGGER.warnWithApp(appName, "Retry connect to {} provider:{} error ! The exception is " + e
                            .getMessage(), interfaceId, providerInfo);
                    }
                } else {
                    if (LOGGER.isDebugEnabled(appName)) {
                        LOGGER.debugWithApp(appName, "Retry connect to {} provider:{} error ! The exception is " + e
                            .getMessage(), interfaceId, providerInfo);
                    }
                }
            }
        }
        if (isAliveEmptyFirst && !isAvailableEmpty()) { // åŽŸæ?¥ç©ºï¼Œå?˜æˆ?ä¸?ç©º
            notifyStateChangeToAvailable();
        }
    }

    /**
     * å…³é—­çº¿ç¨‹
     */
    protected void shutdownReconnectThread() {
        if (reconThread != null) {
            reconThread.shutdown();
            reconThread = null;
        }
    }
}
