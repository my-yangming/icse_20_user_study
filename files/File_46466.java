/*
 * Copyright 2017-2019 CodingApi .
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.codingapi.txlcn.tc.core;


import com.codingapi.txlcn.tc.core.transaction.tcc.control.TccTransactionCleanService;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;

import java.util.Objects;

/**
 * åˆ†å¸ƒå¼?äº‹åŠ¡è¿œç¨‹è°ƒç”¨æŽ§åˆ¶å¯¹è±¡
 * ï¼?ï¼?ï¼?ä¸?æŽ¨è??ç”¨æˆ·ä¸šåŠ¡ä½¿ç”¨ï¼ŒAPIå?˜æ›´æ€§å¤§ï¼Œä½¿ç”¨ä¸?å½“æœ‰å?¯èƒ½é€ æˆ?äº‹åŠ¡æµ?ç¨‹å‡ºé”™ ï¼?ï¼?ï¼?
 * <p>
 * Created by lorne on 2017/6/5.
 */
@Data
@Slf4j
public class DTXLocalContext {

    private final static ThreadLocal<DTXLocalContext> currentLocal = new InheritableThreadLocal<>();

    /**
     * äº‹åŠ¡ç±»åž‹
     */
    private String transactionType;

    /**
     * äº‹åŠ¡ç»„
     */
    private String groupId;

    /**
     * äº‹åŠ¡å?•å…ƒ
     */
    private String unitId;

    /**
     * ä¸šåŠ¡ç›¸å…³èµ„æº?
     */
    private Object resource;


    ////////////////////////// volatile ///////////////////////////////

    /**
     * æ˜¯å?¦éœ€è¦?é”€æ¯?ã€‚ä»€ä¹ˆæ—¶å€™éœ€è¦?ï¼Ÿä¸€ä¸ªè¯·æ±‚ä¸‹æ?¥ï¼Œè¿™ä¸ªæ¨¡å?—æœ‰ä¸¤ä¸ªUnitè¢«æ‰§è¡Œï¼Œé‚£ä¹ˆè¢«è°ƒæ–¹æ˜¯ä¸?èƒ½é”€æ¯?çš„ï¼Œå?ªèƒ½æœ‰ä¸Šå±‚è°ƒç”¨æ–¹é”€æ¯?
     */
    private boolean destroy = true;

    /**
     * å?Œäº‹åŠ¡ç»„æ ‡è¯†
     */
    private boolean inGroup;

    /**
     * é¢?å¤–çš„é™„åŠ å€¼
     */
    private Object attachment;

    /**
     * ç³»ç»Ÿåˆ†å¸ƒå¼?äº‹åŠ¡çŠ¶æ€?
     */
    private int sysTransactionState = 1;

    /**
     * ç”¨æˆ·åˆ†å¸ƒå¼?äº‹åŠ¡çŠ¶æ€?
     */
    private int userTransactionState = -1;

    /**
     * æ˜¯å?¦ä»£ç?†èµ„æº?
     */
    private boolean proxy;

    /**
     * æ˜¯å?¦æ˜¯åˆšåˆšåˆ›å»ºçš„DTXLocal. ä¸?æ˜¯ç‰¹åˆ«äº†è§£è¿™ä¸ªæ„?æ€?æ—¶ï¼Œä¸?è¦?è½»æ˜“æ“?ä½œè¿™ä¸ªå€¼ã€‚
     *
     * @see TccTransactionCleanService#clear(java.lang.String, int, java.lang.String, java.lang.String)
     */
    @Deprecated
    private boolean justNow;

    //////// private     ///////////////////////
    /**
     * ä¸´æ—¶å€¼
     */
    private boolean proxyTmp;


    private boolean isProxyTmp() {
        return proxyTmp;
    }

    private void setProxyTmp(boolean proxyTmp) {
        this.proxyTmp = proxyTmp;
    }
    ///////   end      /////////////////////////


    /**
     * èŽ·å?–å½“å‰?çº¿ç¨‹å?˜é‡?ã€‚ä¸?æŽ¨è??ç”¨æ­¤æ–¹æ³•ï¼Œä¼šäº§ç”ŸNullPointerException
     *
     * @return å½“å‰?çº¿ç¨‹å?˜é‡?
     */
    public static DTXLocalContext cur() {
        return currentLocal.get();
    }

    /**
     * èŽ·å?–æˆ–æ–°å»ºä¸€ä¸ªçº¿ç¨‹å?˜é‡?ã€‚
     *
     * @return å½“å‰?çº¿ç¨‹å?˜é‡?
     */
    public static DTXLocalContext getOrNew() {
        if (currentLocal.get() == null) {
            currentLocal.set(new DTXLocalContext());
        }
        return currentLocal.get();
    }

    /**
     * è®¾ç½®ä»£ç?†èµ„æº?
     */
    public static void makeProxy() {
        if (currentLocal.get() != null) {
            cur().proxyTmp = cur().proxy;
            cur().proxy = true;
        }
    }

    /**
     * è®¾ç½®ä¸?ä»£ç?†èµ„æº?
     */
    public static void makeUnProxy() {
        if (currentLocal.get() != null) {
            cur().proxyTmp = cur().proxy;
            cur().proxy = false;
        }
    }

    /**
     * æ’¤é”€åˆ°ä¸Šä¸€æ­¥çš„èµ„æº?ä»£ç?†çŠ¶æ€?
     */
    public static void undoProxyStatus() {
        if (currentLocal.get() != null) {
            cur().proxy = cur().proxyTmp;
        }
    }

    /**
     * æ¸…ç?†çº¿ç¨‹å?˜é‡?
     */
    public static void makeNeverAppeared() {
        if (currentLocal.get() != null) {
            log.debug("clean thread local[{}]: {}", DTXLocalContext.class.getSimpleName(), cur());
            currentLocal.set(null);
        }
    }

    /**
     * äº‹åŠ¡çŠ¶æ€?
     * @param userDtxState state
     * @return 1 commit 0 rollback
     */
    public static int transactionState(int userDtxState) {
        DTXLocalContext dtxLocalContext = Objects.requireNonNull(currentLocal.get(), "DTX can't be null.");
        return userDtxState == 1 ? dtxLocalContext.sysTransactionState : userDtxState;
    }
}
