/*
 * Copyright 2015-2102 RonCoo(http://www.roncoo.com) Group.
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *  
 *      http://www.apache.org/licenses/LICENSE-2.0
 *  
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.roncoo.pay.account.service.impl;

import com.roncoo.pay.account.dao.RpSettDailyCollectDao;
import com.roncoo.pay.account.dao.RpSettRecordDao;
import com.roncoo.pay.account.entity.RpAccount;
import com.roncoo.pay.account.entity.RpSettDailyCollect;
import com.roncoo.pay.account.entity.RpSettRecord;
import com.roncoo.pay.account.enums.SettDailyCollectStatusEnum;
import com.roncoo.pay.account.enums.SettDailyCollectTypeEnum;
import com.roncoo.pay.account.enums.SettModeTypeEnum;
import com.roncoo.pay.account.enums.SettRecordStatusEnum;
import com.roncoo.pay.account.exception.AccountBizException;
import com.roncoo.pay.account.exception.SettBizException;
import com.roncoo.pay.account.service.RpAccountQueryService;
import com.roncoo.pay.account.service.RpAccountTransactionService;
import com.roncoo.pay.account.service.RpSettHandleService;
import com.roncoo.pay.account.utils.AccountConfigUtil;
import com.roncoo.pay.account.vo.DailyCollectAccountHistoryVo;
import com.roncoo.pay.common.core.exception.BizException;
import com.roncoo.pay.common.core.utils.DateUtils;
import com.roncoo.pay.trade.enums.TrxTypeEnum;
import com.roncoo.pay.user.entity.RpUserBankAccount;
import com.roncoo.pay.user.entity.RpUserInfo;
import com.roncoo.pay.user.enums.BankAccountTypeEnum;
import com.roncoo.pay.user.exception.UserBizException;
import com.roncoo.pay.user.service.RpUserBankAccountService;
import com.roncoo.pay.user.service.RpUserInfoService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

/**
 * ç»“ç®—æ ¸å¿ƒä¸šåŠ¡å¤„ç?†å®žçŽ°ç±»
 * é¾™æžœå­¦é™¢ï¼šwww.roncoo.com
 * @authorï¼šzenghao
 */
@Service("rpSettHandleService")
public class RpSettHandleServiceImpl implements RpSettHandleService {
	@Autowired
	private RpSettDailyCollectDao rpSettDailyCollectDao;
	@Autowired
	private RpSettRecordDao rpSettRecordDao;
	@Autowired
	private RpAccountTransactionService rpAccountTransactionService;
	@Autowired
	private RpAccountQueryService rpAccountQueryService;
	@Autowired
	private RpUserInfoService rpUserInfoService;
	@Autowired
	private RpUserBankAccountService rpUserBankAccountService;

	/**
	 * æŒ‰å?•ä¸ªå•†æˆ·å?‘èµ·æ¯?æ—¥å¾…ç»“ç®—æ•°æ?®ç»Ÿè®¡æ±‡æ€».<br/>
	 * 
	 * @param userNo
	 *            ç”¨æˆ·ç¼–å?·.
	 * @param endDate
	 *            æ±‡æ€»ç»“æ?Ÿæ—¥æœŸ.
	 * @param riskDay
	 *            é£Žé™©é¢„å­˜æœŸ.
	 * @param userName
	 *            ç”¨æˆ·å??ç§°
	 * @param codeNum
	 *            ä¼?ä¸šä»£å?·
	 */
	@Transactional(rollbackFor = Exception.class)
	public void dailySettlementCollect(String userNo, Date endDate, int riskDay, String userName){
		// æ ¹æ?®ç”¨æˆ·ç¼–å?·æŸ¥è¯¢è´¦æˆ·
		RpAccount account = rpAccountQueryService.getAccountByUserNo(userNo);
		// æ±‡æ€»æ—¥æœŸ
		String endDateStr = DateUtils.formatDate(endDate, "yyyy-MM-dd");
		// æ±‡æ€»è´¦æˆ·åŽ†å?²
		List<DailyCollectAccountHistoryVo> accountHistoryList = rpAccountQueryService.listDailyCollectAccountHistoryVo(account.getAccountNo(), endDateStr, riskDay, null);
		// é??åŽ†ç»Ÿè®¡
		BigDecimal totalAmount = BigDecimal.ZERO;
		for (DailyCollectAccountHistoryVo collectVo : accountHistoryList) {
			// ç´¯åŠ å?¯ç»“ç®—é‡‘é¢?
			totalAmount = totalAmount.add(collectVo.getTotalAmount());
			// ä¿?å­˜ç»“ç®—æ±‡æ€»è®°å½•
			RpSettDailyCollect dailyCollect = new RpSettDailyCollect();
			dailyCollect.setAccountNo(collectVo.getAccountNo());
			dailyCollect.setUserName(userName);
			dailyCollect.setCollectDate(collectVo.getCollectDate());
			dailyCollect.setCollectType(SettDailyCollectTypeEnum.ALL.name());
			dailyCollect.setTotalAmount(collectVo.getTotalAmount());
			dailyCollect.setTotalCount(collectVo.getTotalNum());
			dailyCollect.setSettStatus(SettDailyCollectStatusEnum.SETTLLED.name());
			dailyCollect.setRiskDay(collectVo.getRiskDay());
			dailyCollect.setRemark("");
			dailyCollect.setEditTime(new Date());
			rpSettDailyCollectDao.insert(dailyCollect);
		}

		// æ›´æ–°è´¦æˆ·åŽ†å?²ä¸­çš„ç»“ç®—çŠ¶æ€?ï¼Œå¹¶ä¸”ç´¯åŠ å?¯ç»“ç®—é‡‘é¢?
		rpAccountTransactionService.settCollectSuccess(userNo, endDateStr, riskDay, totalAmount);
	}
	
	/**
	 * å?‘èµ·ç»“ç®—--å¯¹åº”ä¸ŽæŽ¥å?£
	 * 
	 * @param userNo
	 * @param accountNo
	 * @param settAmount
	 * @param bankAccount
	 */
	public void launchSett(String userNo, BigDecimal settAmount){
		RpAccount account = rpAccountQueryService.getAccountByUserNo(userNo);
		RpUserInfo userInfo = rpUserInfoService.getDataByMerchentNo(userNo);
		RpUserBankAccount rpUserBankAccount = rpUserBankAccountService.getByUserNo(userNo);
		BigDecimal availableAmount = account.getAvailableSettAmount();
		if (settAmount.compareTo(availableAmount) > 0) {
			// é‡‘é¢?è¶…é™?
			throw AccountBizException.ACCOUNT_SUB_AMOUNT_OUTLIMIT;
		}
		if (rpUserBankAccount == null) {
			throw UserBizException.USER_BANK_ACCOUNT_IS_NULL;
			
		}
		
		String settType = SettModeTypeEnum.SELFHELP_SETTLE.name();
		this.launchSett(userNo, userInfo.getUserName(), account.getAccountNo(), settAmount, rpUserBankAccount, settType);
		
	}

	/**
	 * å?‘èµ·ç»“ç®—
	 * 
	 * @param userNo
	 * @param accountNo
	 * @param settAmount
	 * @param bankAccount
	 * @param settType å?‘èµ·ç»“ç®—æ–¹å¼?:æ‰‹åŠ¨ã€?è‡ªåŠ¨
	 */

	@Transactional(rollbackFor = Exception.class)
	private void launchSett(String userNo, String userName, String accountNo, BigDecimal settAmount, RpUserBankAccount bankAccount, String settType) {
		
		// æ‰€è¡ŒæŸ¥è¯¢è´¦æˆ·
		RpSettRecord settRecord = new RpSettRecord();
		settRecord.setAccountNo(accountNo);
		settRecord.setCountry("ä¸­å›½");
		settRecord.setProvince(bankAccount.getProvince());
		settRecord.setCity(bankAccount.getCity());
		settRecord.setAreas(bankAccount.getAreas());
		settRecord.setBankAccountAddress(bankAccount.getStreet());
		settRecord.setBankAccountName(bankAccount.getBankAccountName());
		settRecord.setBankCode(bankAccount.getBankCode());
		settRecord.setBankName(bankAccount.getBankName());
		settRecord.setBankAccountNo(bankAccount.getBankAccountNo());
		settRecord.setBankAccountType(bankAccount.getBankAccountType());
		settRecord.setOperatorLoginname("");
		settRecord.setOperatorRealname("");
		settRecord.setRemitAmount(settAmount);
		settRecord.setRemitRequestTime(new Date());
		settRecord.setSettAmount(settAmount);
		settRecord.setSettFee(BigDecimal.ZERO);
		settRecord.setSettMode(settType);
		settRecord.setSettStatus(SettRecordStatusEnum.WAIT_CONFIRM.name());
		settRecord.setUserName(userName);
		settRecord.setUserNo(userNo);
		settRecord.setMobileNo(bankAccount.getMobileNo());
		settRecord.setEditTime(new Date());
		rpSettRecordDao.insert(settRecord);

		// å†»ç»“å‡†å¤‡ç»“ç®—å‡ºåŽ»çš„èµ„é‡‘
		rpAccountTransactionService.freezeAmount(userNo, settAmount);
	}

	/**
	 * å?‘èµ·è‡ªåŠ¨ç»“ç®—
	 * 
	 * @param userNo
	 */
	public void launchAutoSett(String userNo){
		RpUserInfo userInfo = rpUserInfoService.getDataByMerchentNo(userNo);
		RpAccount account = rpAccountQueryService.getAccountByUserNo(userNo);
		BigDecimal settAmount = account.getAvailableSettAmount();
		String settMinAmount = AccountConfigUtil.readConfig("sett_min_amount");
		if (settAmount.compareTo(new BigDecimal(settMinAmount)) == -1) {
			throw new BizException("æ¯?æ¬¡å?‘èµ·ç»“ç®—çš„é‡‘é¢?å¿…é¡»å¤§äºŽ:" + settMinAmount);
		}

		RpUserBankAccount rpUserBankAccount = rpUserBankAccountService.getByUserNo(userNo);
		if (rpUserBankAccount == null) {
			throw new BizException("æ²¡æœ‰ç»“ç®—é“¶è¡Œå?¡ä¿¡æ?¯ï¼Œè¯·å…ˆç»‘å®šç»“ç®—é“¶è¡Œå?¡");
		}

		// æ ¹æ?®é“¶è¡Œå?¡ä¿¡æ?¯åˆ¤æ–­æ”¶æ¬¾è´¦æˆ·çš„ç±»åž‹
		String bankType = rpUserBankAccount.getBankAccountType();

		// å¦‚æžœæ˜¯å¯¹ç§?è´¦æˆ·ï¼Œéœ€è¦?æŽ§åˆ¶ 1.å?•ç¬”ä¸Šçº¿æ˜¯å?¦å°?äºŽ5W 
		if (bankType.equals(BankAccountTypeEnum.PRIVATE_DEBIT_ACCOUNT.name())) {
			// ç»“ç®—çš„é‡‘é¢?æœ€å¤§å€¼
			String settMaxAmount = AccountConfigUtil.readConfig("sett_max_amount");
			if (settAmount.compareTo(new BigDecimal(settMaxAmount)) == 1) {
				throw new BizException("æ¯?æ¬¡å?‘èµ·ç»“ç®—çš„é‡‘é¢?å¿…é¡»å°?äºŽ:" + settMaxAmount);
			}
		}
		// ç»“ç®—è®°å½•ä¸­çš„userNoå­˜ä¼?ä¸šè¡¨ä¸­ä¼?ä¸šä»£å?·
		String userName = userInfo.getUserName();
		String accountNo = account.getAccountNo();
		String settType = SettModeTypeEnum.REGULAR_SETTLE.name();
		this.launchSett(userNo, userName, accountNo, settAmount, rpUserBankAccount,settType);
	}

	/**
	 * ç»“ç®—å®¡æ ¸
	 */
	public void audit(String settId, String settStatus, String remark){
		RpSettRecord settRecord = rpSettRecordDao.getById(settId);
		if(!settRecord.getSettStatus().equals(SettRecordStatusEnum.WAIT_CONFIRM.name())){
			throw SettBizException.SETT_STATUS_ERROR;
		}
		settRecord.setSettStatus(settStatus);
		settRecord.setEditTime(new Date());
		settRecord.setRemark(remark);
		rpSettRecordDao.update(settRecord);
		
		if(settStatus.equals(SettRecordStatusEnum.CANCEL.name())){//å®¡æ ¸ä¸?é€šè¿‡
			//è§£å†»é‡‘é¢?
			rpAccountTransactionService.unFreezeSettAmount(settRecord.getUserNo(), settRecord.getSettAmount());
		}
	}
	
	/**
	 * æ‰“æ¬¾
	 */
	@Transactional(rollbackFor = Exception.class)
	public void remit(String settId, String settStatus, String remark){
		RpSettRecord settRecord = rpSettRecordDao.getById(settId);
		if(!settRecord.getSettStatus().equals(SettRecordStatusEnum.CONFIRMED.name())){
			throw SettBizException.SETT_STATUS_ERROR;
		}
		settRecord.setSettStatus(settStatus);
		settRecord.setEditTime(new Date());
		settRecord.setRemitRemark(remark);
		settRecord.setRemitAmount(settRecord.getSettAmount());
		settRecord.setRemitConfirmTime(new Date());
		settRecord.setRemitRequestTime(new Date());
		rpSettRecordDao.update(settRecord);
		
		if(settStatus.equals(SettRecordStatusEnum.REMIT_FAIL.name())){//æ‰“æ¬¾å¤±è´¥
			//è§£å†»é‡‘é¢?
			rpAccountTransactionService.unFreezeSettAmount(settRecord.getUserNo(), settRecord.getSettAmount());
		}else if(settStatus.equals(SettRecordStatusEnum.REMIT_SUCCESS.name())){
			rpAccountTransactionService.unFreezeAmount(settRecord.getUserNo(), settRecord.getSettAmount(), settRecord.getId(), TrxTypeEnum.REMIT.name(), remark);
		}
	}
}
