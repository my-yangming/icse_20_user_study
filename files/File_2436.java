package com.hankcs.hanlp.algorithm.ahocorasick.interval;

import java.util.Collections;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

/**
 * çº¿æ®µæ ‘ï¼Œç”¨äºŽæ£€æŸ¥åŒºé—´é‡?å? 
 */
public class IntervalTree
{
    /**
     * æ ¹èŠ‚ç‚¹
     */
    private IntervalNode rootNode = null;

    /**
     * æž„é€ çº¿æ®µæ ‘
     *
     * @param intervals
     */
    public IntervalTree(List<Intervalable> intervals)
    {
        this.rootNode = new IntervalNode(intervals);
    }

    /**
     * ä»ŽåŒºé—´åˆ—è¡¨ä¸­ç§»é™¤é‡?å? çš„åŒºé—´
     *
     * @param intervals
     * @return
     */
    public List<Intervalable> removeOverlaps(List<Intervalable> intervals)
    {

        // æŽ’åº?ï¼ŒæŒ‰ç…§å…ˆå¤§å°?å?Žå·¦ç«¯ç‚¹çš„é¡ºåº?
        Collections.sort(intervals, new IntervalableComparatorBySize());

        Set<Intervalable> removeIntervals = new TreeSet<Intervalable>();

        for (Intervalable interval : intervals)
        {
            // å¦‚æžœåŒºé—´å·²ç»?è¢«ç§»é™¤äº†ï¼Œå°±å¿½ç•¥å®ƒ
            if (removeIntervals.contains(interval))
            {
                continue;
            }

            // å?¦åˆ™å°±ç§»é™¤å®ƒ
            removeIntervals.addAll(findOverlaps(interval));
        }

        // ç§»é™¤æ‰€æœ‰çš„é‡?å? åŒºé—´
        for (Intervalable removeInterval : removeIntervals)
        {
            intervals.remove(removeInterval);
        }

        // æŽ’åº?ï¼ŒæŒ‰ç…§å·¦ç«¯é¡ºåº?
        Collections.sort(intervals, new IntervalableComparatorByPosition());

        return intervals;
    }

    /**
     * å¯»æ‰¾é‡?å? åŒºé—´
     *
     * @param interval ä¸Žè¿™ä¸ªåŒºé—´é‡?å? 
     * @return é‡?å? çš„åŒºé—´åˆ—è¡¨
     */
    public List<Intervalable> findOverlaps(Intervalable interval)
    {
        return rootNode.findOverlaps(interval);
    }

}
