package org.nutz.dao;

import java.util.Map;

import org.nutz.lang.Lang;
import org.nutz.lang.Mirror;
import org.nutz.lang.segment.Segment;
import org.nutz.lang.util.Context;
import org.nutz.log.Log;
import org.nutz.log.Logs;

/**
 * å°†ä¸€ä¸ªå?‚è€ƒå¯¹è±¡å­˜å…¥ ThreadLocal
 * <p>
 * Nutz.Dao å°†åœ¨æž„é€  SQL æ—¶ï¼Œå?‚è€ƒè¿™ä¸ªå¯¹è±¡ã€‚å¦‚ä½•å?‚è€ƒï¼Œè¯·å?‚çœ‹ '@Table' å…³äºŽ â€œåŠ¨æ€?è¡¨å??çš„èµ‹å€¼è§„åˆ™â€? çš„æ??è¿°
 * 
 * @author zozoh(zozohtnt@gmail.com)
 */
public class TableName {

    private static final Log log = Logs.get();

    private static final ThreadLocal<Object> object = new ThreadLocal<Object>();

    /**
     * ä»£ç ?æ¨¡æ?¿ï¼Œè¿™ä¸ªæ¨¡æ?¿ä¿?è¯?äº†ï¼Œåœ¨ atom ä¸­è¿?è¡Œçš„ POJO çš„åŠ¨æ€?è¡¨å??ï¼Œéƒ½ä¼šè¢«å?‚è€ƒå¯¹è±¡æ‰€å½±å“?
     * 
     * @param refer
     *            å?‚è€ƒå¯¹è±¡
     * @param atom
     *            ä½ çš„ä¸šåŠ¡é€»è¾‘
     */
    public static void run(Object refer, Runnable atom) {
        if (null != atom) {
            if (log.isTraceEnabled())
                log.tracef("TableName.run: [%s]->[%s]", object, object.get());

            Object old = get();
            set(refer);
            try {
                atom.run();
            }
            catch (Exception e) {
                throw Lang.wrapThrow(e);
            }
            finally {
                set(old);
                if (log.isTraceEnabled())
                    log.tracef("TableName.finally: [%s]->[%s]", object, object.get());
            }
        }
    }

    /**
     * @return å½“å‰?çº¿ç¨‹ä¸­çš„åŠ¨æ€?è¡¨å??å?‚è€ƒå¯¹è±¡
     */
    public static Object get() {
        return object.get();
    }

    /**
     * ä¸ºå½“å‰?çº¿ç¨‹è®¾ç½®åŠ¨æ€?è¡¨å??å?‚è€ƒå¯¹è±¡
     * 
     * @param obj
     *            å?‚è€ƒå¯¹è±¡
     * @return æ—§çš„åŠ¨æ€?è¡¨å??å?‚è€ƒå¯¹è±¡
     */
    public static Object set(Object obj) {
        Object re = get();
        object.set(obj);
        return re;
    }

    /**
     * æ¸…é™¤å½“å‰?çº¿ç¨‹çš„åŠ¨æ€?è¡¨å??å?‚è€ƒå¯¹è±¡
     */
    public static void clear() {
        set(null);
    }

    /**
     * æ ¹æ?®å½“å‰?çº¿ç¨‹çš„å?‚è€ƒå¯¹è±¡ï¼Œæ¸²æŸ“ä¸€ä¸ªåŠ¨æ€?è¡¨å??
     * 
     * @param tableName
     *            åŠ¨æ€?è¡¨å??
     * @return æ¸²æŸ“å?Žçš„è¡¨å??
     */
    public static String render(Segment tableName) {
        Object obj = get();
        if (null == obj || !tableName.hasKey())
            return tableName.toString();

        Context context = Lang.context();
        if (isPrimitive(obj)) {
            for (String key : tableName.keys())
                context.set(key, obj);
        } else if (obj instanceof Context) {
            for (String key : tableName.keys())
                context.set(key, ((Context) obj).get(key));
        } else if (obj instanceof Map<?, ?>) {
            for (String key : tableName.keys())
                context.set(key, ((Map<?, ?>) obj).get(key));
        } else {
            Mirror<?> mirror = Mirror.me(obj);
            for (String key : tableName.keys())
                context.set(key, mirror.getValue(obj, key));
        }
        return tableName.render(context).toString();
    }

    public static boolean isPrimitive(Object obj) {
        return obj instanceof CharSequence || obj instanceof Number || obj.getClass().isPrimitive();
    }
}
