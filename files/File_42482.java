package com.roncoo.pay.config;

import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.activemq.jms.pool.PooledConnectionFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.context.annotation.PropertySource;
import org.springframework.jms.connection.SingleConnectionFactory;
import org.springframework.jms.core.JmsTemplate;

@Configuration
@PropertySource("classpath:mq_config.properties")
public class ActiveMqConfig {

    @Value("${mq.brokerURL}")
    private String mqBrokerURL;
    @Value("${mq.userName}")
    private String mqUserName;
    @Value("${mq.password}")
    private String mqPassword;
    @Value("#{10}")
    private Integer maxConnections;

    @Value("${tradeQueueName.notify}")
    private String tradeQueueDestinationName;
    @Value("${orderQueryQueueName.query}")
    private String orderQueryDestinationName;

    /**
     * çœŸæ­£å?¯ä»¥äº§ç”ŸConnectionçš„ConnectionFactoryï¼Œç”±å¯¹åº”çš„ JMSæœ?åŠ¡åŽ‚å•†æ??ä¾›
     *
     * @return çœŸæ­£çš„è¿žæŽ¥å·¥åŽ‚
     */
    @Bean(name = "targetConnectionFactory")
    public ActiveMQConnectionFactory activeMQConnectionFactory() {
        ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory();
        activeMQConnectionFactory.setBrokerURL(mqBrokerURL);
        activeMQConnectionFactory.setUserName(mqUserName);
        activeMQConnectionFactory.setPassword(mqPassword);
        return activeMQConnectionFactory;
    }

    /**
     * Springç”¨äºŽç®¡ç?†çœŸæ­£çš„ConnectionFactoryçš„ConnectionFactory
     *
     * @param pooledConnectionFactory Pooledè¿žæŽ¥å·¥åŽ‚
     * @return è¿žæŽ¥å·¥åŽ‚
     */
    @Primary
    @Bean(name = "connectionFactory")
    public SingleConnectionFactory singleConnectionFactory(@Qualifier("pooledConnectionFactory") PooledConnectionFactory pooledConnectionFactory) {
        SingleConnectionFactory singleConnectionFactory = new SingleConnectionFactory();
        singleConnectionFactory.setTargetConnectionFactory(pooledConnectionFactory);
        return singleConnectionFactory;
    }

    /**
     * ActiveMQä¸ºæˆ‘ä»¬æ??ä¾›äº†ä¸€ä¸ªPooledConnectionFactoryï¼Œé€šè¿‡å¾€é‡Œé?¢æ³¨å…¥ä¸€ä¸ªActiveMQConnectionFactory
     * å?¯ä»¥ç”¨æ?¥å°†Connectionã€?Sessionå’ŒMessageProduceræ± åŒ–ï¼Œè¿™æ ·å?¯ä»¥å¤§å¤§çš„å‡?å°‘æˆ‘ä»¬çš„èµ„æº?æ¶ˆè€—ã€‚
     * è¦?ä¾?èµ–äºŽ activemq-poolåŒ…
     *
     * @param activeMQConnectionFactory ç›®æ ‡è¿žæŽ¥å·¥åŽ‚
     * @return Pooledè¿žæŽ¥å·¥åŽ‚
     */
    @Bean(name = "pooledConnectionFactory")
    public PooledConnectionFactory pooledConnectionFactory(@Qualifier("targetConnectionFactory") ActiveMQConnectionFactory activeMQConnectionFactory) {
        PooledConnectionFactory pooledConnectionFactory = new PooledConnectionFactory();
        pooledConnectionFactory.setConnectionFactory(activeMQConnectionFactory);
        pooledConnectionFactory.setMaxConnections(maxConnections);
        return pooledConnectionFactory;
    }

    /**
     * å•†æˆ·é€šçŸ¥é˜Ÿåˆ—æ¨¡æ?¿
     *
     * @param singleConnectionFactory è¿žæŽ¥å·¥åŽ‚
     * @return å•†æˆ·é€šçŸ¥é˜Ÿåˆ—æ¨¡æ?¿
     */
    @Bean(name = "notifyJmsTemplate")
    public JmsTemplate notifyJmsTemplate(@Qualifier("connectionFactory") SingleConnectionFactory singleConnectionFactory) {
        JmsTemplate notifyJmsTemplate = new JmsTemplate();
        notifyJmsTemplate.setConnectionFactory(singleConnectionFactory);
        notifyJmsTemplate.setDefaultDestinationName(tradeQueueDestinationName);
        return notifyJmsTemplate;
    }

    /**
     * é˜Ÿåˆ—æ¨¡æ?¿
     *
     * @param singleConnectionFactory è¿žæŽ¥å·¥åŽ‚
     * @return é˜Ÿåˆ—æ¨¡æ?¿
     */
    @Bean(name = "jmsTemplate")
    public JmsTemplate jmsTemplate(@Qualifier("connectionFactory") SingleConnectionFactory singleConnectionFactory) {
        JmsTemplate notifyJmsTemplate = new JmsTemplate();
        notifyJmsTemplate.setConnectionFactory(singleConnectionFactory);
        notifyJmsTemplate.setDefaultDestinationName(orderQueryDestinationName);
        return notifyJmsTemplate;
    }
}
