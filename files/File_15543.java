/*Copyright Â©2016 TommyLemon(https://github.com/TommyLemon/APIJSON)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.*/

package zuo.biao.apijson.server;

import static zuo.biao.apijson.JSONObject.KEY_COLUMN;
import static zuo.biao.apijson.JSONObject.KEY_COMBINE;
import static zuo.biao.apijson.JSONObject.KEY_DATABASE;
import static zuo.biao.apijson.JSONObject.KEY_EXPLAIN;
import static zuo.biao.apijson.JSONObject.KEY_CACHE;
import static zuo.biao.apijson.JSONObject.KEY_FROM;
import static zuo.biao.apijson.JSONObject.KEY_GROUP;
import static zuo.biao.apijson.JSONObject.KEY_HAVING;
import static zuo.biao.apijson.JSONObject.KEY_ID;
import static zuo.biao.apijson.JSONObject.KEY_ORDER;
import static zuo.biao.apijson.JSONObject.KEY_ROLE;
import static zuo.biao.apijson.JSONObject.KEY_SCHEMA;
import static zuo.biao.apijson.JSONObject.KEY_USER_ID;
import static zuo.biao.apijson.RequestMethod.DELETE;
import static zuo.biao.apijson.RequestMethod.GET;
import static zuo.biao.apijson.RequestMethod.GETS;
import static zuo.biao.apijson.RequestMethod.HEADS;
import static zuo.biao.apijson.RequestMethod.POST;
import static zuo.biao.apijson.RequestMethod.PUT;
import static zuo.biao.apijson.SQL.AND;
import static zuo.biao.apijson.SQL.NOT;
import static zuo.biao.apijson.SQL.OR;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.regex.Pattern;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.annotation.JSONField;

import zuo.biao.apijson.JSON;
import zuo.biao.apijson.Log;
import zuo.biao.apijson.NotNull;
import zuo.biao.apijson.RequestMethod;
import zuo.biao.apijson.RequestRole;
import zuo.biao.apijson.SQL;
import zuo.biao.apijson.StringUtil;
import zuo.biao.apijson.server.exception.NotExistException;
import zuo.biao.apijson.server.model.Column;
import zuo.biao.apijson.server.model.PgAttribute;
import zuo.biao.apijson.server.model.PgClass;
import zuo.biao.apijson.server.model.Table;

/**config sql for JSON Request
 * @author Lemon
 */
public abstract class AbstractSQLConfig implements SQLConfig {
	private static final String TAG = "AbstractSQLConfig";

	public static String DEFAULT_SCHEMA = "sys";

	/**
	 * è¡¨å??æ˜ å°„ï¼Œéš?è—?çœŸå®žè¡¨å??ï¼Œå¯¹å®‰å…¨è¦?æ±‚å¾ˆé«˜çš„è¡¨å?¯ä»¥è¿™ä¹ˆå?š
	 */
	public static final Map<String, String> TABLE_KEY_MAP;
	static {
		TABLE_KEY_MAP = new HashMap<String, String>();
		TABLE_KEY_MAP.put(Table.class.getSimpleName(), Table.TABLE_NAME);
		TABLE_KEY_MAP.put(Column.class.getSimpleName(), Column.TABLE_NAME);
		TABLE_KEY_MAP.put(PgAttribute.class.getSimpleName(), PgAttribute.TABLE_NAME);
		TABLE_KEY_MAP.put(PgClass.class.getSimpleName(), PgClass.TABLE_NAME);
	}

	@NotNull
	@Override
	public String getIdKey() {
		return KEY_ID;
	}
	@NotNull
	@Override
	public String getUserIdKey() {
		return KEY_USER_ID;
	}


	private Object id; //Tableçš„id
	private RequestMethod method; //æ“?ä½œæ–¹æ³•
	private boolean prepared = true; //é¢„ç¼–è¯‘
	private boolean main = true;
	/**
	 * TODO è¢«å…³è?”çš„è¡¨é€šè¿‡å°±å¿½ç•¥å…³è?”çš„è¡¨ï¼Ÿ(è¿™ä¸ªä¸?è¡Œ User:{"sex@":"/Comment/toId"})
	 */
	private RequestRole role; //å?‘é€?è¯·æ±‚çš„ç”¨æˆ·çš„è§’è‰²
	private String database; //è¡¨æ‰€åœ¨çš„æ•°æ?®åº“ç±»åž‹
	private String schema; //è¡¨æ‰€åœ¨çš„æ•°æ?®åº“å??
	private String table; //è¡¨å??
	private String alias; //è¡¨åˆ«å??
	private String group; //åˆ†ç»„æ–¹å¼?çš„å­—ç¬¦ä¸²æ•°ç»„ï¼Œ','åˆ†éš”
	private String having; //è?šå?ˆå‡½æ•°çš„å­—ç¬¦ä¸²æ•°ç»„ï¼Œ','åˆ†éš”
	private String order; //æŽ’åº?æ–¹å¼?çš„å­—ç¬¦ä¸²æ•°ç»„ï¼Œ','åˆ†éš”
	private Subquery from; //å­?æŸ¥è¯¢ä¸´æ—¶è¡¨
	private List<String> column; //è¡¨å†…å­—æ®µå??(æˆ–å‡½æ•°å??ï¼Œä»…æŸ¥è¯¢æ“?ä½œå?¯ç”¨)çš„å­—ç¬¦ä¸²æ•°ç»„ï¼Œ','åˆ†éš”
	private List<List<Object>> values; //å¯¹åº”è¡¨å†…å­—æ®µçš„å€¼çš„å­—ç¬¦ä¸²æ•°ç»„ï¼Œ','åˆ†éš”
	private Map<String, Object> content; //Requestå†…å®¹ï¼Œkey:valueå½¢å¼?ï¼Œcolumn = content.keySet()ï¼Œvalues = content.values()
	private Map<String, Object> where; //ç­›é€‰æ?¡ä»¶ï¼Œkey:valueå½¢å¼?
	private Map<String, List<String>> combine; //æ?¡ä»¶ç»„å?ˆï¼Œ{ "&":[key], "|":[key], "!":[key] }


	//array item <<<<<<<<<<
	private int count; //Tableæ•°é‡?
	private int page; //Tableæ‰€åœ¨é¡µç ?
	private int position; //Tableåœ¨[]ä¸­çš„ä½?ç½®
	private int query; //JSONRequest.query
	private int type; //ObjectParser.type
	private int cache;
	private boolean explain;

	private List<Join> joinList; //è¿žè¡¨ é…?ç½®åˆ—è¡¨
	//array item >>>>>>>>>>
	private boolean test; //æµ‹è¯•

	private String procedure;

	public SQLConfig setProcedure(String procedure) {
		this.procedure = procedure;
		return this;
	}
	public String getProcedure() {
		return procedure;
	}

	public AbstractSQLConfig(RequestMethod method) {
		setMethod(method);
	}
	public AbstractSQLConfig(RequestMethod method, String table) {
		this(method);
		setTable(table);
	}
	public AbstractSQLConfig(RequestMethod method, int count, int page) {
		this(method);
		setCount(count);
		setPage(page);
	}

	@NotNull
	@Override
	public RequestMethod getMethod() {
		if (method == null) {
			method = GET;
		}
		return method;
	}
	@Override
	public AbstractSQLConfig setMethod(RequestMethod method) {
		this.method = method;
		return this;
	}
	@Override
	public boolean isPrepared() {
		return prepared;
	}
	@Override
	public AbstractSQLConfig setPrepared(boolean prepared) {
		this.prepared = prepared;
		return this;
	}
	@Override
	public boolean isMain() {
		return main;
	}
	@Override
	public AbstractSQLConfig setMain(boolean main) {
		this.main = main;
		return this;
	}


	@Override
	public Object getId() {
		return id;
	}
	@Override
	public AbstractSQLConfig setId(Object id) {
		this.id = id;
		return this;
	}

	@Override
	public RequestRole getRole() {
		//ä¸?èƒ½ @NotNull , AbstractParser#getSQLObject å†…å½“getRole() == nullæ—¶å¡«å……é»˜è®¤å€¼
		return role;
	}
	public AbstractSQLConfig setRole(String roleName) throws Exception {
		return setRole(RequestRole.get(roleName));
	}
	@Override
	public AbstractSQLConfig setRole(RequestRole role) {
		this.role = role;
		return this;
	}

	@Override
	public String getDatabase() {
		return database;
	}
	@Override
	public SQLConfig setDatabase(String database) {
		this.database = database;
		return this;
	}

	@Override
	public String getQuote() {
		return DATABASE_POSTGRESQL.equals(getDatabase()) ? "\"" : "`";
	}

	@Override
	public String getSchema() {
		return schema;
	}
	public String getSQLSchema(String sqlTable) {
		//å¼ºåˆ¶ï¼Œé?¿å…?å› ä¸ºå…¨å±€é»˜è®¤çš„ @schema è‡ªåŠ¨å¡«å……è¿›æ?¥ï¼Œå¯¼è‡´è¿™å‡ ä¸ªç±»çš„ schema ä¸º sys ç­‰å…¶å®ƒå€¼
		if ((Table.TABLE_NAME.equals(sqlTable) || Column.TABLE_NAME.equals(sqlTable)) ) {
			return SCHEMA_INFORMATION;
		}
		if ((PgAttribute.TABLE_NAME.equals(sqlTable) || PgClass.TABLE_NAME.equals(sqlTable)) ) {
			return "";
		}

		String sch = getSchema();
		if (sch == null) { //PostgreSQL çš„ pg_class å’Œ pg_attribute è¡¨å¥½åƒ?ä¸?å±žäºŽä»»ä½• Schema  StringUtil.isEmpty(sch, true)) {
			sch = DEFAULT_SCHEMA;
		}
		return sch;
	}
	@Override
	public AbstractSQLConfig setSchema(String schema) {
		if (schema != null) {
			String quote = getQuote();
			String s = schema.startsWith(quote) && schema.endsWith(quote) ? schema.substring(1, schema.length() - 1) : schema;
			if (StringUtil.isEmpty(s, true) == false && StringUtil.isName(s) == false) {
				throw new IllegalArgumentException("@schema:value ä¸­valueå¿…é¡»æ˜¯1ä¸ªå?•è¯?ï¼?");
			}
		}
		this.schema = schema;
		return this;
	}
	/**è¯·æ±‚ä¼ è¿›æ?¥çš„Tableå??
	 * @return
	 * @see {@link #getSQLTable()}
	 */
	@Override
	public String getTable() {
		return table;
	}
	/**æ•°æ?®åº“é‡Œçš„çœŸå®žTableå??
	 * é€šè¿‡ {@link #TABLE_KEY_MAP} æ˜ å°„
	 * @return
	 */
	@JSONField(serialize = false)
	@Override
	public String getSQLTable() {
		//		String t = TABLE_KEY_MAP.containsKey(table) ? TABLE_KEY_MAP.get(table) : table;
		//å¦‚æžœè¦?å¼ºåˆ¶å°?å†™ï¼Œåˆ™å?¯åœ¨å­?ç±»é‡?å†™è¿™ä¸ªæ–¹æ³•å†? toLowerCase		return DATABASE_POSTGRESQL.equals(getDatabase()) ? t.toLowerCase() : t;
		return TABLE_KEY_MAP.containsKey(table) ? TABLE_KEY_MAP.get(table) : table;
	}
	@JSONField(serialize = false)
	@Override
	public String getTablePath() {
		String q = getQuote();

		String sqlTable = getSQLTable();
		String sch = getSQLSchema(sqlTable);

		return (StringUtil.isEmpty(sch, true) ? "" : q + sch + q + ".") + q + sqlTable + q + ( isKeyPrefix() ? " AS " + getAlias() : "");
	}
	@Override
	public AbstractSQLConfig setTable(String table) { //Tableå·²ç»?åœ¨Parserä¸­æ ¡éªŒï¼Œæ‰€ä»¥è¿™é‡Œä¸?ç”¨é˜²SQLæ³¨å…¥
		this.table = table;
		return this;
	}
	@Override
	public String getAlias() {
		if (StringUtil.isEmpty(alias, true)) {
			alias = getTable();
		}
		String q = getQuote();
		//getTable ä¸?èƒ½å°?å†™ï¼Œå› ä¸ºVerifierç”¨å¤§å°?å†™æ•?æ„Ÿçš„å??ç§°åˆ¤æ–­æ?ƒé™?		
		//å¦‚æžœè¦?å¼ºåˆ¶å°?å†™ï¼Œåˆ™å?¯åœ¨å­?ç±»é‡?å†™è¿™ä¸ªæ–¹æ³•å†? toLowerCase  return q + (DATABASE_POSTGRESQL.equals(getDatabase()) ? alias.toLowerCase() : alias) + q;
		return q + alias + q;
	}
	@Override
	public AbstractSQLConfig setAlias(String alias) {
		this.alias = alias;
		return this;
	}

	@Override
	public String getGroup() {
		return group;
	}
	public AbstractSQLConfig setGroup(String... keys) {
		return setGroup(StringUtil.getString(keys));
	}
	@Override
	public AbstractSQLConfig setGroup(String group) {
		this.group = group;
		return this;
	}
	@JSONField(serialize = false)
	public String getGroupString(boolean hasPrefix) {
		//åŠ ä¸Šå­?è¡¨çš„ group
		String joinGroup = "";
		if (joinList != null) {
			SQLConfig cfg;
			String c;
			boolean first = true;
			for (Join j : joinList) {
				if (j.isAppJoin()) {
					continue;
				}

				cfg = j.isLeftOrRightJoin() ? j.getOutterConfig() : j.getJoinConfig();
				cfg.setAlias(cfg.getTable());

				c = ((AbstractSQLConfig) cfg).getGroupString(false);
				if (StringUtil.isEmpty(c, true) == false) {
					joinGroup += (first ? "" : ", ") + c;
					first = false;
				}

			}
		}


		group = StringUtil.getTrimedString(group);
		String[] keys = StringUtil.split(group);
		if (keys == null || keys.length <= 0) {
			return StringUtil.isEmpty(joinGroup, true) ? "" : (hasPrefix ? " GROUP BY " : "") + joinGroup;
		}

		for (int i = 0; i < keys.length; i++) {
			if (isPrepared()) { //ä¸?èƒ½é€šè¿‡ ? æ?¥ä»£æ›¿ï¼Œå› ä¸ºSQLExecutor statement.setStringå?Ž GROUP BY 'userId' æœ‰å?•å¼•å?·ï¼Œå?ªèƒ½è¿”å›žä¸€æ?¡æ•°æ?®ï¼Œå¿…é¡»åŽ»æŽ‰å?•å¼•å?·æ‰?è¡Œï¼?
				if (StringUtil.isName(keys[i]) == false) {
					throw new IllegalArgumentException("@group:value ä¸­ valueé‡Œé?¢ç”¨ , åˆ†å‰²çš„æ¯?ä¸€é¡¹éƒ½å¿…é¡»æ˜¯1ä¸ªå?•è¯?ï¼?å¹¶ä¸”ä¸?è¦?æœ‰ç©ºæ ¼ï¼?");
				}
			}

			keys[i] = getKey(keys[i]);
		}

		return (hasPrefix ? " GROUP BY " : "") + StringUtil.concat(StringUtil.getString(keys), joinGroup, ", ");
	}

	@Override
	public String getHaving() {
		return having;
	}
	public AbstractSQLConfig setHaving(String... conditions) {
		return setHaving(StringUtil.getString(conditions));
	}
	@Override
	public AbstractSQLConfig setHaving(String having) {
		this.having = having;
		return this;
	}
	/**
	 * @return HAVING conditoin0 AND condition1 OR condition2 ...
	 */
	@JSONField(serialize = false)
	public String getHavingString(boolean hasPrefix) {
		//åŠ ä¸Šå­?è¡¨çš„ having
		String joinHaving = "";
		if (joinList != null) {
			SQLConfig cfg;
			String c;
			boolean first = true;
			for (Join j : joinList) {
				if (j.isAppJoin()) {
					continue;
				}

				cfg = j.isLeftOrRightJoin() ? j.getOutterConfig() : j.getJoinConfig();
				cfg.setAlias(cfg.getTable());

				c = ((AbstractSQLConfig) cfg).getHavingString(false);
				if (StringUtil.isEmpty(c, true) == false) {
					joinHaving += (first ? "" : ", ") + c;
					first = false;
				}

			}
		}

		having = StringUtil.getTrimedString(having);
		String[] keys = StringUtil.split(having, ";");
		if (keys == null || keys.length <= 0) {
			return StringUtil.isEmpty(joinHaving, true) ? "" : (hasPrefix ? " HAVING " : "") + joinHaving;
		}

		String expression;
		String method;
		//æš‚æ—¶ä¸?å…?è®¸ String prefix;
		String suffix;

		//fun0(arg0,arg1,...);fun1(arg0,arg1,...)
		for (int i = 0; i < keys.length; i++) {

			//fun(arg0,arg1,...)
			expression = keys[i];

			int start = expression.indexOf("(");
			if (start < 0) {
				if (isPrepared() && PATTERN_HAVING.matcher(expression).matches() == false) {
					throw new UnsupportedOperationException("å­—ç¬¦ä¸² " + expression + " ä¸?å?ˆæ³•ï¼?"
							+ "é¢„ç¼–è¯‘æ¨¡å¼?ä¸‹ @having:\"column?value;function(arg0,arg1,...)?value...\""
							+ " ä¸­ column?value å¿…é¡»ç¬¦å?ˆæ­£åˆ™è¡¨è¾¾å¼? ^[A-Za-z0-9%!=<>]+$ ï¼?ä¸?å…?è®¸ç©ºæ ¼ï¼?");
				}
				continue;
			}

			int end = expression.indexOf(")");
			if (start >= end) {
				throw new IllegalArgumentException("å­—ç¬¦ " + expression + " ä¸?å?ˆæ³•ï¼?"
						+ "@having:value ä¸­ value é‡Œçš„ SQLå‡½æ•°å¿…é¡»ä¸º function(arg0,arg1,...) è¿™ç§?æ ¼å¼?ï¼?");
			}

			method = expression.substring(0, start);

			if (StringUtil.isName(method) == false) {
				throw new IllegalArgumentException("å­—ç¬¦ " + method + " ä¸?å?ˆæ³•ï¼?"
						+ "é¢„ç¼–è¯‘æ¨¡å¼?ä¸‹ @having:\"column?value;function(arg0,arg1,...)?value...\""
						+ " ä¸­SQLå‡½æ•°å?? function å¿…é¡»ç¬¦å?ˆæ­£åˆ™è¡¨è¾¾å¼? ^[0-9a-zA-Z_]+$ ï¼?");
			}

			suffix = expression.substring(end + 1, expression.length());

			if (isPrepared() && PATTERN_HAVING_SUFFIX.matcher((String) suffix).matches() == false) {
				throw new UnsupportedOperationException("å­—ç¬¦ä¸² " + suffix + " ä¸?å?ˆæ³•ï¼?"
						+ "é¢„ç¼–è¯‘æ¨¡å¼?ä¸‹ @having:\"column?value;function(arg0,arg1,...)?value...\""
						+ " ä¸­ ?value å¿…é¡»ç¬¦å?ˆæ­£åˆ™è¡¨è¾¾å¼? ^[0-9%!=<>]+$ ï¼?ä¸?å…?è®¸ç©ºæ ¼ï¼?");
			}

			String[] ckeys = StringUtil.split(expression.substring(start + 1, end));

			if (ckeys != null) {
				for (int j = 0; j < ckeys.length; j++) {

					if (isPrepared() && (StringUtil.isName(ckeys[j]) == false || ckeys[j].startsWith("_"))) {
						throw new IllegalArgumentException("å­—ç¬¦ " + ckeys[j] + " ä¸?å?ˆæ³•ï¼?"
								+ "é¢„ç¼–è¯‘æ¨¡å¼?ä¸‹ @having:\"column?value;function(arg0,arg1,...)?value...\""
								+ " ä¸­æ‰€æœ‰ arg éƒ½å¿…é¡»æ˜¯1ä¸ªä¸?ä»¥ _ å¼€å¤´çš„å?•è¯?ï¼?å¹¶ä¸”ä¸?è¦?æœ‰ç©ºæ ¼ï¼?");
					}

					ckeys[j] = getKey(ckeys[j]);
				}
			}

			keys[i] = method + "(" + StringUtil.getString(ckeys) + ")" + suffix;
		}

		//TODO æ”¯æŒ? OR, NOT å?‚è€ƒ @combine:"&key0,|key1,!key2"
		return (hasPrefix ? " HAVING " : "") + StringUtil.concat(StringUtil.getString(keys, AND), joinHaving, AND);
	}

	@Override
	public String getOrder() {
		return order;
	}
	public AbstractSQLConfig setOrder(String... conditions) {
		return setOrder(StringUtil.getString(conditions));
	}
	@Override
	public AbstractSQLConfig setOrder(String order) {
		this.order = order;
		return this;
	}
	@JSONField(serialize = false)
	public String getOrderString(boolean hasPrefix) {
		//åŠ ä¸Šå­?è¡¨çš„ order
		String joinOrder = "";
		if (joinList != null) {
			SQLConfig cfg;
			String c;
			boolean first = true;
			for (Join j : joinList) {
				if (j.isAppJoin()) {
					continue;
				}

				cfg = j.isLeftOrRightJoin() ? j.getOutterConfig() : j.getJoinConfig();
				cfg.setAlias(cfg.getTable());

				c = ((AbstractSQLConfig) cfg).getOrderString(false);
				if (StringUtil.isEmpty(c, true) == false) {
					joinOrder += (first ? "" : ", ") + c;
					first = false;
				}

			}
		}


		order = StringUtil.getTrimedString(order);
		if (order.contains("+")) {//replaceæ²¡æœ‰åŒ…å?«çš„replacementä¼šå´©æºƒ
			order = order.replaceAll("\\+", " ASC ");
		}
		if (order.contains("-")) {
			order = order.replaceAll("-", " DESC ");
		}

		String[] keys = StringUtil.split(order);
		if (keys == null || keys.length <= 0) {
			return StringUtil.isEmpty(joinOrder, true) ? "" : (hasPrefix ? " ORDER BY " : "") + joinOrder;
		}

		String origin;
		String sort;
		int index;
		for (int i = 0; i < keys.length; i++) {
			index = keys[i].trim().endsWith(" ASC") ? keys[i].lastIndexOf(" ASC") : -1; //StringUtil.splitè¿”å›žæ•°ç»„ä¸­ï¼Œå­?é¡¹ä¸?ä¼šæœ‰null
			if (index < 0) {
				index = keys[i].trim().endsWith(" DESC") ? keys[i].lastIndexOf(" DESC") : -1;
				sort = index <= 0 ? "" : " DESC ";
			} else {
				sort = " ASC ";
			}
			origin = index < 0 ? keys[i] : keys[i].substring(0, index);

			if (isPrepared()) { //ä¸?èƒ½é€šè¿‡ ? æ?¥ä»£æ›¿ï¼ŒSELECT 'id','name' è¿”å›žçš„å°±æ˜¯ id:"id", name:"name"ï¼Œè€Œä¸?æ˜¯æ•°æ?®åº“é‡Œçš„å€¼ï¼?
				//è¿™é‡Œæ—¢ä¸?å¯¹origin trimï¼Œä¹Ÿä¸?å¯¹ ASC/DESC ignoreCaseï¼Œå¸Œæœ›å‰?ç«¯ä¸¥æ ¼ä¼ æ²¡æœ‰ä»»ä½•ç©ºæ ¼çš„å­—ç¬¦ä¸²è¿‡æ?¥ï¼Œå‡?å°‘ä¼ è¾“æ•°æ?®é‡?ï¼ŒèŠ‚çº¦æœ?åŠ¡å™¨æ€§èƒ½
				if (StringUtil.isName(origin) == false) {
					throw new IllegalArgumentException("é¢„ç¼–è¯‘æ¨¡å¼?ä¸‹ @order:value ä¸­ valueé‡Œé?¢ç”¨ , åˆ†å‰²çš„æ¯?ä¸€é¡¹"
							+ " column+ / column- ä¸­ columnå¿…é¡»æ˜¯1ä¸ªå?•è¯?ï¼?å¹¶ä¸”ä¸?è¦?æœ‰å¤šä½™çš„ç©ºæ ¼ï¼?");
				}
			}
			keys[i] = getKey(origin) + sort;
		}

		return (hasPrefix ? " ORDER BY " : "") + StringUtil.concat(StringUtil.getString(keys), joinOrder, ", ");
	}


	@Override
	public Subquery getFrom() {
		return from;
	}
	@Override
	public AbstractSQLConfig setFrom(Subquery from) {
		this.from = from;
		return this;
	}

	@Override
	public List<String> getColumn() {
		return column;
	}
	@Override
	public AbstractSQLConfig setColumn(List<String> column) {
		this.column = column;
		return this;
	}
	@JSONField(serialize = false)
	public String getColumnString() throws Exception {
		return getColumnString(false);
	}
	@JSONField(serialize = false)
	public String getColumnString(boolean inSQLJoin) throws Exception {
		switch (getMethod()) {
		case HEAD:
		case HEADS: //StringUtil.isEmpty(column, true) || column.contains(",") æ—¶SQL.count(column)ä¼šreturn "*"
			if (isPrepared() && column != null) {
				String origin;
				String alias;
				int index;
				for (String c : column) {
					index = c.lastIndexOf(":"); //StringUtil.splitè¿”å›žæ•°ç»„ä¸­ï¼Œå­?é¡¹ä¸?ä¼šæœ‰null
					origin = index < 0 ? c : c.substring(0, index);
					alias = index < 0 ? null : c.substring(index + 1);
					if (StringUtil.isName(origin) == false || (alias != null && StringUtil.isName(alias) == false)) {
						throw new IllegalArgumentException("HEADè¯·æ±‚: é¢„ç¼–è¯‘æ¨¡å¼?ä¸‹ @column:value ä¸­ valueé‡Œé?¢ç”¨ , åˆ†å‰²çš„æ¯?ä¸€é¡¹"
								+ " column:alias ä¸­ column å¿…é¡»æ˜¯1ä¸ªå?•è¯?ï¼?å¦‚æžœæœ‰aliasï¼Œåˆ™aliasä¹Ÿå¿…é¡»ä¸º1ä¸ªå?•è¯?ï¼?å¹¶ä¸”ä¸?è¦?æœ‰å¤šä½™çš„ç©ºæ ¼ï¼?");
					}
				}
			}
			return SQL.count(column != null && column.size() == 1 ? getKey(Pair.parseEntry(column.get(0), true).getKey()) : "*");
		case POST:
			if (column == null || column.isEmpty()) {
				throw new IllegalArgumentException("POST è¯·æ±‚å¿…é¡»åœ¨Tableå†…è®¾ç½®è¦?ä¿?å­˜çš„ key:value ï¼?");
			}

			String s = "";
			boolean pfirst = true;
			for (String c : column) {
				if (isPrepared() && StringUtil.isName(c) == false) {  //ä¸?èƒ½é€šè¿‡ ? æ?¥ä»£æ›¿ï¼ŒSELECT 'id','name' è¿”å›žçš„å°±æ˜¯ id:"id", name:"name"ï¼Œè€Œä¸?æ˜¯æ•°æ?®åº“é‡Œçš„å€¼ï¼?
					throw new IllegalArgumentException("POSTè¯·æ±‚: æ¯?ä¸€ä¸ª key:value ä¸­çš„keyéƒ½å¿…é¡»æ˜¯1ä¸ªå?•è¯?ï¼?");
				}
				s += ((pfirst ? "" : ",") + getKey(c));

				pfirst = false;
			}

			return "(" + s + ")";
		case GET:
		case GETS:
			boolean isQuery = RequestMethod.isQueryMethod(method); //TODO è¿™ä¸ªæœ‰å•¥ç”¨ï¼Ÿä¸Šé?¢åº”æ˜¯ getMethod çš„å€¼ GET å’Œ GETS äº†ã€‚
			String joinColumn = "";
			if (isQuery && joinList != null) {
				SQLConfig ecfg;
				SQLConfig cfg;
				String c;
				boolean first = true;
				for (Join j : joinList) {
					if (j.isAppJoin()) {
						continue;
					}

					ecfg = j.getOutterConfig();
					if (ecfg != null && ecfg.getColumn() != null) { //ä¼˜å…ˆçº§æ›´é«˜
						cfg = ecfg;
					}
					else {
						cfg = j.getJoinConfig();
					}

					cfg.setAlias(cfg.getTable());

					c = ((AbstractSQLConfig) cfg).getColumnString(true);
					if (StringUtil.isEmpty(c, true) == false) {
						joinColumn += (first ? "" : ", ") + c;
						first = false;
					}

					inSQLJoin = true;
				}
			}

			String tableAlias = getAlias();

			//			String c = StringUtil.getString(column); //id,name;json_length(contactIdList):contactCount;...

			String[] keys = column == null ? null : column.toArray(new String[]{}); //StringUtil.split(c, ";");
			if (keys == null || keys.length <= 0) {

				boolean noColumn = column != null && inSQLJoin;
				String mc = isKeyPrefix() == false ? (noColumn ? "" : "*") : (noColumn ? "" : tableAlias + ".*");

				return StringUtil.concat(mc, joinColumn, ", ", true);
			}


			String expression;
			String method = null;

			//...;fun0(arg0,arg1,...):fun0;fun1(arg0,arg1,...):fun1;...
			for (int i = 0; i < keys.length; i++) {

				//fun(arg0,arg1,...)
				expression = keys[i];

				int start = expression.indexOf("(");
				int end = 0;
				if (start >= 0) {
					end = expression.indexOf(")");
					if (start >= end) {
						throw new IllegalArgumentException("å­—ç¬¦ " + expression + " ä¸?å?ˆæ³•ï¼?"
								+ "@having:value ä¸­ value é‡Œçš„ SQLå‡½æ•°å¿…é¡»ä¸º function(arg0,arg1,...) è¿™ç§?æ ¼å¼?ï¼?");
					}

					method = expression.substring(0, start);

					if (StringUtil.isName(method) == false) {
						throw new IllegalArgumentException("å­—ç¬¦ " + method + " ä¸?å?ˆæ³•ï¼?"
								+ "é¢„ç¼–è¯‘æ¨¡å¼?ä¸‹ @column:\"column0,column1:alias;function0(arg0,arg1,...);function1(...):alias...\""
								+ " ä¸­SQLå‡½æ•°å?? function å¿…é¡»ç¬¦å?ˆæ­£åˆ™è¡¨è¾¾å¼? ^[0-9a-zA-Z_]+$ ï¼?");
					}
				}

				boolean isColumn = start < 0;

				String[] ckeys = StringUtil.split(isColumn ? expression : expression.substring(start + 1, end));
				String quote = getQuote();

				//			if (isPrepared()) { //ä¸?èƒ½é€šè¿‡ ? æ?¥ä»£æ›¿ï¼ŒSELECT 'id','name' è¿”å›žçš„å°±æ˜¯ id:"id", name:"name"ï¼Œè€Œä¸?æ˜¯æ•°æ?®åº“é‡Œçš„å€¼ï¼?
				if (ckeys != null && ckeys.length > 0) {

					String origin;
					String alias;
					int index;
					for (int j = 0; j < ckeys.length; j++) {
						index = ckeys[j].lastIndexOf(":"); //StringUtil.splitè¿”å›žæ•°ç»„ä¸­ï¼Œå­?é¡¹ä¸?ä¼šæœ‰null
						origin = index < 0 ? ckeys[j] : ckeys[j].substring(0, index);
						alias = index < 0 ? null : ckeys[j].substring(index + 1);

						if (isPrepared()) {
							if (isColumn) {
								if (StringUtil.isName(origin) == false || (alias != null && StringUtil.isName(alias) == false)) {
									throw new IllegalArgumentException("GETè¯·æ±‚: é¢„ç¼–è¯‘æ¨¡å¼?ä¸‹ @column:value ä¸­ valueé‡Œé?¢ç”¨ , åˆ†å‰²çš„æ¯?ä¸€é¡¹"
											+ " column:alias ä¸­ column å¿…é¡»æ˜¯1ä¸ªå?•è¯?ï¼?å¦‚æžœæœ‰aliasï¼Œåˆ™aliasä¹Ÿå¿…é¡»ä¸º1ä¸ªå?•è¯?ï¼?å¹¶ä¸”ä¸?è¦?æœ‰å¤šä½™çš„ç©ºæ ¼ï¼?");
								}
							}
							else {
								if ((StringUtil.isName(ckeys[j]) == false || ckeys[j].startsWith("_"))) {
									throw new IllegalArgumentException("å­—ç¬¦ " + ckeys[j] + " ä¸?å?ˆæ³•ï¼?"
											+ "é¢„ç¼–è¯‘æ¨¡å¼?ä¸‹ @column:\"column0,column1:alias;function0(arg0,arg1,...);function1(...):alias...\""
											+ " ä¸­æ‰€æœ‰ arg éƒ½å¿…é¡»æ˜¯1ä¸ªä¸?ä»¥ _ å¼€å¤´çš„å?•è¯?ï¼?å¹¶ä¸”ä¸?è¦?æœ‰ç©ºæ ¼ï¼?");
								}
							}
						}

						//JOIN å‰¯è¡¨ä¸?å†?åœ¨å¤–å±‚åŠ å‰¯è¡¨å??å‰?ç¼€ userId AS `Commet.userId`ï¼Œ è€Œæ˜¯ç›´æŽ¥ userId AS `userId`
						origin = quote + origin + quote;
						if (isKeyPrefix()) {
							ckeys[j] = tableAlias + "." + origin;
							//							if (isColumn) {
							//								ckeys[j] += " AS " + quote + (isMain() ? "" : tableAlias + ".") + (StringUtil.isEmpty(alias, true) ? origin : alias) + quote;
							//							}
							if (isColumn && StringUtil.isEmpty(alias, true) == false) {
								ckeys[j] += " AS " + quote + alias + quote;
							}
						} else {
							ckeys[j] = origin + (StringUtil.isEmpty(alias, true) ? "" : " AS " + quote + alias + quote);
						}
					}
					//				}

				}

				if (isColumn) {
					keys[i] = StringUtil.getString(ckeys);
				}
				else {
					String suffix = expression.substring(end + 1, expression.length()); //:contactCount
					String alias = suffix.startsWith(":") ? suffix.substring(1) : null; //contactCount

					if (StringUtil.isEmpty(alias, true)) {
						if (suffix.isEmpty() == false) {
							throw new IllegalArgumentException("GETè¯·æ±‚: é¢„ç¼–è¯‘æ¨¡å¼?ä¸‹ @column:value ä¸­ valueé‡Œé?¢ç”¨ ; åˆ†å‰²çš„æ¯?ä¸€é¡¹"
									+ " function(arg0,arg1,...):alias ä¸­ alias å¦‚æžœæœ‰å°±å¿…é¡»æ˜¯1ä¸ªå?•è¯?ï¼?å¹¶ä¸”ä¸?è¦?æœ‰å¤šä½™çš„ç©ºæ ¼ï¼?");
						}
					} 
					else {
						if (StringUtil.isEmpty(alias, true) == false && StringUtil.isName(alias) == false) {
							throw new IllegalArgumentException("GETè¯·æ±‚: é¢„ç¼–è¯‘æ¨¡å¼?ä¸‹ @column:value ä¸­ valueé‡Œé?¢ç”¨ ; åˆ†å‰²çš„æ¯?ä¸€é¡¹"
									+ " function(arg0,arg1,...):alias ä¸­ alias å¿…é¡»æ˜¯1ä¸ªå?•è¯?ï¼?å¹¶ä¸”ä¸?è¦?æœ‰å¤šä½™çš„ç©ºæ ¼ï¼?");
						}
					}


					String origin = method + "(" + StringUtil.getString(ckeys) + ")";
					//					if (isKeyPrefix()) {
					//						keys[i] = origin + " AS " + quote + (isMain() ? "" : tableAlias + ".") + (StringUtil.isEmpty(alias, true) ? method : alias) + quote;
					//					}
					//					else {
					keys[i] = origin + (StringUtil.isEmpty(alias, true) ? "" : " AS " + quote + alias + quote);
					//					}
				}

			}

			String c = StringUtil.getString(keys);

			return (c.contains(":") == false ? c : c.replaceAll(":", " AS ")) + (StringUtil.isEmpty(joinColumn, true) ? "" : ", " + joinColumn);//ä¸?èƒ½åœ¨è¿™é‡Œæ”¹ï¼Œå?Žç»­è¿˜è¦?ç”¨åˆ°:

		default:
			throw new UnsupportedOperationException(
					"æœ?åŠ¡å™¨å†…éƒ¨é”™è¯¯ï¼šgetColumnString ä¸?æ”¯æŒ? " + RequestMethod.getName(getMethod())
					+ " ç­‰ [GET,GETS,HEAD,HEADS,POST] å¤–çš„ReuqestMethodï¼?"
					);
		}
	}


	@Override
	public List<List<Object>> getValues() {
		return values;
	}
	@JSONField(serialize = false)
	public String getValuesString() {
		String s = "";
		if (values != null && values.size() > 0) {
			Object[] items = new Object[values.size()];
			List<Object> vs;
			for (int i = 0; i < values.size(); i++) {
				vs = values.get(i);
				if (vs == null) {
					continue;
				}

				items[i] = "(";
				for (int j = 0; j < vs.size(); j++) {
					items[i] += ((j <= 0 ? "" : ",") + getValue(vs.get(j)));
				}
				items[i] += ")";
			}
			s = StringUtil.getString(items);
		}
		return s;
	}
	@Override
	public AbstractSQLConfig setValues(List<List<Object>> valuess) {
		this.values = valuess;
		return this;
	}

	@Override
	public Map<String, Object> getContent() {
		return content;
	}
	@Override
	public AbstractSQLConfig setContent(Map<String, Object> content) {
		this.content = content;
		return this;
	}

	@Override
	public int getCount() {
		return count;
	}
	@Override
	public AbstractSQLConfig setCount(int count) {
		this.count = count;
		return this;
	}
	@Override
	public int getPage() {
		return page;
	}
	@Override
	public AbstractSQLConfig setPage(int page) {
		this.page = page;
		return this;
	}
	@Override
	public int getPosition() {
		return position;
	}
	@Override
	public AbstractSQLConfig setPosition(int position) {
		this.position = position;
		return this;
	}

	@Override
	public int getQuery() {
		return query;
	}
	@Override
	public AbstractSQLConfig setQuery(int query) {
		this.query = query;
		return this;
	}
	@Override
	public int getType() {
		return type;
	}
	@Override
	public AbstractSQLConfig setType(int type) {
		this.type = type;
		return this;
	}
	
	@Override
	public int getCache() {
		return cache;
	}
	@Override
	public AbstractSQLConfig setCache(int cache) {
		this.cache = cache;
		return this;
	}

	public AbstractSQLConfig setCache(String cache) {
		int cache2;
		if (cache == null) {
			cache2 = JSONRequest.CACHE_ALL;
		}
		else {
//			if (isSubquery) {
//				throw new IllegalArgumentException("å­?æŸ¥è¯¢å†…ä¸?æ”¯æŒ?ä¼  " + JSONRequest.KEY_CACHE + "!");
//			}

			switch (cache) {
			case "0":
			case JSONRequest.CACHE_ALL_STRING:
				cache2 = JSONRequest.CACHE_ALL;
				break;
			case "1":
			case JSONRequest.CACHE_ROM_STRING:
				cache2 = JSONRequest.CACHE_ROM;
				break;
			case "2":
			case JSONRequest.CACHE_RAM_STRING:
				cache2 = JSONRequest.CACHE_RAM;
				break;
			default:
				throw new IllegalArgumentException(getTable() + "/" + JSONRequest.KEY_CACHE + ":value ä¸­ value çš„å€¼ä¸?å?ˆæ³•ï¼?å¿…é¡»åœ¨ [0,1,2] æˆ– [ALL, ROM, RAM] å†… !");
			}
		}
		setCache(cache2);
		return this;
	}
	
	@Override
	public boolean isExplain() {
		return explain;
	}
	@Override
	public AbstractSQLConfig setExplain(boolean explain) {
		this.explain = explain;
		return this;
	}
	
	@Override
	public List<Join> getJoinList() {
		return joinList;
	}
	@Override
	public SQLConfig setJoinList(List<Join> joinList) {
		this.joinList = joinList;
		return this;
	}
	@Override
	public boolean hasJoin() {
		return joinList != null && joinList.isEmpty() == false;
	}


	@Override
	public boolean isTest() {
		return test;
	}
	@Override
	public AbstractSQLConfig setTest(boolean test) {
		this.test = test;
		return this;
	}

	/**èŽ·å?–åˆ?å§‹ä½?ç½®offset
	 * @return
	 */
	@JSONField(serialize = false)
	public int getOffset() {
		return getOffset(getPage(), getCount());
	}
	/**èŽ·å?–åˆ?å§‹ä½?ç½®offset
	 * @param page
	 * @param count
	 * @return
	 */
	public static int getOffset(int page, int count) {
		return page*count;
	}
	/**èŽ·å?–é™?åˆ¶æ•°é‡?
	 * @return
	 */
	@JSONField(serialize = false)
	public String getLimitString() {
		return getLimitString(getPage(), getCount());// + 1);
	}
	/**èŽ·å?–é™?åˆ¶æ•°é‡?
	 * @param limit
	 * @return
	 */
	public static String getLimitString(int page, int count) {
		return count <= 0 ? "" : " LIMIT " + count + " OFFSET " + getOffset(page, count);
	}

	//WHERE <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	@Override
	public Map<String, Object> getWhere() {
		return where;
	}
	@Override
	public AbstractSQLConfig setWhere(Map<String, Object> where) {
		this.where = where;
		return this;
	}
	@NotNull
	@Override
	public Map<String, List<String>> getCombine() {
		List<String> andList = combine == null ? null : combine.get("&");
		if (andList == null) {
			andList = where == null ? new ArrayList<String>() : new ArrayList<String>(where.keySet());
			if (combine == null) {
				combine = new HashMap<>();
			}
			combine.put("&", andList);
		}
		return combine;
	}
	@Override
	public AbstractSQLConfig setCombine(Map<String, List<String>> combine) {
		this.combine = combine;
		return this;
	}
	/**
	 * noFunctionChar = false
	 * @param key
	 * @return
	 */
	@JSONField(serialize = false)
	@Override
	public Object getWhere(String key) {
		return getWhere(key, false);
	}
	/**
	 * @param key
	 * @param exactMatch
	 * @return
	 */
	@JSONField(serialize = false)
	@Override
	public Object getWhere(String key, boolean exactMatch) {
		if (exactMatch) {
			return where == null ? null : where.get(key);
		}

		Set<String> set = key == null || where == null ? null : where.keySet();
		if (set != null) {
			synchronized (where) {
				if (where != null) {
					int index;
					for (String k : set) {
						index = k.indexOf(key);
						if (index >= 0 && StringUtil.isName(k.substring(index)) == false) {
							return where.get(k);
						}
					}
				}
			}
		}
		return null;
	}
	@Override
	public AbstractSQLConfig putWhere(String key, Object value, boolean prior) {
		if (key != null) {
			if (where == null) {
				where = new LinkedHashMap<String, Object>();	
			}
			if (value == null) {
				where.remove(key);
			} else {
				where.put(key, value);
			}

			combine = getCombine();
			List<String> andList = combine.get("&");
			if (value == null) {
				andList.remove(key);
			}
			else if (andList == null || andList.contains(key) == false) {
				int i = 0;
				if (andList == null) {
					andList = new ArrayList<>();
				}
				else if (prior && andList.isEmpty() == false) {

					String idKey = getIdKey();
					String idInKey = idKey + "{}";
					String userIdKey = getUserIdKey();
					String userIdInKey = userIdKey + "{}";

					if (andList.contains(idKey)) {
						i ++;
					}
					if (andList.contains(idInKey)) {
						i ++;
					}
					if (andList.contains(userIdKey)) {
						i ++;
					}
					if (andList.contains(userIdInKey)) {
						i ++;
					}
				}

				if (prior) {
					andList.add(i, key); //userIdçš„ä¼˜å…ˆçº§ä¸?èƒ½æ¯”idé«˜  0, key);
				} else {
					andList.add(key); //AbstractSQLExecutor.onPutColumné‡ŒgetSQLï¼Œè¦?ä¿?è¯?ç¼“å­˜çš„SQLå’ŒæŸ¥è¯¢çš„SQLé‡Œ where çš„ key:value é¡ºåº?ä¸€è‡´
				}
			}
			combine.put("&", andList);
		}
		return this;
	}

	/**èŽ·å?–WHERE
	 * @return
	 * @throws Exception 
	 */
	@JSONField(serialize = false)
	@Override
	public String getWhereString(boolean hasPrefix) throws Exception {
		return getWhereString(hasPrefix, getMethod(), getWhere(), getCombine(), getJoinList(), ! isTest());
	}
	/**èŽ·å?–WHERE
	 * @param method
	 * @param where
	 * @return
	 * @throws Exception 
	 */
	@JSONField(serialize = false)
	public String getWhereString(boolean hasPrefix, RequestMethod method, Map<String, Object> where, Map<String, List<String>> combine, List<Join> joinList, boolean verifyName) throws Exception {
		Set<Entry<String, List<String>>> combineSet = combine == null ? null : combine.entrySet();
		if (combineSet == null || combineSet.isEmpty()) {
			Log.w(TAG, "getWhereString  combineSet == null || combineSet.isEmpty() >> return \"\";");
			return "";
		}

		List<String> keyList;

		String whereString = "";

		boolean isCombineFirst = true;
		int logic;

		boolean isItemFirst;
		String c;
		String cs;

		for (Entry<String, List<String>> ce : combineSet) {
			keyList = ce == null ? null : ce.getValue();
			if (keyList == null || keyList.isEmpty()) {
				continue;
			}

			if ("|".equals(ce.getKey())) {
				logic = Logic.TYPE_OR;
			}
			else if ("!".equals(ce.getKey())) {
				logic = Logic.TYPE_NOT;
			}
			else {
				logic = Logic.TYPE_AND;
			}


			isItemFirst = true;
			cs = "";
			for (String key : keyList) {
				c = getWhereItem(key, where.get(key), method, verifyName);

				if (StringUtil.isEmpty(c, true)) {//é?¿å…?SQLæ?¡ä»¶è¿žæŽ¥é”™è¯¯
					continue;
				}

				cs += (isItemFirst ? "" : (Logic.isAnd(logic) ? AND : OR)) + "(" + c + ")";

				isItemFirst = false;
			}


			whereString += (isCombineFirst ? "" : AND) + (Logic.isNot(logic) ? NOT : "") + " (  " + cs + "  ) ";
			isCombineFirst = false;
		}


		if (joinList != null) {

			String newWs = "";
			String ws = "" + whereString;

			List<Object> newPvl = new ArrayList<>();
			List<Object> pvl = new ArrayList<>(preparedValueList);

			SQLConfig jc;
			String js;

			boolean changed = false;
			//å?„ç§? JOIN æ²¡åŠžæ³•ç»Ÿä¸€ç”¨ & | ï¼?è¿žæŽ¥ï¼Œå?ªèƒ½æŒ‰ä¼˜å…ˆçº§ï¼Œå’Œ @combine ä¸€æ ·?
			for (Join j : joinList) {
				switch (j.getJoinType()) {
				case "@": // APP JOIN
				case "<": // LEFT JOIN
				case ">": // RIGHT JOIN
					break;

				case "":  // FULL JOIN 
				case "|": // FULL JOIN  ä¸?æ”¯æŒ? <>, [] ï¼Œé?¿å…?å¤ªå¤šç¬¦å?·
				case "&": // INNER JOIN 
				case "!": // OUTTER JOIN
				case "^": // SIDE JOIN
				case "*": // CROSS JOIN
					jc = j.getJoinConfig();
					boolean isMain = jc.isMain();
					jc.setMain(false).setPrepared(isPrepared()).setPreparedValueList(new ArrayList<Object>());
					js = jc.getWhereString(false);
					jc.setMain(isMain);

					if (StringUtil.isEmpty(js, true)) {
						continue;
					}

					if (StringUtil.isEmpty(newWs, true) == false) {
						newWs += AND;
					}

					if ("^".equals(j.getJoinType())) { // (A & ! B) | (B & ! A)
						newWs += " (   ( " + ws + ( StringUtil.isEmpty(ws, true) ? "" : AND + NOT ) + " ( " + js + " ) ) "
								+ OR
								+ " ( " + js + AND + NOT + " ( " + ws + " )  )   ) ";

						newPvl.addAll(pvl);
						newPvl.addAll(jc.getPreparedValueList());
						newPvl.addAll(jc.getPreparedValueList());
						newPvl.addAll(pvl);
					}
					else {
						logic = Logic.getType(j.getJoinType());

						newWs += " ( "
								+ getCondition(
										Logic.isNot(logic), 
										ws
										+ ( StringUtil.isEmpty(ws, true) ? "" : (Logic.isAnd(logic) ? AND : OR) )
										+ " ( " + js + " ) "
										)
								+ " ) ";

						newPvl.addAll(pvl);
						newPvl.addAll(jc.getPreparedValueList());
					}

					changed = true;
					break;
				default:
					throw new UnsupportedOperationException("join:value ä¸­ value é‡Œçš„ " + j.getJoinType() + "/" + j.getPath() + "é”™è¯¯ï¼?ä¸?æ”¯æŒ? " + j.getJoinType() + " ç­‰ [@ APP, < LEFT, > RIGHT, | FULL, & INNER, ! OUTTER, ^ SIDE, * CROSS] ä¹‹å¤–çš„JOINç±»åž‹ !");
				}
			}

			if (changed) {
				whereString = newWs;
				preparedValueList = newPvl;
			}
		}

		String s = whereString.isEmpty() ? "" : (hasPrefix ? " WHERE " : "") + whereString;

		if (s.isEmpty() && RequestMethod.isQueryMethod(method) == false) {
			throw new UnsupportedOperationException("å†™æ“?ä½œè¯·æ±‚å¿…é¡»å¸¦æ?¡ä»¶ï¼?ï¼?ï¼?");
		}

		return s;
	}

	/**
	 * @param key
	 * @param value
	 * @param method
	 * @param verifyName
	 * @return
	 * @throws Exception
	 */
	private String getWhereItem(String key, Object value
			, RequestMethod method, boolean verifyName) throws Exception {
		Log.d(TAG, "getWhereItem  key = " + key);
		//é?¿å…?ç­›é€‰åˆ°å…¨éƒ¨	value = key == null ? null : where.get(key);
		if (key == null || value == null || key.startsWith("@") || key.endsWith("()")) {//å…³é”®å­—||æ–¹æ³•, +æˆ–-ç›´æŽ¥æŠ¥é”™
			Log.d(TAG, "getWhereItem  key == null || value == null"
					+ " || key.startsWith(@) || key.endsWith(()) >> continue;");
			return null;
		}
		if (key.endsWith("@")) {//å¼•ç”¨
			//	key = key.substring(0, key.lastIndexOf("@"));
			throw new IllegalArgumentException(TAG + ".getWhereItem: å­—ç¬¦ " + key + " ä¸?å?ˆæ³•ï¼?");
		}

		int keyType;
		if (key.endsWith("$")) {
			keyType = 1;
		} 
		else if (key.endsWith("~") || key.endsWith("?")) { //TODO ï¼Ÿå?¯èƒ½ä»¥å?Žä¼šè¢«åºŸå¼ƒï¼Œå…¨ç”¨ ~ å’Œ *~ æ›¿ä»£ï¼Œæ›´æŽ¥è¿‘ PostgreSQL è¯­æ³• 
			keyType = key.charAt(key.length() - 2) == '*' ? -2 : 2;  //FIXME StringIndexOutOfBoundsException
		}
		else if (key.endsWith("%")) {
			keyType = 3;
		}
		else if (key.endsWith("{}")) {
			keyType = 4;
		}
		else if (key.endsWith("}{")) {
			keyType = 5;
		}
		else if (key.endsWith("<>")) {
			keyType = 6;
		}
		else if (key.endsWith(">=")) {
			keyType = 7;
		}
		else if (key.endsWith("<=")) {
			keyType = 8;
		}
		else if (key.endsWith(">")) {
			keyType = 9;
		}
		else if (key.endsWith("<")) {
			keyType = 10;
		}
		else { //elseç»?å¯¹ä¸?èƒ½çœ?ï¼Œé?¿å…?å†?æ¬¡è¸©å?‘ï¼? keyType = 0; å†™åœ¨forå¾ªçŽ¯å¤–é?¢éƒ½æ²¡æ³¨æ„?ï¼?
			keyType = 0;
		}
		key = getRealKey(method, key, false, true, verifyName, getQuote());

		switch (keyType) {
		case 1:
			return getSearchString(key, value);
		case -2:
		case 2:
			return getRegExpString(key, value, keyType < 0);
		case 3:
			return getBetweenString(key, value);
		case 4:
			return getRangeString(key, value);
		case 5:
			return getExistsString(key, value);
		case 6:
			return getContainString(key, value);
		case 7:
			return getCompareString(key, value, ">=");
		case 8:
			return getCompareString(key, value, "<=");
		case 9:
			return getCompareString(key, value, ">");
		case 10:
			return getCompareString(key, value, "<");
		default: //TODO MySQL JSONç±»åž‹çš„å­—æ®µå¯¹æ¯” key='[]' ä¼šæ— ç»“æžœï¼? key LIKE '[1, 2, 3]'  //TODO MySQL , å?Žé?¢æœ‰ç©ºæ ¼ï¼?
			return getEqualString(key, value);
		}
	}


	@JSONField(serialize = false)
	public String getEqualString(String key, Object value) throws Exception {
		if (JSON.isBooleanOrNumberOrString(value) == false && value instanceof Subquery == false) {
			throw new IllegalArgumentException(key + ":value ä¸­valueä¸?å?ˆæ³•ï¼?é?žPUTè¯·æ±‚å?ªæ”¯æŒ? [Boolean, Number, String] å†…çš„ç±»åž‹ ï¼?");
		}

		boolean not = key.endsWith("!"); // & | æ²¡æœ‰ä»»ä½•æ„?ä¹‰ï¼Œå†™æ³•å¤šäº†ä¸?å¥½æŽ§åˆ¶ 
		if (not) {
			key = key.substring(0, key.length() - 1);
		}
		if (StringUtil.isName(key) == false) {
			throw new IllegalArgumentException(key + ":value ä¸­keyä¸?å?ˆæ³•ï¼?ä¸?æ”¯æŒ? ! ä»¥å¤–çš„é€»è¾‘ç¬¦ ï¼?");
		}

		return getKey(key) + (not ? " != " : " = ") + (value instanceof Subquery ? getSubqueryString((Subquery) value) : getValue(value));
	}

	@JSONField(serialize = false)
	public String getCompareString(String key, Object value, String type) throws Exception {
		if (JSON.isBooleanOrNumberOrString(value) == false && value instanceof Subquery == false) {
			throw new IllegalArgumentException(key + type + ":value ä¸­valueä¸?å?ˆæ³•ï¼?æ¯”è¾ƒè¿?ç®— [>, <, >=, <=] å?ªæ”¯æŒ? [Boolean, Number, String] å†…çš„ç±»åž‹ ï¼?");
		}
		if (StringUtil.isName(key) == false) {
			throw new IllegalArgumentException(key + type + ":value ä¸­keyä¸?å?ˆæ³•ï¼?æ¯”è¾ƒè¿?ç®— [>, <, >=, <=] ä¸?æ”¯æŒ? [&, !, |] ä¸­ä»»ä½•é€»è¾‘è¿?ç®—ç¬¦ ï¼?");
		}

		return getKey(key) + " " + type + " " + (value instanceof Subquery ? getSubqueryString((Subquery) value) : getValue(value));
	}

	public String getKey(String key) {
		String q = getQuote();
		return (isKeyPrefix() ? getAlias() + "." : "") + q  + key + q;
	}

	/**
	 * ä½¿ç”¨prepareStatementé¢„ç¼–è¯‘ï¼Œå€¼ä¸º ? ï¼Œå?Žç»­åŠ¨æ€?setè¿›åŽ»
	 */
	private List<Object> preparedValueList = new ArrayList<>();
	private Object getValue(@NotNull Object value) {
		if (isPrepared()) {
			preparedValueList.add(value);
			return "?";
		}
//		return (value instanceof Number || value instanceof Boolean) && DATABASE_POSTGRESQL.equals(getDatabase()) ? value :  "'" + value + "'";
		return (value instanceof Number || value instanceof Boolean) ? value :  "'" + value + "'"; //MySQL éš?å¼?è½¬æ?¢ç”¨ä¸?äº†ç´¢å¼•
	}
	
	@Override
	public List<Object> getPreparedValueList() {
		return preparedValueList;
	}
	@Override
	public AbstractSQLConfig setPreparedValueList(List<Object> preparedValueList) {
		this.preparedValueList = preparedValueList;
		return this;
	}

	//$ search <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	/**search key match value
	 * @param in
	 * @return {@link #getSearchString(String, Object[], int)}
	 * @throws IllegalArgumentException 
	 */
	@JSONField(serialize = false)
	public String getSearchString(String key, Object value) throws IllegalArgumentException {
		if (value == null) {
			return "";
		}

		Logic logic = new Logic(key);
		key = logic.getKey();
		Log.i(TAG, "getSearchString key = " + key);

		JSONArray arr = newJSONArray(value);
		if (arr.isEmpty()) {
			return "";
		}
		return getSearchString(key, arr.toArray(), logic.getType());
	}
	/**search key match values
	 * @param in
	 * @return LOGIC [  key LIKE 'values[i]' ]
	 * @throws IllegalArgumentException 
	 */
	@JSONField(serialize = false)
	public String getSearchString(String key, Object[] values, int type) throws IllegalArgumentException {
		if (values == null || values.length <= 0) {
			return "";
		}

		String condition = "";
		for (int i = 0; i < values.length; i++) {
			if (values[i] instanceof String == false) {
				throw new IllegalArgumentException(key + "$:value ä¸­valueçš„ç±»åž‹å?ªèƒ½ä¸ºStringæˆ–String[]ï¼?");
			}
			condition += (i <= 0 ? "" : (Logic.isAnd(type) ? AND : OR)) + getLikeString(key, values[i]);
		}

		return getCondition(Logic.isNot(type), condition);
	}

	/**WHERE key LIKE 'value'
	 * @param key
	 * @param value
	 * @return key LIKE 'value'
	 */
	@JSONField(serialize = false)
	public String getLikeString(String key, Object value) {
		return getKey(key) + " LIKE "  + getValue(value);
	}

	//$ search >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



	//~ regexp <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	/**search key match RegExp values
	 * @param key
	 * @param value
	 * @param ignoreCase 
	 * @return {@link #getRegExpString(String, Object[], int, boolean)}
	 * @throws IllegalArgumentException 
	 */
	@JSONField(serialize = false)
	public String getRegExpString(String key, Object value, boolean ignoreCase) throws IllegalArgumentException {
		if (value == null) {
			return "";
		}

		Logic logic = new Logic(key);
		key = logic.getKey();
		Log.i(TAG, "getRegExpString key = " + key);

		JSONArray arr = newJSONArray(value);
		if (arr.isEmpty()) {
			return "";
		}
		return getRegExpString(key, arr.toArray(), logic.getType(), ignoreCase);
	}
	/**search key match RegExp values
	 * @param key
	 * @param values
	 * @param type 
	 * @param ignoreCase 
	 * @return LOGIC [  key REGEXP 'values[i]' ]
	 * @throws IllegalArgumentException 
	 */
	@JSONField(serialize = false)
	public String getRegExpString(String key, Object[] values, int type, boolean ignoreCase) throws IllegalArgumentException {
		if (values == null || values.length <= 0) {
			return "";
		}

		String condition = "";
		for (int i = 0; i < values.length; i++) {
			if (values[i] instanceof String == false) {
				throw new IllegalArgumentException(key + "$:value ä¸­valueçš„ç±»åž‹å?ªèƒ½ä¸ºStringæˆ–String[]ï¼?");
			}
			condition += (i <= 0 ? "" : (Logic.isAnd(type) ? AND : OR)) + getRegExpString(key, (String) values[i], ignoreCase);
		}

		return getCondition(Logic.isNot(type), condition);
	}

	/**WHERE key REGEXP 'value'
	 * @param key
	 * @param value
	 * @param ignoreCase
	 * @return key REGEXP 'value'
	 */
	@JSONField(serialize = false)
	public String getRegExpString(String key, String value, boolean ignoreCase) {
		if (DATABASE_POSTGRESQL.equals(getDatabase())) {
			return getKey(key) + " ~" + (ignoreCase ? "* " : " ") + getValue(value);
		}
		return getKey(key) + " REGEXP " + (ignoreCase ? "" : "BINARY ") + getValue(value);
	}
	//~ regexp >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



	//% between <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	/**WHERE key BETWEEN 'start' AND 'end'
	 * @param key
	 * @param value 'start,end'
	 * @return LOGIC [ key BETWEEN 'start' AND 'end' ]
	 * @throws IllegalArgumentException 
	 */
	@JSONField(serialize = false)
	public String getBetweenString(String key, Object value) throws IllegalArgumentException {
		if (value == null) {
			return "";
		}

		Logic logic = new Logic(key);
		key = logic.getKey();
		Log.i(TAG, "getBetweenString key = " + key);

		JSONArray arr = newJSONArray(value);
		if (arr.isEmpty()) {
			return "";
		}
		return getBetweenString(key, arr.toArray(), logic.getType());
	}

	/**WHERE key BETWEEN 'start' AND 'end'
	 * @param key
	 * @param value 'start,end' TODO åœ¨ '1,2' å’Œ ['1,2', '3,4'] åŸºç¡€ä¸Šæ–°å¢žæ”¯æŒ? [1, 2] å’Œ [[1,2], [3,4]] ï¼Ÿ
	 * @return LOGIC [ key BETWEEN 'start' AND 'end' ]
	 * @throws IllegalArgumentException 
	 */
	@JSONField(serialize = false)
	public String getBetweenString(String key, Object[] values, int type) throws IllegalArgumentException {
		if (values == null || values.length <= 0) {
			return "";
		}

		String condition = "";
		String[] vs;
		for (int i = 0; i < values.length; i++) {
			if (values[i] instanceof String == false) {
				throw new IllegalArgumentException(key + "%:value ä¸­ value çš„ç±»åž‹å?ªèƒ½ä¸º String æˆ– String[] ï¼?");
			}

			vs = StringUtil.split((String) values[i]);
			if (vs == null || vs.length != 2) {
				throw new IllegalArgumentException(key + "%:value ä¸­ value ä¸?å?ˆæ³•ï¼?ç±»åž‹ä¸º String æ—¶å¿…é¡»åŒ…æ‹¬1ä¸ªé€—å?· , ä¸”å·¦å?³ä¸¤ä¾§éƒ½æœ‰å€¼ï¼?ç±»åž‹ä¸º String[] é‡Œé?¢æ¯?ä¸ªå…ƒç´ è¦?ç¬¦å?ˆå‰?é?¢ç±»åž‹ä¸º String çš„è§„åˆ™ ï¼?");
			}

			condition += (i <= 0 ? "" : (Logic.isAnd(type) ? AND : OR)) + "(" + getBetweenString(key, vs[0], vs[1]) + ")";
		}

		return getCondition(Logic.isNot(type), condition);
	}

	/**WHERE key BETWEEN 'start' AND 'end'
	 * @param key
	 * @param value 'start,end' TODO åœ¨ '1,2' å’Œ ['1,2', '3,4'] åŸºç¡€ä¸Šæ–°å¢žæ”¯æŒ? [1, 2] å’Œ [[1,2], [3,4]] ï¼Ÿ
	 * @return key BETWEEN 'start' AND 'end'
	 * @throws IllegalArgumentException 
	 */
	@JSONField(serialize = false)
	public String getBetweenString(String key, Object start, Object end) throws IllegalArgumentException {
		if (JSON.isBooleanOrNumberOrString(start) == false || JSON.isBooleanOrNumberOrString(end) == false) {
			throw new IllegalArgumentException(key + "%:value ä¸­ value ä¸?å?ˆæ³•ï¼?ç±»åž‹ä¸º String æ—¶å¿…é¡»åŒ…æ‹¬1ä¸ªé€—å?· , ä¸”å·¦å?³ä¸¤ä¾§éƒ½æœ‰å€¼ï¼?ç±»åž‹ä¸º String[] é‡Œé?¢æ¯?ä¸ªå…ƒç´ è¦?ç¬¦å?ˆå‰?é?¢ç±»åž‹ä¸º String çš„è§„åˆ™ ï¼?");
		}
		return getKey(key) + " BETWEEN " + getValue(start) + AND + getValue(end);
	}


	//% between >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



	//{} range <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	// * å’Œ / ä¸?èƒ½å?Œæ—¶å‡ºçŽ°ï¼Œé˜²æ­¢ /* */ æ®µæ³¨é‡Šï¼? # å’Œ -- ä¸?èƒ½å‡ºçŽ°ï¼Œé˜²æ­¢è¡Œæ³¨é‡Šï¼? ; ä¸?èƒ½å‡ºçŽ°ï¼Œé˜²æ­¢éš”æ–­SQLè¯­å?¥ï¼?ç©ºæ ¼ä¸?èƒ½å‡ºçŽ°ï¼Œé˜²æ­¢ CRUD,DROP,SHOW TABLESç­‰è¯­å?¥ï¼?
	private static final Pattern PATTERN_RANGE;
	private static final Pattern PATTERN_HAVING;
	private static final Pattern PATTERN_HAVING_SUFFIX;
	static {
		PATTERN_RANGE = Pattern.compile("^[0-9%!=<>,]+$"); // ^[a-zA-Z0-9_*%!=<>(),"]+$ å¯¼è‡´ exists(select*from(Comment)) é€šè¿‡ï¼?
		PATTERN_HAVING = Pattern.compile("^[A-Za-z0-9%!=<>]+$"); //TODO æ”¹æˆ?æ›´å¥½çš„æ­£åˆ™ï¼Œæ ¡éªŒå‰?é?¢ä¸ºå?•è¯?ï¼Œä¸­é—´ä¸ºæ“?ä½œç¬¦ï¼Œå?Žé?¢ä¸ºå€¼
		PATTERN_HAVING_SUFFIX = Pattern.compile("^[0-9%!=<>]+$"); // ^[a-zA-Z0-9_*%!=<>(),"]+$ å¯¼è‡´ exists(select*from(Comment)) é€šè¿‡ï¼?
	}


	/**WHERE key > 'key0' AND key <= 'key1' AND ...
	 * @param key
	 * @param range "condition0,condition1..."
	 * @return key condition0 AND key condition1 AND ...
	 * @throws Exception 
	 */
	@JSONField(serialize = false)
	public String getRangeString(String key, Object range) throws Exception {
		Log.i(TAG, "getRangeString key = " + key);
		if (range == null) {//ä¾?èµ–çš„å¯¹è±¡éƒ½æ²¡æœ‰ç»™å‡ºæœ‰æ•ˆå€¼ï¼Œè¿™ä¸ªå­˜åœ¨æ— æ„?ä¹‰ã€‚å¦‚æžœæ˜¯å®¢æˆ·ç«¯ä¼ çš„ï¼Œé‚£å°±èƒ½åœ¨å®¢æˆ·ç«¯ç¡®å®šäº†ã€‚
			throw new NotExistException(TAG + "getRangeString(" + key + ", " + range
					+ ") range == null");
		}

		Logic logic = new Logic(key);
		key = logic.getKey();
		Log.i(TAG, "getRangeString key = " + key);

		if (range instanceof List) {
			if (logic.isOr() || logic.isNot()) {
				return getKey(key) + getInString(key, ((List<?>) range).toArray(), logic.isNot());
			}
			throw new IllegalArgumentException(key + "{}\":[] ä¸­keyæœ«å°¾çš„é€»è¾‘è¿?ç®—ç¬¦å?ªèƒ½ç”¨'|','!'ä¸­çš„ä¸€ç§? ï¼?");
		}
		else if (range instanceof String) {//é?žNumberç±»åž‹éœ€è¦?å®¢æˆ·ç«¯æ‹¼æŽ¥æˆ? < 'value0', >= 'value1'è¿™ç§?
			if (isPrepared() && PATTERN_RANGE.matcher((String) range).matches() == false) {
				throw new UnsupportedOperationException("å­—ç¬¦ä¸² " + range + " ä¸?å?ˆæ³•ï¼?é¢„ç¼–è¯‘æ¨¡å¼?ä¸‹ key{}:\"condition\" ä¸­ condition å¿…é¡»ç¬¦å?ˆæ­£åˆ™è¡¨è¾¾å¼? ^[0-9%!=<>,]+$ ï¼?ä¸?å…?è®¸ç©ºæ ¼ï¼?");
			}

			String[] conditions = StringUtil.split((String) range);
			String condition = "";
			if (conditions != null) {
				int index;
				for (int i = 0; i < conditions.length; i++) {//å¯¹å‡½æ•°æ?¡ä»¶length(key)<=5è¿™ç§?ä¸?å†?åœ¨å¼€å¤´åŠ key
					index = conditions[i] == null ? -1 : conditions[i].indexOf("(");
					condition += ((i <= 0 ? "" : (logic.isAnd() ? AND : OR))//è¿žæŽ¥æ–¹å¼?
							+ (index >= 0 && index < conditions[i].indexOf(")") ? "" : getKey(key) + " ")//å‡½æ•°å’Œé?žå‡½æ•°æ?¡ä»¶
							+ conditions[i]);//å?•ä¸ªæ?¡ä»¶
				}
			}
			if (condition.isEmpty()) {
				return "";
			}

			return getCondition(logic.isNot(), condition);
		}
		else if (range instanceof Subquery) { //å¦‚æžœåœ¨ Parser è§£æž?æˆ? SQL å­—ç¬¦ä¸²å†?å¼•ç”¨ï¼Œæ²¡æ³•ä¿?è¯?å®‰å…¨æ€§ï¼Œæ¯•ç«Ÿå?¯ä»¥å†?é€šè¿‡è¿œç¨‹å‡½æ•°ç­‰æ–¹å¼?æ?¥æ‹¼æŽ¥å†?æ›¿ä»£ï¼Œæœ€å?Žå¼•ç”¨çš„å­—ç¬¦ä¸²å°±èƒ½æ³¨å…¥
			return getKey(key) + (logic.isNot() ? NOT : "") + " IN " + getSubqueryString((Subquery) range);
		}

		throw new IllegalArgumentException(key + "{}:range ç±»åž‹ä¸º" + range.getClass().getSimpleName()
				+ "ï¼?range å?ªèƒ½æ˜¯ ç”¨','åˆ†éš”æ?¡ä»¶çš„å­—ç¬¦ä¸² æˆ–è€… å?¯å?–é€‰é¡¹JSONArrayï¼?");
	}
	/**WHERE key IN ('key0', 'key1', ... )
	 * @param in
	 * @return IN ('key0', 'key1', ... )
	 * @throws NotExistException 
	 */
	@JSONField(serialize = false)
	public String getInString(String key, Object[] in, boolean not) throws NotExistException {
		String condition = "";
		if (in != null) {//è¿”å›ž "" ä¼šå¯¼è‡´ id:[] ç©ºå€¼æ—¶æ•ˆæžœå’Œæ²¡æœ‰ç­›é€‰idä¸€æ ·ï¼?
			for (int i = 0; i < in.length; i++) {
				condition += ((i > 0 ? "," : "") + getValue(in[i]));
			}
		}
		if (condition.isEmpty()) {//æ?¡ä»¶å¦‚æžœå­˜åœ¨å¿…é¡»æ‰§è¡Œï¼Œä¸?èƒ½å¿½ç•¥ã€‚æ?¡ä»¶ä¸ºç©ºä¼šå¯¼è‡´å‡ºé”™ï¼Œå?ˆå¾ˆéš¾ä¿?è¯?æ?¡ä»¶ä¸?ä¸ºç©º(@:æ?¡ä»¶)ï¼Œæ‰€ä»¥è¿˜æ˜¯è¿™æ ·å¥½
			throw new NotExistException(TAG + ".getInString(" + key + ", [], " + not
					+ ") >> condition.isEmpty() >> IN()");
		}
		return (not ? NOT : "") + " IN (" + condition + ")";
	}
	//{} range >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


	//}{ exists <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	/**WHERE EXISTS subquery
	 * å¦‚æžœå?ˆå¹¶åˆ° getRangeStringï¼Œä¸€æ–¹é?¢æ”¯æŒ?ä¸?äº† [1,2,2] å’Œ ">1" (è½¬æˆ? EXISTS(SELECT IN ) éœ€è¦?static newSQLConfigï¼Œä½†å®ƒä¸?èƒ½ä¼ å…¥å­?ç±»å®žä¾‹ï¼Œé™¤é?žä¸?æ˜¯ static)ï¼Œå?¦ä¸€æ–¹é?¢å¤šäº†å­?æŸ¥è¯¢ä¸´æ—¶è¡¨æ€§èƒ½ä¼šæ¯” IN å·®
	 * @param key
	 * @param value
	 * @return EXISTS ALL(SELECT ...)
	 * @throws NotExistException
	 */
	@JSONField(serialize = false)
	public String getExistsString(String key, Object value) throws Exception {
		if (value == null) {
			return "";
		}
		if (value instanceof Subquery == false) {
			throw new IllegalArgumentException(key + "}{:subquery ç±»åž‹ä¸º" + value.getClass().getSimpleName()
					+ "ï¼?subquery å?ªèƒ½æ˜¯ å­?æŸ¥è¯¢JSONObejctï¼?");
		}

		Logic logic = new Logic(key);
		key = logic.getKey();
		Log.i(TAG, "getExistsString key = " + key);

		return (logic.isNot() ? NOT : "") + " EXISTS " + getSubqueryString((Subquery) value);
	}
	//}{ exists >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	//<> contain <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	/**WHERE key contains value
	 * @param key
	 * @param value
	 * @return 	{@link #getContainString(String, Object[], int)}
	 * @throws NotExistException
	 */
	@JSONField(serialize = false)
	public String getContainString(String key, Object value) throws IllegalArgumentException {
		if (value == null) {
			return "";
		}

		Logic logic = new Logic(key);
		key = logic.getKey();
		Log.i(TAG, "getContainString key = " + key);

		return getContainString(key, newJSONArray(value).toArray(), logic.getType());
	}
	/**WHERE key contains childs
	 * @param key
	 * @param childs null ? "" : (empty ? no child : contains childs)
	 * @param type |, &, !
	 * @return LOGIC [  ( key LIKE '[" + childs[i] + "]'  OR  key LIKE '[" + childs[i] + ", %'
	 *   OR  key LIKE '%, " + childs[i] + ", %'  OR  key LIKE '%, " + childs[i] + "]' )  ]
	 * @throws IllegalArgumentException 
	 */
	@JSONField(serialize = false)
	public String getContainString(String key, Object[] childs, int type) throws IllegalArgumentException {
		boolean not = Logic.isNot(type);
		String condition = "";
		if (childs != null) {
			for (int i = 0; i < childs.length; i++) {
				if (childs[i] != null) {
					if (childs[i] instanceof JSON) {
						throw new IllegalArgumentException(key + "<>:value ä¸­valueç±»åž‹ä¸?èƒ½ä¸ºJSONï¼?");
					}

					if (DATABASE_POSTGRESQL.equals(getDatabase())) {
						condition += (i <= 0 ? "" : (Logic.isAnd(type) ? AND : OR))
								+ getKey(key) + " @> " + getValue(newJSONArray(childs[i])); //operator does not exist: jsonb @> character varying  "[" + childs[i] + "]"); 
					} else {
						condition += (i <= 0 ? "" : (Logic.isAnd(type) ? AND : OR))
								+ "json_contains(" + getKey(key) + ", " + getValue(childs[i].toString()) + ")";
					}
				}
			}
			if (condition.isEmpty()) {
				condition = (getKey(key) + SQL.isNull(true) + OR + getLikeString(key, "[]")); // key = '[]' æ— ç»“æžœï¼?
			} else {
				condition = (getKey(key) + SQL.isNull(false) + AND + "(" + condition + ")");
			}
		}
		if (condition.isEmpty()) {
			return "";
		}
		return getCondition(not, condition);
	}
	//<> contain >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



	//key@:{} Subquery <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	@Override
	public String getSubqueryString(Subquery subquery) throws Exception {
		String range = subquery.getRange();
		SQLConfig cfg = subquery.getConfig();

		cfg.setPreparedValueList(new ArrayList<>());
		String sql = (range  == null || range.isEmpty() ? "" : range) + "(" + cfg.getSQL(isPrepared()) + ") ";

		preparedValueList.addAll(cfg.getPreparedValueList());

		return sql;
	}

	//key@:{} Subquery >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



	/**æ‹¼æŽ¥æ?¡ä»¶
	 * @param not
	 * @param condition
	 * @return
	 */
	private static String getCondition(boolean not, String condition) {
		return not ? NOT + "(" + condition + ")" : condition;
	}


	/**è½¬ä¸ºJSONArray
	 * @param tv
	 * @return
	 */
	@NotNull
	public static JSONArray newJSONArray(Object obj) {
		JSONArray array = new JSONArray();
		if (obj != null) {
			if (obj instanceof Collection) {
				array.addAll((Collection<?>) obj);
			} else {
				array.add(obj);
			}
		}
		return array;
	}

	//WHERE >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


	//SET <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	/**èŽ·å?–SET
	 * @return
	 * @throws Exception 
	 */
	@JSONField(serialize = false)
	public String getSetString() throws Exception {
		return getSetString(getMethod(), getContent(), ! isTest());
	}
	/**èŽ·å?–SET
	 * @param method
	 * @param content
	 * @return
	 * @throws Exception 
	 */
	@JSONField(serialize = false)
	public String getSetString(RequestMethod method, Map<String, Object> content, boolean verifyName) throws Exception {
		Set<String> set = content == null ? null : content.keySet();
		String setString = "";

		if (set != null && set.size() > 0) {
			String quote = getQuote();

			boolean isFirst = true;
			int keyType = 0;// 0 - =; 1 - +, 2 - -
			Object value;

			String idKey = getIdKey();
			for (String key : set) {
				//é?¿å…?ç­›é€‰åˆ°å…¨éƒ¨	value = key == null ? null : content.get(key);
				if (key == null || idKey.equals(key)) {
					continue;
				}

				if (key.endsWith("+")) {
					keyType = 1;
				} else if (key.endsWith("-")) {
					keyType = 2;
				}
				value = content.get(key);
				key = getRealKey(method, key, false, true, verifyName, quote);

				setString += (isFirst ? "" : ", ") + (getKey(key) + "=" + (keyType == 1 ? getAddString(key, value) : (keyType == 2
						? getRemoveString(key, value) : getValue(value)) ) );

				isFirst = false;
			}
		}

		if (setString.isEmpty()) {
			throw new IllegalArgumentException("PUT è¯·æ±‚å¿…é¡»åœ¨Tableå†…è®¾ç½®è¦?ä¿®æ”¹çš„ key:value ï¼?");
		}
		return " SET " + setString;
	}

	/**SET key = CONCAT (key, 'value')
	 * @param key
	 * @param value
	 * @return CONCAT (key, 'value')
	 * @throws IllegalArgumentException
	 */
	@JSONField(serialize = false)
	public String getAddString(String key, Object value) throws IllegalArgumentException {
		if (value instanceof Number) {
			return getKey(key) + " + " + value;
		}
		if (value instanceof String) {
			return " CONCAT (" + getKey(key) + ", " + getValue(value) + ") ";
		}
		throw new IllegalArgumentException(key + "+ å¯¹åº”çš„å€¼ " + value + " ä¸?æ˜¯Number,String,Arrayä¸­çš„ä»»ä½•ä¸€ç§?ï¼?");
	}
	/**SET key = replace(key, 'value', '')
	 * @param key
	 * @param value
	 * @return REPLACE (key, 'value', '')
	 * @throws IllegalArgumentException
	 */
	@JSONField(serialize = false)
	public String getRemoveString(String key, Object value) throws IllegalArgumentException {
		if (value instanceof Number) {
			return getKey(key) + " - " + value;
		}
		if (value instanceof String) {
			return SQL.replace(getKey(key), (String) getValue(value), "");// " replace(" + key + ", '" + value + "', '') ";
		}
		throw new IllegalArgumentException(key + "- å¯¹åº”çš„å€¼ " + value + " ä¸?æ˜¯Number,String,Arrayä¸­çš„ä»»ä½•ä¸€ç§?ï¼?");
	}
	//SET >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


	/**
	 * @return
	 * @throws Exception 
	 */
	@JSONField(serialize = false)
	@Override
	public String getSQL(boolean prepared) throws Exception {
		return getSQL(this.setPrepared(prepared));
	}
	/**
	 * @param config
	 * @return
	 * @throws Exception 
	 */
	public static String getSQL(AbstractSQLConfig config) throws Exception {
		if (config == null) {
			Log.i(TAG, "getSQL  config == null >> return null;");
			return null;
		}

		//TODO procedure æ”¹ä¸º List<Procedure>  procedureList; behind : true; function: callFunction(); String key; ...
		// for (...) { Call procedure1();\n SQL \n; Call procedure2(); ... }
		// è²Œä¼¼ä¸?éœ€è¦?ï¼Œå› ä¸º ObjecParser é‡Œå°±å·²ç»?å¤„ç?†çš„é¡ºåº?ç­‰ï¼Œå?ªæ˜¯è¿™é‡Œè¦?è§£å†³ä¸‹ Schema é—®é¢˜ã€‚

		String sch = config.getSQLSchema(config.getSQLTable());
		if (StringUtil.isNotEmpty(config.getProcedure(), true)) {
			String q = config.getQuote();
			return "CALL " + q + sch + q + "."+ config.getProcedure();
		}

		String tablePath = config.getTablePath();
		if (StringUtil.isNotEmpty(tablePath, true) == false) {
			Log.i(TAG, "getSQL  StringUtil.isNotEmpty(tablePath, true) == false >> return null;");
			return null;
		}

		switch (config.getMethod()) {
		case POST:
			return "INSERT INTO " + tablePath + config.getColumnString() + " VALUES" + config.getValuesString();
		case PUT:
			return "UPDATE " + tablePath + config.getSetString() + config.getWhereString(true);
		case DELETE:
			return "DELETE FROM " + tablePath + config.getWhereString(true);
		default:
			config.setPreparedValueList(new ArrayList<Object>());
			String column = config.getColumnString();
			return (config.isExplain() ? "EXPLAIN " : "") + "SELECT " + (config.getCache() == JSONRequest.CACHE_RAM ? "SQL_NO_CACHE " : "") + column + " FROM " + getConditionString(column, tablePath, config);
		}
	}

	/**èŽ·å?–æ?¡ä»¶SQLå­—ç¬¦ä¸²
	 * @param page 
	 * @param column
	 * @param table
	 * @param where
	 * @return
	 * @throws Exception 
	 */
	private static String getConditionString(String column, String table, AbstractSQLConfig config) throws Exception {
		String where = config.getWhereString(true);

		Subquery from = config.getFrom();
		if (from != null) {
			table = config.getSubqueryString(from) + " AS " + config.getAlias() + " "; //TODO Comment:c è½¬ä¸º  AS `Comment:c`
		}

		String condition = table + config.getJoinString() + where + (
				RequestMethod.isGetMethod(config.getMethod(), true) == false ?
						"" : config.getGroupString(true) + config.getHavingString(true) + config.getOrderString(true)
				)
				; //+ config.getLimitString();

		//no need to optimize
		//		if (config.getPage() <= 0 || ID.equals(column.trim())) {
		return condition + config.getLimitString();
		//		}
		//
		//
		//		//order: id+ -> id >= idOfStartIndex; id- -> id <= idOfStartIndex <<<<<<<<<<<<<<<<<<<
		//		String order = StringUtil.getNoBlankString(config.getOrder());
		//		List<String> orderList = order.isEmpty() ? null : Arrays.asList(StringUtil.split(order));
		//
		//		int type = 0;
		//		if (BaseModel.isEmpty(orderList) || BaseModel.isContain(orderList, ID+"+")) {
		//			type = 1;
		//		}
		//		else if (BaseModel.isContain(orderList, ID+"-")) {
		//			type = 2;
		//		}
		//
		//		if (type > 0) {
		//			return condition.replace("WHERE",
		//					"WHERE id " + (type == 1 ? ">=" : "<=") + " (SELECT id FROM " + table
		//					+ where + " ORDER BY id " + (type == 1 ? "ASC" : "DESC") + " LIMIT " + config.getOffset() + ", 1) AND"
		//					)
		//					+ " LIMIT " + config.getCount(); //å­?æŸ¥è¯¢èµ·å§‹idä¸?ä¸€å®šå‡†ç¡®ï¼Œå?ªèƒ½ä½œä¸ºæœ€å°?å?¯èƒ½ï¼? ;//
		//		}
		//		//order: id+ -> id >= idOfStartIndex; id- -> id <= idOfStartIndex >>>>>>>>>>>>>>>>>>
		//
		//
		//		//ç»“æžœé”™è¯¯ï¼?SELECT * FROM User AS t0 INNER JOIN
		//      (SELECT id FROM User ORDER BY date ASC LIMIT 20, 10) AS t1 ON t0.id = t1.id
		//		//common case, inner join
		//		condition += config.getLimitString();
		//		return table + " AS t0 INNER JOIN (SELECT id FROM " + condition + ") AS t1 ON t0.id = t1.id";
	}


	private boolean keyPrefix;
	@Override
	public boolean isKeyPrefix() {
		return keyPrefix;
	}
	@Override
	public AbstractSQLConfig setKeyPrefix(boolean keyPrefix) {
		this.keyPrefix = keyPrefix;
		return this;
	}



	public String getJoinString() throws Exception {
		String joinOns = "";

		if (joinList != null) {
			String quote = getQuote();
			List<Object> pvl = new ArrayList<>();
			boolean changed = false;

			String sql = null;
			SQLConfig jc;
			String jt;
			String tn;
			for (Join j : joinList) {
				if (j.isAppJoin()) { // APP JOINï¼Œå?ªæ˜¯ä½œä¸ºä¸€ä¸ªæ ‡è®°ï¼Œæ‰§è¡Œå®Œä¸»è¡¨çš„æŸ¥è¯¢å?Žè‡ªåŠ¨æ‰§è¡Œå‰¯è¡¨çš„æŸ¥è¯¢ User.id IN($commentIdList)
					continue;
				}

				//LEFT JOIN sys.apijson_user AS User ON User.id = Moment.userIdï¼Œ éƒ½æ˜¯ç”¨ = ï¼Œé€šè¿‡relateTypeå¤„ç?†ç¼“å­˜
				// <"INNER JOIN User ON User.id = Moment.userId", UserConfig>  TODO  AS æ”¾ getSQLTable å†…
				jc = j.getJoinConfig();
				jc.setPrepared(isPrepared());

				jt = jc.getTable();
				tn = j.getTargetName();

				//å¦‚æžœè¦?å¼ºåˆ¶å°?å†™ï¼Œåˆ™å?¯åœ¨å­?ç±»é‡?å†™è¿™ä¸ªæ–¹æ³•å†? toLowerCase
				//				if (DATABASE_POSTGRESQL.equals(getDatabase())) {
				//					jt = jt.toLowerCase();
				//					tn = tn.toLowerCase();
				//				}

				switch (j.getJoinType()) { //TODO $ SELF JOIN
				//				case "@": // APP JOIN
				//					continue;

				case "<": // LEFT JOIN
				case ">": // RIGHT JOIN
					jc.setMain(true).setKeyPrefix(false);
					sql = ( ">".equals(j.getJoinType()) ? " RIGHT" : " LEFT") + " JOIN ( " + jc.getSQL(isPrepared()) + " ) AS "
							+ quote + jt + quote + " ON " + quote + jt + quote + "." + quote + j.getKey() + quote + " = "
							+ quote + tn + quote + "." + quote + j.getTargetKey() + quote;
					jc.setMain(false).setKeyPrefix(true);

					//					preparedValueList.addAll(jc.getPreparedValueList());

					pvl.addAll(jc.getPreparedValueList());
					changed = true;
					break;

				case "":  // FULL JOIN 
				case "|": // FULL JOIN  ä¸?æ”¯æŒ? <>, [] ï¼Œé?¿å…?å¤ªå¤šç¬¦å?·
				case "&": // INNER JOIN 
				case "!": // OUTTER JOIN
				case "^": // SIDE JOIN
					//åœºæ™¯å°‘ä¸”æ€§èƒ½å·®ï¼Œé»˜è®¤ç¦?ç”¨	case "*": // CROSS JOIN
					sql = ("*".equals(j.getJoinType()) ? " CROSS JOIN " : " INNER JOIN ") + jc.getTablePath()
					+ " ON " + quote + jt + quote + "." + quote + j.getKey() + quote + " = " + quote + tn + quote + "." + quote + j.getTargetKey() + quote;
					break;
				default:
					throw new UnsupportedOperationException("join:value ä¸­ value é‡Œçš„ " + j.getJoinType() + "/" + j.getPath() + "é”™è¯¯ï¼?ä¸?æ”¯æŒ? " + j.getJoinType() + " ç­‰ [@ APP, < LEFT, > RIGHT, | FULL, & INNER, ! OUTTER, ^ SIDE, * CROSS] ä¹‹å¤–çš„JOINç±»åž‹ !");
				}

				joinOns += "  \n  " + sql;
			}


			if (changed) {
				pvl.addAll(preparedValueList);
				preparedValueList = pvl;
			}

		}

		return joinOns;
	}

	/**æ–°å»ºSQLé…?ç½®
	 * @param table
	 * @param request
	 * @param joinList
	 * @param isProcedure
	 * @param callback
	 * @return
	 * @throws Exception 
	 */
	public static AbstractSQLConfig newSQLConfig(RequestMethod method, String table, JSONObject request, List<Join> joinList, boolean isProcedure, Callback callback) throws Exception {
		if (request == null) { // User:{} è¿™ç§?ç©ºå†…å®¹åœ¨æŸ¥è¯¢æ—¶ä¹Ÿæœ‰æ•ˆ
			throw new NullPointerException(TAG + ": newSQLConfig  request == null!");
		}
		AbstractSQLConfig config = callback.getSQLConfig(method, table);

		String database = request.getString(KEY_DATABASE);
		String schema = request.getString(KEY_SCHEMA);
		config.setDatabase(database); //ä¸?åˆ ï¼Œå?Žé?¢è¡¨å¯¹è±¡è¿˜è¦?ç”¨çš„ï¼Œå¿…é¡»æ”¾åœ¨ parseJoin å‰?
		config.setSchema(schema); //ä¸?åˆ ï¼Œå?Žé?¢è¡¨å¯¹è±¡è¿˜è¦?ç”¨çš„

		//æ”¾å?Žé?¢ä¼šå¯¼è‡´ä¸»è¡¨æ˜¯ç©ºå¯¹è±¡æ—¶ joinList æœªè§£æž?
		if (isProcedure == false) {
			config = parseJoin(method, config, joinList, callback);
		}

		if (request.isEmpty()) { // User:{} è¿™ç§?ç©ºå†…å®¹åœ¨æŸ¥è¯¢æ—¶ä¹Ÿæœ‰æ•ˆ
			return config; //request.remove(key); å‰?éƒ½å?¯ä»¥ç›´æŽ¥returnï¼Œä¹‹å?Žå¿…é¡»ä¿?è¯? put å›žåŽ»
		}

		if (isProcedure) {
			return config;
		}

		String idKey = callback.getIdKey(schema, table);
		String idInKey = idKey + "{}";
		String userIdKey = callback.getUserIdKey(schema, table);
		String userIdInKey = userIdKey + "{}";

		Object idIn = request.get(idInKey); //å?¯èƒ½æ˜¯ id{}:">0"

		if (method == POST) {
			if (idIn != null) { //ä¸?èƒ½åœ¨è¿™é‡Œç¡®å®š[]çš„é•¿åº¦ï¼Œå?ªèƒ½åœ¨å¤–é?¢ä¼ è¿›æ?¥
				if ((idIn instanceof List == false) || ((List<?>)idIn).isEmpty()) { // id{}:[] è¡¨ç¤ºå?Œæ—¶æ?’å…¥å¤šæ?¡è®°å½•
					throw new IllegalArgumentException("POSTè¯·æ±‚ï¼Œç”Ÿæˆ?å¤šæ?¡è®°å½•è¯·ç”¨ id{}:[] ï¼? [] ç±»åž‹ä¸ºJSONArrayä¸”ä¸?èƒ½ä¸ºç©ºï¼?");
				}
			} else if (request.get(idKey) == null) {
				request.put(idKey, callback.newId(method, table));
			}
		}

		//å¯¹idå’Œid{}å¤„ç?†ï¼Œè¿™ä¸¤ä¸ªä¸€å®šä¼šä½œä¸ºæ?¡ä»¶
		Object id = request.get(idKey);
		if (id != null) { //nullæ— æ•ˆ
			if (id instanceof Number) { 
				if (((Number) id).longValue() <= 0) { //ä¸€å®šæ²¡æœ‰å€¼
					throw new NotExistException(TAG + ": newSQLConfig " + table + ".id <= 0");
				}
			}
			else if (id instanceof String) {
				if (StringUtil.isEmpty(id, true)) { //ä¸€å®šæ²¡æœ‰å€¼
					throw new NotExistException(TAG + ": newSQLConfig StringUtil.isEmpty(" + table + ".id, true)");
				}
			}
			else if (id instanceof Subquery) {}
			else {
				throw new IllegalArgumentException(idKey + ":value ä¸­ value çš„ç±»åž‹å?ªèƒ½æ˜¯ LongÂ , String æˆ– Subquery ï¼?");
			}

			if (idIn instanceof List) { //å…±ç”¨idInåœºæ™¯å°‘æ€§èƒ½å·®
				boolean contains = false;
				List<?> ids = ((List<?>) idIn);
				Object d;
				for (int i = 0; i < ids.size(); i++) { //ä¸?ç”¨ idIn.contains(id) å› ä¸º idIn é‡Œå­˜åˆ°å¾ˆå?¯èƒ½æ˜¯ Integerï¼Œid å?ˆæ˜¯ Longï¼?
					d = ids.get(i);
					if (d != null && id.toString().equals(d.toString())) {
						contains = true;
						break;
					}
				}
				if (contains == false) {//emptyæœ‰æ•ˆ  BaseModel.isEmpty(idIn) == false) {
					throw new NotExistException(TAG + ": newSQLConfig  idIn != null && (((List<?>) idIn).contains(id) == false");
				}
			}
		}


		String role = request.getString(KEY_ROLE);
		boolean explain = request.getBooleanValue(KEY_EXPLAIN);
		String cache = request.getString(KEY_CACHE);
		String combine = request.getString(KEY_COMBINE);
		Subquery from = (Subquery) request.get(KEY_FROM);
		String column = request.getString(KEY_COLUMN);
		String group = request.getString(KEY_GROUP);
		String having = request.getString(KEY_HAVING);
		String order = request.getString(KEY_ORDER);

		//å¼ºåˆ¶ä½œä¸ºæ?¡ä»¶ä¸”æ”¾åœ¨æœ€å‰?é?¢ä¼˜åŒ–æ€§èƒ½
		request.remove(idKey);
		request.remove(idInKey);
		//å…³é”®è¯?
		request.remove(KEY_ROLE);
		request.remove(KEY_EXPLAIN);
		request.remove(KEY_CACHE);
		request.remove(KEY_DATABASE);
		request.remove(KEY_SCHEMA);
		request.remove(KEY_COMBINE);
		request.remove(KEY_FROM);
		request.remove(KEY_COLUMN);
		request.remove(KEY_GROUP);
		request.remove(KEY_HAVING);
		request.remove(KEY_ORDER);


		Map<String, Object> tableWhere = new LinkedHashMap<String, Object>();//ä¿?è¯?é¡ºåº?å¥½ä¼˜åŒ– WHERE id > 1 AND name LIKE...

		//å·²ç»?removeäº†idå’Œid{}ï¼Œä»¥å?Š@key
		Set<String> set = request.keySet(); //å‰?é?¢å·²ç»?åˆ¤æ–­requestæ˜¯å?¦ä¸ºç©º
		if (method == POST) {//POSTæ“?ä½œ
			if (set != null && set.isEmpty() == false) { //ä¸?èƒ½ç›´æŽ¥returnï¼Œè¦?èµ°å®Œä¸‹é?¢çš„æµ?ç¨‹
				List<Object> idList;
				if (id != null) { //å?•æ?¡è®°å½•
					if (idIn != null) {
						throw new IllegalArgumentException("POSTè¯·æ±‚ä¸­ id å’Œ id{} ä¸?èƒ½å?Œæ—¶å­˜åœ¨!");
					}

					idList = new ArrayList<Object>(1);
					idList.add(id);
				} else { //å¤šæ?¡è®°å½•
					idList = new ArrayList<Object>((JSONArray) idIn);
				}

				//idInä¸?ä¸ºç©ºæ—¶ï¼ŒvaluesStringæœ‰å¤šæ?¡ï¼Œå”¯ä¸€çš„åŒºåˆ«å°±æ˜¯id
				String[] columns = set.toArray(new String[]{});

				Collection<Object> valueCollection = request.values();
				Object[] values = valueCollection == null ? null : valueCollection.toArray();

				if (values == null || values.length != columns.length) {
					throw new Exception("æœ?åŠ¡å™¨å†…éƒ¨é”™è¯¯:\n" + TAG
							+ " newSQLConfig  values == null || values.length != columns.length !");
				}
				column = idKey + "," + StringUtil.getString(columns); //setå·²ç»?åˆ¤æ–­è¿‡ä¸?ä¸ºç©º
				final int size = columns.length + 1; //ä»¥keyæ•°é‡?ä¸ºå‡†

				List<List<Object>> valuess = new ArrayList<>(idList.size()); // [idList.size()][]
				List<Object> items; //(item0, item1, ...)
				for (int i = 0; i < idList.size(); i++) {
					items = new ArrayList<>(size);
					items.add(idList.get(i)); //ç¬¬0ä¸ªå°±æ˜¯id
					for (int j = 1; j < size; j++) {
						items.add(values[j-1]); //ä»Žç¬¬1ä¸ªå¼€å§‹ï¼Œå…?è®¸"null"
					}
					valuess.add(items);
				}
				config.setValues(valuess);
			}
		} 
		else { //é?žPOSTæ“?ä½œ
			final boolean isWhere = method != PUT;//é™¤äº†POST,PUTï¼Œå…¶å®ƒå…¨æ˜¯æ?¡ä»¶ï¼?ï¼?ï¼?

			//æ?¡ä»¶<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
			List<String> whereList = null;

			Map<String, List<String>> combineMap = new LinkedHashMap<>();
			List<String> andList = new ArrayList<>();
			List<String> orList = new ArrayList<>();
			List<String> notList = new ArrayList<>();

			//å¼ºåˆ¶ä½œä¸ºæ?¡ä»¶ä¸”æ”¾åœ¨æœ€å‰?é?¢ä¼˜åŒ–æ€§èƒ½
			if (id != null) {
				tableWhere.put(idKey, id);
				andList.add(idKey);
			}
			if (idIn != null) {
				tableWhere.put(idInKey, idIn);
				andList.add(idInKey);
			}

			String[] ws = StringUtil.split(combine);
			if (ws != null) {
				if (method == DELETE || method == GETS || method == HEADS) {
					throw new IllegalArgumentException("DELETE,GETS,HEADS è¯·æ±‚ä¸?å…?è®¸ä¼  @combine:\"conditons\" !");
				}
				whereList = new ArrayList<>();

				String w;
				for (int i = 0; i < ws.length; i++) { //åŽ»é™¤ &,|,! å‰?ç¼€
					w = ws[i];
					if (w != null) {
						if (w.startsWith("&")) {
							w = w.substring(1);
							andList.add(w);
						}
						else if (w.startsWith("|")) {
							if (method == PUT) {
								throw new IllegalArgumentException(table + ":{} é‡Œçš„ @combine:value ä¸­çš„valueé‡Œæ?¡ä»¶ " + ws[i] + " ä¸?å?ˆæ³•ï¼?"
										+ "PUTè¯·æ±‚çš„ @combine:\"key0,key1,...\" ä¸?å…?è®¸ä¼  |key æˆ– !key !");
							}
							w = w.substring(1);
							orList.add(w);
						}
						else if (w.startsWith("!")) {
							if (method == PUT) {
								throw new IllegalArgumentException(table + ":{} é‡Œçš„ @combine:value ä¸­çš„valueé‡Œæ?¡ä»¶ " + ws[i] + " ä¸?å?ˆæ³•ï¼?"
										+ "PUTè¯·æ±‚çš„ @combine:\"key0,key1,...\" ä¸?å…?è®¸ä¼  |key æˆ– !key !");
							}
							w = w.substring(1);
							notList.add(w);
						}
						else {
							orList.add(w);
						}

						if (w.isEmpty()) {
							throw new IllegalArgumentException(table + ":{} é‡Œçš„ @combine:value ä¸­çš„valueé‡Œæ?¡ä»¶ " + ws[i] + " ä¸?å?ˆæ³•ï¼?ä¸?å…?è®¸ä¸ºç©ºå€¼ï¼?");
						}
						else {
							if (idKey.equals(w) || idInKey.equals(w) || userIdKey.equals(w) || userIdInKey.equals(w)) {
								throw new UnsupportedOperationException(table + ":{} é‡Œçš„ @combine:value ä¸­çš„valueé‡Œ " + ws[i] + " ä¸?å?ˆæ³•ï¼?"
										+ "ä¸?å…?è®¸ä¼  [" + idKey + ", " + idInKey + ", " + userIdKey + ", " + userIdInKey + "] å…¶ä¸­ä»»ä½•ä¸€ä¸ªï¼?");
							}
						}

						whereList.add(w);
					}
					if (request.containsKey(w) == false) {
						throw new IllegalArgumentException(table + ":{} é‡Œçš„ @combine:value ä¸­çš„valueé‡Œ " + ws[i] + " å¯¹åº”çš„ " + w + " ä¸?åœ¨å®ƒé‡Œé?¢ï¼?");
					}
				}

			}

			//æ?¡ä»¶>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

			Map<String, Object> tableContent = new LinkedHashMap<String, Object>();
			Object value;
			for (String key : set) {
				value = request.get(key);

				if (value instanceof Map) {//å?ªå…?è®¸å¸¸è§„Object
					throw new IllegalArgumentException("ä¸?å…?è®¸ " + key + " ç­‰ä»»ä½•keyçš„valueç±»åž‹ä¸º {JSONObject} !");
				}

				//è§£å†³AccessVerifieræ–°å¢žuserIdæ²¡æœ‰ä½œä¸ºæ?¡ä»¶ï¼Œè€Œæ˜¯ä½œä¸ºå†…å®¹ï¼Œå¯¼è‡´PUTï¼ŒDELETEå‡ºé”™
				if (isWhere) {
					tableWhere.put(key, value);
					if (whereList == null || whereList.contains(key) == false) {
						andList.add(key);
					}
				}
				else if (whereList != null && whereList.contains(key)) {
					tableWhere.put(key, value);
				}
				else {
					tableContent.put(key, value);//ä¸€æ · instanceof JSONArray ? JSON.toJSONString(value) : value);
				}
			}

			combineMap.put("&", andList);
			combineMap.put("|", orList);
			combineMap.put("!", notList);
			config.setCombine(combineMap);

			config.setContent(tableContent);
		}

		List<String> cs = new ArrayList<>();
		String[] fks = StringUtil.split(column, ";"); // key0,key1;fun0(key0,...);fun1(key0,...);key3;fun2(key0,...)
		if (fks != null) {
			String[] ks;
			for (String fk : fks) {
				if (fk.contains("(")) { //fun0(key0,...)
					cs.add(fk);
				}
				else { //key0,key1...
					ks = StringUtil.split(fk);
					if (ks != null && ks.length > 0) {
						cs.addAll(Arrays.asList(ks));
					}
				}
			}
		}

		config.setExplain(explain);
		config.setCache(cache);
		config.setFrom(from);
		config.setColumn(column == null ? null : cs); //è§£å†³æ€»æ˜¯ config.column != nullï¼Œæ€»æ˜¯ä¸?èƒ½å¾—åˆ° *
		config.setWhere(tableWhere);					

		config.setId(id);
		//åœ¨	tableWhere ç¬¬0ä¸ª		config.setIdIn(idIn);

		config.setRole(role);
		config.setGroup(group);
		config.setHaving(having);
		config.setOrder(order);

		//TODO è§£æž?JOINï¼ŒåŒ…æ‹¬ @columnï¼Œ@group ç­‰è¦?å?ˆå¹¶

		//å?Žé?¢è¿˜å?¯èƒ½ç”¨åˆ°ï¼Œè¦?è¿˜åŽŸ
		//idæˆ–id{}æ?¡ä»¶
		request.put(idKey, id);
		request.put(idInKey, idIn);
		//å…³é”®è¯?
		request.put(KEY_DATABASE, database);
		request.put(KEY_ROLE, role);
		request.put(KEY_EXPLAIN, explain);
		request.put(KEY_CACHE, cache);
		request.put(KEY_SCHEMA, schema);
		request.put(KEY_COMBINE, combine);
		request.put(KEY_FROM, from);
		request.put(KEY_COLUMN, column);
		request.put(KEY_GROUP, group);
		request.put(KEY_HAVING, having);
		request.put(KEY_ORDER, order);

		return config;
	}

	
	
	/**
	 * @param method
	 * @param config
	 * @param joinList
	 * @param callback
	 * @return
	 * @throws Exception
	 */
	public static AbstractSQLConfig parseJoin(RequestMethod method, AbstractSQLConfig config, List<Join> joinList, Callback callback) throws Exception {
		boolean isQuery = RequestMethod.isQueryMethod(method);
		config.setKeyPrefix(isQuery && config.isMain() == false);

		//TODO è§£æž?å‡º SQLConfig å†?å?ˆå¹¶ column, order, group ç­‰
		if (joinList == null || joinList.isEmpty() || RequestMethod.isQueryMethod(method) == false) {
			return config;
		}


		String name;
		for (Join j : joinList) {
			name = j.getName();
			//JOINå­?æŸ¥è¯¢ä¸?èƒ½è®¾ç½®LIMITï¼Œå› ä¸ºONå…³ç³»æ˜¯åœ¨å­?æŸ¥è¯¢å?Žå¤„ç?†çš„ï¼Œä¼šå¯¼è‡´ç»“æžœä¼šé”™è¯¯
			SQLConfig joinConfig = newSQLConfig(method, name, j.getTable(), null, false, callback);
			SQLConfig cacheConfig = newSQLConfig(method, name, j.getTable(), null, false, callback).setCount(1);

			if (j.isAppJoin() == false) { //é™¤äº† @ APP JOINï¼Œå…¶å®ƒéƒ½æ˜¯ SQL JOINï¼Œåˆ™å‰¯è¡¨è¦?è¿™æ ·é…?ç½®
				if (joinConfig.getDatabase() == null) {
					joinConfig.setDatabase(config.getDatabase()); //è§£å†³ä¸»è¡¨ JOIN å‰¯è¡¨ï¼Œå¼•å?·ä¸?ä¸€è‡´
				}
				else if (joinConfig.getDatabase().equals(config.getDatabase()) == false) {
					throw new IllegalArgumentException("ä¸»è¡¨ " + config.getTable() + " çš„ @database:" + config.getDatabase() + " å’Œå®ƒ SQL JOIN çš„å‰¯è¡¨ " + name + " çš„ @database:" + joinConfig.getDatabase() + " ä¸?ä¸€è‡´ï¼?");
				}
				if (joinConfig.getSchema() == null) {
					joinConfig.setSchema(config.getSchema()); //ä¸»è¡¨ JOIN å‰¯è¡¨ï¼Œé»˜è®¤ schema ä¸€è‡´
				}
				cacheConfig.setDatabase(joinConfig.getDatabase()).setSchema(joinConfig.getSchema()); //è§£å†³ä¸»è¡¨ JOIN å‰¯è¡¨ï¼Œå¼•å?·ä¸?ä¸€è‡´


				if (isQuery) {
					config.setKeyPrefix(true);
				}

				joinConfig.setMain(false).setKeyPrefix(true);

				if (j.isLeftOrRightJoin()) {
					SQLConfig outterConfig = newSQLConfig(method, name, j.getOutter(), null, false, callback);
					outterConfig.setMain(false).setKeyPrefix(true).setDatabase(joinConfig.getDatabase()).setSchema(joinConfig.getSchema()); //è§£å†³ä¸»è¡¨ JOIN å‰¯è¡¨ï¼Œå¼•å?·ä¸?ä¸€è‡´
					j.setOutterConfig(outterConfig);
				}
			}

			//è§£å†³ query: 1/2 æŸ¥æ•°é‡?æ—¶æŠ¥é”™  
			/* SELECT  count(*)  AS count  FROM sys.Moment AS Moment  
			   LEFT JOIN ( SELECT count(*)  AS count FROM sys.Comment ) AS Comment ON Comment.momentId = Moment.id LIMIT 1 OFFSET 0 */
			if (RequestMethod.isHeadMethod(method, true)) {
				joinConfig.setMethod(GET); //å­?æŸ¥è¯¢ä¸?èƒ½ä¸º SELECT count(*) ï¼Œè€Œåº”è¯¥æ˜¯ SELECT momentId
				joinConfig.setColumn(Arrays.asList(j.getKey())); //ä¼˜åŒ–æ€§èƒ½ï¼Œä¸?å?–é?žå¿…è¦?çš„å­—æ®µ

				cacheConfig.setMethod(GET); //å­?æŸ¥è¯¢ä¸?èƒ½ä¸º SELECT count(*) ï¼Œè€Œåº”è¯¥æ˜¯ SELECT momentId
				cacheConfig.setColumn(Arrays.asList(j.getKey())); //ä¼˜åŒ–æ€§èƒ½ï¼Œä¸?å?–é?žå¿…è¦?çš„å­—æ®µ
			}

			j.setJoinConfig(joinConfig);
			j.setCacheConfig(cacheConfig);
		}

		config.setJoinList(joinList);

		return config;
	}



	/**èŽ·å?–å®¢æˆ·ç«¯å®žé™…éœ€è¦?çš„key
	 * verifyName = true
	 * @param method
	 * @param originKey
	 * @param isTableKey
	 * @param saveLogic ä¿?ç•™é€»è¾‘è¿?ç®—ç¬¦ & | !
	 * @return
	 */
	public static String getRealKey(RequestMethod method, String originKey
			, boolean isTableKey, boolean saveLogic, String quote) throws Exception {
		return getRealKey(method, originKey, isTableKey, saveLogic, true, quote);
	}
	/**èŽ·å?–å®¢æˆ·ç«¯å®žé™…éœ€è¦?çš„key
	 * @param method
	 * @param originKey
	 * @param isTableKey
	 * @param saveLogic ä¿?ç•™é€»è¾‘è¿?ç®—ç¬¦ & | !
	 * @param verifyName éªŒè¯?keyå??æ˜¯å?¦ç¬¦å?ˆä»£ç ?å?˜é‡?/å¸¸é‡?å??
	 * @return
	 */
	public static String getRealKey(RequestMethod method, String originKey
			, boolean isTableKey, boolean saveLogic, boolean verifyName, String quote) throws Exception {
		Log.i(TAG, "getRealKey  saveLogic = " + saveLogic + "; originKey = " + originKey);
		if (originKey == null || originKey.startsWith(quote) || zuo.biao.apijson.JSONObject.isArrayKey(originKey)) {
			Log.w(TAG, "getRealKey  originKey == null || originKey.startsWith(`)"
					+ " || zuo.biao.apijson.JSONObject.isArrayKey(originKey) >>  return originKey;");
			return originKey;
		}

		String key = new String(originKey);
		if (key.endsWith("$")) {//æ?œç´¢ LIKEï¼ŒæŸ¥è¯¢æ—¶å¤„ç?†
			key = key.substring(0, key.length() - 1);
		}
		else if (key.endsWith("~") || key.endsWith("?")) {//åŒ¹é…?æ­£åˆ™è¡¨è¾¾å¼? REGEXPï¼ŒæŸ¥è¯¢æ—¶å¤„ç?†  TODO ï¼Ÿå?¯èƒ½ä»¥å?Žä¼šè¢«åºŸå¼ƒï¼Œå…¨ç”¨ ~ å’Œ *~ æ›¿ä»£ï¼Œæ›´æŽ¥è¿‘ PostgreSQL è¯­æ³• 
			key = key.substring(0, key.length() - 1);
			if (key.endsWith("*")) {//å¿½ç•¥å¤§å°?å†™
				key = key.substring(0, key.length() - 1);
			}
		}
		else if (key.endsWith("%")) {//æ•°å­—ã€?æ–‡æœ¬ã€?æ—¥æœŸèŒƒå›´ BETWEEN AND
			key = key.substring(0, key.length() - 1);
		}
		else if (key.endsWith("{}")) {//è¢«åŒ…å?« INï¼Œæˆ–è€…è¯´keyå¯¹åº”å€¼å¤„äºŽvalueçš„èŒƒå›´å†…ã€‚æŸ¥è¯¢æ—¶å¤„ç?†
			key = key.substring(0, key.length() - 2);
		} 
		else if (key.endsWith("}{")) {//è¢«åŒ…å?« EXISTSï¼Œæˆ–è€…è¯´keyå¯¹åº”å€¼å¤„äºŽvalueçš„èŒƒå›´å†…ã€‚æŸ¥è¯¢æ—¶å¤„ç?†
			key = key.substring(0, key.length() - 2);
		} 
		else if (key.endsWith("<>")) {//åŒ…å?« json_containsï¼Œæˆ–è€…è¯´valueå¤„äºŽkeyå¯¹åº”å€¼çš„èŒƒå›´å†…ã€‚æŸ¥è¯¢æ—¶å¤„ç?†
			key = key.substring(0, key.length() - 2);
		} 
		else if (key.endsWith("()")) {//æ–¹æ³•ï¼ŒæŸ¥è¯¢å®Œå?Žå¤„ç?†ï¼Œå…ˆç”¨ä¸€ä¸ªMap<key,function>ä¿?å­˜ï¼Ÿ
			key = key.substring(0, key.length() - 2);
		} 
		else if (key.endsWith("@")) {//å¼•ç”¨ï¼Œå¼•ç”¨å¯¹è±¡æŸ¥è¯¢å®Œå?Žå¤„ç?†ã€‚fillTargetä¸­æš‚æ—¶ä¸?ç”¨å¤„ç?†ï¼Œå› ä¸ºé?žGETè¯·æ±‚éƒ½æ˜¯ç”±ç»™å®šçš„idç¡®å®šï¼Œä¸?éœ€è¦?å¼•ç”¨
			key = key.substring(0, key.length() - 1);
		}
		else if (key.endsWith(">=")) {//æ¯”è¾ƒã€‚æŸ¥è¯¢æ—¶å¤„ç?†
			key = key.substring(0, key.length() - 2);
		}
		else if (key.endsWith("<=")) {//æ¯”è¾ƒã€‚æŸ¥è¯¢æ—¶å¤„ç?†
			key = key.substring(0, key.length() - 2);
		}
		else if (key.endsWith(">")) {//æ¯”è¾ƒã€‚æŸ¥è¯¢æ—¶å¤„ç?†
			key = key.substring(0, key.length() - 1);
		}
		else if (key.endsWith("<")) {//æ¯”è¾ƒã€‚æŸ¥è¯¢æ—¶å¤„ç?†
			key = key.substring(0, key.length() - 1);
		}
		else if (key.endsWith("+")) {//å»¶é•¿ï¼ŒPUTæŸ¥è¯¢æ—¶å¤„ç?†
			if (method == PUT) {//ä¸?ä¸ºPUTå°±æŠ›å¼‚å¸¸
				key = key.substring(0, key.length() - 1);
			}
		} 
		else if (key.endsWith("-")) {//ç¼©å‡?ï¼ŒPUTæŸ¥è¯¢æ—¶å¤„ç?†
			if (method == PUT) {//ä¸?ä¸ºPUTå°±æŠ›å¼‚å¸¸
				key = key.substring(0, key.length() - 1);
			}
		}

		String last = null;//ä¸?ç”¨Logicä¼˜åŒ–ä»£ç ?ï¼Œå?¦åˆ™ key å?¯èƒ½å?˜ä¸º key| å¯¼è‡´ key=value å?˜æˆ? key|=value è€Œå‡ºé”™
		if (RequestMethod.isQueryMethod(method)) {//é€»è¾‘è¿?ç®—ç¬¦ä»…ä¾›GET,HEADæ–¹æ³•ä½¿ç”¨
			last = key.isEmpty() ? "" : key.substring(key.length() - 1);
			if ("&".equals(last) || "|".equals(last) || "!".equals(last)) {
				key = key.substring(0, key.length() - 1);
			} else {
				last = null;//é?¿å…?key + StringUtil.getString(last)é”™è¯¯å»¶é•¿
			}
		}

		//"User:toUser":Userè½¬æ?¢"toUser":User, Userä¸ºæŸ¥è¯¢å?Œå??Tableå¾—åˆ°çš„JSONObjectã€‚äº¤ç»™å®¢æˆ·ç«¯å¤„ç?†æ›´å¥½
		if (isTableKey) {//ä¸?å…?è®¸åœ¨column keyä¸­ä½¿ç”¨Type:keyå½¢å¼?
			key = Pair.parseEntry(key, true).getKey();//tableä»¥å·¦è¾¹ä¸ºå‡†
		} else {
			key = Pair.parseEntry(key).getValue();//columnä»¥å?³è¾¹ä¸ºå‡†
		}

		if (verifyName && StringUtil.isName(key.startsWith("@") ? key.substring(1) : key) == false) {
			throw new IllegalArgumentException(method + "è¯·æ±‚ï¼Œå­—ç¬¦ " + originKey + " ä¸?å?ˆæ³•ï¼?"
					+ " key:value ä¸­çš„keyå?ªèƒ½å…³é”®è¯? '@key' æˆ– 'key[é€»è¾‘ç¬¦][æ?¡ä»¶ç¬¦]' æˆ– PUTè¯·æ±‚ä¸‹çš„ 'key+' / 'key-' ï¼?");
		}

		if (saveLogic && last != null) {
			key = key + last;
		}
		Log.i(TAG, "getRealKey  return key = " + key);
		return key;
	}


	public static interface Callback {
		/**èŽ·å?– SQLConfig çš„å®žä¾‹
		 * @param method
		 * @param table
		 * @return
		 */
		AbstractSQLConfig getSQLConfig(RequestMethod method, String table);


		/**ä¸º post è¯·æ±‚æ–°å»º idï¼Œ å?ªèƒ½æ˜¯ Long æˆ– String
		 * @param method
		 * @param table
		 * @return
		 */
		Object newId(RequestMethod method, String table);

		/**èŽ·å?–ä¸»é”®å??
		 * @param schema
		 * @param table
		 * @return
		 */
		String getIdKey(String schema, String table);

		/**èŽ·å?– User çš„ä¸»é”®å??
		 * @param schema
		 * @param table
		 * @return
		 */
		String getUserIdKey(String schema, String table);
	}

	public static abstract class SimpleCallback implements Callback {


		@Override
		public Object newId(RequestMethod method, String table) {
			return System.currentTimeMillis();
		}

		@Override
		public String getIdKey(String schema, String table) {
			return KEY_ID;
		}

		@Override
		public String getUserIdKey(String schema, String table) {
			return KEY_USER_ID;
		}

	}

}
