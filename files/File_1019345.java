package cn.iocoder.mall.pay.biz.job;

import cn.iocoder.mall.pay.biz.dao.PayNotifyTaskMapper;
import cn.iocoder.mall.pay.biz.dataobject.PayNotifyTaskDO;
import cn.iocoder.mall.pay.biz.service.PayNotifyServiceImpl;
import com.xxl.job.core.biz.model.ReturnT;
import com.xxl.job.core.handler.IJobHandler;
import com.xxl.job.core.handler.annotation.JobHandler;
import org.apache.rocketmq.spring.core.RocketMQTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.annotation.Resource;
import java.util.Date;
import java.util.List;

/**
 * æ”¯ä»˜é€šçŸ¥é‡?è¯• Job
 */
@Component
@JobHandler(value = "payTransactionNotifyJob")
public class PayNotifyJob extends IJobHandler {

    @Autowired
    private PayNotifyTaskMapper payTransactionNotifyTaskMapper;

    @Autowired
    private PayNotifyServiceImpl payNotifyService;

    @Resource
    private RocketMQTemplate rocketMQTemplate;

    @Override
    public ReturnT<String> execute(String param) {
        // èŽ·å¾—éœ€è¦?é€šçŸ¥çš„ä»»åŠ¡
        List<PayNotifyTaskDO> notifyTasks = payTransactionNotifyTaskMapper.selectByNotify();
        // å¾ªçŽ¯ä»»åŠ¡ï¼Œå?‘é€?é€šçŸ¥
        for (PayNotifyTaskDO notifyTask : notifyTasks) {
            // å?‘é€? MQ
            payNotifyService.sendNotifyMessage(notifyTask);
            // æ›´æ–°æœ€å?Žé€šçŸ¥æ—¶é—´
            // 1. è¿™æ ·æ“?ä½œï¼Œè™½ç„¶å?¯èƒ½ä¼šå‡ºçŽ° MQ æ¶ˆè´¹å¿«äºŽä¸‹é?¢ PayTransactionNotifyTaskDO çš„æ›´æ–°è¯­å?¥ã€‚ä½†æ˜¯ï¼Œå› ä¸ºæ›´æ–°å­—æ®µä¸?å?Œï¼Œæ‰€ä»¥ä¸?ä¼šæœ‰é—®é¢˜ã€‚
            // 2. æ?¢ä¸ªè§†è§’ï¼Œå¦‚æžœå…ˆæ›´æ–° PayTransactionNotifyTaskDO ï¼Œå†?å?‘é€? MQ æ¶ˆæ?¯ã€‚å¦‚æžœ MQ æ¶ˆæ?¯å?‘é€?å¤±è´¥ï¼Œåˆ™ PayTransactionNotifyTaskDO å†?ä¹Ÿä¸?ä¼šè¢«è½®è¯¢åˆ°äº†ã€‚
            // 3. å½“ç„¶ï¼Œæœ€æœ€æœ€å®Œç¾Žçš„è¯?ï¼Œå°±æ˜¯å?šäº‹åŠ¡æ¶ˆæ?¯ï¼Œä¸?è¿‡è¿™æ ·å?ˆè¿‡äºŽå¤?æ?‚~
            PayNotifyTaskDO updateNotifyTask = new PayNotifyTaskDO()
                    .setId(notifyTask.getId()).setLastExecuteTime(new Date());
            payTransactionNotifyTaskMapper.update(updateNotifyTask);
        }
        return new ReturnT<>("æ‰§è¡Œé€šçŸ¥æ•°ï¼š" + notifyTasks.size());
    }

}
