package com.hankcs.hanlp.classification.features;

import com.hankcs.hanlp.algorithm.MaxHeap;
import com.hankcs.hanlp.classification.corpus.IDataSet;
import com.hankcs.hanlp.classification.statistics.ContinuousDistributions;

import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;

/**
 * ç‰¹å¾?æ??å?–ï¼Œç”¨æ?¥ç”Ÿæˆ?FeatureStatså¹¶ä¸”ä½¿ç”¨å?¡æ–¹æµ‹è¯•é€‰æ‹©æœ€ä½³ç‰¹å¾?
 */
public class ChiSquareFeatureExtractor
{
    /**
     * åœ¨På€¼ï¼ˆæ‹’çœŸé”™è¯¯æ¦‚çŽ‡ï¼‰ä¸º0.001æ—¶çš„å?¡æ–¹ä¸´ç•Œå€¼ï¼Œç”¨äºŽç‰¹å¾?é€‰æ‹©ç®—æ³•
     */
    protected double chisquareCriticalValue = 10.83;

    protected int maxSize = 1000000;

    /**
     * ç”Ÿæˆ?ä¸€ä¸ªFeatureStatså¯¹è±¡ï¼ŒåŒ…å?«ä¸€ä¸ªåˆ†ç±»ä¸­çš„æ‰€æœ‰è¯?è¯­ï¼Œåˆ†ç±»æ•°ï¼Œå®žä¾‹æ•°ã€‚è¿™äº›ç»Ÿè®¡æ•°æ?®
     * å°†ç”¨äºŽç‰¹å¾?é€‰æ‹©ç®—æ³•ã€‚
     *
     * @param dataSet
     * @return
     */
    public static BaseFeatureData extractBasicFeatureData(IDataSet dataSet)
    {
        BaseFeatureData stats = new BaseFeatureData(dataSet);
        return stats;
    }

    /**
     * ä½¿ç”¨å?¡æ–¹é?žå?‚æ•°æ ¡éªŒæ?¥æ‰§è¡Œç‰¹å¾?é€‰æ‹©<br>
     *     https://nlp.stanford.edu/IR-book/html/htmledition/feature-selectionchi2-feature-selection-1.html
     *
     * @param stats
     * @return
     */
    public Map<Integer, Double> chi_square(BaseFeatureData stats)
    {
        Map<Integer, Double> selectedFeatures = new HashMap<Integer, Double>();

        double N1dot, N0dot, N00, N01, N10, N11;
        double chisquareScore;
        Double previousScore;
        for (int feature = 0; feature < stats.featureCategoryJointCount.length; feature++)
        {
            int[] categoryList = stats.featureCategoryJointCount[feature];

            //è®¡ç®— N1. (å?«æœ‰è¯¥ç‰¹å¾?çš„æ–‡æ¡£æ•°é‡?)
            N1dot = 0;
            for (int count : categoryList)
            {
                N1dot += count;
            }

            //è¿˜æœ‰ N0. (ä¸?å?«è¯¥ç‰¹å¾?çš„æ–‡æ¡£æ•°é‡?)
            N0dot = stats.n - N1dot;

            for (int category = 0; category < categoryList.length; category++)
            {

                N11 = categoryList[category]; //N11 æ˜¯å?«æœ‰è¯¥ç‰¹å¾?å¹¶å±žäºŽè¯¥ç±»ç›®çš„æ–‡æ¡£æ•°é‡?
                N01 = stats.categoryCounts[category] - N11; //N01 æ˜¯ä¸?å?«è¯¥ç‰¹å¾?å?´å±žäºŽè¯¥ç±»ç›®çš„æ–‡æ¡£æ•°é‡?

                N00 = N0dot - N01; //N00 æ˜¯ä¸?å?«è¯¥ç‰¹å¾?ä¹Ÿä¸?å±žäºŽè¯¥ç±»ç›®çš„æ–‡æ¡£æ•°é‡?
                N10 = N1dot - N11; //N10 æ˜¯å?«æœ‰è¯¥ç‰¹å¾?å?´ä¸?å±žäºŽè¯¥ç±»ç›®çš„æ–‡æ¡£æ•°é‡?

                //åŸºäºŽä¸Šè¿°ç»Ÿè®¡æ•°æ?®è®¡ç®—å?¡æ–¹åˆ†å€¼
                chisquareScore = stats.n * Math.pow(N11 * N00 - N10 * N01, 2) / ((N11 + N01) * (N11 + N10) * (N10 + N00) * (N01 + N00));

                //å¦‚æžœåˆ†æ•°å¤§äºŽä¸´ç•Œå€¼åˆ™åŠ å…¥ç‰¹å¾?åˆ—è¡¨
                if (chisquareScore >= chisquareCriticalValue)
                {
                    previousScore = selectedFeatures.get(feature);
                    if (previousScore == null || chisquareScore > previousScore)
                    {
                        selectedFeatures.put(feature, chisquareScore);
                    }
                }
            }
        }
        if (selectedFeatures.size() == 0) // å½“ç‰¹å¾?å…¨éƒ¨æ— æ³•é€šè¿‡å?¡æ–¹æ£€æµ‹æ—¶ï¼Œå?–å…¨é›†ä½œä¸ºç‰¹å¾?
        {
            for (int feature = 0; feature < stats.featureCategoryJointCount.length; feature++)
            {
                selectedFeatures.put(feature, 0.);
            }
        }
        if (selectedFeatures.size() > maxSize)
        {
            MaxHeap<Map.Entry<Integer, Double>> maxHeap = new MaxHeap<Map.Entry<Integer, Double>>(maxSize, new Comparator<Map.Entry<Integer, Double>>()
            {
                @Override
                public int compare(Map.Entry<Integer, Double> o1, Map.Entry<Integer, Double> o2)
                {
                    return o1.getValue().compareTo(o2.getValue());
                }
            });
            for (Map.Entry<Integer, Double> entry : selectedFeatures.entrySet())
            {
                maxHeap.add(entry);
            }
            selectedFeatures.clear();
            for (Map.Entry<Integer, Double> entry : maxHeap)
            {
                selectedFeatures.put(entry.getKey(), entry.getValue());
            }
        }

        return selectedFeatures;
    }

    /**
     * èŽ·å?–å?¡æ–¹ä¸´ç•Œå€¼
     *
     * @return
     */
    public double getChisquareCriticalValue()
    {
        return chisquareCriticalValue;
    }

    /**
     * è®¾ç½®å?¡æ–¹ä¸´ç•Œå€¼
     *
     * @param chisquareCriticalValue
     */
    public void setChisquareCriticalValue(double chisquareCriticalValue)
    {
        this.chisquareCriticalValue = chisquareCriticalValue;
    }

    public ChiSquareFeatureExtractor setALevel(double aLevel)
    {
        chisquareCriticalValue = ContinuousDistributions.ChisquareInverseCdf(aLevel, 1);
        return this;
    }

    public double getALevel()
    {
        return ContinuousDistributions.ChisquareCdf(chisquareCriticalValue, 1);
    }
}
