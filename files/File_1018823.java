/*
 *
 * Copyright 2018 iQIYI.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.qiyi.pluginlibrary.runtime;

import android.annotation.NonNull;
import android.annotation.Nullable;
import android.app.Activity;
import android.app.Application;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.ServiceConnection;
import android.content.pm.ActivityInfo;
import android.content.pm.ServiceInfo;
import android.content.res.Configuration;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.os.RemoteException;
import android.support.v4.app.Fragment;
import android.text.TextUtils;
import android.view.View;

import org.qiyi.pluginlibrary.component.AbstractFragmentProxy;
import org.qiyi.pluginlibrary.component.FragmentProxyFactory;
import org.qiyi.pluginlibrary.component.processmgr.ProcessManager;
import org.qiyi.pluginlibrary.component.stackmgr.PActivityStackSupervisor;
import org.qiyi.pluginlibrary.component.stackmgr.PServiceSupervisor;
import org.qiyi.pluginlibrary.component.wraper.ActivityWrapper;
import org.qiyi.pluginlibrary.constant.IntentConstant;
import org.qiyi.pluginlibrary.context.PluginContextWrapper;
import org.qiyi.pluginlibrary.error.ErrorType;
import org.qiyi.pluginlibrary.install.IInstallCallBack;
import org.qiyi.pluginlibrary.listenter.IPluginElementLoadListener;
import org.qiyi.pluginlibrary.listenter.IPluginLoadListener;
import org.qiyi.pluginlibrary.listenter.IPluginStatusListener;
import org.qiyi.pluginlibrary.pm.PluginLiteInfo;
import org.qiyi.pluginlibrary.pm.PluginPackageInfo;
import org.qiyi.pluginlibrary.pm.PluginPackageManager;
import org.qiyi.pluginlibrary.pm.PluginPackageManagerNative;
import org.qiyi.pluginlibrary.utils.ComponentFinder;
import org.qiyi.pluginlibrary.utils.ContextUtils;
import org.qiyi.pluginlibrary.utils.ErrorUtil;
import org.qiyi.pluginlibrary.utils.FileUtils;
import org.qiyi.pluginlibrary.utils.IntentUtils;
import org.qiyi.pluginlibrary.utils.PluginDebugLog;
import org.qiyi.pluginlibrary.utils.RunUtil;
import org.qiyi.pluginlibrary.utils.ViewPluginHelper;

import java.io.File;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.atomic.AtomicInteger;


/**
 * ç®¡ç?†æ‰€æœ‰æ?’ä»¶çš„è¿?è¡ŒçŠ¶æ€?
 */
public class PluginManager {
    public static final String TAG = "PluginManager";
    /**
     * å®¿ä¸»æ³¨å†Œåˆ°æ?’ä»¶é‡Œçš„ActivityLifeCycleç›‘å?¬å™¨
     * æ?’ä»¶é‡?å†™äº†Applicationï¼Œéœ€è¦?æ³¨å†Œåˆ°æ?’ä»¶çš„Applicationç±»é‡ŒåŽ»
     */
    final static ArrayList<Application.ActivityLifecycleCallbacks> sActivityLifecycleCallbacks =
            new ArrayList<Application.ActivityLifecycleCallbacks>();
    /* å·²ç»?åŠ è½½åˆ°å†…å­˜äº†çš„æ?’ä»¶é›†å?ˆ */
    private static ConcurrentHashMap<String, PluginLoadedApk> sPluginsMap =
            new ConcurrentHashMap<>();
    /* å¼‚æ­¥åŠ è½½æ?’ä»¶çº¿ç¨‹æ±  */
    private static Executor sExecutor = Executors.newCachedThreadPool();
    /* æ?’ä»¶åŠ è½½çº¿ç¨‹å’Œä¸»çº¿ç¨‹é€šä¿¡ */
    private static Handler sHandler = new Handler(Looper.getMainLooper());
    /* æ?’ä»¶çŠ¶æ€?æŠ•é€’ */
    private static IDeliverInterface mDeliver;
    /* æ?’ä»¶çŠ¶æ€?ç›‘å?¬å™¨ */
    private static IPluginStatusListener sPluginStatusListener;
    /* å¤„ç?†æ?’ä»¶é€€å‡ºæ—¶çš„å–„å?Žé€»è¾‘ */
    private static IAppExitStuff sExitStuff;

    /**
     * é€šè¿‡åŒ…å??èŽ·å?–{@link PluginLoadedApk}å¯¹è±¡
     * æ³¨æ„?:æ­¤æ–¹æ³•ä»…ä»…åˆ°{@link #sPluginsMap}ä¸­æŸ¥æ‰¾ï¼Œå¹¶ä¸?ä¼šåŽ»åŠ è½½æ?’ä»¶
     *
     * @param pkgName æ?’ä»¶çš„åŒ…å??
     * @return è¿”å›žåŒ…å??ä¸ºmPluginPackage æŒ‡å®šçš„æ?’ä»¶çš„PluginLoadedApkå¯¹è±¡ï¼Œå¦‚æžœæ?’ä»¶æ²¡æœ‰åŠ è½½ï¼Œåˆ™è¿”å›žNull
     */
    public static PluginLoadedApk getPluginLoadedApkByPkgName(String pkgName) {
        if (TextUtils.isEmpty(pkgName)) {
            return null;
        }
        return sPluginsMap.get(pkgName);
    }

    /**
     * é€šè¿‡ClassLoaderæŸ¥æ‰¾{@link PluginLoadedApk}å¯¹è±¡
     *
     * @param classLoader æ?’ä»¶çš„ClassLoader
     * @return æ?’ä»¶LoadedApkå†…å­˜å®žä¾‹
     */
    public static PluginLoadedApk findPluginLoadedApkByClassLoader(ClassLoader classLoader) {
        for (PluginLoadedApk loadedApk : sPluginsMap.values()) {
            if (loadedApk != null && loadedApk.getPluginClassLoader() == classLoader) {
                return loadedApk;
            }
        }
        return null;
    }

    /**
     * åˆ¤æ–­æ?’ä»¶æ˜¯å?¦å·²ç»?åŠ è½½
     *
     * @param mPluginPackage æ?’ä»¶çš„åŒ…å??
     * @return true :æ?’ä»¶å·²ç»?åŠ è½½ï¼Œfalse:æ?’ä»¶æ²¡æœ‰åŠ è½½
     */
    public static boolean isPluginLoaded(String mPluginPackage) {
        return getPluginLoadedApkByPkgName(mPluginPackage) != null;
    }

    /**
     * ä¿?å­˜å·²ç»?åŠ è½½æˆ?åŠŸçš„{@link PluginLoadedApk}
     *
     * @param mPluginPackage   æ?’ä»¶åŒ…å??
     * @param mPluginLoadedApk æ?’ä»¶çš„å†…å­˜å®žä¾‹å¯¹è±¡
     */
    private static void addPluginLoadedApk(String mPluginPackage, PluginLoadedApk mPluginLoadedApk) {
        if (TextUtils.isEmpty(mPluginPackage)
                || mPluginLoadedApk == null) {
            return;
        }

        sPluginsMap.put(mPluginPackage, mPluginLoadedApk);
    }

    /**
     * ç§»é™¤å·²ç»?åŠ è½½æˆ?åŠŸçš„{@link PluginLoadedApk}
     *
     * @param mPluginPackage éœ€è¦?è¢«ç§»é™¤çš„æ?’ä»¶åŒ…å??
     * @return è¢«ç§»é™¤çš„æ?’ä»¶å†…å­˜å¯¹è±¡
     */
    public static PluginLoadedApk removePluginLoadedApk(String mPluginPackage) {
        if (TextUtils.isEmpty(mPluginPackage)) {
            return null;
        }
        return sPluginsMap.remove(mPluginPackage);
    }

    /**
     * èŽ·å?–æ‰€æœ‰å·²ç»?åŠ è½½çš„æ?’ä»¶
     *
     * @return ä»¥Mapçš„å½¢å¼?è¿”å›žåŠ è½½æˆ?åŠŸçš„æ?’ä»¶ï¼Œæ­¤Mapæ˜¯ä¸?å?¯å?˜çš„
     */
    public static Map<String, PluginLoadedApk> getAllPluginLoadedApk() {
        return Collections.unmodifiableMap(sPluginsMap);
    }

    /**
     * åˆ›å»ºæ?’ä»¶ä¸­çš„ Fragment ä»£ç?†å®žä¾‹ï¼Œä»£ç?†ä¼šè´Ÿè´£åŠ è½½å…·ä½“æ?’ä»¶ Fragment
     * <br/>
     * å¦‚æžœæ?’ä»¶æœªå®‰è£…ï¼Œåˆ™è¿”å›ž null
     *
     * @param context       host context
     * @param proxyClass    FragmentProxy å…·ä½“ç±»åž‹ï¼Œå?¯ä»¥ä¸ºç©ºä½¿ç”¨ SDK é»˜è®¤ FragmentProxy
     * @param pkgName       plugin package name
     * @param fragmentClass plugin fragment class name
     * @return FragmentProxy or null if plugin is not installed
     */
    @Nullable
    public static AbstractFragmentProxy createFragmentProxy(@NonNull Context context,
                                                            @Nullable Class<? extends AbstractFragmentProxy> proxyClass,
                                                            @NonNull String pkgName, @NonNull String fragmentClass) {
        if (PluginPackageManagerNative.getInstance(context).isPackageInstalled(pkgName)) {
            return FragmentProxyFactory.create(proxyClass, pkgName, fragmentClass);
        } else {
            return null;
        }
    }

    /**
     * åˆ›å»ºæ?’ä»¶ä¸­çš„ Fragment å®žä¾‹
     *
     * @param hostContext   host context
     * @param packageName   plugin package name
     * @param fragmentClass plugin fragment class name
     * @param listener      listener for result
     */
    public static void createFragment(@NonNull Context hostContext,
                                      @NonNull String packageName,
                                      @NonNull String fragmentClass,
                                      @NonNull IPluginElementLoadListener<Fragment> listener) {
        createFragment(hostContext, packageName, fragmentClass, null, listener);
    }

    /**
     * åˆ›å»ºæ?’ä»¶ä¸­çš„ Fragment å®žä¾‹
     *
     * @param hostContext   host context
     * @param packageName   plugin package name
     * @param fragmentClass plugin fragment class name
     * @param arguments     arguments for fragment
     * @param listener      listener for result
     */
    public static void createFragment(@NonNull final Context hostContext,
                                      @NonNull final String packageName,
                                      @NonNull final String fragmentClass,
                                      @Nullable final Bundle arguments,
                                      @NonNull final IPluginElementLoadListener<Fragment> listener) {
        if (!PluginPackageManagerNative.getInstance(hostContext).isPackageInstalled(packageName)) {
            listener.onFail(ErrorType.ERROR_PLUGIN_LOAD_NOT_INSTALLED, packageName);
            return;
        }
        loadClass(hostContext.getApplicationContext(), packageName, fragmentClass, new IPluginElementLoadListener<Class<?>>() {
            @Override
            public void onSuccess(Class<?> element, String packageName) {
                try {
                    Fragment fragment = (Fragment) element.newInstance();
                    Bundle args = new Bundle();
                    if (arguments != null) {
                        args.putAll(arguments);
                    }
                    //  å‘Šè¯‰ Fragment å½“å‰?æ‰€åœ¨åŒ…å?? å?¯ä»¥å¤„ç?†èµ„æº?è®¿é—®é—®é¢˜
                    args.putString(IntentConstant.EXTRA_TARGET_PACKAGE_KEY, packageName);
                    fragment.setArguments(args);
                    listener.onSuccess(fragment, packageName);
                } catch (Throwable e) {
                    ErrorUtil.throwErrorIfNeed(e);
                    listener.onFail(ErrorType.ERROR_PLUGIN_CREATE_CLASS_INSTANCE, packageName);
                }
            }

            @Override
            public void onFail(int errorType, String packageName) {
                listener.onFail(errorType, packageName);

            }
        });
    }

    /**
     * åˆ›å»ºæ?’ä»¶ View å®žä¾‹ï¼Œå?¯ä»¥è¢«æ·»åŠ åˆ°å®¿ä¸» ViewGroup ä¸­
     *
     * @param hostActivity  host activity
     * @param packageName   package name
     * @param viewClassName view class name
     * @param listener      listener
     */
    public static void createView(@NonNull final Activity hostActivity,
                                  @NonNull String packageName,
                                  @NonNull final String viewClassName,
                                  @NonNull final IPluginElementLoadListener<View> listener) {
        loadClass(hostActivity.getApplicationContext(), packageName, viewClassName, new IPluginElementLoadListener<Class<?>>() {
            @Override
            public void onSuccess(Class<?> element, String packageName) {
                try {
                    PluginLoadedApk loadedApk = getPluginLoadedApkByPkgName(packageName);
                    if (loadedApk != null) {
                        ActivityWrapper context = new ActivityWrapper(hostActivity, loadedApk);
                        View view = (View) element.getConstructor(Context.class).newInstance(context);
                        ViewPluginHelper.disableViewSaveInstanceRecursively(view);
                        listener.onSuccess(view, packageName);
                    } else {
                        listener.onFail(ErrorType.ERROR_PLUGIN_NOT_LOADED, packageName);
                    }
                } catch (Throwable e) {
                    ErrorUtil.throwErrorIfNeed(e);
                    listener.onFail(ErrorType.ERROR_PLUGIN_CREATE_CLASS_INSTANCE, packageName);
                }
            }

            @Override
            public void onFail(int errorType, String packageName) {
                listener.onFail(errorType, packageName);
            }
        });
    }

    /**
     * åŠ è½½æŒ‡å®šåŒ…å??çš„æŒ‡å®š classï¼Œå¤„ç?†æ?’ä»¶ä¹‹é—´çš„ä¾?èµ–å…³ç³»
     *
     * @param hostContext host context
     * @param packageName packageName
     * @param className   className
     * @param listener    load listener
     */
    private static void loadClass(@NonNull final Context hostContext,
                                  @NonNull final String packageName,
                                  @NonNull final String className,
                                  @NonNull final IPluginElementLoadListener<Class<?>> listener) {
        if (hostContext == null || TextUtils.isEmpty(packageName) || TextUtils.isEmpty(className)) {
            PluginDebugLog.runtimeLog(TAG, "loadClass hostContext or packageName or className is null!");
            listener.onFail(ErrorType.ERROR_PLUGIN_GET_PKG_AND_CLS_FAIL, packageName);
            return;
        }
        PluginLoadedApk loadedApk = getPluginLoadedApkByPkgName(packageName);
        // 1. æ?’ä»¶å·²ç»?åœ¨å†…å­˜ï¼Œç›´æŽ¥åŠ è½½æˆ?åŠŸ
        if (loadedApk != null) {
            try {
                Class<?> pluginClass = loadedApk.getPluginClassLoader().loadClass(className);
                listener.onSuccess(pluginClass, packageName);
            } catch (ClassNotFoundException e) {
                ErrorUtil.throwErrorIfNeed(e);
                listener.onFail(ErrorType.ERROR_PLUGIN_LOAD_TARGET_CLASS, packageName);
            }
            return;
        }
        PluginLiteInfo packageInfo = PluginPackageManagerNative.getInstance(hostContext).getPackageInfo(packageName);
        List<String> pluginRefs = PluginPackageManagerNative.getInstance(hostContext).getPluginRefs(packageName);
        // 2. å¦‚æžœæ²¡æœ‰ä¾?èµ–ï¼Œå¼‚æ­¥åŠ è½½æ?’ä»¶èŽ·å?–
        if (packageInfo != null && (pluginRefs == null || pluginRefs.isEmpty())) {
            PluginDebugLog.runtimeLog(TAG, "start Check installation without dependence packageName: " + packageName);
            doLoadClassAsync(hostContext, packageName, className, listener);
            return;
        }
        // 3. åŒ…å?«ä¾?èµ–çš„æƒ…å†µä¸‹ï¼Œå…ˆå?¯åŠ¨ä¾?èµ–
        if (packageInfo != null) {
            PluginDebugLog.runtimeLog(TAG, "start to check dependence installation size: " + pluginRefs.size());
            final AtomicInteger count = new AtomicInteger(pluginRefs.size());
            for (String pkgName : pluginRefs) {
                PluginDebugLog.runtimeLog(TAG, "start to check installation pkgName: " + pkgName);
                final PluginLiteInfo refInfo = PluginPackageManagerNative.getInstance(hostContext).getPackageInfo(pkgName);
                PluginPackageManagerNative.getInstance(hostContext).packageAction(refInfo,
                        new IInstallCallBack.Stub() {
                            @Override
                            public void onPackageInstalled(PluginLiteInfo packageInfo) {
                                count.getAndDecrement();
                                PluginDebugLog.runtimeLog(TAG, "check installation success pkgName: " + refInfo.packageName);
                                if (count.get() == 0) {
                                    PluginDebugLog.runtimeLog(TAG, "start Check installation after check dependence packageName: " + packageName);
                                    doLoadClassAsync(hostContext, packageName, className, listener);
                                }
                            }

                            @Override
                            public void onPackageInstallFail(PluginLiteInfo info, int failReason) throws RemoteException {
                                PluginDebugLog.runtimeLog(TAG, "check installation failed pkgName: " + info.packageName + " failReason: " + failReason);
                                count.set(-1);
                                listener.onFail(failReason, packageName);
                            }
                        });
            }
            return;
        }
        // 4. packageInfo ä¸ºç©ºçš„æƒ…å†µï¼Œè®°å½•å¼‚å¸¸ï¼Œç”¨æˆ·æœªå®‰è£…
        PluginDebugLog.runtimeLog(TAG, "pluginLiteInfo is null packageName: " + packageName);
        listener.onFail(ErrorType.ERROR_PLUGIN_LITEINFO_NOT_FOUND, packageName);
    }

    private static void doLoadClassAsync(@NonNull final Context hostContext,
                                         @NonNull String packageName,
                                         @NonNull final String fragmentClass,
                                         @NonNull final IPluginElementLoadListener<Class<?>> listener) {
        loadPluginAsync(hostContext, packageName, new IPluginLoadListener() {
            @Override
            public void onLoadSuccess(String packageName) {
                if (getPluginLoadedApkByPkgName(packageName) != null) {
                    loadClass(hostContext, packageName, fragmentClass, listener);
                }
            }

            @Override
            public void onLoadFailed(String packageName) {
                listener.onFail(ErrorType.ERROR_PLUGIN_CREATE_LOADEDAPK, packageName);
            }
        }, FileUtils.getCurrentProcessName(hostContext));
    }

    /**
     * å?¯åŠ¨æ?’ä»¶çš„é»˜è®¤å…¥å?£Activity
     *
     * @param mHostContext å®¿ä¸»çš„Context
     * @param packageName  æ?’ä»¶åŒ…å??
     */
    public static void launchPlugin(Context mHostContext, String packageName) {
        if (mHostContext == null || TextUtils.isEmpty(packageName)) {
            PluginDebugLog.runtimeLog(TAG, "launchPlugin mHostContext is null or packageName is null!");
            return;
        }

        ComponentName mComponentName = new ComponentName(packageName, "");
        Intent mIntent = new Intent();
        mIntent.setComponent(mComponentName);
        launchPlugin(mHostContext, mIntent, ProcessManager.chooseDefaultProcess(mHostContext, packageName));
    }

    /**
     * å?¯åŠ¨æ?’ä»¶
     *
     * @param mHostContext ä¸»å·¥ç¨‹çš„ä¸Šä¸‹æ–‡
     * @param mIntent      éœ€è¦?å?¯åŠ¨çš„ç»„ä»¶çš„Intent
     * @param mProcessName éœ€è¦?å?¯åŠ¨çš„æ?’ä»¶è¿?è¡Œçš„è¿›ç¨‹å??ç§°,æ?’ä»¶æ–¹å?¯ä»¥åœ¨Applicationçš„android:processæŒ‡å®š
     *                     å¦‚æžœæ²¡æœ‰æŒ‡å®šï¼Œåˆ™æœ‰æ?’ä»¶ä¸­å¿ƒåˆ†é…?
     */
    public static void launchPlugin(final Context mHostContext,
                                    Intent mIntent,
                                    String mProcessName) {
        launchPlugin(mHostContext, mIntent, null, mProcessName);
    }

    /**
     * å?¯åŠ¨æ?’ä»¶
     *
     * @param mHostContext       ä¸»å·¥ç¨‹çš„ä¸Šä¸‹æ–‡
     * @param mIntent            éœ€è¦?å?¯åŠ¨çš„ç»„ä»¶çš„Intent
     * @param mServiceConnection bindServiceæ—¶éœ€è¦?çš„ServiceConnection,å¦‚æžœä¸?æ˜¯bindServiceçš„æ–¹å¼?å?¯åŠ¨ç»„ä»¶ï¼Œä¼ å…¥Null
     * @param mProcessName       éœ€è¦?å?¯åŠ¨çš„æ?’ä»¶è¿?è¡Œçš„è¿›ç¨‹å??ç§°,æ?’ä»¶æ–¹å?¯ä»¥åœ¨Applicationçš„android:processæŒ‡å®š
     *                           å¦‚æžœæ²¡æœ‰æŒ‡å®šï¼Œåˆ™æœ‰æ?’ä»¶ä¸­å¿ƒåˆ†é…?
     */
    public static void launchPlugin(final Context mHostContext,
                                    final Intent mIntent,
                                    final ServiceConnection mServiceConnection,
                                    final String mProcessName) {
        final String packageName = tryParsePkgName(mHostContext, mIntent);
        if (TextUtils.isEmpty(packageName)) {
            if (null != mHostContext) {
                deliver(mHostContext, false, mHostContext.getPackageName(), ErrorType.ERROR_PLUGIN_LOAD_NO_PKGNAME_INTENT);
            }
            PluginDebugLog.runtimeLog(TAG, "enterProxy packageName is null return! packageName: " + packageName);
            return;
        }
        // å¤„ç?†ä¸?å?Œè¿›ç¨‹è·³è½¬
        final String targetProcessName = TextUtils.isEmpty(mProcessName) ?
                ProcessManager.chooseDefaultProcess(mHostContext, packageName) : mProcessName;
        String currentProcess = FileUtils.getCurrentProcessName(mHostContext);
        if (!TextUtils.equals(currentProcess, targetProcessName)) {
            // å?¯åŠ¨è¿›ç¨‹å’Œç›®æ ‡è¿›ç¨‹ä¸?ä¸€è‡´ï¼Œéœ€è¦?å…ˆå?¯åŠ¨ç›®æ ‡è¿›ç¨‹ï¼Œåˆ?å§‹åŒ–PluginLoadedApk
            PluginDebugLog.runtimeFormatLog(TAG, "enterProxy caller process %s not match with target process %s for pkgName %s",
                    currentProcess, targetProcessName, packageName);
            Intent transIntent = new Intent();
            transIntent.setAction(IntentConstant.ACTION_START_PLUGIN);
            transIntent.putExtra(IntentConstant.EXTRA_START_INTENT_KEY, mIntent);
            try {
                String proxyServiceName = ComponentFinder.matchServiceProxyByFeature(targetProcessName);
                String fixedProcess = ComponentFinder.fixProcessNameByService(mHostContext, proxyServiceName);
                transIntent.putExtra(IntentConstant.EXTRA_TARGET_PROCESS, fixedProcess);

                transIntent.setClass(mHostContext, Class.forName(proxyServiceName));
                mHostContext.startService(transIntent);
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }
            return;
        }

        final IntentRequest request = new IntentRequest(mIntent, mServiceConnection);
        LinkedBlockingQueue<IntentRequest> cacheIntents = PActivityStackSupervisor.getCachedIntent(packageName);
        if (cacheIntents != null && cacheIntents.size() > 0) {
            PluginDebugLog.runtimeLog(TAG, "LoadingMap is not empty, Cache current intent and execute it later, intent: "
                    + mIntent + ", packageName: " + packageName);
            cacheIntents.add(request);
            return;
        }

        boolean isLoadAndInit = isPluginLoadedAndInit(packageName);
        if (isLoadAndInit) {
            PluginDebugLog.runtimeLog(TAG, "Environment is already ready, launch current intent directly: " + mIntent);
            // å?¯ä»¥ç›´æŽ¥å?¯åŠ¨ç»„ä»¶
            readyToStartSpecifyPlugin(mHostContext, mServiceConnection, mIntent, true);
            return;
        }

        if (null == cacheIntents) {
            cacheIntents = new LinkedBlockingQueue<IntentRequest>();
            PActivityStackSupervisor.addCachedIntent(packageName, cacheIntents);
        }
        // ç¼“å­˜è¿™ä¸ªintentï¼Œç­‰å¾…PluginLoadedApkåŠ è½½åˆ°å†…å­˜ä¹‹å?Žå†?å?¯åŠ¨è¿™ä¸ªIntent
        PluginDebugLog.runtimeLog(TAG, "Environment is initializing and loading, cache current intent first, intent: " + mIntent);
        cacheIntents.add(request);
        // å¤„ç?†æ?’ä»¶çš„ä¾?èµ–å…³ç³»
        final PluginLiteInfo info = PluginPackageManagerNative.getInstance(mHostContext.getApplicationContext())
                .getPackageInfo(packageName);
        final List<String> mPluginRefs = PluginPackageManagerNative.getInstance(mHostContext)
                .getPluginRefs(packageName);
        if (info != null && mPluginRefs != null
                && mPluginRefs.size() > 0) {
            PluginDebugLog.runtimeLog(TAG,
                    "start to check dependence installation size: " + mPluginRefs.size());
            final AtomicInteger count = new AtomicInteger(mPluginRefs.size());
            for (String pkgName : mPluginRefs) {
                PluginDebugLog.runtimeLog(TAG, "start to check installation pkgName: " + pkgName);
                final PluginLiteInfo refInfo = PluginPackageManagerNative.getInstance(mHostContext.getApplicationContext())
                        .getPackageInfo(pkgName);

                PluginPackageManagerNative.getInstance(mHostContext.getApplicationContext()).packageAction(refInfo,
                        new IInstallCallBack.Stub() {
                            @Override
                            public void onPackageInstalled(PluginLiteInfo packageInfo) {
                                count.getAndDecrement();
                                PluginDebugLog.runtimeLog(TAG, "check installation success pkgName: " + refInfo.packageName);
                                if (count.get() == 0) {
                                    PluginDebugLog.runtimeLog(TAG,
                                            "start check installation after check dependence packageName: "
                                                    + packageName);
                                    checkPkgInstallationAndLaunch(mHostContext, info, mServiceConnection, mIntent, targetProcessName);
                                }
                            }

                            @Override
                            public void onPackageInstallFail(PluginLiteInfo info, int failReason) throws RemoteException {
                                PluginDebugLog.runtimeLog(TAG,
                                        "check installation failed pkgName: " + info.packageName + " failReason: " + failReason);
                                count.set(-1);
                            }
                        });
            }
        } else if (info != null) {
            PluginDebugLog.runtimeLog(TAG, "start check installation without dependence packageName: " + packageName);
            checkPkgInstallationAndLaunch(mHostContext, info, mServiceConnection, mIntent, targetProcessName);
        } else {
            PluginDebugLog.runtimeLog(TAG, "pluginLiteInfo is null packageName: " + packageName);
            PActivityStackSupervisor.clearLoadingIntent(packageName);
            if (PluginDebugLog.isDebug()) {
                throw new IllegalStateException("pluginLiteInfo is null when launchPlugin " + packageName);
            }
        }
    }

    /**
     * å¼‚æ­¥åˆ?å§‹åŒ–æ?’ä»¶ï¼Œå®¿ä¸»é?™é»˜åŠ è½½æ?’ä»¶
     *
     * @deprecated ä¸?å»ºè®®ä½¿ç”¨
     */
    @Deprecated
    public static void initPluginAsync(final Context mHostContext,
                                       final String packageName,
                                       final String processName,
                                       final org.qiyi.pluginlibrary.listenter.IPluginStatusListener mListener) {
        // æ?’ä»¶å·²ç»?åŠ è½½
        if (PluginManager.isPluginLoadedAndInit(packageName)) {
            if (mListener != null) {
                mListener.onInitFinished(packageName);
            }
            return;
        }

        BroadcastReceiver recv = new BroadcastReceiver() {
            public void onReceive(Context ctx, Intent intent) {
                String curPkg = IntentUtils.getTargetPackage(intent);
                if (IntentConstant.ACTION_PLUGIN_INIT.equals(intent.getAction()) && TextUtils.equals(packageName, curPkg)) {
                    PluginDebugLog.runtimeLog(TAG, "æ”¶åˆ°è‡ªå®šä¹‰çš„å¹¿æ’­org.qiyi.pluginapp.action.TARGET_LOADED");
                    if (mListener != null) {
                        mListener.onInitFinished(packageName);
                    }
                    mHostContext.getApplicationContext().unregisterReceiver(this);
                }
            }
        };
        PluginDebugLog.runtimeLog(TAG, "æ³¨å†Œè‡ªå®šä¹‰å¹¿æ’­org.qiyi.pluginapp.action.TARGET_LOADED");
        IntentFilter filter = new IntentFilter();
        filter.addAction(IntentConstant.ACTION_PLUGIN_INIT);
        mHostContext.getApplicationContext().registerReceiver(recv, filter);

        Intent intent = new Intent();
        intent.setAction(IntentConstant.ACTION_PLUGIN_INIT);
        intent.setComponent(new ComponentName(packageName, recv.getClass().getName()));
        launchPlugin(mHostContext, intent, processName);
    }

    /**
     * å‡†å¤‡å?¯åŠ¨æŒ‡å®šæ?’ä»¶ç»„ä»¶
     *
     * @param mContext     ä¸»å·¥ç¨‹Context
     * @param mConnection  bindServiceæ—¶éœ€è¦?çš„ServiceConnection,å¦‚æžœä¸?æ˜¯bindServiceçš„æ–¹å¼?å?¯åŠ¨ç»„ä»¶ï¼Œä¼ å…¥Null
     * @param mIntent      éœ€è¦?å?¯åŠ¨ç»„ä»¶çš„Intent
     * @param needAddCache æ˜¯å?¦éœ€è¦?ç¼“å­˜Intnet,true:å¦‚æžœæ?’ä»¶æ²¡æœ‰åˆ?å§‹åŒ–ï¼Œé‚£ä¹ˆä¼šç¼“å­˜èµ·æ?¥ï¼Œç­‰æ?’ä»¶åŠ è½½å®Œæ¯•å†?æ‰§è¡Œæ­¤Intent
     *                     false:å¦‚æžœæ?’ä»¶æ²¡åˆ?å§‹åŒ–ï¼Œåˆ™ç›´æŽ¥æŠ›å¼ƒæ­¤Intent
     */
    public static boolean readyToStartSpecifyPlugin(Context mContext,
                                                    ServiceConnection mConnection,
                                                    Intent mIntent,
                                                    boolean needAddCache) {
        PluginDebugLog.runtimeLog(TAG, "readyToStartSpecifyPlugin launchIntent: " + mIntent);
        String packageName = tryParsePkgName(mContext, mIntent);
        PluginLoadedApk mLoadedApk = getPluginLoadedApkByPkgName(packageName);
        if (mLoadedApk == null) {
            deliver(mContext, false, packageName, ErrorType.ERROR_PLUGIN_NOT_LOADED);
            PluginDebugLog.runtimeLog(TAG, packageName + "readyToStartSpecifyPlugin launchIntent exception, plugin loaded apk not exist");
            PActivityStackSupervisor.clearLoadingIntent(packageName);
            return false;
        }

        LinkedBlockingQueue<IntentRequest> cacheIntents =
                PActivityStackSupervisor.getCachedIntent(packageName);
        if (cacheIntents == null) {
            cacheIntents = new LinkedBlockingQueue<IntentRequest>();
            PActivityStackSupervisor.addCachedIntent(packageName, cacheIntents);
        }
        // é?¿å…?é‡?å¤?æ·»åŠ Intentè¯·æ±‚åˆ°é˜Ÿåˆ—ä¸­ï¼Œå°¤å…¶æ˜¯ç¬¬ä¸€æ¬¡åˆ?å§‹åŒ–æ—¶åœ¨enterProxyä¸­å·²ç»?æ·»åŠ äº†ä¸€æ¬¡
        IntentRequest request = new IntentRequest(mIntent, mConnection);
        if (!cacheIntents.contains(request) && needAddCache) {
            PluginDebugLog.runtimeLog(TAG, "readyToStartSpecifyPlugin launchIntent add to cacheIntent....");
            cacheIntents.offer(request);  // æ·»åŠ åˆ°é˜Ÿåˆ—
        } else {
            PluginDebugLog.runtimeLog(TAG, "readyToStartSpecifyPlugin launchIntent no need add to cacheIntent....needAddCache:" + needAddCache);
        }

        PluginDebugLog.runtimeLog(TAG, "readyToStartSpecifyPlugin launchIntent_cacheIntents: " + cacheIntents);
        if (!mLoadedApk.hasLaunchIngIntent()) {
            IntentRequest firstRequest = cacheIntents.poll(); //å¤„ç?†é˜Ÿé¦–çš„Intent
            if (firstRequest != null && firstRequest.getIntent() != null) {
                PluginDebugLog.runtimeFormatLog(TAG, "readyToStartSpecifyPlugin, no launching intent for pkgName: %s, " +
                        "ready to process first intent in queue!", packageName);
                doRealLaunch(mContext, mLoadedApk, firstRequest.getIntent(), firstRequest.getServiceConnection());
            }
        } else {
            PluginDebugLog.runtimeFormatLog(TAG, "readyToStartSpecifyPlugin, has launching intent for pkgName %s " +
                    "waiting other intent process over", packageName);
        }
        return true;
    }

    /**
     * æ›´æ–°æ‰€æœ‰æ?’ä»¶çš„èµ„æº?é…?ç½®
     * ä½¿ç”¨Applicationçš„callbackå®žçŽ°
     */
    @Deprecated
    public static void updateConfiguration(Configuration config) {
        for (Map.Entry<String, PluginLoadedApk> entry : sPluginsMap.entrySet()) {
            PluginLoadedApk mLoadedApk = entry.getValue();
            mLoadedApk.updateConfiguration(config);
        }
    }

    /**
     * çœŸæ­£å?¯åŠ¨ä¸€ä¸ªç»„ä»¶
     *
     * @param mHostContext ä¸»å·¥ç¨‹Context
     * @param mLoadedApk   éœ€è¦?å?¯åŠ¨çš„æ?’ä»¶çš„PluginLoadedApk
     * @param mIntent      éœ€è¦?å?¯åŠ¨ç»„ä»¶çš„Intent
     * @param mConnection  bindServiceæ—¶éœ€è¦?çš„ServiceConnection,å¦‚æžœä¸?æ˜¯bindServiceçš„æ–¹å¼?å?¯åŠ¨ç»„ä»¶ï¼Œä¼ å…¥Null
     */
    private static boolean doRealLaunch(Context mHostContext,
                                     PluginLoadedApk mLoadedApk,
                                     Intent mIntent,
                                     ServiceConnection mConnection) {
        String targetClassName = "";
        ComponentName mComponent = mIntent.getComponent();
        if (mComponent != null) {
            //æ˜¾å¼?å?¯åŠ¨
            targetClassName = mComponent.getClassName();
            PluginDebugLog.runtimeLog(TAG, "doRealLaunch launchIntent_targetClassName:" + targetClassName);
            if (TextUtils.isEmpty(targetClassName)) {
                targetClassName = mLoadedApk.getPluginPackageInfo().getDefaultActivityName();
            }
        }

        String pkgName = mLoadedApk.getPluginPackageName();
        Class<?> targetClass = null;
        if (!TextUtils.isEmpty(targetClassName)
                && !TextUtils.equals(targetClassName, IntentConstant.EXTRA_VALUE_LOADTARGET_STUB)) {
            try {
                targetClass = mLoadedApk.getPluginClassLoader().loadClass(targetClassName);
            } catch (Exception e) {
                deliver(mHostContext, false,
                        pkgName, ErrorType.ERROR_PLUGIN_LOAD_COMP_CLASS);
                PluginDebugLog.runtimeLog(TAG, "doRealLaunch loadClass failed for targetClassName: "
                        + targetClassName);
                executeNext(mHostContext, mLoadedApk);
                return false;
            }
        }

        String action = mIntent.getAction();
        if (TextUtils.equals(action, IntentConstant.ACTION_PLUGIN_INIT)
                || TextUtils.equals(targetClassName, IntentConstant.EXTRA_VALUE_LOADTARGET_STUB)) {
            PluginDebugLog.runtimeLog(TAG, "doRealLaunch load target stub for pkgName: " + pkgName);
            //é€šçŸ¥æ?’ä»¶åˆ?å§‹åŒ–å®Œæ¯•
            if (targetClass != null && BroadcastReceiver.class.isAssignableFrom(targetClass)) {
                Intent newIntent = new Intent(mIntent);
                newIntent.setComponent(null);
                newIntent.putExtra(IntentConstant.EXTRA_TARGET_PACKAGE_KEY, pkgName);
                newIntent.setPackage(mHostContext.getPackageName());
                mHostContext.sendBroadcast(newIntent);
            }
            // è¡¨ç¤ºå?Žå?°åŠ è½½Applicationï¼Œä¸?éœ€è¦?å?¯åŠ¨ç»„ä»¶
            executeNext(mHostContext, mLoadedApk);
            return false;
        }

        mLoadedApk.changeLaunchingIntentStatus(true);
        PluginDebugLog.runtimeLog(TAG, "doRealLaunch launchIntent_targetClass: " + targetClassName);
        if (targetClass != null && Service.class.isAssignableFrom(targetClass)) {
            //å¤„ç?†çš„æ˜¯Service, å®¿ä¸»å?¯åŠ¨æ?’ä»¶Serviceå?ªèƒ½é€šè¿‡æ˜¾å¼?å?¯åŠ¨
            ComponentFinder.switchToServiceProxy(mLoadedApk, mIntent, targetClassName);
            if (mConnection == null) {
                PluginDebugLog.runtimeLog(TAG, "doRealLaunch serviceConnection is null, startService: "
                        + targetClassName);
                mHostContext.startService(mIntent);
            } else {
                PluginDebugLog.runtimeLog(TAG, "doRealLaunch serviceConnection is " + mConnection.getClass().getName()
                        + ", bindService: " + targetClassName);
                mHostContext.bindService(mIntent, mConnection,
                        mIntent.getIntExtra(IntentConstant.BIND_SERVICE_FLAGS, Context.BIND_AUTO_CREATE));
            }
        } else {
            //å¤„ç?†çš„æ˜¯Activity
            ComponentFinder.switchToActivityProxy(pkgName,
                    mIntent, -1, mHostContext);
            PActivityStackSupervisor.addLoadingIntent(pkgName, new IntentRequest(mIntent, mConnection));
            Context lastActivity = null;
            PActivityStackSupervisor mActivityStackSupervisor =
                    mLoadedApk.getActivityStackSupervisor();
            lastActivity = mActivityStackSupervisor.getAvailableActivity();
            PluginDebugLog.runtimeLog(TAG, "doRealLaunch startActivity: " + targetClassName);
            if (mHostContext instanceof Activity) {
                mHostContext.startActivity(mIntent);
            } else if (lastActivity != null) {
                ActivityInfo lastInfo = mLoadedApk.getActivityInfoByClassName(lastActivity.getClass().getName());
                ActivityInfo currentInfo = mLoadedApk.getActivityInfoByClassName(targetClassName);
                if (lastInfo != null && currentInfo != null && TextUtils.equals(lastInfo.taskAffinity, currentInfo.taskAffinity)) {
                    // Clear the Intent.FLAG_ACTIVITY_NEW_TASK
                    int flag = mIntent.getFlags();
                    flag = flag ^ Intent.FLAG_ACTIVITY_NEW_TASK;
                    mIntent.setFlags(flag);
                }
                lastActivity.startActivity(mIntent);
            } else {
                // Add the Intent.FLAG_ACTIVITY_NEW_TASK
                mIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                mHostContext.startActivity(mIntent);
            }
        }
        if (sPluginStatusListener != null) {
            sPluginStatusListener.onLaunchSuccess(pkgName, mIntent);
        }

        // æ‰§è¡Œä¸‹ä¸€ä¸ªIntent
        PluginDebugLog.runtimeFormatLog(TAG, "doRealLaunch process intent %s end, ready to executeNext intent", mIntent.toString());
        executeNext(mHostContext, mLoadedApk);
        return true;
    }

    /**
     * å¤„ç?†é˜Ÿåˆ—ä¸­ä¸‹ä¸€ä¸ªIntentRequestçš„è¯·æ±‚
     *
     * @param mContext   ä¸»è¿›ç¨‹çš„Context
     * @param mLoadedApk å½“å‰?è¦?å?¯åŠ¨çš„ç»„ä»¶çš„æ?’ä»¶å®žä¾‹
     */
    private static void executeNext(final Context mContext,
                                    final PluginLoadedApk mLoadedApk) {
        Message msg = Message.obtain(sHandler, new Runnable() {

            @Override
            public void run() {
                LinkedBlockingQueue<IntentRequest> cacheIntents =
                        PActivityStackSupervisor.getCachedIntent(mLoadedApk.getPluginPackageName());
                PluginDebugLog.runtimeLog(TAG, "executeNext cacheIntents: " + cacheIntents);
                if (null != cacheIntents && !cacheIntents.isEmpty()) {
                    IntentRequest request = cacheIntents.poll();
                    if (request != null && request.getIntent() != null) {
                        PluginDebugLog.runtimeLog(TAG, "executeNext process intent: " + request.getIntent());
                        doRealLaunch(mContext, mLoadedApk, request.getIntent(), request.getServiceConnection());
                        return;
                    }
                }
                mLoadedApk.changeLaunchingIntentStatus(false);
            }
        });
        sHandler.sendMessage(msg);
    }

    /**
     * åˆ¤æ–­æ?’ä»¶æ˜¯å?¦å·²ç»?åˆ?å§‹åŒ–
     *
     * @param mPluginPackage éœ€è¦?åˆ¤æ–­çš„æ?’ä»¶çš„åŒ…å??
     * @return true:å·²ç»?åˆ?å§‹åŒ–ï¼Œfalse:æ²¡æœ‰åˆ?å§‹åŒ–
     */
    public static boolean isPluginLoadedAndInit(String mPluginPackage) {

        PluginLoadedApk mPlugin = getPluginLoadedApkByPkgName(mPluginPackage);
        return mPlugin != null && mPlugin.hasPluginInit();
    }

    /**
     * æ£€æŸ¥æ?’ä»¶æ˜¯å?¦å®‰è£…ï¼Œå¦‚æžœå®‰è£…åˆ™å?¯åŠ¨æ?’ä»¶
     *
     * @param mHostContext       ä¸»è¿›ç¨‹Context
     * @param packageInfo        æ?’ä»¶çš„è¯¦ç»†ä¿¡æ?¯
     * @param mServiceConnection bindServiceæ—¶éœ€è¦?çš„ServiceConnection,å¦‚æžœä¸?æ˜¯bindServiceçš„æ–¹å¼?å?¯åŠ¨ç»„ä»¶ï¼Œä¼ å…¥Null
     * @param mIntent            å?¯åŠ¨ç»„ä»¶çš„Intent
     */
    private static void checkPkgInstallationAndLaunch(final Context mHostContext,
                                                      final PluginLiteInfo packageInfo,
                                                      final ServiceConnection mServiceConnection,
                                                      final Intent mIntent,
                                                      final String mProcessName) {
        final Context appContext = mHostContext.getApplicationContext();
        PluginPackageManagerNative.getInstance(appContext).packageAction(packageInfo,
                new IInstallCallBack.Stub() {
                    @Override
                    public void onPackageInstalled(PluginLiteInfo info) {
                        // install done ,load plugin async
                        PluginDebugLog.runtimeLog(TAG,
                                "checkPkgInstallationAndLaunch installed packageName: " + info.packageName);
                        startLoadPlugin(appContext, packageInfo, mServiceConnection, mIntent, mProcessName);
                    }

                    @Override
                    public void onPackageInstallFail(PluginLiteInfo info, int failReason) throws RemoteException {
                        String packageName = info.packageName;
                        PluginDebugLog.runtimeLog(TAG, "checkPkgInstallationAndLaunch failed packageName: " + packageName
                                + " failReason: " + failReason);
                        PActivityStackSupervisor.clearLoadingIntent(packageName);
                        deliver(mHostContext, false, packageName, failReason);
                    }
                });
    }

    /**
     * å¼€å§‹å‡†å¤‡åŠ è½½æ?’ä»¶LoadedApkå®žä¾‹
     *
     * @param mHostContext       ä¸»è¿›ç¨‹Context
     * @param packageInfo        æ?’ä»¶çš„è¯¦ç»†ä¿¡æ?¯
     * @param mServiceConnection bindServiceæ—¶éœ€è¦?çš„ServiceConnection,å¦‚æžœä¸?æ˜¯bindServiceçš„æ–¹å¼?å?¯åŠ¨ç»„ä»¶ï¼Œä¼ å…¥Null
     * @param mIntent            å?¯åŠ¨ç»„ä»¶çš„Intent
     */
    private static void startLoadPlugin(final Context mHostContext,
                                        final PluginLiteInfo packageInfo,
                                        final ServiceConnection mServiceConnection,
                                        final Intent mIntent,
                                        final String mProcessName) {
        loadPluginAsync(mHostContext, packageInfo.packageName,
                new IPluginLoadListener() {

                    @Override
                    public void onLoadSuccess(String packageName) {
                        PluginDebugLog.runtimeLog(TAG,
                                "checkPkgInstallationAndLaunch loadPluginAsync callback onLoadSuccess pkgName: " + packageName);
                        // load done, start plugin
                        readyToStartSpecifyPlugin(mHostContext, mServiceConnection, mIntent, false);
                        if (sPluginStatusListener != null) {
                            sPluginStatusListener.onPluginReady(packageName);
                        }
                    }

                    @Override
                    public void onLoadFailed(String packageName) {
                        PluginDebugLog.runtimeLog(TAG,
                                "checkPkgInstallationAndLaunch loadPluginAsync callback onLoadFailed pkgName: " + packageName);
                        // load failed, clear launching intent
                        PActivityStackSupervisor.clearLoadingIntent(packageName);
                        PluginLoadedApk mPlugin = sPluginsMap.get(packageName);
                        if (null != mPlugin) {
                            mPlugin.changeLaunchingIntentStatus(false);
                        }
                    }
                }, mProcessName);
    }

    /**
     * å¼‚æ­¥åŠ è½½æ?’ä»¶
     *
     * @param context     ä¸»è¿›ç¨‹çš„Context
     * @param packageName éœ€è¦?åŠ è½½çš„æ?’ä»¶åŒ…å??
     * @param listener    åŠ è½½ç»“æžœå›žè°ƒ
     * @param processName è¿›ç¨‹å??ç§°
     */
    private static void loadPluginAsync(Context context, String packageName,
                                        IPluginLoadListener listener, String processName) {
        sExecutor.execute(new LoadPluginTask(context, packageName, listener, processName));
    }

    /**
     * å?Œæ­¥åŠ è½½æ?’ä»¶
     *
     * @param context     ä¸»è¿›ç¨‹çš„Context
     * @param packageName éœ€è¦?åŠ è½½çš„æ?’ä»¶åŒ…å??
     * @param processName è¿›ç¨‹å??ç§°
     */
    public static void loadPluginSync(final Context context, String packageName,
                                      String processName) {
        LoadPluginTask task = new LoadPluginTask(context, packageName, new IPluginLoadListener() {
            @Override
            public void onLoadSuccess(String packageName) {
                PluginDebugLog.runtimeFormatLog(TAG, "loadPluginSync success for plugin %s", packageName);
            }

            @Override
            public void onLoadFailed(String packageName) {
                PluginDebugLog.runtimeFormatLog(TAG, "loadPluginSync failed for plugin %s", packageName);
            }
        }, processName);
        task.run();
    }


    /**
     * ä»ŽmIntenté‡Œé?¢è§£æž?æ?’ä»¶åŒ…å??
     * 1. ä»ŽIntentçš„packageèŽ·å?–
     * 2. ä»ŽIntentçš„ComponentNameèŽ·å?–
     * 3. éš?å¼?Intentï¼Œä»Žå·²å®‰è£…æ?’ä»¶åˆ—è¡¨ä¸­æŸ¥æ‰¾å?¯ä»¥å“?åº”çš„æ?’ä»¶
     *
     * @param mHostContext ä¸»å·¥ç¨‹Context
     * @param mIntent      éœ€è¦?å?¯åŠ¨çš„ç»„ä»¶
     * @return è¿”å›žéœ€è¦?å?¯åŠ¨æ?’ä»¶çš„åŒ…å??
     */
    private static String tryParsePkgName(Context mHostContext, Intent mIntent) {
        if (mIntent == null || mHostContext == null) {
            return "";
        }

        String pkgName = mIntent.getPackage();
        if (!TextUtils.isEmpty(pkgName) && !TextUtils.equals(pkgName, mHostContext.getPackageName())) {
            // ä¸Žå®¿ä¸»pkgNameä¸?å?Œ
            return pkgName;
        }

        ComponentName cpn = mIntent.getComponent();
        if (cpn != null && !TextUtils.isEmpty(cpn.getPackageName())) {
            // æ˜¾å¼?å?¯åŠ¨æ?’ä»¶
            return cpn.getPackageName();
        } else {
            // éš?å¼?å?¯åŠ¨æ?’ä»¶
            List<PluginLiteInfo> packageList =
                    PluginPackageManagerNative.getInstance(mHostContext).getInstalledApps();
            if (packageList != null) {
                // Here, loop all installed packages to get pkgName for this intent
                String packageName = "";
                ActivityInfo activityInfo = null;
                ServiceInfo serviceInfo = null;
                for (PluginLiteInfo info : packageList) {
                    if (info != null) {
                        PluginPackageInfo target = PluginPackageManagerNative.getInstance(mHostContext)
                                .getPluginPackageInfo(mHostContext, info);
                        if (target != null && (activityInfo = target.resolveActivity(mIntent)) != null) {
                            // ä¼˜å…ˆæŸ¥æ‰¾Activity, è¿™é‡Œè½¬æˆ?æ˜¾å¼?Intentï¼Œå?Žé?¢ä¸?ç”¨äºŒæ¬¡resolveäº†
                            mIntent.setComponent(new ComponentName(info.packageName, activityInfo.name));
                            return info.packageName;
                        }
                        // resolveéš?å¼?Service
                        if (!TextUtils.isEmpty(packageName) && serviceInfo != null) {
                            continue;
                        }
                        if (target != null && (serviceInfo = target.resolveService(mIntent)) != null) {
                            packageName = info.packageName;
                        }
                    }
                }
                // Here, No Activity can handle this intent, we check service fallback
                if (!TextUtils.isEmpty(packageName)) {
                    if (serviceInfo != null) {
                        // æ?’ä»¶æ¡†æž¶å?Žé?¢çš„é€»è¾‘å?ªæ”¯æŒ?æ˜¾å¼?Serviceå¤„ç?†ï¼Œè¿™é‡Œéœ€è¦?æ›´æ–°Intentçš„ä¿¡æ?¯
                        mIntent.setComponent(new ComponentName(packageName, serviceInfo.name));
                    }
                    return packageName;
                }
            }
        }

        return "";
    }

    /**
     * æ?’ä»¶çŠ¶æ€?æŠ•é€’
     *
     * @param mContext  æ?’ä»¶è¿›ç¨‹Context
     * @param success   ç»“æžœæ˜¯å?¦æˆ?åŠŸ
     * @param pakName   æ?’ä»¶åŒ…å??
     * @param errorCode é”™è¯¯ç ?
     */
    public static void deliver(final Context mContext, final boolean success, final String pakName,
                               final int errorCode) {
        if (Looper.myLooper() != null && Looper.myLooper() == Looper.getMainLooper()) {
            new AsyncTask<Void, Void, Void>() {
                @Override
                protected Void doInBackground(Void... params) {
                    deliverPlugInner(mContext, success, pakName, errorCode);
                    return null;
                }

            }.execute();
        } else {
            deliverPlugInner(mContext, success, pakName, errorCode);
        }
    }

    /**
     * æ?’ä»¶çŠ¶æ€?æŠ•é€’
     *
     * @param mContext  æ?’ä»¶è¿›ç¨‹Context
     * @param success   ç»“æžœæ˜¯å?¦æˆ?åŠŸ
     * @param pakName   æ?’ä»¶åŒ…å??
     * @param errorCode é”™è¯¯ç ?
     */
    private static void deliverPlugInner(Context mContext, boolean success, String pakName, int errorCode) {
        if (null != mContext && mDeliver != null && !TextUtils.isEmpty(pakName)) {
            PluginLiteInfo info = PluginPackageManagerNative.getInstance(ContextUtils.getOriginalContext(mContext))
                    .getPackageInfo(pakName);
            if (info != null) {
                mDeliver.deliver(success, info, errorCode);
            }
        }
    }

    /**
     * é€€å‡ºæ?’ä»¶,å°†æ?’ä»¶ä¸­çš„ç±»ä»ŽPathClassLoaderä¸­å‰”é™¤
     *
     * @param mPackageName éœ€è¦?é€€å‡ºçš„æ?’ä»¶çš„åŒ…å??
     */
    public static void exitPlugin(String mPackageName) {
        if (!TextUtils.isEmpty(mPackageName)) {
            PluginLoadedApk mLoadedApk = removePluginLoadedApk(mPackageName);
            if (mLoadedApk == null || mLoadedApk.getPluginApplication() == null) {
                return;
            }
            mLoadedApk.ejectClassLoader();
        }
    }

    /**
     * æ³¨å†Œå?¸è½½å¹¿æ’­ï¼Œæ¸…ç?†PluginLoadedApkå†…å­˜å¼•ç”¨
     */
    public static void registerUninstallReceiver(Context context) {

        IntentFilter filter = new IntentFilter();
        filter.addAction(PluginPackageManager.ACTION_PACKAGE_UNINSTALL);
        filter.setPriority(IntentFilter.SYSTEM_HIGH_PRIORITY);

        BroadcastReceiver receiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {

                if (PluginPackageManager.ACTION_PACKAGE_UNINSTALL.equals(intent.getAction())) {
                    // å?¸è½½å¹¿æ’­
                    String pkgName = intent.getStringExtra(IntentConstant.EXTRA_PKG_NAME);
                    exitPlugin(pkgName);
                }
            }
        };
        context.registerReceiver(receiver, filter);
    }

    /**
     * æ?’ä»¶è¿›ç¨‹çš„Activityæ ˆæ˜¯å?¦ç©º
     *
     * @return true: Activityæ ˆæ˜¯ç©ºï¼Œfalseï¼šActivityæ ˆä¸?æ˜¯ç©º
     */
    public static boolean isActivityStackEmpty() {
        for (Map.Entry<String, PluginLoadedApk> entry : PluginManager.getAllPluginLoadedApk().entrySet()) {
            PluginLoadedApk mLoadedApk = entry.getValue();
            if (mLoadedApk != null && !mLoadedApk.getActivityStackSupervisor().isStackEmpty()) {
                return false;
            }
        }
        return true;
    }

    /**
     * å¤„ç?†æ?’ä»¶é€€å‡ºæ—¶çš„å–„å?Žæ“?ä½œ
     *
     * @param mPackageName é€€å‡ºæ?’ä»¶çš„åŒ…å??
     * @param force        æ˜¯å?¦å¼ºåˆ¶é€€å‡º
     */
    public static void doExitStuff(String mPackageName, boolean force) {
        if (TextUtils.isEmpty(mPackageName)) {
            return;
        }

        if (force || (isActivityStackEmpty() && PServiceSupervisor.getAliveServices().isEmpty())) {
            if (null != sExitStuff) {
                PluginDebugLog.runtimeLog(TAG, "do release stuff with " + mPackageName);
                sExitStuff.doExitStuff(mPackageName);
            }
        }
    }

    /**
     * è®¾ç½®æŠ•é€’é€»è¾‘çš„å®žçŽ°(å®¿ä¸»å·¥ç¨‹è°ƒç”¨)
     */
    public static void setDeliverImpl(IDeliverInterface mDeliverImpl) {
        mDeliver = mDeliverImpl;
    }

    /**
     * è®¾ç½®æ?’ä»¶çŠ¶æ€?ç›‘å?¬å™¨(å®¿ä¸»å·¥ç¨‹è°ƒç”¨)
     */
    public static void setPluginStatusListener(IPluginStatusListener mListener) {
        sPluginStatusListener = mListener;
    }

    /**
     * è®¾ç½®æ?’ä»¶é€€å‡ºç›‘å?¬å›žè°ƒ(å®¿ä¸»å·¥ç¨‹è°ƒç”¨)
     */
    public static void setExitStuff(IAppExitStuff mExitStuff) {
        sExitStuff = mExitStuff;
    }

    /**
     * å?œæ­¢æŒ‡å®šçš„Service
     */
    public static void stopService(Intent intent) {
        if (intent == null || intent.getComponent() == null
                || TextUtils.isEmpty(intent.getComponent().getPackageName())) {
            return;
        }
        final String packageName = intent.getComponent().getPackageName();
        PluginLoadedApk mLoadedApk = sPluginsMap.get(packageName);
        if (mLoadedApk == null) {
            return;
        }
        PluginContextWrapper appWrapper = mLoadedApk.getAppWrapper();
        if (appWrapper != null) {
            appWrapper.stopService(intent);
        }
    }

    /**
     * é€€å‡ºæ?’ä»¶è¿›ç¨‹
     *
     * @param mContext     ä¸»è¿›ç¨‹Context
     * @param mProcessName è¦?é€€å‡ºè¿›ç¨‹
     */
    public static void quit(Context mContext, String mProcessName) {

        PluginPackageManagerNative.getInstance(mContext).release();

        for (Map.Entry<String, PluginLoadedApk> entry : getAllPluginLoadedApk().entrySet()) {
            PluginLoadedApk plugin = entry.getValue();
            if (plugin != null) {
                plugin.quitApp(true, false);
            }
        }
        PServiceSupervisor.clearConnections();
        // sAliveServices will be cleared, when on ServiceProxy1 destroy.
        Intent intent = new Intent();
        String proxyServiceName = ComponentFinder.matchServiceProxyByFeature(mProcessName);
        try {
            PluginDebugLog.runtimeLog(TAG, "try to stop service " + proxyServiceName);
            intent.setClass(mContext, Class.forName(proxyServiceName));
            intent.setAction(IntentConstant.ACTION_QUIT_SERVICE);
            mContext.startService(intent);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    /**
     * dump å½“å‰?çš„æ?’ä»¶æ ˆä¿¡æ?¯
     */
    public static void dump(PrintWriter printWriter) {
        try {
            printWriter.print("================start dump plugin activity stack====================");
            Iterator<Map.Entry<String, PluginLoadedApk>> mIterator = sPluginsMap.entrySet().iterator();
            while (mIterator.hasNext()) {
                Map.Entry<String, PluginLoadedApk> tmp = mIterator.next();
                printWriter.print("packageName:" + tmp.getKey());
                printWriter.print("\n");
                tmp.getValue().getActivityStackSupervisor().dump(printWriter);
            }
            printWriter.print("================end dump plugin activity stack====================");
        } catch (Exception e) {
            e.printStackTrace();
            printWriter.print("error:" + e.getMessage());
        }

    }

    /**
     * æ³¨å†ŒActivityLifeCycleåˆ°æ?’ä»¶çš„Application
     */
    public static void registerActivityLifecycleCallbacks(Application.ActivityLifecycleCallbacks callback) {
        synchronized (sActivityLifecycleCallbacks) {
            sActivityLifecycleCallbacks.add(callback);
        }
        // å¯¹äºŽå·²ç»?è¿?è¡Œçš„æ?’ä»¶ï¼Œéœ€è¦?æ³¨å†Œåˆ°å…¶Applicationç±»ä¸­
        for (Map.Entry<String, PluginLoadedApk> entry : sPluginsMap.entrySet()) {
            PluginLoadedApk loadedApk = entry.getValue();
            if (loadedApk != null && loadedApk.getPluginApplication() != null) {
                Application application = loadedApk.getPluginApplication();
                application.registerActivityLifecycleCallbacks(callback);
            }
        }
    }

    /**
     * å?–æ¶ˆæ?’ä»¶Applicationé‡Œçš„ActivityLifeCycleç›‘å?¬
     */
    public static void unregisterActivityLifecycleCallbacks(Application.ActivityLifecycleCallbacks callback) {
        synchronized (sActivityLifecycleCallbacks) {
            sActivityLifecycleCallbacks.remove(callback);
        }
        // å¯¹äºŽå·²ç»?è¿?è¡Œçš„æ?’ä»¶ï¼Œéœ€è¦?ä»Žå…¶Applicationç±»ä¸­å??æ³¨å†Œ
        for (Map.Entry<String, PluginLoadedApk> entry : sPluginsMap.entrySet()) {
            PluginLoadedApk loadedApk = entry.getValue();
            if (loadedApk != null && loadedApk.getPluginApplication() != null) {
                Application application = loadedApk.getPluginApplication();
                application.unregisterActivityLifecycleCallbacks(callback);
            }
        }
    }


    /**
     * æ?’ä»¶çŠ¶æ€?æŠ•é€’é€»è¾‘æŽ¥å?£ï¼Œç”±å¤–éƒ¨å®žçŽ°å¹¶è®¾ç½®è¿›æ?¥
     */
    public interface IDeliverInterface {
        void deliver(boolean success, PluginLiteInfo pkgInfo, int errorCode);
    }

    public interface IAppExitStuff {
        void doExitStuff(String pkgName);
    }

    /**
     * åŠ è½½æ?’ä»¶çš„å¼‚æ­¥ä»»åŠ¡
     */
    private static class LoadPluginTask implements Runnable {

        private String mPackageName;
        private Context mHostContext;
        private String mProcessName;
        private PluginLoadedApk mLoadedApk;
        private PluginLoadedApkHandler mHandler;

        LoadPluginTask(Context mHostContext,
                       String mPackageName,
                       IPluginLoadListener mListener,
                       String mProcessName) {
            this.mHostContext = mHostContext.getApplicationContext();
            this.mPackageName = mPackageName;
            this.mProcessName = mProcessName;
            this.mHandler = new PluginLoadedApkHandler(mListener, mPackageName, Looper.getMainLooper());
        }

        @Override
        public void run() {
            boolean loaded = false;
            try {
                PluginLiteInfo packageInfo = PluginPackageManagerNative.getInstance(mHostContext)
                        .getPackageInfo(mPackageName);
                if (packageInfo != null) {
                    PluginDebugLog.runtimeLog(TAG,
                            "doInBackground:" + mPackageName);
                    loaded = createPluginLoadedApkInstance(mHostContext, packageInfo, mProcessName);
                    if (loaded && mLoadedApk != null) {
                        invokeApplication();
                    }
                } else {
                    PluginDebugLog.runtimeLog(TAG, "packageInfo is null before initProxyEnvironment");
                }
            } catch (Exception e) {
                ErrorUtil.throwErrorIfNeed(e);
                PActivityStackSupervisor.clearLoadingIntent(mPackageName);
                deliver(mHostContext, false, mPackageName,
                        ErrorType.ERROR_PLUGIN_CREATE_LOADEDAPK);
                loaded = false;
            }
            int what = loaded ? PluginLoadedApkHandler.PLUGIN_LOADED_APK_CREATE_SUCCESS : PluginLoadedApkHandler.PLUGIN_LOADED_APK_CREATE_FAILED;
            mHandler.sendEmptyMessage(what);
        }

        /**
         * åˆ?å§‹åŒ–æ?’ä»¶çš„Applicationå¯¹è±¡
         */
        private void invokeApplication() throws Exception {
            final Exception[] temp = new Exception[1];
            RunUtil.runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    if (mLoadedApk != null
                            && mLoadedApk.makeApplication()) {
                        PluginDebugLog.runtimeFormatLog(TAG, "plugin %s makeApplication success", mPackageName);
                    } else {
                        temp[0] = new RuntimeException("init Application failed");
                    }
                }
            }, true);
            if (temp[0] != null) {
                throw temp[0];
            }
        }

        /**
         * åˆ›å»ºæ?’ä»¶çš„{@link PluginLoadedApk}å®žä¾‹
         */
        private boolean createPluginLoadedApkInstance(Context context,
                                                      PluginLiteInfo packageInfo,
                                                      String mProcessName) {
            String packageName = packageInfo.packageName;
            if (!TextUtils.isEmpty(packageName)) {
                mLoadedApk = getPluginLoadedApkByPkgName(packageName);
                if (mLoadedApk != null) {
                    return true;
                }
                PluginPackageManager.updateSrcApkPath(context, packageInfo);
                if (!TextUtils.isEmpty(packageInfo.srcApkPath)) {
                    File apkFile = new File(packageInfo.srcApkPath);
                    if (!apkFile.exists()) {
                        PluginDebugLog.runtimeLog(TAG,
                                "Special case apkFile not exist, notify client! packageName: " + packageName);
                        PluginPackageManager.notifyClientPluginException(context, packageName, "Apk file not exist when load plugin");
                        return false;
                    }

                    mLoadedApk = new PluginLoadedApk(context, packageInfo.srcApkPath, packageName, mProcessName);
                    addPluginLoadedApk(packageName, mLoadedApk);
                    PluginDebugLog.runtimeLog(TAG, "plugin loaded success! packageName: " + packageName);
                    return true;
                }
            }
            PluginDebugLog.runtimeLog(TAG, "plugin loaded failed! packageName: " + packageName);
            return false;
        }
    }

    /**
     * åŠ è½½æ?’ä»¶çº¿ç¨‹å’Œä¸»çº¿ç¨‹é€šä¿¡Handler
     */
    static class PluginLoadedApkHandler extends Handler {
        public static final int PLUGIN_LOADED_APK_CREATE_SUCCESS = 0x10;
        public static final int PLUGIN_LOADED_APK_CREATE_FAILED = 0x20;

        IPluginLoadListener mListener;
        String mPackageName;

        public PluginLoadedApkHandler(IPluginLoadListener listener, String pakName, Looper looper) {
            super(looper);
            this.mListener = listener;
            this.mPackageName = pakName;
        }

        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case PLUGIN_LOADED_APK_CREATE_SUCCESS:
                    if (mListener != null) {
                        mListener.onLoadSuccess(mPackageName);
                    }
                    break;
                case PLUGIN_LOADED_APK_CREATE_FAILED:
                    if (mListener != null) {
                        mListener.onLoadFailed(mPackageName);
                    }
                    break;
                default:
                    break;
            }
        }
    }

    /**
     * æŸ¥çœ‹æ?’ä»¶æ˜¯å?¦åˆ›å»ºäº† ClassLoader
     *
     * @param packageName åŒ…å??
     * @return true or false
     */
    public static boolean isPluginClassLoaderLoaded(String packageName) {
        return PluginLoadedApk.isPluginClassLoaderLoaded(packageName);
    }
}
