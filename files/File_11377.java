package com.vondear.rxui.view.swipecaptcha;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.ValueAnimator;
import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Bitmap;
import android.graphics.BlurMaskFilter;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.LinearGradient;
import android.graphics.Paint;
import android.graphics.PaintFlagsDrawFilter;
import android.graphics.Path;
import android.graphics.PointF;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffXfermode;
import android.graphics.Shader;
import android.graphics.drawable.BitmapDrawable;
import android.support.v4.view.animation.FastOutLinearInInterpolator;
import android.util.AttributeSet;
import android.util.Log;
import android.util.TypedValue;

import com.vondear.rxui.R;

import java.util.Random;

/**
 * @author Vondear.
 * ä»‹ç»?ï¼šä»¿æ–—é±¼æ»‘åŠ¨éªŒè¯?ç ?View
 * @date æ›´æ–°æ—¶é—´ï¼š 2017/08/24.
 */

public class RxSwipeCaptcha extends android.support.v7.widget.AppCompatImageView {
    private final String TAG = RxSwipeCaptcha.class.getName();
    //æŽ§ä»¶çš„å®½é«˜
    protected int mWidth;
    protected int mHeight;

    //éªŒè¯?ç ?æ»‘å?—çš„å®½é«˜
    private int mCaptchaWidth;
    private int mCaptchaHeight;
    //éªŒè¯?ç ?çš„å·¦ä¸Šè§’(èµ·ç‚¹)çš„x y
    private int mCaptchaX;
    private int mCaptchaY;
    private Random mRandom;
    private Paint mPaint;
    //éªŒè¯?ç ? é˜´å½±ã€?æŠ å›¾çš„Path
    private Path mCaptchaPath;
    private PorterDuffXfermode mPorterDuffXfermode;


    //æ˜¯å?¦ç»˜åˆ¶æ»‘å?—ï¼ˆéªŒè¯?å¤±è´¥é—ªçƒ?åŠ¨ç”»ç”¨ï¼‰
    private boolean isDrawMask;
    //æ»‘å?—Bitmap
    private Bitmap mMaskBitmap;
    private Paint mMaskPaint;
    //ç”¨äºŽç»˜åˆ¶é˜´å½±çš„Paint
    private Paint mMaskShadowPaint;
    private Bitmap mMaskShadowBitmap;
    //æ»‘å?—çš„ä½?ç§»
    private int mDragerOffset;

    //æ˜¯å?¦å¤„äºŽéªŒè¯?æ¨¡å¼?ï¼Œåœ¨éªŒè¯?æˆ?åŠŸå?Ž ä¸ºfalseï¼Œå…¶ä½™æƒ…å†µä¸ºtrue
    private boolean isMatchMode;
    //éªŒè¯?çš„è¯¯å·®å…?è®¸å€¼
    private float mMatchDeviation;
    //éªŒè¯?å¤±è´¥çš„é—ªçƒ?åŠ¨ç”»
    private ValueAnimator mFailAnim;
    //éªŒè¯?æˆ?åŠŸçš„ç™½å…‰ä¸€é—ªåŠ¨ç”»
    private boolean isShowSuccessAnim;
    private ValueAnimator mSuccessAnim;
    //ç”»ç¬”
    private Paint mSuccessPaint;
    //åŠ¨ç”»çš„offset
    private int mSuccessAnimOffset;
    //æˆ?åŠŸåŠ¨ç”» å¹³è¡Œå››è¾¹å½¢Path
    private Path mSuccessPath;

    public RxSwipeCaptcha(Context context) {
        this(context, null);
    }

    public RxSwipeCaptcha(Context context, AttributeSet attrs) {
        this(context, attrs, 0);
    }

    public RxSwipeCaptcha(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        init(context, attrs, defStyleAttr);
    }

    private void init(Context context, AttributeSet attrs, int defStyleAttr) {
        int defaultSize = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, 16, getResources().getDisplayMetrics());
        mCaptchaHeight = defaultSize;
        mCaptchaWidth = defaultSize;
        mMatchDeviation = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 3, getResources().getDisplayMetrics());
        TypedArray ta = context.getTheme().obtainStyledAttributes(attrs, R.styleable.RxSwipeCaptcha, defStyleAttr, 0);
        int n = ta.getIndexCount();
        for (int i = 0; i < n; i++) {
            int attr = ta.getIndex(i);
            if (attr == R.styleable.RxSwipeCaptcha_captchaHeight) {
                mCaptchaHeight = (int) ta.getDimension(attr, defaultSize);
            } else if (attr == R.styleable.RxSwipeCaptcha_captchaWidth) {
                mCaptchaWidth = (int) ta.getDimension(attr, defaultSize);
            } else if (attr == R.styleable.RxSwipeCaptcha_matchDeviation) {
                mMatchDeviation = ta.getDimension(attr, mMatchDeviation);
            }
        }
        ta.recycle();

        mRandom = new Random(System.nanoTime());
        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG | Paint.DITHER_FLAG);
        mPaint.setColor(0x77000000);
        //mPaint.setStyle(Paint.Style.STROKE);
        // è®¾ç½®ç”»ç¬”é?®ç½©æ»¤é•œ
        mPaint.setMaskFilter(new BlurMaskFilter(20, BlurMaskFilter.Blur.SOLID));

        //æ»‘å?—åŒºåŸŸ
        mPorterDuffXfermode = new PorterDuffXfermode(PorterDuff.Mode.SRC_IN);
        mMaskPaint = new Paint(Paint.ANTI_ALIAS_FLAG | Paint.DITHER_FLAG);

        // å®žä¾‹åŒ–é˜´å½±ç”»ç¬”
        mMaskShadowPaint = new Paint(Paint.ANTI_ALIAS_FLAG | Paint.DITHER_FLAG);
        mMaskShadowPaint.setColor(Color.BLACK);
        /*mMaskShadowPaint.setStrokeWidth(50);
        mMaskShadowPaint.setTextSize(50);
        mMaskShadowPaint.setStyle(Paint.Style.FILL_AND_STROKE);*/
        mMaskShadowPaint.setMaskFilter(new BlurMaskFilter(10, BlurMaskFilter.Blur.SOLID));

        mCaptchaPath = new Path();

        mWidth = mCaptchaWidth;
        mHeight = mCaptchaHeight;
    }

    @Override
    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);
        mWidth = w;
        mHeight = h;
        //åŠ¨ç”»åŒºåŸŸ ä¼šç”¨åˆ°å®½é«˜
        createMatchAnim();

        post(new Runnable() {
            @Override
            public void run() {
                createCaptcha();
            }
        });
    }

    //éªŒè¯?åŠ¨ç”»åˆ?å§‹åŒ–åŒºåŸŸ
    private void createMatchAnim() {
        mFailAnim = ValueAnimator.ofFloat(0, 1);
        mFailAnim.setDuration(100)
                .setRepeatCount(4);
        mFailAnim.setRepeatMode(ValueAnimator.REVERSE);
        //å¤±è´¥çš„æ—¶å€™å…ˆé—ªä¸€é—ªåŠ¨ç”» æ–—é±¼æ˜¯ éš?è—?-æ˜¾ç¤º -éš?è—? -æ˜¾ç¤º
        mFailAnim.addListener(new AnimatorListenerAdapter() {
            @Override
            public void onAnimationEnd(Animator animation) {
                onCaptchaMatchCallback.matchFailed(RxSwipeCaptcha.this);
            }
        });
        mFailAnim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                float animatedValue = (float) animation.getAnimatedValue();
                Log.d(TAG, "onAnimationUpdate: " + animatedValue);
                if (animatedValue < 0.5f) {
                    isDrawMask = false;
                } else {
                    isDrawMask = true;
                }
                invalidate();
            }
        });

        int width = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 100, getResources().getDisplayMetrics());
        mSuccessAnim = ValueAnimator.ofInt(mWidth + width, 0);
        mSuccessAnim.setDuration(500);
        mSuccessAnim.setInterpolator(new FastOutLinearInInterpolator());
        mSuccessAnim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                mSuccessAnimOffset = (int) animation.getAnimatedValue();
                invalidate();
            }
        });
        mSuccessAnim.addListener(new AnimatorListenerAdapter() {
            @Override
            public void onAnimationStart(Animator animation) {
                isShowSuccessAnim = true;
            }

            @Override
            public void onAnimationEnd(Animator animation) {
                onCaptchaMatchCallback.matchSuccess(RxSwipeCaptcha.this);
                isShowSuccessAnim = false;
                isMatchMode = false;
            }
        });
        mSuccessPaint = new Paint();
        mSuccessPaint.setShader(new LinearGradient(0, 0, width / 2 * 3, mHeight, new int[]{
                0x00ffffff, 0x88ffffff}, new float[]{0, 0.5f},
                Shader.TileMode.MIRROR));
        //æ¨¡ä»¿æ–—é±¼ æ˜¯ä¸€ä¸ªå¹³è¡Œå››è¾¹å½¢æ»šåŠ¨è¿‡åŽ»
        mSuccessPath = new Path();
        mSuccessPath.moveTo(0, 0);
        mSuccessPath.rLineTo(width, 0);
        mSuccessPath.rLineTo(width / 2, mHeight);
        mSuccessPath.rLineTo(-width, 0);
        mSuccessPath.close();
    }

    /**
     * ç”Ÿæˆ?éªŒè¯?ç ?åŒºåŸŸ
     */
    public void createCaptcha() {
        if (getDrawable() != null) {
            resetFlags();
            createCaptchaPath();
            craeteMask();
            invalidate();
        }
    }

    /**
     * é‡?ç½®ä¸€äº›flasgï¼Œ å¼€å?¯éªŒè¯?æ¨¡å¼?
     */
    private void resetFlags() {
        isMatchMode = true;
    }

    /**
     * ç”Ÿæˆ?éªŒè¯?ç ?Path
     */
    private void createCaptchaPath() {
        //åŽŸæœ¬æ‰“ç®—éš?æœºç”Ÿæˆ?gapï¼Œå?Žæ?¥å?‘çŽ° å®½åº¦/3 æ•ˆæžœæ¯”è¾ƒå¥½ï¼Œ
        int gap = mRandom.nextInt(mCaptchaWidth / 2);
        gap = mCaptchaWidth / 3;

        //éš?æœºç”Ÿæˆ?éªŒè¯?ç ?é˜´å½±å·¦ä¸Šè§’ x y ç‚¹ï¼Œ
        mCaptchaX = mRandom.nextInt(Math.abs(mWidth - mCaptchaWidth - gap));
        mCaptchaY = mRandom.nextInt(Math.abs(mHeight - mCaptchaHeight - gap));
        Log.d(TAG, "createCaptchaPath() called mWidth:" + mWidth + ", mHeight:" + mHeight + ", mCaptchaX:" + mCaptchaX + ", mCaptchaY:" + mCaptchaY);

        mCaptchaPath.reset();
        mCaptchaPath.lineTo(0, 0);


        //ä»Žå·¦ä¸Šè§’å¼€å§‹ ç»˜åˆ¶ä¸€ä¸ªä¸?è§„åˆ™çš„é˜´å½±
        mCaptchaPath.moveTo(mCaptchaX, mCaptchaY);//å·¦ä¸Šè§’


        /*mCaptchaPath.lineTo(mCaptchaX + gap, mCaptchaY);
        //ç”»å‡ºå‡¹å‡¸ ç”±äºŽæ˜¯å¤šæ®µPath æ— æ³•é—­å?ˆï¼Œç®€ç›´é˜¿è¥¿å?§
        int r = mCaptchaWidth / 2 - gap;
        RectF oval = new RectF(mCaptchaX + gap, mCaptchaY - (r), mCaptchaX + gap + r * 2, mCaptchaY + (r));
        mCaptchaPath.arcTo(oval, 180, 180);*/

        mCaptchaPath.lineTo(mCaptchaX + gap, mCaptchaY);
        //drawä¸€ä¸ªéš?æœºå‡¹å‡¸çš„åœ†
        drawPartCircle(new PointF(mCaptchaX + gap, mCaptchaY),
                new PointF(mCaptchaX + gap * 2, mCaptchaY),
                mCaptchaPath, mRandom.nextBoolean());


        mCaptchaPath.lineTo(mCaptchaX + mCaptchaWidth, mCaptchaY);//å?³ä¸Šè§’
        mCaptchaPath.lineTo(mCaptchaX + mCaptchaWidth, mCaptchaY + gap);
        //drawä¸€ä¸ªéš?æœºå‡¹å‡¸çš„åœ†
        drawPartCircle(new PointF(mCaptchaX + mCaptchaWidth, mCaptchaY + gap),
                new PointF(mCaptchaX + mCaptchaWidth, mCaptchaY + gap * 2),
                mCaptchaPath, mRandom.nextBoolean());


        mCaptchaPath.lineTo(mCaptchaX + mCaptchaWidth, mCaptchaY + mCaptchaHeight);//å?³ä¸‹è§’
        mCaptchaPath.lineTo(mCaptchaX + mCaptchaWidth - gap, mCaptchaY + mCaptchaHeight);
        //drawä¸€ä¸ªéš?æœºå‡¹å‡¸çš„åœ†
        drawPartCircle(new PointF(mCaptchaX + mCaptchaWidth - gap, mCaptchaY + mCaptchaHeight),
                new PointF(mCaptchaX + mCaptchaWidth - gap * 2, mCaptchaY + mCaptchaHeight),
                mCaptchaPath, mRandom.nextBoolean());


        mCaptchaPath.lineTo(mCaptchaX, mCaptchaY + mCaptchaHeight);//å·¦ä¸‹è§’
        mCaptchaPath.lineTo(mCaptchaX, mCaptchaY + mCaptchaHeight - gap);
        //drawä¸€ä¸ªéš?æœºå‡¹å‡¸çš„åœ†
        drawPartCircle(new PointF(mCaptchaX, mCaptchaY + mCaptchaHeight - gap),
                new PointF(mCaptchaX, mCaptchaY + mCaptchaHeight - gap * 2),
                mCaptchaPath, mRandom.nextBoolean());


        mCaptchaPath.close();

        /*RectF oval = new RectF(mCaptchaX + gap, mCaptchaY - (r), mCaptchaX + gap + r * 2, mCaptchaY + (r));
        mCaptchaPath.addArc(oval, 180,180);
        mCaptchaPath.lineTo(mCaptchaX + mCaptchaWidth, mCaptchaY);
        //å‡¹çš„è¯?ï¼Œéº»çƒ¦ä¸€ç‚¹ï¼Œè¦?åˆ©ç”¨å¤šæ¬¡move
        mCaptchaPath.lineTo(mCaptchaX + mCaptchaWidth, mCaptchaY + gap);
        oval = new RectF(mCaptchaX + mCaptchaWidth - r, mCaptchaY + gap, mCaptchaX + mCaptchaWidth + r, mCaptchaY + gap + r * 2);
        mCaptchaPath.addArc(oval, 90, 180);
        mCaptchaPath.moveTo(mCaptchaX + mCaptchaWidth, mCaptchaY + gap + r * 2);*//*
        mCaptchaPath.lineTo(mCaptchaX + mCaptchaWidth, mCaptchaY + mCaptchaHeight);
        mCaptchaPath.lineTo(mCaptchaX, mCaptchaY + mCaptchaHeight);
        mCaptchaPath.close();*/
    }

    //ç”Ÿæˆ?æ»‘å?—
    private void craeteMask() {
        mMaskBitmap = getMaskBitmap(((BitmapDrawable) getDrawable()).getBitmap(), mCaptchaPath);
        //æ»‘å?—é˜´å½±
        mMaskShadowBitmap = mMaskBitmap.extractAlpha();
        //æ‹–åŠ¨çš„ä½?ç§»é‡?ç½®
        mDragerOffset = 0;
        //isDrawMask  ç»˜åˆ¶å¤±è´¥é—ªçƒ?åŠ¨ç”»ç”¨
        isDrawMask = true;
    }

    //æŠ å›¾
    private Bitmap getMaskBitmap(Bitmap mBitmap, Path mask) {
        //ä»¥æŽ§ä»¶å®½é«˜ createä¸€å?—bitmap
        Bitmap tempBitmap = Bitmap.createBitmap(mWidth, mHeight, Bitmap.Config.ARGB_8888);
        Log.e(TAG, " getMaskBitmap: width:" + mBitmap.getWidth() + ",  height:" + mBitmap.getHeight());
        Log.e(TAG, " View: width:" + mWidth + ",  height:" + mHeight);
        //æŠŠåˆ›å»ºçš„bitmapä½œä¸ºç”»æ?¿
        Canvas mCanvas = new Canvas(tempBitmap);
        //æœ‰é”¯é½¿ ä¸”æ— æ³•è§£å†³,æ‰€ä»¥æ?¢æˆ?XFermodeçš„æ–¹æ³•å?š
        //mCanvas.clipPath(mask);
        // æŠ—é”¯é½¿
        mCanvas.setDrawFilter(new PaintFlagsDrawFilter(0, Paint.ANTI_ALIAS_FLAG | Paint.FILTER_BITMAP_FLAG));
        //ç»˜åˆ¶ç”¨äºŽé?®ç½©çš„åœ†å½¢
        mCanvas.drawPath(mask, mMaskPaint);
        //è®¾ç½®é?®ç½©æ¨¡å¼?(å›¾åƒ?æ··å?ˆæ¨¡å¼?)
        mMaskPaint.setXfermode(mPorterDuffXfermode);
        //mMaskPaint.setShadowLayer(5, 3, 3, 0xFF0000FF);

        // è®¾ç½®å…‰æº?çš„æ–¹å?‘
        float[] direction = new float[]{1, 1, 1};
        //è®¾ç½®çŽ¯å¢ƒå…‰äº®åº¦
        float light = 1f;
        // é€‰æ‹©è¦?åº”ç”¨çš„å??å°„ç­‰çº§
        float specular = 6;
        // å?‘maskåº”ç”¨ä¸€å®šçº§åˆ«çš„æ¨¡ç³Š
        float blur = 3.5f;
        //EmbossMaskFilter emboss=new EmbossMaskFilter(direction,light,specular,blur);
        BlurMaskFilter maskFilter = new BlurMaskFilter(10, BlurMaskFilter.Blur.SOLID);
        // åº”ç”¨mask
        mMaskPaint.setMaskFilter(maskFilter);

        //â˜…è€ƒè™‘åˆ°scaleTypeç­‰å› ç´ ï¼Œè¦?ç”¨Matrixå¯¹Bitmapè¿›è¡Œç¼©æ”¾
        mCanvas.drawBitmap(mBitmap, getImageMatrix(), mMaskPaint);
        mMaskPaint.setXfermode(null);
        return tempBitmap;
    }


    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        //ç»§æ‰¿è‡ªImageViewï¼Œæ‰€ä»¥Bitmapï¼ŒImageViewå·²ç»?å¸®æˆ‘ä»¬drawå¥½äº†ã€‚
        //æˆ‘å?ªåœ¨ä¸Šé?¢ç»˜åˆ¶å’ŒéªŒè¯?ç ?ç›¸å…³çš„éƒ¨åˆ†ï¼Œ

        //æ˜¯å?¦å¤„äºŽéªŒè¯?æ¨¡å¼?ï¼Œåœ¨éªŒè¯?æˆ?åŠŸå?Ž ä¸ºfalseï¼Œå…¶ä½™æƒ…å†µä¸ºtrue
        if (isMatchMode) {
            //é¦–å…ˆç»˜åˆ¶éªŒè¯?ç ?é˜´å½±
            if (mCaptchaPath != null) {
                canvas.drawPath(mCaptchaPath, mPaint);
            }
            //ç»˜åˆ¶æ»‘å?—
            // isDrawMask  ç»˜åˆ¶å¤±è´¥é—ªçƒ?åŠ¨ç”»ç”¨
            if (null != mMaskBitmap && null != mMaskShadowBitmap && isDrawMask) {
                // å…ˆç»˜åˆ¶é˜´å½±
                canvas.drawBitmap(mMaskShadowBitmap, -mCaptchaX + mDragerOffset, 0, mMaskShadowPaint);
                canvas.drawBitmap(mMaskBitmap, -mCaptchaX + mDragerOffset, 0, null);
            }
            //éªŒè¯?æˆ?åŠŸï¼Œç™½å…‰æ‰«è¿‡çš„åŠ¨ç”»ï¼Œè¿™ä¸€å?—åŠ¨ç”»æ„Ÿè§‰ä¸?å®Œç¾Žï¼Œæœ‰æ??é«˜ç©ºé—´
            if (isShowSuccessAnim) {
                canvas.translate(mSuccessAnimOffset, 0);
                canvas.drawPath(mSuccessPath, mSuccessPaint);
            }
        }
    }


    /**
     * æ ¡éªŒ
     */
    public void matchCaptcha() {
        if (null != onCaptchaMatchCallback && isMatchMode) {
            //è¿™é‡ŒéªŒè¯?é€»è¾‘ï¼Œæ˜¯é€šè¿‡æ¯”è¾ƒï¼Œæ‹–æ‹½çš„è·?ç¦» å’Œ éªŒè¯?ç ?èµ·ç‚¹xå??æ ‡ã€‚ é»˜è®¤3dpä»¥å†…ç®—æ˜¯éªŒè¯?æˆ?åŠŸã€‚
            if (Math.abs(mDragerOffset - mCaptchaX) < mMatchDeviation) {
                Log.d(TAG, "matchCaptcha() true: mDragerOffset:" + mDragerOffset + ", mCaptchaX:" + mCaptchaX);
                //matchSuccess();
                //æˆ?åŠŸçš„åŠ¨ç”»
                mSuccessAnim.start();
            } else {
                Log.e(TAG, "matchCaptcha() false: mDragerOffset:" + mDragerOffset + ", mCaptchaX:" + mCaptchaX);
                mFailAnim.start();
                //matchFailed();
            }
        }

    }

    /**
     * é‡?ç½®éªŒè¯?ç ?æ»‘åŠ¨è·?ç¦»,(ä¸€èˆ¬ç”¨äºŽéªŒè¯?å¤±è´¥)
     */
    public void resetCaptcha() {
        mDragerOffset = 0;
        invalidate();
    }

    /**
     * æœ€å¤§å?¯æ»‘åŠ¨å€¼
     *
     * @return
     */
    public int getMaxSwipeValue() {
        //return ((BitmapDrawable) getDrawable()).getBitmap().getWidth() - mCaptchaWidth;
        //è¿”å›žæŽ§ä»¶å®½åº¦
        return mWidth - mCaptchaWidth;
    }

    /**
     * è®¾ç½®å½“å‰?æ»‘åŠ¨å€¼
     *
     * @param value
     */
    public void setCurrentSwipeValue(int value) {
        mDragerOffset = value;
        invalidate();
    }

    public interface OnCaptchaMatchCallback {
        void matchSuccess(RxSwipeCaptcha rxSwipeCaptcha);

        void matchFailed(RxSwipeCaptcha rxSwipeCaptcha);
    }

    /**
     * éªŒè¯?ç ?éªŒè¯?çš„å›žè°ƒ
     */
    private OnCaptchaMatchCallback onCaptchaMatchCallback;

    public OnCaptchaMatchCallback getOnCaptchaMatchCallback() {
        return onCaptchaMatchCallback;
    }

    /**
     * è®¾ç½®éªŒè¯?ç ?éªŒè¯?å›žè°ƒ
     *
     * @param onCaptchaMatchCallback
     * @return
     */
    public RxSwipeCaptcha setOnCaptchaMatchCallback(OnCaptchaMatchCallback onCaptchaMatchCallback) {
        this.onCaptchaMatchCallback = onCaptchaMatchCallback;
        return this;
    }

    /**
     * ä¼ å…¥èµ·ç‚¹ã€?ç»ˆç‚¹ å??æ ‡ã€?å‡¹å‡¸å’ŒPathã€‚
     * ä¼šè‡ªåŠ¨ç»˜åˆ¶å‡¹å‡¸çš„å?Šåœ†å¼§
     *
     * @param start èµ·ç‚¹å??æ ‡
     * @param end   ç»ˆç‚¹å??æ ‡
     * @param path  å?Šåœ†ä¼šç»˜åˆ¶åœ¨è¿™ä¸ªpathä¸Š
     * @param outer æ˜¯å?¦å‡¸å?Šåœ†
     */
    private void drawPartCircle(PointF start, PointF end, Path path, boolean outer) {
        float c = 0.551915024494f;
        //ä¸­ç‚¹
        PointF middle = new PointF(start.x + (end.x - start.x) / 2, start.y + (end.y - start.y) / 2);
        //å?Šå¾„
        float r1 = (float) Math.sqrt(Math.pow((middle.x - start.x), 2) + Math.pow((middle.y - start.y), 2));
        //gapå€¼
        float gap1 = r1 * c;

        if (start.x == end.x) {
            //ç»˜åˆ¶ç«–ç›´æ–¹å?‘çš„

            //æ˜¯å?¦æ˜¯ä»Žä¸Šåˆ°ä¸‹
            boolean topToBottom = end.y - start.y > 0 ? true : false;
            //ä»¥ä¸‹æ˜¯æˆ‘å†™å‡ºäº†æ‰€æœ‰çš„è®¡ç®—å…¬å¼?å?ŽæŽ¨çš„ï¼Œä¸?è¦?é—®æˆ‘è¿‡ç¨‹ï¼Œå?ªå?¯æ„?ä¼šã€‚
            int flag;//æ—‹è½¬ç³»æ•°
            if (topToBottom) {
                flag = 1;
            } else {
                flag = -1;
            }
            if (outer) {
                //å‡¸çš„ ä¸¤ä¸ªå?Šåœ†
                path.cubicTo(start.x + gap1 * flag, start.y,
                        middle.x + r1 * flag, middle.y - gap1 * flag,
                        middle.x + r1 * flag, middle.y);
                path.cubicTo(middle.x + r1 * flag, middle.y + gap1 * flag,
                        end.x + gap1 * flag, end.y,
                        end.x, end.y);
            } else {
                //å‡¹çš„ ä¸¤ä¸ªå?Šåœ†
                path.cubicTo(start.x - gap1 * flag, start.y,
                        middle.x - r1 * flag, middle.y - gap1 * flag,
                        middle.x - r1 * flag, middle.y);
                path.cubicTo(middle.x - r1 * flag, middle.y + gap1 * flag,
                        end.x - gap1 * flag, end.y,
                        end.x, end.y);
            }
        } else {
            //ç»˜åˆ¶æ°´å¹³æ–¹å?‘çš„

            //æ˜¯å?¦æ˜¯ä»Žå·¦åˆ°å?³
            boolean leftToRight = end.x - start.x > 0 ? true : false;
            //ä»¥ä¸‹æ˜¯æˆ‘å†™å‡ºäº†æ‰€æœ‰çš„è®¡ç®—å…¬å¼?å?ŽæŽ¨çš„ï¼Œä¸?è¦?é—®æˆ‘è¿‡ç¨‹ï¼Œå?ªå?¯æ„?ä¼šã€‚
            int flag;//æ—‹è½¬ç³»æ•°
            if (leftToRight) {
                flag = 1;
            } else {
                flag = -1;
            }
            if (outer) {
                //å‡¸ ä¸¤ä¸ªå?Šåœ†
                path.cubicTo(start.x, start.y - gap1 * flag,
                        middle.x - gap1 * flag, middle.y - r1 * flag,
                        middle.x, middle.y - r1 * flag);
                path.cubicTo(middle.x + gap1 * flag, middle.y - r1 * flag,
                        end.x, end.y - gap1 * flag,
                        end.x, end.y);
            } else {
                //å‡¹ ä¸¤ä¸ªå?Šåœ†
                path.cubicTo(start.x, start.y + gap1 * flag,
                        middle.x - gap1 * flag, middle.y + r1 * flag,
                        middle.x, middle.y + r1 * flag);
                path.cubicTo(middle.x + gap1 * flag, middle.y + r1 * flag,
                        end.x, end.y + gap1 * flag,
                        end.x, end.y);
            }
        }
    }
}
