/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.alipay.sofa.rpc.protocol;

import com.alipay.sofa.rpc.common.RpcConfigs;
import com.alipay.sofa.rpc.common.RpcOptions;
import com.alipay.sofa.rpc.core.exception.SofaRpcRuntimeException;
import com.alipay.sofa.rpc.ext.ExtensionClass;
import com.alipay.sofa.rpc.ext.ExtensionLoader;
import com.alipay.sofa.rpc.ext.ExtensionLoaderFactory;
import com.alipay.sofa.rpc.ext.ExtensionLoaderListener;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

/**
 * Factory of protocol
 *
 * @author <a href=mailto:zhanggeng.zg@antfin.com>GengZhang</a>
 */
public class ProtocolFactory {

    /**
     * é™¤äº†æ‰˜ç®¡ç»™æ‰©å±•åŠ è½½å™¨çš„å·¥åŽ‚æ¨¡å¼?ï¼ˆä¿?ç•™aliasï¼šå®žä¾‹ï¼‰å¤–<br>
     * è¿˜éœ€è¦?é¢?å¤–ä¿?ç•™ç¼–ç ?å’Œå®žä¾‹çš„æ˜ å°„ï¼š{ç¼–ç ?ï¼šå??è®®}
     */
    private final static ConcurrentMap<Byte, Protocol> TYPE_PROTOCOL_MAP = new ConcurrentHashMap<Byte, Protocol>();

    /**
     * é™¤äº†æ‰˜ç®¡ç»™æ‰©å±•åŠ è½½å™¨çš„å·¥åŽ‚æ¨¡å¼?ï¼ˆä¿?ç•™aliasï¼šå®žä¾‹ï¼‰å¤–<br>
     * è¿˜éœ€è¦?é¢?å¤–ä¿?ç•™ç¼–ç ?å’Œå®žä¾‹çš„æ˜ å°„ï¼š{åˆ«å??ï¼šç¼–ç ?}
     */
    private final static ConcurrentMap<String, Byte>   TYPE_CODE_MAP     = new ConcurrentHashMap<String, Byte>();

    /**
     * æ‰©å±•åŠ è½½å™¨
     */
    private final static ExtensionLoader<Protocol>     EXTENSION_LOADER  = buildLoader();

    private static ExtensionLoader<Protocol> buildLoader() {
        return ExtensionLoaderFactory.getExtensionLoader(Protocol.class, new ExtensionLoaderListener<Protocol>() {
            @Override
            public void onLoad(ExtensionClass<Protocol> extensionClass) {
                // é™¤äº†ä¿?ç•™ aliasï¼šProtocolå¤–ï¼Œ éœ€è¦?ä¿?ç•™ codeï¼šProtocol
                Protocol protocol = extensionClass
                    .getExtInstance();
                TYPE_PROTOCOL_MAP.put(extensionClass.getCode(), protocol);
                TYPE_CODE_MAP.put(extensionClass.getAlias(), extensionClass.getCode());
                if (RpcConfigs.getBooleanValue(RpcOptions.TRANSPORT_SERVER_PROTOCOL_ADAPTIVE)) {
                    maxMagicOffset = 2;
                    registerAdaptiveProtocol(protocol.protocolInfo());
                }
            }
        });
    }

    /**
     * æŒ‰å??è®®å??ç§°è¿”å›žå??è®®å¯¹è±¡
     *
     * @param alias å??è®®å??ç§°
     * @return å??è®®å¯¹è±¡
     */
    public static Protocol getProtocol(String alias) {
        // å·¥åŽ‚æ¨¡å¼?  æ‰˜ç®¡ç»™ExtensionLoader
        return EXTENSION_LOADER.getExtension(alias);
    }

    /**
     * æŒ‰å??è®®ç¼–å?·è¿”å›žå??è®®å¯¹è±¡
     *
     * @param code å??è®®ç¼–ç ?
     * @return å??è®®å¯¹è±¡
     */
    public static Protocol getProtocol(byte code) {
        Protocol protocol = TYPE_PROTOCOL_MAP.get(code);
        if (protocol == null) {
            throw new SofaRpcRuntimeException("Extension Not Found :\"" + code + "\"!");
        }
        return protocol;
    }

    /**
     * é€šè¿‡åˆ«å??èŽ·å?–å??è®®ç¼–ç ?
     *
     * @param protocol å??è®®çš„å??å­—
     * @return å??è®®ç¼–ç ?
     */
    public static Byte getCodeByAlias(String protocol) {
        return TYPE_CODE_MAP.get(protocol);
    }

    /**
     * æ ¹æ?®å¤´éƒ¨å‰?å‡ ä¸ªé­”æœ¯ä½?ï¼Œåˆ¤æ–­æ˜¯å“ªç§?å??è®®çš„é•¿è¿žæŽ¥
     *
     * @param magicHeadBytes å¤´éƒ¨é­”æœ¯ä½?
     * @return å??è®®
     */
    public static Protocol adaptiveProtocol(byte[] magicHeadBytes) {
        for (Protocol protocol : TYPE_PROTOCOL_MAP.values()) {
            if (protocol.protocolInfo().isMatchMagic(magicHeadBytes)) {
                return protocol;
            }
        }
        return null;
    }

    /**
     * æœ€å¤§å??ç§»é‡?ï¼Œç”¨äºŽä¸€ä¸ªç«¯å?£æ”¯æŒ?å¤šå??è®®æ—¶ä½¿ç”¨
     */
    private static int maxMagicOffset;

    /**
     * æ³¨å†Œå??è®®åˆ°é€‚é…?å??è®®
     *
     * @param protocolInfo å??è®®æ??è¿°ä¿¡æ?¯
     */
    protected static synchronized void registerAdaptiveProtocol(ProtocolInfo protocolInfo) {
        // å?–æœ€å¤§å??ç§»é‡?
        maxMagicOffset = Math.max(maxMagicOffset, protocolInfo.magicFieldOffset() + protocolInfo.magicFieldLength());
    }

    /**
     * å¾—åˆ°æœ€å¤§å??ç§»ä½?
     *
     * @return æœ€å¤§å??ç§»ä½?
     */
    public static int getMaxMagicOffset() {
        return maxMagicOffset;
    }

}
