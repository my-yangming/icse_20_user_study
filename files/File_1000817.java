package org.nutz.service;

import java.sql.ResultSet;
import java.util.List;

import org.nutz.dao.Chain;
import org.nutz.dao.Condition;
import org.nutz.dao.Dao;
import org.nutz.dao.FieldFilter;
import org.nutz.dao.FieldMatcher;
import org.nutz.dao.entity.Entity;
import org.nutz.dao.pager.Pager;
import org.nutz.lang.Each;
import org.nutz.lang.Mirror;
import org.nutz.log.Log;
import org.nutz.log.Logs;

/**
 * å®žä½“ServiceæŠ½è±¡ç±». å±žäºŽè¾…åŠ©ç±». ä»»ä½•æ–¹æ³•è¢«è°ƒç”¨å‰?,å¿…é¡»ç¡®ä¿?Daoå®žä¾‹å·²ç»?ä¼ å…¥
 * 
 * @author wendal(wendal1985@gmail.com)
 *
 * @param <T>
 *            å®žä½“ç±»åž‹
 */
public abstract class EntityService<T> extends Service {

    private Mirror<T> mirror;

    private static final Log log = Logs.get();

    /**
     * æœ¬æŠ½è±¡ç±»èƒ½æ??ä¾›ä¸€äº›å¸®åŠ©æ–¹æ³•,å‡?å°‘é‡?å¤?å†™å®žä½“ç±»åž‹çš„éº»çƒ¦
     */
    @SuppressWarnings("unchecked")
    public EntityService() {
        try {
            Class<T> entryClass = (Class<T>) Mirror.getTypeParam(getClass(), 0);
            mirror = Mirror.me(entryClass);
            if (log.isDebugEnabled())
                log.debugf("Get TypeParams for self : %s", entryClass.getName());
        }
        catch (Throwable e) {
            if (log.isWarnEnabled())
                log.warn("!!!Fail to get TypeParams for self!", e);
        }
    }

    /**
     * æ–°å»ºå¹¶ä¼ å…¥Daoå®žä¾‹
     * 
     * @param dao
     *            Daoå®žä¾‹
     */
    public EntityService(Dao dao) {
        this();
        this.setDao(dao);
    }

    /**
     * æ–°å»ºå¹¶ä¼ å…¥Daoå®žä¾‹,å?Œæ—¶æŒ‡å®šå®žä½“ç±»åž‹
     * 
     * @param dao
     *            Daoå®žä¾‹
     * @param entityType
     *            å®žä½“ç±»åž‹
     */
    public EntityService(Dao dao, Class<T> entityType) {
        setEntityType(entityType);
        setDao(dao);
    }

    /**
     * èŽ·å?–å®žä½“ç±»åž‹çš„å??å°„å°?è£…ç±»å®žä¾‹
     * 
     * @return å??å°„å°?è£…ç±»å®žä¾‹
     */
    public Mirror<T> mirror() {
        return mirror;
    }

    /**
     * è®¾ç½®æ–°çš„å®žä½“ç±»åž‹, æž?å°‘è°ƒç”¨
     * 
     * @param classOfT
     */
    @SuppressWarnings("unchecked")
    public <C extends T> void setEntityType(Class<C> classOfT) {
        mirror = (Mirror<T>) Mirror.me(classOfT);
    }

    /**
     * èŽ·å?–å®žä½“çš„Entity
     * 
     * @return å®žä½“çš„Entity
     */
    public Entity<T> getEntity() {
        return dao().getEntity(mirror.getType());
    }

    /**
     * èŽ·å?–å®žä½“ç±»åž‹
     * 
     * @return å®žä½“ç±»åž‹
     */
    public Class<T> getEntityClass() {
        return mirror.getType();
    }

    /**
     * æ‰¹é‡?åˆ é™¤
     * 
     * @param cnd
     *            æ?¡ä»¶
     * @return åˆ é™¤çš„æ?¡æ•°
     */
    public int clear(Condition cnd) {
        return dao().clear(getEntityClass(), cnd);
    }

    /**
     * å…¨è¡¨åˆ é™¤
     * 
     * @return åˆ é™¤çš„æ?¡æ•°
     */
    public int clear() {
        return dao().clear(getEntityClass(), null);
    }

    /**
     * æ ¹æ?®æ?¡ä»¶åˆ†é¡µæŸ¥è¯¢
     * 
     * @param cnd
     *            æŸ¥è¯¢æ?¡ä»¶
     * @param pager
     *            åˆ†é¡µ
     * @return æŸ¥è¯¢ç»“æžœ
     */
    public List<T> query(Condition cnd, Pager pager) {
        return (List<T>) dao().query(getEntityClass(), cnd, pager);
    }

    /**
     * é??åŽ†æ?¡ä»¶åˆ†é¡µæŸ¥è¯¢ç»“æžœ
     * 
     * @param cnd
     *            æŸ¥è¯¢æ?¡ä»¶
     * @param pager
     *            åˆ†é¡µ
     * @param callback
     *            é??åŽ†å›žè°ƒ
     * @return é??åŽ†çš„æ€»æ?¡æ•°
     */
    public int each(Condition cnd, Pager pager, Each<T> callback) {
        return dao().each(getEntityClass(), cnd, pager, callback);
    }

    /**
     * æ ¹æ?®æ?¡ä»¶ç»Ÿè®¡ç¬¦å?ˆæ?¡ä»¶çš„è®°å½•æ•°
     * 
     * @param cnd
     *            æŸ¥è¯¢æ?¡ä»¶
     * @return è®°å½•æ•°
     */
    public int count(Condition cnd) {
        return dao().count(getEntityClass(), cnd);
    }

    /**
     * å…¨è¡¨çš„æ€»è®°å½•æ•°
     * 
     * @return æ€»è®°å½•æ•°
     */
    public int count() {
        return dao().count(getEntityClass());
    }

    /**
     * æŸ¥å‡ºç¬¦å?ˆæ?¡ä»¶çš„ç¬¬ä¸€æ?¡è®°å½•
     * 
     * @param cnd
     *            æŸ¥è¯¢æ?¡ä»¶
     * @return å®žä½“,å¦‚ä¸?å­˜åœ¨åˆ™ä¸ºnull
     */
    public T fetch(Condition cnd) {
        return dao().fetch(getEntityClass(), cnd);
    }

    /**
     * å¤?å?ˆä¸»é”®ä¸“ç”¨
     * 
     * @param pks
     *            é”®å€¼
     * @return å¯¹è±¡ T
     */
    public T fetchx(Object... pks) {
        return dao().fetchx(getEntityClass(), pks);
    }

    /**
     * å¤?å?ˆä¸»é”®ä¸“ç”¨
     * 
     * @param pks
     *            é”®å€¼
     * @return å¯¹è±¡ T
     */
    public boolean exists(Object... pks) {
        return null != fetchx(pks);
    }

    /**
     * æ‰¹é‡?æ›´æ–°
     * 
     * @param chain
     *            è®¾ç½®å€¼çš„é”®å€¼å¯¹
     * @param cnd
     *            éœ€è¦?æ›´æ–°çš„æ?¡ä»¶è¯­å?¥
     */
    public int update(Chain chain, Condition cnd) {
        return dao().update(getEntityClass(), chain, cnd);
    }

    /**
     * æ›´æ–°@ManyManyå…³è?”è¡¨ä¸­çš„æ•°æ?®
     * 
     * @param regex
     *            å…³è?”å­—æ®µçš„åŒ¹é…?æ­£åˆ™è¡¨è¾¾å¼?,å¦‚æžœä¸ºnullåˆ™ä»£è¡¨å…¨éƒ¨
     * @param chain
     *            é”®å€¼å¯¹
     * @param cnd
     *            æ?¡ä»¶è¯­å?¥
     */
    public int updateRelation(String regex, Chain chain, Condition cnd) {
        return dao().updateRelation(getEntityClass(), regex, chain, cnd);
    }

    /**
     * æ ¹æ?®å¤?å?ˆä¸»é”®åˆ é™¤è®°å½•
     * 
     * @param pks
     *            å¤?å?ˆä¸»é”®,å¿…é¡»æŒ‰@Pkçš„å£°æ˜Žé¡ºåº?ä¼ å…¥
     * @return åˆ é™¤çš„è®°å½•æ•°
     */
    public int deletex(Object... pks) {
        return dao().deletex(getEntityClass(), pks);
    }

    /**
     * æ ¹æ?®ä¸€ä¸ªå®žä½“çš„é…?ç½®ä¿¡æ?¯ä¸ºå…¶åˆ›å»ºä¸€å¼ è¡¨
     * 
     * @param dropIfExists
     *            å¦‚æžœè¡¨å­˜åœ¨æ˜¯å?¦å¼ºåˆ¶ç§»é™¤
     * @return å®žä½“å¯¹è±¡
     */
    public Entity<T> create(boolean dropIfExists) {
        return dao().create(getEntityClass(), dropIfExists);
    }

    /**
     * ä¸Ž insert(String tableName, Chain chain) ä¸€æ ·ï¼Œä¸?è¿‡ï¼Œæ•°æ?®è¡¨å??ï¼Œå°†å?–è‡ª POJO çš„æ•°æ?®è¡¨å£°æ˜Žï¼Œè¯·å?‚çœ‹
     * '@Table' æ³¨è§£çš„è¯¦ç»†è¯´æ˜Ž
     * 
     * @param chain
     *            æ•°æ?®å??å€¼é“¾
     */
    public void insert(Chain chain) {
        dao().insert(getEntityClass(), chain);
    }

    /**
     * æŸ¥è¯¢ä¸€ç»„å¯¹è±¡ã€‚ä½ å?¯ä»¥ä¸ºè¿™æ¬¡æŸ¥è¯¢è®¾å®šæ?¡ä»¶
     * 
     * @param cnd
     *            WHERE æ?¡ä»¶ã€‚å¦‚æžœä¸º nullï¼Œå°†èŽ·å?–å…¨éƒ¨æ•°æ?®ï¼Œé¡ºåº?ä¸ºæ•°æ?®åº“åŽŸç”Ÿé¡ºåº?<br>
     *            å?ªæœ‰åœ¨è°ƒç”¨è¿™ä¸ªå‡½æ•°çš„æ—¶å€™ï¼Œ cnd.limit æ‰?ä¼šç”Ÿæ•ˆ
     * @return å¯¹è±¡åˆ—è¡¨
     */
    public List<T> query(Condition cnd) {
        return dao().query(getEntityClass(), cnd);
    }

    /**
     * å¯¹ä¸€ç»„å¯¹è±¡è¿›è¡Œè¿­ä»£ï¼Œè¿™ä¸ªæŽ¥å?£å‡½æ•°é?žå¸¸é€‚ç”¨äºŽå¾ˆå¤§çš„æ•°æ?®é‡?çš„é›†å?ˆï¼Œå› ä¸ºä½ ä¸?å?¯èƒ½æŠŠä»–ä»¬éƒ½è¯»åˆ°å†…å­˜é‡Œ
     * 
     * @param cnd
     *            WHERE æ?¡ä»¶ã€‚å¦‚æžœä¸º nullï¼Œå°†èŽ·å?–å…¨éƒ¨æ•°æ?®ï¼Œé¡ºåº?ä¸ºæ•°æ?®åº“åŽŸç”Ÿé¡ºåº?
     * @param callback
     *            å¤„ç?†å›žè°ƒ
     * @return ä¸€å…±è¿­ä»£çš„æ•°é‡?
     */
    public int each(Condition cnd, Each<T> callback) {
        return dao().each(getEntityClass(), cnd, callback);
    }

    /**
     * å¯¹æŸ?ä¸€ä¸ªå¯¹è±¡å­—æ®µï¼Œè¿›è¡Œè®¡ç®—ã€‚
     * 
     * @param funcName
     *            è®¡ç®—å‡½æ•°å??ï¼Œè¯·ç¡®ä¿?ä½ çš„æ•°æ?®åº“æ˜¯æ”¯æŒ?è¿™ä¸ªå‡½æ•°çš„
     * @param fieldName
     *            å¯¹è±¡ java å­—æ®µå??
     * @return è®¡ç®—ç»“æžœ
     */
    public int func(String funcName, String fieldName) {
        return dao().func(getEntityClass(), funcName, fieldName);
    }

    /**
     * å¯¹æŸ?ä¸€ä¸ªå¯¹è±¡å­—æ®µï¼Œè¿›è¡Œè®¡ç®—ã€‚
     * 
     * @param funcName
     *            è®¡ç®—å‡½æ•°å??ï¼Œè¯·ç¡®ä¿?ä½ çš„æ•°æ?®åº“æ˜¯æ”¯æŒ?è¿™ä¸ªå‡½æ•°çš„
     * @param fieldName
     *            å¯¹è±¡ java å­—æ®µå??
     * @param cnd
     *            è¿‡æ»¤æ?¡ä»¶
     * @return è®¡ç®—ç»“æžœ
     */
    public int func(String funcName, String fieldName, Condition cnd) {
        return dao().func(getEntityClass(), funcName, fieldName, cnd);
    }

    /**
     * ä»Žä¸€ä¸ª ResultSet ä¸­èŽ·å?–ä¸€ä¸ªå¯¹è±¡ã€‚
     * <p>
     * å› ä¸º Dao æŽ¥å?£å?¯ä»¥çŸ¥é?“ä¸€ä¸ª POJO çš„æ˜ å°„ç»†èŠ‚ï¼Œè¿™ä¸ªå‡½æ•°å?¯ä»¥å¸®ä½ èŠ‚çœ?ä¸€ç‚¹ä½“åŠ›ã€‚
     * 
     * @param rs
     *            ç»“æžœé›†
     * @param fm
     *            å­—æ®µè¿‡æ»¤å™¨
     * @return å¯¹è±¡
     */
    public T getObject(ResultSet rs, FieldMatcher fm) {
        return dao().getObject(getEntityClass(), rs, fm);
    }
    
    public T getObject(ResultSet rs, FieldMatcher fm, String prefix) {
        return dao().getObject(getEntityClass(), rs, fm, prefix);
    }
    
    public List<T> _query(final Condition cnd, final Pager pager, FieldMatcher matcher) {
        return dao().query(getEntityClass(), cnd, pager, matcher);
    }
    
    public List<T> _query(final Condition cnd, final Pager pager, String regex) {
        return dao().query(getEntityClass(), cnd, pager, regex);
    }
    
    public T _insert(T obj){
        return dao().insert(obj);
    }
    
    public T _fastInsert(T obj){
        return dao().fastInsert(obj);
    }
    
    public T _insert(T obj, FieldFilter filter){
        return dao().insert(obj,filter);
    }
    
    public T _insert(T t, boolean ignoreNull, boolean ignoreZero, boolean ignoreBlankStr){
        return dao().insert(t,ignoreNull,ignoreZero,ignoreBlankStr);
    }
    
    public T _insertWith(T obj, String regex){
        return dao().insertWith(obj,regex);
    }
    
    public T _insertLinks(T obj, String regex){
        return dao().insertLinks(obj,regex);
    }
    
    public T _insertRelation(T obj, String regex){
        return dao().insertRelation(obj,regex);
    }
    
    public int _update(T obj){
        return dao().update(obj);
    }
    
    public int _update(T obj, String regex){
        return dao().update(obj,regex);
    }
    
    public int _updateIgnoreNull(Object obj){
        return dao().updateIgnoreNull(obj);
    }
    
    public T _updateWith(T obj, String regex){
        return dao().updateWith(obj,regex);
    }
    
    public T _updateLinks(T obj, String regex){
        return dao().updateLinks(obj,regex);
    }
    
    public int _delete(T obj){
        return dao().delete(obj);
    }
    
    public int _deleteWith(T obj, String regex){
        return dao().deleteWith(obj,regex);
    }
    
    public int _deleteLinks(T obj, String regex){
        return dao().deleteLinks(obj,regex);
    }
    
    public T _fetch(T obj){
        return dao().fetch(obj);
    }
    
    public T _fetchLinks(T obj, String regex){
        return dao().fetchLinks(obj,regex);
    }
    
    public T _fetchLinks(T obj, String regex, Condition cnd){
        return dao().fetchLinks(obj,regex,cnd);
    }
    
    public T _clearLinks(T obj, String regex){
        return dao().clearLinks(obj,regex);
    }
    
    public void setExpert(T obj) throws Exception{
         dao().setExpert(obj);
    }
    
    public List<T> query() {
        return dao().query(getEntityClass(),null);
    }
}
