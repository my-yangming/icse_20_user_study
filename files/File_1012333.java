package com.itmuch.cloud.study.ribbon;

import com.alibaba.nacos.api.naming.NamingService;
import com.alibaba.nacos.api.naming.pojo.Instance;
import com.google.common.collect.Lists;
import com.netflix.client.config.IClientConfig;
import com.netflix.loadbalancer.AbstractLoadBalancerRule;
import com.netflix.loadbalancer.DynamicServerListLoadBalancer;
import com.netflix.loadbalancer.Server;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.alibaba.nacos.NacosDiscoveryProperties;
import org.springframework.cloud.alibaba.nacos.ribbon.NacosServer;
import org.springframework.util.CollectionUtils;

import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * å¤?æ?‚å?‡è¡¡è§„åˆ™ï¼š
 * 1. ä¼˜å…ˆé€‰å?–å?Œé›†ç¾¤ä¸‹çš„å®žä¾‹
 * 2. å…ƒæ•°æ?®åŒ¹é…?
 * 3. ä½¿ç”¨nacosæ?ƒé‡?
 *
 * @author limu.zl
 */
@Slf4j
public class NacosFinalRule extends AbstractLoadBalancerRule {
    @Autowired
    private NacosDiscoveryProperties nacosDiscoveryProperties;

    @Override
    public Server choose(Object key) {
        // è´Ÿè½½å?‡è¡¡è§„åˆ™ï¼šä¼˜å…ˆé€‰æ‹©å?Œé›†ç¾¤ä¸‹ï¼Œç¬¦å?ˆmetadataçš„å®žä¾‹
        // å¦‚æžœæ²¡æœ‰ï¼Œå°±é€‰æ‹©æ‰€æœ‰é›†ç¾¤ä¸‹ï¼Œç¬¦å?ˆmetadataçš„å®žä¾‹

        // 1. æŸ¥è¯¢æ‰€æœ‰å®žä¾‹ A
        // 2. ç­›é€‰å…ƒæ•°æ?®åŒ¹é…?çš„å®žä¾‹ B
        // 3. ç­›é€‰å‡ºå?Œclusterä¸‹å…ƒæ•°æ?®åŒ¹é…?çš„å®žä¾‹ C
        // 4. å¦‚æžœCä¸ºç©ºï¼Œå°±ç”¨B
        // 5. éš?æœºé€‰æ‹©å®žä¾‹
        try {
            String clusterName = this.nacosDiscoveryProperties.getClusterName();
            String targetVersion = this.nacosDiscoveryProperties.getMetadata().get("target-version");

            DynamicServerListLoadBalancer loadBalancer = (DynamicServerListLoadBalancer) getLoadBalancer();
            String name = loadBalancer.getName();

            NamingService namingService = this.nacosDiscoveryProperties.namingServiceInstance();

            // æ‰€æœ‰å®žä¾‹
            List<Instance> instances = namingService.selectInstances(name, true);

            List<Instance> metadataMatchInstances = instances;
            // å¦‚æžœé…?ç½®äº†ç‰ˆæœ¬æ˜ å°„ï¼Œé‚£ä¹ˆå?ªè°ƒç”¨å…ƒæ•°æ?®åŒ¹é…?çš„å®žä¾‹
            if (StringUtils.isNotBlank(targetVersion)) {
                metadataMatchInstances = instances.stream()
                        .filter(instance -> Objects.equals(targetVersion, instance.getMetadata().get("version")))
                        .collect(Collectors.toList());
                if (CollectionUtils.isEmpty(metadataMatchInstances)) {
                    log.warn("æœªæ‰¾åˆ°å…ƒæ•°æ?®åŒ¹é…?çš„ç›®æ ‡å®žä¾‹ï¼?è¯·æ£€æŸ¥é…?ç½®ã€‚targetVersion = {}, instance = {}", targetVersion, instances);
                    return null;
                }
            }

            List<Instance> clusterMetadataMatchInstances = metadataMatchInstances;
            // å¦‚æžœé…?ç½®äº†é›†ç¾¤å??ç§°ï¼Œéœ€ç­›é€‰å?Œé›†ç¾¤ä¸‹å…ƒæ•°æ?®åŒ¹é…?çš„å®žä¾‹
            if (StringUtils.isNotBlank(clusterName)) {
                clusterMetadataMatchInstances = metadataMatchInstances.stream()
                        .filter(instance -> Objects.equals(clusterName, instance.getClusterName()))
                        .collect(Collectors.toList());
                if (CollectionUtils.isEmpty(clusterMetadataMatchInstances)) {
                    clusterMetadataMatchInstances = metadataMatchInstances;
                    log.warn("å?‘ç”Ÿè·¨é›†ç¾¤è°ƒç”¨ã€‚clusterName = {}, targetVersion = {}, clusterMetadataMatchInstances = {}", clusterName, targetVersion, clusterMetadataMatchInstances);
                }
            }

            Instance instance = ExtendBalancer.getHostByRandomWeight2(clusterMetadataMatchInstances);
            return new NacosServer(instance);
        } catch (Exception e) {
            log.warn("å?‘ç”Ÿå¼‚å¸¸", e);
            return null;
        }
    }

    @Override
    public void initWithNiwsConfig(IClientConfig iClientConfig) {
    }
}
