/*Copyright Â©2015 TommyLemon(https://github.com/TommyLemon)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.*/

package zuo.biao.library.base;

import java.util.ArrayList;
import java.util.List;

import zuo.biao.library.R;
import zuo.biao.library.interfaces.ActivityPresenter;
import zuo.biao.library.interfaces.OnBottomDragListener;
import zuo.biao.library.manager.SystemBarTintManager;
import zuo.biao.library.manager.ThreadManager;
import zuo.biao.library.util.Log;
import zuo.biao.library.util.ScreenUtil;
import zuo.biao.library.util.StringUtil;
import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.ProgressDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.support.annotation.Nullable;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.view.GestureDetector;
import android.view.GestureDetector.OnGestureListener;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.Window;
import android.view.WindowManager;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

/**åŸºç¡€android.support.v4.app.FragmentActivityï¼Œé€šè¿‡ç»§æ‰¿å?¯èŽ·å?–æˆ–ä½¿ç”¨ é‡Œé?¢åˆ›å»ºçš„ ç»„ä»¶ å’Œ æ–¹æ³•
 * *onFlingå†…æŽ§åˆ¶å·¦å?³æ»‘åŠ¨æ‰‹åŠ¿æ“?ä½œèŒƒå›´ï¼Œå?¯è‡ªå®šä¹‰
 * @author Lemon
 * @see ActivityPresenter#getActivity
 * @see #context
 * @see #view
 * @see #fragmentManager
 * @see #setContentView
 * @see #runUiThread
 * @see #runThread
 * @see #onDestroy
 * @use extends BaseActivity, å…·ä½“å?‚è€ƒ .DemoActivity å’Œ .DemoFragmentActivity
 */
public abstract class BaseActivity extends FragmentActivity implements ActivityPresenter, OnGestureListener {
	private static final String TAG = "BaseActivity";

	/**
	 * è¯¥Activityå®žä¾‹ï¼Œå‘½å??ä¸ºcontextæ˜¯å› ä¸ºå¤§éƒ¨åˆ†æ–¹æ³•éƒ½å?ªéœ€è¦?contextï¼Œå†™æˆ?contextä½¿ç”¨æ›´æ–¹ä¾¿
	 * @warn ä¸?èƒ½åœ¨å­?ç±»ä¸­åˆ›å»º
	 */
	protected BaseActivity context = null;
	/**
	 * è¯¥Activityçš„ç•Œé?¢ï¼Œå?³contentView
	 * @warn ä¸?èƒ½åœ¨å­?ç±»ä¸­åˆ›å»º
	 */
	protected View view = null;
	/**
	 * å¸ƒå±€è§£é‡Šå™¨
	 * @warn ä¸?èƒ½åœ¨å­?ç±»ä¸­åˆ›å»º
	 */
	protected LayoutInflater inflater = null;
	/**
	 * Fragmentç®¡ç?†å™¨
	 * @warn ä¸?èƒ½åœ¨å­?ç±»ä¸­åˆ›å»º
	 */
	protected FragmentManager fragmentManager = null;

	private boolean isAlive = false;
	private boolean isRunning = false;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);

		context = (BaseActivity) getActivity();
		isAlive = true;
		fragmentManager = getSupportFragmentManager();

		inflater = getLayoutInflater();

		threadNameList = new ArrayList<String>();
		
		BaseBroadcastReceiver.register(context, receiver, ACTION_EXIT_APP);
	}

	/**
	 * é»˜è®¤æ ‡é¢˜æ—?è¾¹çš„è¿›åº¦çŽ¯ï¼Œlayout.xmlä¸­ç”¨@id/pbBaseTitleç»‘å®šã€‚
	 * @warn å¦‚æžœå­?Activityçš„layoutä¸­æ²¡æœ‰android:id="@id/pbBaseTitle"çš„pbBaseTitleï¼Œä½¿ç”¨å‰?å¿…é¡»åœ¨å­?Activityä¸­èµ‹å€¼
	 */
	@Nullable
	protected ProgressBar pbBaseTitle;
	/**
	 * é»˜è®¤æ ‡é¢˜TextViewï¼Œlayout.xmlä¸­ç”¨@id/tvBaseTitleç»‘å®šã€‚å­?Activityå†…è°ƒç”¨autoSetTitleæ–¹æ³• ä¼šä¼˜å…ˆä½¿ç”¨INTENT_TITLE
	 * @see #autoSetTitle
	 * @warn å¦‚æžœå­?Activityçš„layoutä¸­æ²¡æœ‰android:id="@id/tvBaseTitle"çš„TextViewï¼Œä½¿ç”¨å‰?å¿…é¡»åœ¨å­?Activityä¸­èµ‹å€¼
	 */
	@Nullable
	protected TextView tvBaseTitle;

	@TargetApi(Build.VERSION_CODES.KITKAT)
	@Override
	public void setContentView(int layoutResID) {
		super.setContentView(layoutResID);

		// çŠ¶æ€?æ ?æ²‰æµ¸ï¼Œ4.4+ç”Ÿæ•ˆ <<<<<<<<<<<<<<<<<
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
			getWindow().setFlags(
					WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS,
					WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
		}
		SystemBarTintManager tintManager = new SystemBarTintManager(this);
		tintManager.setStatusBarTintEnabled(true);
		tintManager.setStatusBarTintResource(R.color.topbar_bg);//çŠ¶æ€?èƒŒæ™¯è‰²ï¼Œå?¯ä¼ drawableèµ„æº?
		// çŠ¶æ€?æ ?æ²‰æµ¸ï¼Œ4.4+ç”Ÿæ•ˆ >>>>>>>>>>>>>>>>>

		pbBaseTitle = (ProgressBar) findViewById(R.id.pbBaseTitle);//ç»‘å®šé»˜è®¤æ ‡é¢˜æ—?ProgressBar
		tvBaseTitle = (TextView) findViewById(R.id.tvBaseTitle);//ç»‘å®šé»˜è®¤æ ‡é¢˜TextView
	}

	//åº•éƒ¨æ»‘åŠ¨å®žçŽ°å?Œç‚¹å‡»æ ‡é¢˜æ ?å·¦å?³æŒ‰é’®æ•ˆæžœ<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	private OnBottomDragListener onBottomDragListener;
	private GestureDetector gestureDetector;
	/**è®¾ç½®è¯¥Activityç•Œé?¢å¸ƒå±€ï¼Œå¹¶è®¾ç½®åº•éƒ¨å·¦å?³æ»‘åŠ¨æ‰‹åŠ¿ç›‘å?¬
	 * @param layoutResID
	 * @param listener
	 * @use åœ¨å­?ç±»ä¸­
	 * *1.onCreateä¸­super.onCreateå?ŽsetContentView(layoutResID, this);
	 * *2.é‡?å†™onDragBottomæ–¹æ³•å¹¶å®žçŽ°æ»‘åŠ¨äº‹ä»¶å¤„ç?†
	 * *3.åœ¨å¯¼èˆªæ ?å·¦å?³æŒ‰é’®çš„onClickäº‹ä»¶ä¸­è°ƒç”¨onDragBottomæ–¹æ³•
	 */
	public void setContentView(int layoutResID, OnBottomDragListener listener) {
		setContentView(layoutResID);

		onBottomDragListener = listener;
		gestureDetector = new GestureDetector(this, this);//åˆ?å§‹åŒ–æ‰‹åŠ¿ç›‘å?¬ç±»

		view = inflater.inflate(layoutResID, null);
		view.setOnTouchListener(new OnTouchListener() {

			@SuppressLint("ClickableViewAccessibility")
			@Override
			public boolean onTouch(View v, MotionEvent event) {
				return gestureDetector.onTouchEvent(event);
			}
		});
	}

	//åº•éƒ¨æ»‘åŠ¨å®žçŽ°å?Œç‚¹å‡»æ ‡é¢˜æ ?å·¦å?³æŒ‰é’®æ•ˆæžœ>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


	/**
	 * ç”¨äºŽ æ‰“å¼€activityä»¥å?Šactivityä¹‹é—´çš„é€šè®¯ï¼ˆä¼ å€¼ï¼‰ç­‰ï¼›ä¸€äº›é€šè®¯ç›¸å…³åŸºæœ¬æ“?ä½œï¼ˆæ‰“ç”µè¯?ã€?å?‘çŸ­ä¿¡ç­‰ï¼‰
	 */
	protected Intent intent = null;

	/**
	 * é€€å‡ºæ—¶ä¹‹å‰?çš„ç•Œé?¢è¿›å…¥åŠ¨ç”»,å?¯åœ¨finish();å‰?é€šè¿‡æ”¹å?˜å®ƒçš„å€¼æ?¥æ”¹å?˜åŠ¨ç”»æ•ˆæžœ
	 */
	protected int enterAnim = R.anim.fade;
	/**
	 * é€€å‡ºæ—¶è¯¥ç•Œé?¢åŠ¨ç”»,å?¯åœ¨finish();å‰?é€šè¿‡æ”¹å?˜å®ƒçš„å€¼æ?¥æ”¹å?˜åŠ¨ç”»æ•ˆæžœ
	 */
	protected int exitAnim = R.anim.right_push_out;

	//	/**é€šè¿‡idæŸ¥æ‰¾å¹¶èŽ·å?–æŽ§ä»¶ï¼Œä½¿ç”¨æ—¶ä¸?éœ€è¦?å¼ºè½¬
	//	 * @param id
	//	 * @return 
	//	 */
	//	@SuppressWarnings("unchecked")
	//	public <V extends View> V findViewById(int id) {
	//		return (V) view.findViewById(id);
	//	}
	/**é€šè¿‡idæŸ¥æ‰¾å¹¶èŽ·å?–æŽ§ä»¶ï¼Œå¹¶setOnClickListener
	 * @param id
	 * @param l
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public <V extends View> V findViewById(int id, OnClickListener l) {
		V v = (V) findViewById(id);
		v.setOnClickListener(l);
		return v;
	}

	//è‡ªåŠ¨è®¾ç½®æ ‡é¢˜æ–¹æ³•<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	/**è‡ªåŠ¨æŠŠæ ‡é¢˜è®¾ç½®ä¸ºä¸Šä¸ªActivityä¼ å…¥çš„INTENT_TITLEï¼Œå»ºè®®åœ¨å­?ç±»initViewä¸­ä½¿ç”¨
	 * *è¿™ä¸ªæ–¹æ³•æ²¡æœ‰returnï¼ŒtvTitle = tvBaseTitleï¼Œç›´æŽ¥ç”¨tvBaseTitle
	 * @must åœ¨UIçº¿ç¨‹ä¸­è°ƒç”¨
	 */
	protected void autoSetTitle() {
		tvBaseTitle = autoSetTitle(tvBaseTitle);
	}
	/**è‡ªåŠ¨æŠŠæ ‡é¢˜è®¾ç½®ä¸ºä¸Šä¸ªActivityä¼ å…¥çš„INTENT_TITLEï¼Œå»ºè®®åœ¨å­?ç±»initViewä¸­ä½¿ç”¨
	 * @param tvTitle
	 * @return tvTitle è¿”å›žtvTitleæ˜¯ä¸ºäº†å?¯ä»¥å†™æˆ?ä¸€è¡Œï¼Œå¦‚ tvTitle = autoSetTitle((TextView) findViewById(titleResId));
	 * @must åœ¨UIçº¿ç¨‹ä¸­è°ƒç”¨
	 */
	protected TextView autoSetTitle(TextView tvTitle) {
		if (tvTitle != null) {
			String title = getIntent().getStringExtra(INTENT_TITLE);
			if (StringUtil.isNotEmpty(title, false)) {
				tvTitle.setText(StringUtil.getString(title));
			}
			if (pbBaseTitle != null) {
				tvTitle.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View v) {
						if (isShowingProgress() == false) {
							initData();
						}
					}
				});
			}
		}
		return tvTitle;
	}

	//è‡ªåŠ¨è®¾ç½®æ ‡é¢˜æ–¹æ³•>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	//æ˜¾ç¤ºä¸Žå…³é—­è¿›åº¦å¼¹çª—æ–¹æ³•<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	/**æ­£åœ¨æ˜¾ç¤ºè¿›åº¦
	 * @return
	 */
	public boolean isShowingProgress() {
		if (pbBaseTitle != null) {
			return pbBaseTitle.getVisibility() == View.VISIBLE;
		}
		if (progressDialog != null) {
			return progressDialog.isShowing();
		} 
		return false;
	}

	/**
	 * è¿›åº¦å¼¹çª—
	 */
	protected ProgressDialog progressDialog = null;

	/**å±•ç¤ºåŠ è½½è¿›åº¦æ?¡,æ— æ ‡é¢˜
	 * stringResId = R.string.loading
	 */
	public void showProgressDialog() {
		showProgressDialog(R.string.loading);
	}
	/**å±•ç¤ºåŠ è½½è¿›åº¦æ?¡,æ— æ ‡é¢˜
	 * @param stringResId
	 */
	public void showProgressDialog(int stringResId) {
		try {
			showProgressDialog(null, context.getResources().getString(stringResId));
		} catch (Exception e) {
			Log.e(TAG, "showProgressDialog  showProgressDialog(null, context.getResources().getString(stringResId));");
		}
	}
	/**å±•ç¤ºåŠ è½½è¿›åº¦æ?¡,æ— æ ‡é¢˜
	 * @param message
	 */
	public void showProgressDialog(String message) {
		showProgressDialog(null, message);
	}
	/**å±•ç¤ºåŠ è½½è¿›åº¦æ?¡
	 * @param title æ ‡é¢˜
	 * @param message ä¿¡æ?¯
	 */
	public void showProgressDialog(final String title, final String message) {
		runUiThread(new Runnable() {
			@Override
			public void run() {
				if (pbBaseTitle != null) {
					pbBaseTitle.setVisibility(View.VISIBLE);
					String s = tvBaseTitle == null ? null : StringUtil.isNotEmpty(message, false) ? message : title;
					if (StringUtil.isNotEmpty(s, true)) {
						tvBaseTitle.setText(s);
					}
					return;
				}

				if (progressDialog == null) {
					progressDialog = new ProgressDialog(context);
				}
				if(progressDialog.isShowing()) {
					progressDialog.dismiss();
				}
				if (StringUtil.isNotEmpty(title, false)) {
					progressDialog.setTitle(title);
				}
				if (StringUtil.isNotEmpty(message, false)) {
					progressDialog.setMessage(message);
				}
				progressDialog.setCanceledOnTouchOutside(false);
				progressDialog.show();
			}
		});
	}


	/**éš?è—?åŠ è½½è¿›åº¦
	 */
	public void dismissProgressDialog() {
		runUiThread(new Runnable() {
			@Override
			public void run() {
				if (progressDialog != null && progressDialog.isShowing()) {
					progressDialog.dismiss();
				}

				if (pbBaseTitle != null) {
					pbBaseTitle.setVisibility(View.GONE);
				}
			}
		});
	}
	//æ˜¾ç¤ºä¸Žå…³é—­è¿›åº¦å¼¹çª—æ–¹æ³•>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	//å?¯åŠ¨æ–°Activityæ–¹æ³•<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	/**æ‰“å¼€æ–°çš„Activityï¼Œå?‘å·¦æ»‘å…¥æ•ˆæžœ
	 * @param intent
	 */
	public void toActivity(Intent intent) {
		toActivity(intent, true);
	}
	/**æ‰“å¼€æ–°çš„Activity
	 * @param intent
	 * @param showAnimation
	 */
	public void toActivity(Intent intent, boolean showAnimation) {
		toActivity(intent, -1, showAnimation);
	}
	/**æ‰“å¼€æ–°çš„Activityï¼Œå?‘å·¦æ»‘å…¥æ•ˆæžœ
	 * @param intent
	 * @param requestCode
	 */
	public void toActivity(Intent intent, int requestCode) {
		toActivity(intent, requestCode, true);
	}
	/**æ‰“å¼€æ–°çš„Activity
	 * @param intent
	 * @param requestCode
	 * @param showAnimation
	 */
	public void toActivity(final Intent intent, final int requestCode, final boolean showAnimation) {
		runUiThread(new Runnable() {
			@Override
			public void run() {
				if (intent == null) {
					Log.w(TAG, "toActivity  intent == null >> return;");
					return;
				}
				//fragmentä¸­ä½¿ç”¨context.startActivityä¼šå¯¼è‡´åœ¨fragmentä¸­ä¸?èƒ½æ­£å¸¸æŽ¥æ”¶onActivityResult
				if (requestCode < 0) {
					startActivity(intent);
				} else {
					startActivityForResult(intent, requestCode);
				}
				if (showAnimation) {
					overridePendingTransition(R.anim.right_push_in, R.anim.hold);
				} else {
					overridePendingTransition(R.anim.null_anim, R.anim.null_anim);
				}
			}
		});
	}
	//å?¯åŠ¨æ–°Activityæ–¹æ³•>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


	//show short toast æ–¹æ³•<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	/**å¿«æ?·æ˜¾ç¤ºshort toastæ–¹æ³•ï¼Œéœ€è¦?long toastå°±ç”¨ Toast.makeText(string, Toast.LENGTH_LONG).show(); ---ä¸?å¸¸ç”¨æ‰€ä»¥è¿™ä¸ªç±»é‡Œä¸?å†™
	 * @param stringResId
	 */
	public void showShortToast(int stringResId) {
		try {
			showShortToast(context.getResources().getString(stringResId));
		} catch (Exception e) {
			Log.e(TAG, "showShortToast  context.getResources().getString(resId)" +
					" >>  catch (Exception e) {" + e.getMessage());
		}
	}
	/**å¿«æ?·æ˜¾ç¤ºshort toastæ–¹æ³•ï¼Œéœ€è¦?long toastå°±ç”¨ Toast.makeText(string, Toast.LENGTH_LONG).show(); ---ä¸?å¸¸ç”¨æ‰€ä»¥è¿™ä¸ªç±»é‡Œä¸?å†™
	 * @param string
	 */
	public void showShortToast(String string) {
		showShortToast(string, false);
	}
	/**å¿«æ?·æ˜¾ç¤ºshort toastæ–¹æ³•ï¼Œéœ€è¦?long toastå°±ç”¨ Toast.makeText(string, Toast.LENGTH_LONG).show(); ---ä¸?å¸¸ç”¨æ‰€ä»¥è¿™ä¸ªç±»é‡Œä¸?å†™
	 * @param string
	 * @param isForceDismissProgressDialog
	 */
	public void showShortToast(final String string, final boolean isForceDismissProgressDialog) {
		runUiThread(new Runnable() {
			@Override
			public void run() {
				if (isForceDismissProgressDialog) {
					dismissProgressDialog();
				}
				Toast.makeText(context, "" + string, Toast.LENGTH_SHORT).show();
			}
		});
	}
	//show short toast æ–¹æ³•>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



	//è¿?è¡Œçº¿ç¨‹ <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	/**åœ¨UIçº¿ç¨‹ä¸­è¿?è¡Œï¼Œå»ºè®®ç”¨è¿™ä¸ªæ–¹æ³•ä»£æ›¿runOnUiThread
	 * @param action
	 */
	public final void runUiThread(Runnable action) {
		if (isAlive() == false) {
			Log.w(TAG, "runUiThread  isAlive() == false >> return;");
			return;
		}
		runOnUiThread(action);
	}
	/**
	 * çº¿ç¨‹å??åˆ—è¡¨
	 */
	protected List<String> threadNameList;
	/**è¿?è¡Œçº¿ç¨‹
	 * @param name
	 * @param runnable
	 * @return
	 */
	public final Handler runThread(String name, Runnable runnable) {
		if (isAlive() == false) {
			Log.w(TAG, "runThread  isAlive() == false >> return null;");
			return null;
		}
		name = StringUtil.getTrimedString(name);
		Handler handler = ThreadManager.getInstance().runThread(name, runnable);
		if (handler == null) {
			Log.e(TAG, "runThread handler == null >> return null;");
			return null;
		}

		if (threadNameList.contains(name) == false) {
			threadNameList.add(name);
		}
		return handler;
	}

	//è¿?è¡Œçº¿ç¨‹ >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



	//Activityçš„è¿”å›žæŒ‰é’®å’Œåº•éƒ¨å¼¹çª—çš„å?–æ¶ˆæŒ‰é’®å‡ ä¹Žæ˜¯å¿…å¤‡ï¼Œæ­£å¥½åŽŸç”Ÿæ”¯æŒ?å??å°„ï¼›è€Œå…¶å®ƒæ¯”å¦‚Fragmentæž?å°‘ç”¨åˆ°ï¼Œä¹Ÿä¸?æ”¯æŒ?å??å°„<<<<<<<<<
	/**è¿”å›žæŒ‰é’®è¢«ç‚¹å‡»ï¼Œé»˜è®¤å¤„ç?†æ˜¯onBottomDragListener.onDragBottom(false)ï¼Œé‡?å†™å?¯è‡ªå®šä¹‰äº‹ä»¶å¤„ç?†
	 * @param v
	 * @use layout.xmlä¸­çš„ç»„ä»¶æ·»åŠ android:onClick="onReturnClick"å?³å?¯
	 * @warn å?ªèƒ½åœ¨Activityå¯¹åº”çš„contentView layoutä¸­ä½¿ç”¨ï¼›
	 * *ç»™å¯¹åº”View setOnClickListenerä¼šå¯¼è‡´android:onClick="onReturnClick"å¤±æ•ˆ
	 */
	@Override
	public void onReturnClick(View v) {
		Log.d(TAG, "onReturnClick >>>");
		if (onBottomDragListener != null) {
			onBottomDragListener.onDragBottom(false);
		} else {
			onBackPressed();//ä¼šä»Žæœ€å¤–å±‚å­?ç±»è°ƒfinish();BaseBottomWindowå°±æ˜¯ç¤ºä¾‹
		}
	}
	/**å‰?è¿›æŒ‰é’®è¢«ç‚¹å‡»ï¼Œé»˜è®¤å¤„ç?†æ˜¯onBottomDragListener.onDragBottom(true)ï¼Œé‡?å†™å?¯è‡ªå®šä¹‰äº‹ä»¶å¤„ç?†
	 * @param v
	 * @use layout.xmlä¸­çš„ç»„ä»¶æ·»åŠ android:onClick="onForwardClick"å?³å?¯
	 * @warn å?ªèƒ½åœ¨Activityå¯¹åº”çš„contentView layoutä¸­ä½¿ç”¨ï¼›
	 * *ç»™å¯¹åº”View setOnClickListenerä¼šå¯¼è‡´android:onClick="onForwardClick"å¤±æ•ˆ
	 */
	@Override
	public void onForwardClick(View v) {
		Log.d(TAG, "onForwardClick >>>");
		if (onBottomDragListener != null) {
			onBottomDragListener.onDragBottom(true);
		}
	}
	//Activityå¸¸ç”¨å¯¼èˆªæ ?å?³è¾¹æŒ‰é’®ï¼Œè€Œä¸”åº•éƒ¨å¼¹çª—BottomWindowçš„ç¡®å®šæŒ‰é’®æ˜¯å¿…å¤‡ï¼›è€Œå…¶å®ƒæ¯”å¦‚Fragmentæž?å°‘ç”¨åˆ°ï¼Œä¹Ÿä¸?æ”¯æŒ?å??å°„>>>>>


	@Override
	public final boolean isAlive() {
		return isAlive && context != null;// & ! isFinishing();å¯¼è‡´finishï¼ŒonDestroyå†…runUiThreadä¸?å?¯ç”¨
	}
	@Override
	public final boolean isRunning() {
		return isRunning & isAlive();
	}

	/**ä¸€èˆ¬ç”¨äºŽå¯¹ä¸?æ”¯æŒ?çš„æ•°æ?®çš„å¤„ç?†ï¼Œæ¯”å¦‚onCreateä¸­èŽ·å?–åˆ°ä¸?èƒ½æŽ¥å?—çš„id(id<=0)å?¯ä»¥è¿™æ ·å¤„ç?†
	 */
	public void finishWithError(String error) {
		showShortToast(error);
		enterAnim = exitAnim = R.anim.null_anim;
		finish();
	}

	@Override
	public void finish() {
		super.finish();//å¿…é¡»å†™åœ¨æœ€å‰?æ‰?èƒ½æ˜¾ç¤ºè‡ªå®šä¹‰åŠ¨ç”»
		runUiThread(new Runnable() {
			@Override
			public void run() {
				if (enterAnim > 0 && exitAnim > 0) {
					try {
						overridePendingTransition(enterAnim, exitAnim);
					} catch (Exception e) {
						Log.e(TAG, "finish overridePendingTransition(enterAnim, exitAnim);" +
								" >> catch (Exception e) {  " + e.getMessage());
					}
				}
			}
		});
	}

	@Override
	protected void onResume() {
		Log.d(TAG, "\n onResume <<<<<<<<<<<<<<<<<<<<<<<");
		super.onResume();
		isRunning = true;
		Log.d(TAG, "onResume >>>>>>>>>>>>>>>>>>>>>>>>\n");
	}

	@Override
	protected void onPause() {
		Log.d(TAG, "\n onPause <<<<<<<<<<<<<<<<<<<<<<<");
		super.onPause();
		isRunning = false;
		Log.d(TAG, "onPause >>>>>>>>>>>>>>>>>>>>>>>>\n");
	}

	/**é”€æ¯?å¹¶å›žæ”¶å†…å­˜
	 * @warn å­?ç±»å¦‚æžœè¦?ä½¿ç”¨è¿™ä¸ªæ–¹æ³•å†…ç”¨åˆ°çš„å?˜é‡?ï¼Œåº”é‡?å†™onDestroyæ–¹æ³•å¹¶åœ¨super.onDestroy();å‰?æ“?ä½œ
	 */
	@Override
	protected void onDestroy() {
		Log.d(TAG, "\n onDestroy <<<<<<<<<<<<<<<<<<<<<<<");
		dismissProgressDialog();
		BaseBroadcastReceiver.unregister(context, receiver);
		ThreadManager.getInstance().destroyThread(threadNameList);
		if (view != null) {
			try {
				view.destroyDrawingCache();
			} catch (Exception e) {
				Log.w(TAG, "onDestroy  try { view.destroyDrawingCache();" +
						" >> } catch (Exception e) {\n" + e.getMessage());
			}
		}

		isAlive = false;
		isRunning = false;
		super.onDestroy();

		inflater = null;
		view = null;
		pbBaseTitle = null;
		tvBaseTitle = null;

		fragmentManager = null;
		progressDialog = null;
		threadNameList = null;

		intent = null;

		context = null;

		Log.d(TAG, "onDestroy >>>>>>>>>>>>>>>>>>>>>>>>\n");
	}

	
	
	private BroadcastReceiver receiver = new BroadcastReceiver() {

		public void onReceive(Context context, Intent intent) {
			String action = intent == null ? null : intent.getAction();
			if (isAlive() == false || StringUtil.isNotEmpty(action, true) == false) {
				Log.e(TAG, "receiver.onReceive  isAlive() == false" +
						" || StringUtil.isNotEmpty(action, true) == false >> return;");
				return;
			}

			if (ACTION_EXIT_APP.equals(action)) {
				finish();
			} 
		}
	};
	


	//æ‰‹æœºè¿”å›žé”®å’Œè?œå?•é”®å®žçŽ°å?Œç‚¹å‡»æ ‡é¢˜æ ?å·¦å?³æŒ‰é’®æ•ˆæžœ<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	private boolean isOnKeyLongPress = false;
	@Override
	public boolean onKeyLongPress(int keyCode, KeyEvent event) {
		isOnKeyLongPress = true;
		return true;
	}

	@Override
	public boolean onKeyUp(int keyCode, KeyEvent event) {
		if (isOnKeyLongPress) {
			isOnKeyLongPress = false;
			return true;
		}

		switch (keyCode) {
		case KeyEvent.KEYCODE_BACK:
			if (onBottomDragListener != null) {
				onBottomDragListener.onDragBottom(false);
				return true;
			}
			break;
		case KeyEvent.KEYCODE_MENU:
			if (onBottomDragListener != null) {
				onBottomDragListener.onDragBottom(true);
				return true;
			}
			break;
		default:
			break;
		}

		return super.onKeyUp(keyCode, event);
	}

	//æ‰‹æœºè¿”å›žé”®å’Œè?œå?•é”®å®žçŽ°å?Œç‚¹å‡»æ ‡é¢˜æ ?å·¦å?³æŒ‰é’®æ•ˆæžœ>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	//åº•éƒ¨æ»‘åŠ¨å®žçŽ°å?Œç‚¹å‡»æ ‡é¢˜æ ?å·¦å?³æŒ‰é’®æ•ˆæžœ<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	@Override
	public boolean onDown(MotionEvent e) {
		return false;
	}
	@Override
	public void onShowPress(MotionEvent e) {
	}
	@Override
	public boolean onSingleTapUp(MotionEvent e) {
		return false;
	}
	@Override
	public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {
		return false;
	}
	@Override
	public void onLongPress(MotionEvent e) {
	}
	@Override
	public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {

		//		/*åŽŸæ?¥å®žçŽ°å…¨å±€æ»‘åŠ¨è¿”å›žçš„ä»£ç ?ï¼ŒOnFinishListenerå·²åˆ é™¤ï¼Œå?¯ä»¥è‡ªå·±å†™ä¸€ä¸ªæˆ–è€…
		//		 * ç”¨onBottomDragListener.onDragBottom(false);ä»£æ›¿onFinishListener.finish();**/
		//		if (onFinishListener != null) {
		//
		//			float maxDragHeight = getResources().getDimension(R.dimen.page_drag_max_height);
		//			float distanceY = e2.getRawY() - e1.getRawY();
		//			if (distanceY < maxDragHeight && distanceY > - maxDragHeight) {
		//
		//				float minDragWidth = getResources().getDimension(R.dimen.page_drag_min_width);
		//				float distanceX = e2.getRawX() - e1.getRawX();
		//				if (distanceX > minDragWidth) {
		//					onFinishListener.finish();
		//					return true;
		//				}
		//			}
		//		}


		//åº•éƒ¨æ»‘åŠ¨å®žçŽ°å?Œç‚¹å‡»æ ‡é¢˜æ ?å·¦å?³æŒ‰é’®æ•ˆæžœ
		if (onBottomDragListener != null && e1.getRawY() > ScreenUtil.getScreenSize(this)[1]
				- ((int) getResources().getDimension(R.dimen.bottom_drag_height))) {

			float maxDragHeight = getResources().getDimension(R.dimen.bottom_drag_max_height);
			float distanceY = e2.getRawY() - e1.getRawY();
			if (distanceY < maxDragHeight && distanceY > - maxDragHeight) {

				float minDragWidth = getResources().getDimension(R.dimen.bottom_drag_min_width);
				float distanceX = e2.getRawX() - e1.getRawX();
				if (distanceX > minDragWidth) {
					onBottomDragListener.onDragBottom(false);
					return true;
				} else if (distanceX < - minDragWidth) {
					onBottomDragListener.onDragBottom(true);
					return true;
				}
			} 
		}

		return false;
	}
	@Override  
	public boolean dispatchTouchEvent(MotionEvent ev) {  
		if (gestureDetector != null) {
			gestureDetector.onTouchEvent(ev);  
		}
		return super.dispatchTouchEvent(ev);
	}

	//åº•éƒ¨æ»‘åŠ¨å®žçŽ°å?Œç‚¹å‡»æ ‡é¢˜æ ?å·¦å?³æŒ‰é’®æ•ˆæžœ>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


}
