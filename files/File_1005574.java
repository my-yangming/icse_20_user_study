package com.sankuai.waimai.router;

import android.annotation.SuppressLint;
import android.content.Context;
import android.os.Looper;
import android.support.annotation.NonNull;

import com.sankuai.waimai.router.annotation.RouterProvider;
import com.sankuai.waimai.router.common.PageAnnotationHandler;
import com.sankuai.waimai.router.core.RootUriHandler;
import com.sankuai.waimai.router.core.Debugger;
import com.sankuai.waimai.router.core.UriRequest;
import com.sankuai.waimai.router.method.Func0;
import com.sankuai.waimai.router.method.Func1;
import com.sankuai.waimai.router.method.Func2;
import com.sankuai.waimai.router.method.Func3;
import com.sankuai.waimai.router.method.Func4;
import com.sankuai.waimai.router.method.Func5;
import com.sankuai.waimai.router.method.Func6;
import com.sankuai.waimai.router.method.Func7;
import com.sankuai.waimai.router.method.Func8;
import com.sankuai.waimai.router.method.Func9;
import com.sankuai.waimai.router.method.FuncN;
import com.sankuai.waimai.router.service.IFactory;
import com.sankuai.waimai.router.service.ServiceLoader;

import java.util.List;

/**
 * <p>WMRouter</p>
 *
 * <p>åŒ…ç»“æž„è¯´æ˜Žï¼š
 * <pre>
 * - coreï¼šè·¯ç”±æ ¸å¿ƒæŽ¥å?£å’Œå®žçŽ°ç±»ï¼Œæ??ä¾›é€šç”¨èƒ½åŠ›<br/>
 * - utilsï¼šé€šç”¨å·¥å…·ç±»<br/>
 * - components: è¾…åŠ©ç»„ä»¶<br/>
 * - activityï¼šActivityç›¸å…³<br/>
 * - regexï¼šæ­£åˆ™ç›¸å…³<br/>
 * - commonï¼šUriHandlerã€?UriInterceptorã€?UriRequesté€šç”¨å®žçŽ°ç±»<br/>
 * - service: ServiceLoaderæ¨¡å?—<br/>
 * - methodï¼šæ–¹æ³•é€šç”¨æŽ¥å?£<br/>
 * </pre>
 * </p>
 * Created by jzj on 2018/3/19.
 */
public class Router {

    @SuppressLint("StaticFieldLeak")
    private static RootUriHandler ROOT_HANDLER;

    /**
     * æ­¤åˆ?å§‹åŒ–æ–¹æ³•å¿…é¡»åœ¨ä¸»çº¿ç¨‹è°ƒç”¨ã€‚
     */
    public static void init(@NonNull RootUriHandler rootUriHandler) {
        if (Looper.myLooper() != Looper.getMainLooper()) {
            Debugger.fatal("åˆ?å§‹åŒ–æ–¹æ³•initåº”è¯¥åœ¨ä¸»çº¿ç¨‹è°ƒç”¨");
        }
        if (ROOT_HANDLER == null) {
            ROOT_HANDLER = rootUriHandler;
        } else {
            Debugger.fatal("è¯·å‹¿é‡?å¤?åˆ?å§‹åŒ–UriRouter");
        }
    }

    /**
     * æ­¤åˆ?å§‹åŒ–æ–¹æ³•çš„è°ƒç”¨ä¸?æ˜¯å¿…é¡»çš„ã€‚
     * ä½¿ç”¨æ—¶ä¼šæŒ‰éœ€åˆ?å§‹åŒ–ï¼›ä½†ä¹Ÿå?¯ä»¥æ??å‰?è°ƒç”¨å¹¶åˆ?å§‹åŒ–ï¼Œä½¿ç”¨æ—¶ä¼šç­‰å¾…åˆ?å§‹åŒ–å®Œæˆ?ã€‚
     * æœ¬æ–¹æ³•çº¿ç¨‹å®‰å…¨ã€‚
     */
    public static void lazyInit() {
        ServiceLoader.lazyInit();
        getRootHandler().lazyInit();
    }

    public static RootUriHandler getRootHandler() {
        if (ROOT_HANDLER == null) {
            throw new RuntimeException("è¯·å…ˆè°ƒç”¨initåˆ?å§‹åŒ–UriRouter");
        }
        return ROOT_HANDLER;
    }

    public static void startUri(UriRequest request) {
        getRootHandler().startUri(request);
    }

    public static void startUri(Context context, String uri) {
        getRootHandler().startUri(new UriRequest(context, uri));
    }

    /**
     * å?¯åŠ¨@RouterPageæ³¨è§£çš„Activityï¼Œè‡ªåŠ¨æ‹¼è£…PageAnnotationHandler.SCHEME_HOSTå’Œpath
     * @param context
     * @param path
     */
    public static void startPageUri(Context context, String path) {
        startUri(context, PageAnnotationHandler.SCHEME_HOST + path);
    }

    /**
     * æ ¹æ?®æŽ¥å?£èŽ·å?– {@link ServiceLoader}
     */
    public static <T> ServiceLoader<T> loadService(Class<T> clazz) {
        return ServiceLoader.load(clazz);
    }

    /**
     * åˆ›å»ºæŒ‡å®škeyçš„å®žçŽ°ç±»å®žä¾‹ï¼Œä½¿ç”¨ {@link RouterProvider} æ–¹æ³•æˆ–æ— å?‚æ•°æž„é€ ã€‚å¯¹äºŽå£°æ˜Žäº†singletonçš„å®žçŽ°ç±»ï¼Œä¸?ä¼šé‡?å¤?åˆ›å»ºå®žä¾‹ã€‚
     *
     * @return æ‰¾ä¸?åˆ°æˆ–èŽ·å?–ã€?æž„é€ å¤±è´¥ï¼Œåˆ™è¿”å›žnull
     */
    public static <I, T extends I> T getService(Class<I> clazz, String key) {
        return ServiceLoader.load(clazz).get(key);
    }

    /**
     * åˆ›å»ºæŒ‡å®škeyçš„å®žçŽ°ç±»å®žä¾‹ï¼Œä½¿ç”¨Contextå?‚æ•°æž„é€ ã€‚å¯¹äºŽå£°æ˜Žäº†singletonçš„å®žçŽ°ç±»ï¼Œä¸?ä¼šé‡?å¤?åˆ›å»ºå®žä¾‹ã€‚
     *
     * @return æ‰¾ä¸?åˆ°æˆ–èŽ·å?–ã€?æž„é€ å¤±è´¥ï¼Œåˆ™è¿”å›žnull
     */
    public static <I, T extends I> T getService(Class<I> clazz, String key, Context context) {
        return ServiceLoader.load(clazz).get(key, context);
    }

    /**
     * åˆ›å»ºæŒ‡å®škeyçš„å®žçŽ°ç±»å®žä¾‹ï¼Œä½¿ç”¨æŒ‡å®šçš„Factoryæž„é€ ã€‚å¯¹äºŽå£°æ˜Žäº†singletonçš„å®žçŽ°ç±»ï¼Œä¸?ä¼šé‡?å¤?åˆ›å»ºå®žä¾‹ã€‚
     *
     * @param factory ç”¨äºŽä»ŽClassæž„é€ å®žä¾‹
     * @return æ‰¾ä¸?åˆ°æˆ–èŽ·å?–ã€?æž„é€ å¤±è´¥ï¼Œåˆ™è¿”å›žnull
     */
    public static <I, T extends I> T getService(Class<I> clazz, String key, IFactory factory) {
        return ServiceLoader.load(clazz).get(key, factory);
    }

    /**
     * åˆ›å»ºæ‰€æœ‰å®žçŽ°ç±»çš„å®žä¾‹ï¼Œä½¿ç”¨ {@link RouterProvider} æ–¹æ³•æˆ–æ— å?‚æ•°æž„é€ ã€‚å¯¹äºŽå£°æ˜Žäº†singletonçš„å®žçŽ°ç±»ï¼Œä¸?ä¼šé‡?å¤?åˆ›å»ºå®žä¾‹ã€‚
     *
     * @return å?¯èƒ½è¿”å›žEmptyListï¼ŒListä¸­çš„å…ƒç´ ä¸?ä¸ºç©º
     */
    public static <I, T extends I> List<T> getAllServices(Class<I> clazz) {
        return ServiceLoader.load(clazz).getAll();
    }

    /**
     * åˆ›å»ºæ‰€æœ‰å®žçŽ°ç±»çš„å®žä¾‹ï¼Œä½¿ç”¨Contextå?‚æ•°æž„é€ ã€‚å¯¹äºŽå£°æ˜Žäº†singletonçš„å®žçŽ°ç±»ï¼Œä¸?ä¼šé‡?å¤?åˆ›å»ºå®žä¾‹ã€‚
     *
     * @return å?¯èƒ½è¿”å›žEmptyListï¼ŒListä¸­çš„å…ƒç´ ä¸?ä¸ºç©º
     */
    public static <I, T extends I> List<T> getAllServices(Class<I> clazz, Context context) {
        return ServiceLoader.load(clazz).getAll(context);
    }

    /**
     * åˆ›å»ºæ‰€æœ‰å®žçŽ°ç±»çš„å®žä¾‹ï¼Œä½¿ç”¨æŒ‡å®šFactoryæž„é€ ã€‚å¯¹äºŽå£°æ˜Žäº†singletonçš„å®žçŽ°ç±»ï¼Œä¸?ä¼šé‡?å¤?åˆ›å»ºå®žä¾‹ã€‚
     *
     * @return å?¯èƒ½è¿”å›žEmptyListï¼ŒListä¸­çš„å…ƒç´ ä¸?ä¸ºç©º
     */
    public static <I, T extends I> List<T> getAllServices(Class<I> clazz, IFactory factory) {
        return ServiceLoader.load(clazz).getAll(factory);
    }

    /**
     * æ ¹æ?®keyèŽ·å?–å®žçŽ°ç±»çš„Classã€‚æ³¨æ„?ï¼Œå¯¹äºŽå£°æ˜Žäº†singletonçš„å®žçŽ°ç±»ï¼ŒèŽ·å?–Classå?Žè¿˜æ˜¯å?¯ä»¥åˆ›å»ºæ–°çš„å®žä¾‹ã€‚
     *
     * @return æ‰¾ä¸?åˆ°æˆ–èŽ·å?–å¤±è´¥ï¼Œåˆ™è¿”å›žnull
     */
    public static <I, T extends I> Class<T> getServiceClass(Class<I> clazz, String key) {
        return ServiceLoader.load(clazz).getClass(key);
    }

    /**
     * èŽ·å?–æ‰€æœ‰å®žçŽ°ç±»çš„Classã€‚æ³¨æ„?ï¼Œå¯¹äºŽå£°æ˜Žäº†singletonçš„å®žçŽ°ç±»ï¼ŒèŽ·å?–Classå?Žè¿˜æ˜¯å?¯ä»¥åˆ›å»ºæ–°çš„å®žä¾‹ã€‚
     *
     * @return å?¯èƒ½è¿”å›žEmptyListï¼ŒListä¸­çš„å…ƒç´ ä¸?ä¸ºç©º
     */
    public static <I, T extends I> List<Class<T>> getAllServiceClasses(Class<I> clazz) {
        return ServiceLoader.load(clazz).getAllClasses();
    }

    /**
     * è°ƒç”¨æ–¹æ³•ã€‚æ–¹æ³•åº”è¯¥å®žçŽ° {@link Func0} ~ {@link FuncN} æŽ¥å?£ï¼Œæ ¹æ?®å?‚æ•°ä¸ªæ•°åŒ¹é…?æŽ¥å?£ã€‚
     */
    @SuppressWarnings("unchecked")
    public static <T> T callMethod(String key, Object... args) {
        switch (args.length) {
            case 0:
                return (T) getService(Func0.class, key).call();
            case 1:
                return (T) getService(Func1.class, key).call(args[0]);
            case 2:
                return (T) getService(Func2.class, key).call(args[0], args[1]);
            case 3:
                return (T) getService(Func3.class, key).call(args[0], args[1], args[2]);
            case 4:
                return (T) getService(Func4.class, key).call(
                        args[0], args[1], args[2], args[3]);
            case 5:
                return (T) getService(Func5.class, key).call(
                        args[0], args[1], args[2], args[3], args[4]);
            case 6:
                return (T) getService(Func6.class, key).call(
                        args[0], args[1], args[2], args[3], args[4], args[5]);
            case 7:
                return (T) getService(Func7.class, key).call(
                        args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            case 8:
                return (T) getService(Func8.class, key).call(
                        args[0], args[1], args[2], args[3],
                        args[4], args[5], args[6], args[7]);
            case 9:
                return (T) getService(Func9.class, key).call(
                        args[0], args[1], args[2], args[3],
                        args[4], args[5], args[6], args[7], args[8]);
            default:
                return (T) getService(FuncN.class, key).call(args);
        }
    }
}
