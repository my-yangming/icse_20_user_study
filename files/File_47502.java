package com.abel.example.controller;

import javax.servlet.http.HttpServletRequest;
import java.util.Map;

import com.abel.example.bean.User;
import io.swagger.annotations.*;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;


import com.abel.example.service.UserService;
import com.abel.example.util.CommonUtil;


@Controller
@RequestMapping(value = "/users")
@Api(value = "ç”¨æˆ·çš„å¢žåˆ æ”¹æŸ¥")
public class UserController {

    @Autowired
    private UserService userService;


    /**
     * æŸ¥è¯¢æ‰€æœ‰çš„ç”¨æˆ·
     * api :localhost:8099/users
     * @return
     */
    @RequestMapping(method = RequestMethod.GET)
    @ResponseBody
    @ApiOperation(value = "èŽ·å?–ç”¨æˆ·åˆ—è¡¨ï¼Œç›®å‰?æ²¡æœ‰åˆ†é¡µ")
    public ResponseEntity<Object> findAll() {
        return new ResponseEntity<>(userService.listUsers(), HttpStatus.OK);
    }

    /**
     * é€šè¿‡id æŸ¥æ‰¾ç”¨æˆ·
     * api :localhost:8099/users/1
     * @param id
     * @return
     */
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @ResponseBody
    @ApiOperation(value = "é€šè¿‡idèŽ·å?–ç”¨æˆ·ä¿¡æ?¯", notes="è¿”å›žç”¨æˆ·ä¿¡æ?¯")
    public ResponseEntity<Object> getUserById(@PathVariable Integer id) {
        return new ResponseEntity<>(userService.getUserById(Long.valueOf(id)), HttpStatus.OK);
    }


    /**
     * é€šè¿‡spring data jpa è°ƒç”¨æ–¹æ³•
     * api :localhost:8099/users/byname?username=xxx
     * é€šè¿‡ç”¨æˆ·å??æŸ¥æ‰¾ç”¨æˆ·
     * @param request
     * @return
     */
    @RequestMapping(value = "/byname", method = RequestMethod.GET)
    @ResponseBody
    @ApiImplicitParam(paramType = "query",name= "username" ,value = "ç”¨æˆ·å??",dataType = "string")
    @ApiOperation(value = "é€šè¿‡ç”¨æˆ·å??èŽ·å?–ç”¨æˆ·ä¿¡æ?¯", notes="è¿”å›žç”¨æˆ·ä¿¡æ?¯")
    public ResponseEntity<Object> getUserByUserName(HttpServletRequest request) {
        Map<String, Object> map = CommonUtil.getParameterMap(request);
        String username = (String) map.get("username");
        return new ResponseEntity<>(userService.getUserByUserName(username), HttpStatus.OK);
    }

    /**
     * é€šè¿‡spring data jpa è°ƒç”¨æ–¹æ³•
     * api :localhost:8099/users/byUserNameContain?username=xxx
     * é€šè¿‡ç”¨æˆ·å??æ¨¡ç³ŠæŸ¥è¯¢
     * @param request
     * @return
     */
    @RequestMapping(value = "/byUserNameContain", method = RequestMethod.GET)
    @ResponseBody
    @ApiImplicitParam(paramType = "query",name= "username" ,value = "ç”¨æˆ·å??",dataType = "string")
    @ApiOperation(value = "é€šè¿‡ç”¨æˆ·å??æ¨¡ç³Šæ?œç´¢ç”¨æˆ·ä¿¡æ?¯", notes="è¿”å›žç”¨æˆ·ä¿¡æ?¯")
    public ResponseEntity<Object> getUsers(HttpServletRequest request) {
        Map<String, Object> map = CommonUtil.getParameterMap(request);
        String username = (String) map.get("username");
        return new ResponseEntity<>(userService.getByUsernameContaining(username), HttpStatus.OK);
    }


    /**
     * æ·»åŠ ç”¨æˆ·å•Š
     * api :localhost:8099/users
     *
     * @param user
     * @return
     */
    @RequestMapping(method = RequestMethod.POST)
    @ResponseBody
    @ApiModelProperty(value="user",notes = "ç”¨æˆ·ä¿¡æ?¯çš„jsonä¸²")
    @ApiOperation(value = "æ–°å¢žç”¨æˆ·", notes="è¿”å›žæ–°å¢žçš„ç”¨æˆ·ä¿¡æ?¯")
    public ResponseEntity<Object> saveUser(@RequestBody User user) {
        return new ResponseEntity<>(userService.saveUser(user), HttpStatus.OK);
    }

    /**
     * ä¿®æ”¹ç”¨æˆ·ä¿¡æ?¯
     * api :localhost:8099/users
     * @param user
     * @return
     */
    @RequestMapping(method = RequestMethod.PUT)
    @ResponseBody
    @ApiModelProperty(value="user",notes = "ä¿®æ”¹å?Žç”¨æˆ·ä¿¡æ?¯çš„jsonä¸²")
    @ApiOperation(value = "æ–°å¢žç”¨æˆ·", notes="è¿”å›žæ–°å¢žçš„ç”¨æˆ·ä¿¡æ?¯")
    public ResponseEntity<Object> updateUser(@RequestBody User user) {
        return new ResponseEntity<>(userService.updateUser(user), HttpStatus.OK);
    }

    /**
     * é€šè¿‡IDåˆ é™¤ç”¨æˆ·
     * api :localhost:8099/users/2
     * @param id
     * @return
     */
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @ResponseBody
    @ApiOperation(value = "é€šè¿‡idåˆ é™¤ç”¨æˆ·ä¿¡æ?¯", notes="è¿”å›žåˆ é™¤çŠ¶æ€?1 æˆ?åŠŸ 0 å¤±è´¥")
    public ResponseEntity<Object> deleteUser(@PathVariable Integer id) {
        return new ResponseEntity<>(userService.removeUser(id.longValue()), HttpStatus.OK);
    }
}
