/*Copyright Â©2015 TommyLemon(https://github.com/TommyLemon)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.*/

package zuo.biao.library.base;

import android.view.View;
import android.widget.BaseAdapter;

import java.util.List;

import zuo.biao.library.interfaces.AdapterCallBack;
import zuo.biao.library.interfaces.OnReachViewBorderListener;
import zuo.biao.library.interfaces.OnStopLoadListener;
import zuo.biao.library.manager.HttpManager;
import zuo.biao.library.ui.xlistview.XListView;
import zuo.biao.library.ui.xlistview.XListView.IXListViewListener;
import zuo.biao.library.util.Log;

/**åŸºç¡€httpèŽ·å?–åˆ—è¡¨çš„Activity
 * @author Lemon
 * @param <T> æ•°æ?®æ¨¡åž‹(model/JavaBean)ç±»
 * @param <BA> ç®¡ç?†XListViewçš„Adapter
 * @see #getListAsync(int)
 * @see #onHttpResponse(int, String, Exception)
 * @use extends BaseHttpListActivity å¹¶åœ¨å­?ç±»onCreateä¸­lvBaseList.onRefresh();, å…·ä½“å?‚è€ƒ .UserListFragment
 */
public abstract class BaseHttpListActivity<T, BA extends BaseAdapter> extends BaseListActivity<T, XListView, BA>
implements HttpManager.OnHttpResponseListener, IXListViewListener, OnStopLoadListener {
	private static final String TAG = "BaseHttpListActivity";




	// UIæ˜¾ç¤ºåŒº(æ“?ä½œUIï¼Œä½†ä¸?å­˜åœ¨æ•°æ?®èŽ·å?–æˆ–å¤„ç?†ä»£ç ?ï¼Œä¹Ÿä¸?å­˜åœ¨äº‹ä»¶ç›‘å?¬ä»£ç ?)<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	@Override
	public void initView() {
		super.initView();

		setList((List<T>) null);//ListViewéœ€è¦?è®¾ç½®adapteræ‰?èƒ½æ˜¾ç¤ºheaderå’Œfooter; setAdapterè°ƒä¸?åˆ°å­?ç±»æ–¹æ³•
	}

	/**è®¾ç½®åˆ—è¡¨é€‚é…?å™¨
	 * @param callBack
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void setList(AdapterCallBack<BA> callBack) {
		super.setList(callBack);
		boolean empty = adapter == null || adapter.isEmpty();
		Log.d(TAG, "setList  adapter empty = " + empty);
		lvBaseList.showFooter(! empty);//æ”¾setAdapterä¸­ä¸?è¡Œï¼Œadapter!=nullæ—¶æ²¡æœ‰è°ƒç”¨setAdapter

		if (adapter != null && adapter instanceof zuo.biao.library.base.BaseAdapter) {
			((zuo.biao.library.base.BaseAdapter<T>) adapter).setOnReachViewBorderListener(
					empty || lvBaseList.isFooterShowing() == false ? null : new OnReachViewBorderListener(){

						@Override
						public void onReach(int type, View v) {
							if (type == TYPE_BOTTOM) {
								lvBaseList.onLoadMore();
							}
						}
					});
		}
	}

	// UIæ˜¾ç¤ºåŒº(æ“?ä½œUIï¼Œä½†ä¸?å­˜åœ¨æ•°æ?®èŽ·å?–æˆ–å¤„ç?†ä»£ç ?ï¼Œä¹Ÿä¸?å­˜åœ¨äº‹ä»¶ç›‘å?¬ä»£ç ?)>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>










	// Dataæ•°æ?®åŒº(å­˜åœ¨æ•°æ?®èŽ·å?–æˆ–å¤„ç?†ä»£ç ?ï¼Œä½†ä¸?å­˜åœ¨äº‹ä»¶ç›‘å?¬ä»£ç ?)<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	@Override
	public void initData() {
		super.initData();

	}

	/**
	 * å°†JSONä¸²è½¬ä¸ºListï¼ˆå·²åœ¨é?žUIçº¿ç¨‹ä¸­ï¼‰
	 * *ç›´æŽ¥JSON.parseArray(json, getCacheClass());å?¯ä»¥çœ?åŽ»è¿™ä¸ªæ–¹æ³•ï¼Œä½†ç”±äºŽå?¯èƒ½jsonä¸?å®Œå…¨ç¬¦å?ˆparseArrayæ?¡ä»¶ï¼Œæ‰€ä»¥è¿˜æ˜¯è¦?ä¿?ç•™ã€‚
	 * *æ¯”å¦‚jsonå?ªæœ‰å…¶ä¸­ä¸€éƒ¨åˆ†èƒ½ä½œä¸ºparseArrayçš„å­—ç¬¦ä¸²æ—¶ï¼Œå¿…é¡»å…ˆæ??å?–å‡ºè¿™æ®µå­—ç¬¦ä¸²å†?parseArray
	 */
	public abstract List<T> parseArray(String json);


	// Dataæ•°æ?®åŒº(å­˜åœ¨æ•°æ?®èŽ·å?–æˆ–å¤„ç?†ä»£ç ?ï¼Œä½†ä¸?å­˜åœ¨äº‹ä»¶ç›‘å?¬ä»£ç ?)>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>










	// Eventäº‹ä»¶åŒº(å?ªè¦?å­˜åœ¨äº‹ä»¶ç›‘å?¬ä»£ç ?å°±æ˜¯)<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	@Override
	public void initEvent() {// å¿…é¡»è°ƒç”¨
		super.initEvent();
		setOnStopLoadListener(this);

		lvBaseList.setXListViewListener(this);
	}

	/*
	 * @param page ç”¨-pageä½œä¸ºrequestCode
	 */
	@Override
	public abstract void getListAsync(int page);

	@Override
	public void onStopRefresh() {
		runUiThread(new Runnable() {

			@Override
			public void run() {
				lvBaseList.stopRefresh();
			}
		});
	}
	@Override
	public void onStopLoadMore(final boolean isHaveMore) {
		runUiThread(new Runnable() {

			@Override
			public void run() {
				lvBaseList.stopLoadMore(isHaveMore);
			}
		});
	}

	/**
	 * @param requestCode  = -page {@link #getListAsync(int)}
	 * @param resultJson
	 * @param e
	 */
	@Override
	public void onHttpResponse(final int requestCode, final String resultJson, final Exception e) {
		runThread(TAG + "onHttpResponse", new Runnable() {

			@Override
			public void run() {
				int page = 0;
				if (requestCode > 0) {
					Log.w(TAG, "requestCode > 0, åº”è¯¥ç”¨BaseListFragment#getListAsync(int page)ä¸­çš„pageçš„è´Ÿæ•°ä½œä¸ºrequestCode!");
				} else {
					page = - requestCode;
				}
				List<T> array = parseArray(resultJson);

				if ((array == null || array.isEmpty()) && e != null) {
					onLoadFailed(page, e);
				} else {
					onLoadSucceed(page, array);
				}
			}
		});
	}


	// ç³»ç»Ÿè‡ªå¸¦ç›‘å?¬æ–¹æ³•<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


	// ç±»ç›¸å…³ç›‘å?¬<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


	// ç±»ç›¸å…³ç›‘å?¬>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	// ç³»ç»Ÿè‡ªå¸¦ç›‘å?¬æ–¹æ³•>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


	// Eventäº‹ä»¶åŒº(å?ªè¦?å­˜åœ¨äº‹ä»¶ç›‘å?¬ä»£ç ?å°±æ˜¯)>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



	// å†…éƒ¨ç±»,å°½é‡?å°‘ç”¨<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	// å†…éƒ¨ç±»,å°½é‡?å°‘ç”¨>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

}
