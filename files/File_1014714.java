package com.cg.baseproject.utils;

import android.annotation.SuppressLint;
import android.text.TextUtils;

import com.cg.baseproject.manager.AppLogMessageMgr;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Hashtable;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


/**
 * ä¸»è¦?åŠŸèƒ½ï¼š ç”¨äºŽAppéªŒè¯?æ•°æ?®éªŒè¯?
 *
 * @Prject: CommonUtilLibrary
 * @Package: com.jingewenku.abrahamcaijin.commonutil
 * @author: AbrahamCaiJin
 * @date: 2017å¹´05æœˆ03æ—¥ 16:37
 * @Copyright: ä¸ªäººç‰ˆæ?ƒæ‰€æœ‰
 * @Company:
 * @version: 1.0.0
 */
@SuppressLint("SimpleDateFormat")
@SuppressWarnings("rawtypes")
public class ValidateUtils {

	
	//é‚®ç®±è¡¨è¾¾å¼?
	private final static Pattern email_pattern = Pattern.compile("^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$");
	
	//æ‰‹æœºå?·è¡¨è¾¾å¼?
	private final static Pattern phone_pattern = Pattern.compile("^(13|15|18)\\d{9}$");
	
	//é“¶è¡Œå?¡å?·è¡¨è¾¾å¼?
	private final static Pattern bankNo_pattern = Pattern.compile("^[0-9]{16,19}$");
	
	//åº§æœºå?·ç ?è¡¨è¾¾å¼?
	private final static Pattern plane_pattern = Pattern.compile("^((\\(\\d{2,3}\\))|(\\d{3}\\-))?(\\(0\\d{2,3}\\)|0\\d{2,3}-)?[1-9]\\d{6,7}(\\-\\d{1,4})?$");  
	
	//é?žé›¶è¡¨è¾¾å¼?
	private final static Pattern notZero_pattern = Pattern.compile("^\\+?[1-9][0-9]*$");
	
	//æ•°å­—è¡¨è¾¾å¼?
	private final static Pattern number_pattern = Pattern.compile("^[0-9]*$");
	
	//å¤§å†™å­—æ¯?è¡¨è¾¾å¼?
	private final static Pattern upChar_pattern = Pattern.compile("^[A-Z]+$");
	
	//å°?å†™å­—æ¯?è¡¨è¾¾å¼?
	private final static Pattern lowChar_pattern = Pattern.compile("^[a-z]+$");

	//å¤§å°?å†™å­—æ¯?è¡¨è¾¾å¼?
	private final static Pattern letter_pattern = Pattern.compile("^[A-Za-z]+$");
	
	//ä¸­æ–‡æ±‰å­—è¡¨è¾¾å¼?
	private final static Pattern chinese_pattern = Pattern.compile("^[\u4e00-\u9fa5],{0,}$");
	
	//æ?¡å½¢ç ?è¡¨è¾¾å¼?
	private final static Pattern onecode_pattern = Pattern.compile("^(([0-9])|([0-9])|([0-9]))\\d{10}$");
	
	//é‚®æ”¿ç¼–ç ?è¡¨è¾¾å¼?
	private final static Pattern postalcode_pattern = Pattern.compile("([0-9]{3})+.([0-9]{4})+"); 
	
	//IPåœ°å?€è¡¨è¾¾å¼?
	private final static Pattern ipaddress_pattern = Pattern.compile("[1-9](\\d{1,2})?\\.(0|([1-9](\\d{1,2})?))\\.(0|([1-9](\\d{1,2})?))\\.(0|([1-9](\\d{1,2})?))"); 
	
	//URLåœ°å?€è¡¨è¾¾å¼?
	private final static Pattern url_pattern = Pattern.compile("(https?://(w{3}\\.)?)?\\w+\\.\\w+(\\.[a-zA-Z]+)*(:\\d{1,5})?(/\\w*)*(\\??(.+=.*)?(&.+=.*)?)?"); 
	
	//ç”¨æˆ·å??è¡¨è¾¾å¼?
	private final static Pattern username_pattern = Pattern.compile("^[A-Za-z0-9_]{1}[A-Za-z0-9_.-]{3,31}"); 
	
	//çœŸå®žå§“å??è¡¨è¾¾å¼?
	private final static Pattern realnem_pattern = Pattern.compile("[\u4E00-\u9FA5]{2,5}(?:Â·[\u4E00-\u9FA5]{2,5})*"); 
	
	//åŒ¹é…?HTMLæ ‡ç­¾,é€šè¿‡ä¸‹é?¢çš„è¡¨è¾¾å¼?å?¯ä»¥åŒ¹é…?å‡ºHTMLä¸­çš„æ ‡ç­¾å±žæ€§ã€‚
	private final static Pattern html_patter = Pattern.compile("<\\\\/?\\\\w+((\\\\s+\\\\w+(\\\\s*=\\\\s*(?:\".*?\"|'.*?'|[\\\\^'\">\\\\s]+))?)+\\\\s*|\\\\s*)\\\\/?>");

	//æŠ½å?–æ³¨é‡Š,å¦‚æžœä½ éœ€è¦?ç§»é™¤HMTLä¸­çš„æ³¨é‡Šï¼Œå?¯ä»¥ä½¿ç”¨å¦‚ä¸‹çš„è¡¨è¾¾å¼?ã€‚
	private final static Pattern notes_patter = Pattern.compile("<!--(.*?)-->");

	//æŸ¥æ‰¾CSSå±žæ€§,é€šè¿‡ä¸‹é?¢çš„è¡¨è¾¾å¼?ï¼Œå?¯ä»¥æ?œç´¢åˆ°ç›¸åŒ¹é…?çš„CSSå±žæ€§ã€‚
	private final static Pattern css_patter = Pattern.compile("^\\\\s*[a-zA-Z\\\\-]+\\\\s*[:]{1}\\\\s[a-zA-Z0-9\\\\s.#]+[;]{1}");

	//æ??å?–é¡µé?¢è¶…é“¾æŽ¥,æ??å?–htmlä¸­çš„è¶…é“¾æŽ¥ã€‚
	private final static Pattern hyperlink_patter = Pattern.compile("(<a\\\\s*(?!.*\\\\brel=)[^>]*)(href=\"https?:\\\\/\\\\/)((?!(?:(?:www\\\\.)?'.implode('|(?:www\\\\.)?', $follow_list).'))[^\"]+)\"((?!.*\\\\brel=)[^>]*)(?:[^>]*)>");

	//æ??å?–ç½‘é¡µå›¾ç‰‡,å?‡è‹¥ä½ æƒ³æ??å?–ç½‘é¡µä¸­æ‰€æœ‰å›¾ç‰‡ä¿¡æ?¯ï¼Œå?¯ä»¥åˆ©ç”¨ä¸‹é?¢çš„è¡¨è¾¾å¼?ã€‚
	private final static Pattern image_patter = Pattern.compile("\\\\< *[img][^\\\\\\\\>]*[src] *= *[\\\\\"\\\\']{0,1}([^\\\\\"\\\\'\\\\ >]*)");

	//æ??å?–Color Hex Codes,æœ‰æ—¶éœ€è¦?æŠ½å?–ç½‘é¡µä¸­çš„é¢œè‰²ä»£ç ?ï¼Œå?¯ä»¥ä½¿ç”¨ä¸‹é?¢çš„è¡¨è¾¾å¼?ã€‚
	private final static Pattern color_patter = Pattern.compile("^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$");

	//æ–‡ä»¶è·¯å¾„å?Šæ‰©å±•å??æ ¡éªŒ,éªŒè¯?windowsä¸‹æ–‡ä»¶è·¯å¾„å’Œæ‰©å±•å??ï¼ˆä¸‹é?¢çš„ä¾‹å­?ä¸­ä¸º.txtæ–‡ä»¶ï¼‰
	private final static Pattern route_patter = Pattern.compile("^([a-zA-Z]\\\\:|\\\\\\\\)\\\\\\\\([^\\\\\\\\]+\\\\\\\\)*[^\\\\/:*?\"<>|]+\\\\.txt(l)?$");

	//æ??å?–URLé“¾æŽ¥,ä¸‹é?¢çš„è¿™ä¸ªè¡¨è¾¾å¼?å?¯ä»¥ç­›é€‰å‡ºä¸€æ®µæ–‡æœ¬ä¸­çš„URL
	// ^(f|ht){1}(tp|tps):\\/\\/([\\w-]+\\.)+[\\w-]+(\\/[\\w- ./?%&=]*)?
	//æ£€æŸ¥URLçš„å‰?ç¼€,åº”ç”¨å¼€å?‘ä¸­å¾ˆå¤šæ—¶å€™éœ€è¦?åŒºåˆ†è¯·æ±‚æ˜¯HTTPSè¿˜æ˜¯HTTPï¼Œé€šè¿‡ä¸‹é?¢çš„è¡¨è¾¾å¼?å?¯ä»¥å?–å‡ºä¸€ä¸ªurlçš„å‰?ç¼€ç„¶å?Žå†?é€»è¾‘åˆ¤æ–­ã€‚
//if (!s.match(/^[a-zA-Z]+:\\/\\//))
//	{
//		s = 'http://' + s;
//	}
	//æ ¡éªŒIP-v6åœ°å?€
//	(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))
//æ ¡éªŒIP-v4åœ°å?€
//	\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b
//	åˆ¤æ–­IEçš„ç‰ˆæœ¬
//	^.*MSIE [5-8](?:\\.[0-9]+)?(?!.*Trident\\/[5-9]\\.0).*$
//	æ ¡éªŒé‡‘é¢?
//^[0-9]+(.[0-9]{2})?$
//	æ ¡éªŒå¯†ç ?å¼ºåº¦
//^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$


    /**
     * èŽ·å?–èº«ä»½è¯?å?·æ‰€æœ‰åŒºåŸŸç¼–ç ?è®¾ç½®
     * @return Hashtable
     */
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public static Hashtable getAreaCodeAll() {
        Hashtable hashtable = new Hashtable();
        hashtable.put("11", "åŒ—äº¬");
        hashtable.put("12", "å¤©æ´¥");
        hashtable.put("13", "æ²³åŒ—");
        hashtable.put("14", "å±±è¥¿");
        hashtable.put("15", "å†…è’™å?¤");
        hashtable.put("21", "è¾½å®?");
        hashtable.put("22", "å?‰æž—");
        hashtable.put("23", "é»‘é¾™æ±Ÿ");
        hashtable.put("31", "ä¸Šæµ·");
        hashtable.put("32", "æ±Ÿè‹?");
        hashtable.put("33", "æµ™æ±Ÿ");
        hashtable.put("34", "å®‰å¾½");
        hashtable.put("35", "ç¦?å»º");
        hashtable.put("36", "æ±Ÿè¥¿");
        hashtable.put("37", "å±±ä¸œ");
        hashtable.put("41", "æ²³å?—");
        hashtable.put("42", "æ¹–åŒ—");
        hashtable.put("43", "æ¹–å?—");
        hashtable.put("44", "å¹¿ä¸œ");
        hashtable.put("45", "å¹¿è¥¿");
        hashtable.put("46", "æµ·å?—");
        hashtable.put("50", "é‡?åº†");
        hashtable.put("51", "å››å·?");
        hashtable.put("52", "è´µå·ž");
        hashtable.put("53", "äº‘å?—");
        hashtable.put("54", "è¥¿è—?");
        hashtable.put("61", "é™•è¥¿");
        hashtable.put("62", "ç”˜è‚ƒ");
        hashtable.put("63", "é?’æµ·");
        hashtable.put("64", "å®?å¤?");
        hashtable.put("65", "æ–°ç–†");
        hashtable.put("71", "å?°æ¹¾");
        hashtable.put("81", "é¦™æ¸¯");
        hashtable.put("82", "æ¾³é—¨");
        hashtable.put("91", "å›½å¤–");
        return hashtable;
    }


    /**
     * æ ¹æ?®èº«ä»½å?·è¿”å›žæ‰€åœ¨åŒºåŸŸä¿¡æ?¯
     * @param idCard
     * @return String
     */
    @SuppressWarnings("unchecked")
    public String getIDCardArea(String idCard) {
        Hashtable<String, String> ht = getAreaCodeAll();
        String area = ht.get(idCard.substring(0, 2));
        return area;
    }


    /**
     * 56å??æ—?å®šä¹‰
     * @return Hashtable
     */
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public static Hashtable getMinorityAll() {
        Hashtable hashtable = new Hashtable();
        hashtable.put("æ±‰æ—?", "æ±‰æ—?");
        hashtable.put("å£®æ—?", "å£®æ—?");
        hashtable.put("æ»¡æ—?", "æ»¡æ—?");
        hashtable.put("å›žæ—?", "å›žæ—?");
        hashtable.put("è‹—æ—?", "è‹—æ—?");
        hashtable.put("ç»´å?¾å°”æ—?", "ç»´å?¾å°”æ—?");
        hashtable.put("åœŸå®¶æ—?", "åœŸå®¶æ—?");
        hashtable.put("å½?æ—?", "å½?æ—?");
        hashtable.put("è’™å?¤æ—?", "è’™å?¤æ—?");
        hashtable.put("è—?æ—?", "è—?æ—?");
        hashtable.put("å¸ƒä¾?æ—?", "å¸ƒä¾?æ—?");
        hashtable.put("ä¾—æ—?", "ä¾—æ—?");
        hashtable.put("ç‘¶æ—?", "ç‘¶æ—?");
        hashtable.put("æœ?é²œæ—?", "æœ?é²œæ—?");
        hashtable.put("ç™½æ—?", "ç™½æ—?");
        hashtable.put("å“ˆå°¼æ—?", "å“ˆå°¼æ—?");
        hashtable.put("å“ˆè?¨å…‹æ—?", "å“ˆè?¨å…‹æ—?");
        hashtable.put("é»Žæ—?", "é»Žæ—?");
        hashtable.put("å‚£æ—?", "å‚£æ—?");
        hashtable.put("ç•²æ—?", "ç•²æ—?");
        hashtable.put("å‚ˆåƒ³æ—?", "å‚ˆåƒ³æ—?");
        hashtable.put("ä»¡ä½¬æ—?", "ä»¡ä½¬æ—?");
        hashtable.put("ä¸œä¹¡æ—?", "ä¸œä¹¡æ—?");
        hashtable.put("é«˜å±±æ—?", "é«˜å±±æ—?");
        hashtable.put("æ‹‰ç¥œæ—?", "æ‹‰ç¥œæ—?");
        hashtable.put("æ°´æ—?", "æ°´æ—?");
        hashtable.put("ä½¤æ—?", "ä½¤æ—?");
        hashtable.put("çº³è¥¿æ—?", "çº³è¥¿æ—?");
        hashtable.put("ç¾Œæ—?", "ç¾Œæ—?");
        hashtable.put("åœŸæ—?", "åœŸæ—?");
        hashtable.put("ä»«ä½¬æ—?", "ä»«ä½¬æ—?");
        hashtable.put("é”¡ä¼¯æ—?", "é”¡ä¼¯æ—?");
        hashtable.put("æŸ¯å°”å…‹å­œæ—?", "æŸ¯å°”å…‹å­œæ—?");
        hashtable.put("è¾¾æ–¡å°”æ—?", "è¾¾æ–¡å°”æ—?");
        hashtable.put("æ™¯é¢‡æ—?", "æ™¯é¢‡æ—?");
        hashtable.put("æ¯›å?—æ—?", "æ¯›å?—æ—?");
        hashtable.put("æ’’æ‹‰æ—?", "æ’’æ‹‰æ—?");
        hashtable.put("å¸ƒæœ—æ—?", "å¸ƒæœ—æ—?");
        hashtable.put("å¡”å?‰å…‹æ—?", "å¡”å?‰å…‹æ—?");
        hashtable.put("é˜¿æ˜Œæ—?", "é˜¿æ˜Œæ—?");
        hashtable.put("æ™®ç±³æ—?", "æ™®ç±³æ—?");
        hashtable.put("é„‚æ¸©å…‹æ—?", "é„‚æ¸©å…‹æ—?");
        hashtable.put("æ€’æ—?", "æ€’æ—?");
        hashtable.put("äº¬æ—?", "äº¬æ—?");
        hashtable.put("åŸºè¯ºæ—?", "åŸºè¯ºæ—?");
        hashtable.put("å¾·æ˜‚æ—?", "å¾·æ˜‚æ—?");
        hashtable.put("ä¿?å®‰æ—?", "ä¿?å®‰æ—?");
        hashtable.put("ä¿„ç½—æ–¯æ—?", "ä¿„ç½—æ–¯æ—?");
        hashtable.put("è£•å›ºæ—?", "è£•å›ºæ—?");
        hashtable.put("ä¹Œå­œåˆ«å…‹æ—?", "ä¹Œå­œåˆ«å…‹æ—?");
        hashtable.put("é—¨å·´æ—?", "é—¨å·´æ—?");
        hashtable.put("é„‚ä¼¦æ˜¥æ—?", "é„‚ä¼¦æ˜¥æ—?");
        hashtable.put("ç‹¬é¾™æ—?", "ç‹¬é¾™æ—?");
        hashtable.put("å¡”å¡”å°”æ—?", "å¡”å¡”å°”æ—?");
        hashtable.put("èµ«å“²æ—?", "èµ«å“²æ—?");
        hashtable.put("ç?žå·´æ—?", "ç?žå·´æ—?");
        return hashtable;
    }
    
	/**
	 * éªŒè¯?æ˜¯å?¦ä¸ºç©ºä¸² (åŒ…æ‹¬ç©ºæ ¼ã€?åˆ¶è¡¨ç¬¦ã€?å›žè½¦ç¬¦ã€?æ?¢è¡Œç¬¦ç»„æˆ?çš„å­—ç¬¦ä¸² è‹¥è¾“å…¥å­—ç¬¦ä¸²ä¸ºnullæˆ–ç©ºå­—ç¬¦ä¸²,è¿”å›žtrue)
	 * @param str éªŒè¯?å­—ç¬¦
	 * @return boolean   
	 */
    public static boolean isEmpty(String str) {
        if (str == null || "".equals(str) || str.length() == 0) {
        	 return true;
        }
        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            if (c != ' ' && c != '\t' && c != '\r' && c != '\n') {
            return false;
            }
        }
        	return true;
    }
 
    
	/**
	 * æ˜¯å?¦ä¸?ä¸ºç©º
	 * @param s
	 */
	public static boolean isNotEmpty(String s){
		return s != null && !"".equals(s.trim());
	}
	
	/**
	 * éªŒè¯?é?žé›¶æ­£æ•´æ•°
	 * @param str éªŒè¯?å­—ç¬¦
	 * @return boolean 
	 */
	public static boolean isNotZero(String str) {
		return notZero_pattern.matcher(str).matches();
	}

	
	/**
	 * éªŒè¯?æ˜¯æ•°å­—
	 * @param str éªŒè¯?å­—ç¬¦
	 * @return boolean   
	 */
	public static boolean isNumber(String str) {
		return number_pattern.matcher(str).matches();
	}
	
	
	/**
	 * éªŒè¯?æ˜¯å¤§å†™å­—æ¯?
	 * @param str éªŒè¯?å­—ç¬¦
	 * @return boolean   
	 */
	public static boolean isUpChar(String str) {
		return upChar_pattern.matcher(str).matches();
	}
	
	
	/**
	 * éªŒè¯?æ˜¯å°?å†™å­—æ¯?
	 * @param str éªŒè¯?å­—ç¬¦
	 * @return boolean   
	 */
	public static boolean isLowChar(String str) {
		return lowChar_pattern.matcher(str).matches();
	}
	
	
	/**
	 * éªŒè¯?æ˜¯è‹±æ–‡å­—æ¯?
	 * @param str éªŒè¯?å­—ç¬¦
	 * @return boolean   
	 */
	public static boolean isLetter(String str) {
		return letter_pattern.matcher(str).matches();
	}
	
	
	/**
	 * éªŒè¯?è¾“å…¥æ±‰å­—
	 * @param str éªŒè¯?å­—ç¬¦
	 * @return boolean
	 */
	public static boolean isChinese(String str) {
		return chinese_pattern.matcher(str).matches();
	}
	
	
	/**
	 * éªŒè¯?çœŸå®žå§“å??
	 * @param str  éªŒè¯?å­—ç¬¦
	 * @return
	 */
	public static boolean isRealName(String str){
		return realnem_pattern.matcher(str).matches();
	}
	
	
	/**
	 * éªŒè¯?æ˜¯å?¦æ˜¯æ?¡å½¢ç ?
	 * @param oneCode æ?¡å½¢ç ?
	 * @return boolean 
	 */
	public static boolean isOneCode(String oneCode) {
		return onecode_pattern.matcher(oneCode).matches();
	}


	/**
	 * æ˜¯å?¦å?«æœ‰ç‰¹æ®Šç¬¦å?·
	 *
	 * @param str å¾…éªŒè¯?çš„å­—ç¬¦ä¸²
	 * @return æ˜¯å?¦å?«æœ‰ç‰¹æ®Šç¬¦å?·
	 */
	public static boolean hasSpecialCharacter(String str) {
		String regEx = "[`~!@#$%^&*()+=|{}':;',\\[\\].<>?~ï¼?@#ï¿¥%â€¦â€¦&*ï¼ˆï¼‰â€”â€”+|{}ã€?ã€‘â€˜ï¼›ï¼šâ€?â€œâ€™ã€‚ï¼Œã€?ï¼Ÿ]";
		Pattern p = Pattern.compile(regEx);
		Matcher m = p.matcher(str);
		return m.find();
	}

	
	/**
	 * éªŒè¯?é‚®ç®±æ˜¯å?¦æ­£ç¡®
	 * @param email  é‚®ç®±åœ°å?€
	 * @return boolean   
	 */
	public static boolean isEmail(String email) {
		return email_pattern.matcher(email).matches();
	}
	
	
	
	/**
	 * éªŒè¯?æ‰‹æœºå?·æ˜¯å?¦æ­£ç¡®
	 * @param phone æ‰‹æœºå?·ç ?
	 * @return boolean   
	 */
	public static boolean isPhone(String phone) {
		 return phone_pattern.matcher(phone).matches();
	}

	
	/**
	 * éªŒè¯?åº§æœºå?·ç ?æ˜¯å?¦æ­£ç¡®
	 * @param plane åº§æœºå?·ç ?
	 * @return boolean   
	 */
	public static boolean isPlane(String plane) {
		 return plane_pattern.matcher(plane).matches();
	}
	
	
	
	
	/**
	 * éªŒè¯?é‚®æ”¿ç¼–ç ?æ˜¯å?¦æ­£ç¡®
	 * @param postalcode é‚®æ”¿ç¼–ç ?
	 * @return boolean   
	 */
	public static boolean isPostalCode(String postalcode) {
		return postalcode_pattern.matcher(postalcode).matches();
	}
	

	/**
	 * éªŒè¯?IPåœ°å?€æ˜¯å?¦æ­£ç¡®
	 * @param ipaddress IPåœ°å?€
	 * @return boolean   
	 */
	public static boolean isIpAddress(String ipaddress){
        return ipaddress_pattern.matcher(ipaddress).matches();
	}
	
	
	
	/**
	 * éªŒè¯?URLåœ°å?€æ˜¯å?¦æ­£ç¡®
	 * @param url åœ°å?€
	 * @return boolean   
	 */
	public static boolean isURL(String url){
		 return url_pattern.matcher(url).matches();
	}
	
	
	
    
    /**
     * éªŒè¯?æ˜¯å?¦æ˜¯æ­£æ•´æ•°
     * @param str éªŒè¯?å­—ç¬¦
     * @return boolean
     */
	public static boolean isInteger(String str){
		try{
			Integer.valueOf(str);
			return true;
		}catch(Exception e){
			return false;
		}
	}
	
	
	/**
	 * éªŒè¯?æ˜¯å?¦æ˜¯å°?æ•°
	 * @param paramString éªŒè¯?å­—ç¬¦
	 * @return boolean   
	 */
	public static boolean isPoint(String paramString){
		if(paramString.indexOf(".") > 0){
			if(paramString.substring(paramString.indexOf(".")).length() > 3){
				return false;
			}
		}
		return true;
	}
    
	
	/**
	 * éªŒè¯?æ˜¯å?¦é“¶è¡Œå?¡å?·
	 * @param bankNo é“¶è¡Œå?¡å?·
	 * @return
	 */
	public static boolean isBankNo(String bankNo){
		//æ›¿æ?¢ç©ºæ ¼
		bankNo = bankNo.replaceAll(" ", "");
		//é“¶è¡Œå?¡å?·å?¯ä¸º12ä½?æ•°å­—
		if(12 == bankNo.length()){
			return true;
		}
		//é“¶è¡Œå?¡å?·å?¯ä¸º16-19ä½?æ•°å­—
		return bankNo_pattern.matcher(bankNo).matches();
	}

	/**
	 * éªŒè¯?èº«ä»½è¯?å?·ç ?æ˜¯å?¦æ­£ç¡®
	 * @param IDCardNo èº«ä»½è¯?å?·ç ? 
	 * @return boolean   
	 */
	public static boolean isIDCard(String IDCardNo) {
		//è®°å½•é”™è¯¯ä¿¡æ?¯	
		String errmsg = ""; 
		String[] ValCodeArr = { "1", "0", "x", "9", "8", "7", "6", "5", "4", "3", "2" };
		String[] Wi = { "7", "9", "10", "5", "8", "4", "2", "1", "6", "3", "7","9", "10", "5", "8", "4", "2" };
		String Ai = "";
		
		//================ èº«ä»½è¯?å?·ç ?çš„é•¿åº¦ 15ä½?æˆ–18ä½? ================
		if (IDCardNo.length() != 15 && IDCardNo.length() != 18) {
			errmsg = "èº«ä»½è¯?å?·ç ?é•¿åº¦åº”è¯¥ä¸º15ä½?æˆ–18ä½?!";
			AppLogMessageMgr.e("AppValidationMgr-->>isIDCard", errmsg);
			return false;
		}
		
		//================ æ•°å­— é™¤æœ€å?Žä»¥ä¸ºéƒ½ä¸ºæ•°å­— ================
		if (IDCardNo.length() == 18) {
			Ai = IDCardNo.substring(0, 17);
		} else if (IDCardNo.length() == 15) {
			Ai = IDCardNo.substring(0, 6) + "19" + IDCardNo.substring(6, 15);
		}
		if (isNumber(Ai) == false) {
			errmsg = "èº«ä»½è¯?15ä½?å?·ç ?éƒ½åº”ä¸ºæ•°å­— ; 18ä½?å?·ç ?é™¤æœ€å?Žä¸€ä½?å¤–ï¼Œéƒ½åº”ä¸ºæ•°å­—";
			AppLogMessageMgr.e("AppValidationMgr-->>isIDCard", errmsg);
			return false;
		}
		
		//================ å‡ºç”Ÿå¹´æœˆæ˜¯å?¦æœ‰æ•ˆ ================
		//å¹´ä»½
		String strYear = Ai.substring(6, 10);
		//æœˆä»½
		String strMonth = Ai.substring(10, 12);
		//æ—¥
		String strDay = Ai.substring(12, 14);
		if (DateUtils.getDateIsTrue(strYear, strMonth, strDay) == false) {
			errmsg = "èº«ä»½è¯?ç”Ÿæ—¥æ— æ•ˆ";
			AppLogMessageMgr.e("AppValidationMgr-->>isIDCard", errmsg);
			return false;
		}
		GregorianCalendar gc = new GregorianCalendar();
		SimpleDateFormat s = new SimpleDateFormat("yyyy-MM-dd");
		try {
			if ((gc.get(Calendar.YEAR) - Integer.parseInt(strYear)) > 150 || (gc.getTime().getTime() - s.parse(strYear + "-" + strMonth + "-" + strDay).getTime()) < 0) {
				errmsg = "èº«ä»½è¯?ç”Ÿæ—¥ä¸?åœ¨æœ‰æ•ˆèŒƒå›´";
				AppLogMessageMgr.e("AppValidationMgr-->>isIDCard", errmsg);
				return false;
			}
		} catch (NumberFormatException e) {
			e.printStackTrace();
			errmsg = "èº«ä»½è¯?ç”Ÿæ—¥ä¸?åœ¨æœ‰æ•ˆèŒƒå›´";
			AppLogMessageMgr.e("AppValidationMgr-->>isIDCard", errmsg  + e.getMessage());
			return false;
		} catch (java.text.ParseException e1) {
			e1.printStackTrace();
			errmsg = "èº«ä»½è¯?ç”Ÿæ—¥ä¸?åœ¨æœ‰æ•ˆèŒƒå›´";
			AppLogMessageMgr.e("AppValidationMgr-->>isIDCard", errmsg + e1.getMessage());
			return false;
		}
		if (Integer.parseInt(strMonth) > 12 || Integer.parseInt(strMonth) == 0) {
			errmsg = "èº«ä»½è¯?æœˆä»½æ— æ•ˆ";
			AppLogMessageMgr.e("AppValidationMgr-->>isIDCard", errmsg);
			return false;
		}
		if (Integer.parseInt(strDay) > 31 || Integer.parseInt(strDay) == 0) {
			errmsg = "èº«ä»½è¯?æ—¥æœŸæ— æ•ˆ";
			AppLogMessageMgr.e("AppValidationMgr-->>isIDCard", errmsg);
			return false;
		}

		//================ åœ°åŒºç ?æ—¶å€™æœ‰æ•ˆ ================
		Hashtable hashtable = getAreaCodeAll();
		if (hashtable.get(Ai.substring(0, 2)) == null) {
			errmsg = "èº«ä»½è¯?åœ°åŒºç¼–ç ?é”™è¯¯";
			AppLogMessageMgr.e("AppValidationMgr-->>isIDCard", errmsg);
			return false;
		}

		//================ åˆ¤æ–­æœ€å?Žä¸€ä½?çš„å€¼ ================
		int TotalmulAiWi = 0;
		for (int i = 0; i < 17; i++) {
				TotalmulAiWi = TotalmulAiWi+ Integer.parseInt(String.valueOf(Ai.charAt(i))) * Integer.parseInt(Wi[i]);
		}
		int modValue = TotalmulAiWi % 11;
		String strVerifyCode = ValCodeArr[modValue];
		Ai = Ai + strVerifyCode;
		if (IDCardNo.length() == 18) {
			if (Ai.equals(IDCardNo) == false) {
				errmsg = "èº«ä»½è¯?æ— æ•ˆï¼Œä¸?æ˜¯å?ˆæ³•çš„èº«ä»½è¯?å?·ç ?";
				AppLogMessageMgr.e("AppValidationMgr-->>isIDCard", errmsg);
				return false;
			}
		} else {
				return true;
		}
				return true;
	}

	
	/**
	 * åˆ¤æ–­æ˜¯å?¦æœ‰ç‰¹æ®Šå­—ç¬¦
	 * @param str éªŒè¯?å­—ç¬¦
	 * @return boolean   
	 */
	public static boolean isPeculiarStr(String str){
		boolean flag = false;
		String regEx = "[^0-9a-zA-Z\u4e00-\u9fa5]+";
		if(str.length() != (str.replaceAll(regEx, "").length())) {
			flag = true;
		}
			return  flag;
	}
	
	
	/**
	 * åˆ¤æ–­æ˜¯å?¦ä¸ºç”¨æˆ·å??è´¦å?·(è§„åˆ™å¦‚ä¸‹ï¼šç”¨æˆ·å??ç”±ä¸‹åˆ’çº¿æˆ–å­—æ¯?å¼€å¤´ï¼Œç”±æ•°å­—ã€?å­—æ¯?ã€?ä¸‹åˆ’çº¿ã€?ç‚¹ã€?å‡?å?·ç»„æˆ?çš„4-32ä½?å­—ç¬¦)
	 * @param username ç”¨æˆ·å?? 
	 * @return boolean   
	 */
	public static boolean isUserName(String username) {
		return username_pattern.matcher(username).matches();
	}

	/**
	 * èŽ·å?–å­—ç¬¦ä¸²ä¸­æ–‡å­—ç¬¦çš„é•¿åº¦ï¼ˆæ¯?ä¸ªä¸­æ–‡ç®—2ä¸ªå­—ç¬¦ï¼‰.
	 *
	 * @param str
	 *            æŒ‡å®šçš„å­—ç¬¦ä¸²
	 * @return ä¸­æ–‡å­—ç¬¦çš„é•¿åº¦
	 */
	public static int chineseLength(String str) {
		int valueLength = 0;
		String chinese = "[\u0391-\uFFE5]";
		/* èŽ·å?–å­—æ®µå€¼çš„é•¿åº¦ï¼Œå¦‚æžœå?«ä¸­æ–‡å­—ç¬¦ï¼Œåˆ™æ¯?ä¸ªä¸­æ–‡å­—ç¬¦é•¿åº¦ä¸º2ï¼Œå?¦åˆ™ä¸º1 */
		if (!isEmpty(str)) {
			for (int i = 0; i < str.length(); i++) {
				/* èŽ·å?–ä¸€ä¸ªå­—ç¬¦ */
				String temp = str.substring(i, i + 1);
				/* åˆ¤æ–­æ˜¯å?¦ä¸ºä¸­æ–‡å­—ç¬¦ */
				if (temp.matches(chinese)) {
					valueLength += 2;
				}
			}
		}
		return valueLength;
	}

    /**
     * æ??è¿°ï¼šèŽ·å?–å­—ç¬¦ä¸²çš„é•¿åº¦.
     *
     * @param str
     *            æŒ‡å®šçš„å­—ç¬¦ä¸²
     * @return å­—ç¬¦ä¸²çš„é•¿åº¦ï¼ˆä¸­æ–‡å­—ç¬¦è®¡2ä¸ªï¼‰
     */
    public static int strLength(String str) {
        int valueLength = 0;
        String chinese = "[\u0391-\uFFE5]";
        if (!isEmpty(str)) {
            // èŽ·å?–å­—æ®µå€¼çš„é•¿åº¦ï¼Œå¦‚æžœå?«ä¸­æ–‡å­—ç¬¦ï¼Œåˆ™æ¯?ä¸ªä¸­æ–‡å­—ç¬¦é•¿åº¦ä¸º2ï¼Œå?¦åˆ™ä¸º1
            for (int i = 0; i < str.length(); i++) {
                // èŽ·å?–ä¸€ä¸ªå­—ç¬¦
                String temp = str.substring(i, i + 1);
                // åˆ¤æ–­æ˜¯å?¦ä¸ºä¸­æ–‡å­—ç¬¦
                if (temp.matches(chinese)) {
                    // ä¸­æ–‡å­—ç¬¦é•¿åº¦ä¸º2
                    valueLength += 2;
                } else {
                    // å…¶ä»–å­—ç¬¦é•¿åº¦ä¸º1
                    valueLength += 1;
                }
            }
        }
        return valueLength;
    }

    /**
     * æ??è¿°ï¼šèŽ·å?–æŒ‡å®šé•¿åº¦çš„å­—ç¬¦æ‰€åœ¨ä½?ç½®.
     *
     * @param str
     *            æŒ‡å®šçš„å­—ç¬¦ä¸²
     * @param maxL
     *            è¦?å?–åˆ°çš„é•¿åº¦ï¼ˆå­—ç¬¦é•¿åº¦ï¼Œä¸­æ–‡å­—ç¬¦è®¡2ä¸ªï¼‰
     * @return å­—ç¬¦çš„æ‰€åœ¨ä½?ç½®
     */
    public static int subStringLength(String str, int maxL) {
        int currentIndex = 0;
        int valueLength = 0;
        String chinese = "[\u0391-\uFFE5]";
        // èŽ·å?–å­—æ®µå€¼çš„é•¿åº¦ï¼Œå¦‚æžœå?«ä¸­æ–‡å­—ç¬¦ï¼Œåˆ™æ¯?ä¸ªä¸­æ–‡å­—ç¬¦é•¿åº¦ä¸º2ï¼Œå?¦åˆ™ä¸º1
        for (int i = 0; i < str.length(); i++) {
            // èŽ·å?–ä¸€ä¸ªå­—ç¬¦
            String temp = str.substring(i, i + 1);
            // åˆ¤æ–­æ˜¯å?¦ä¸ºä¸­æ–‡å­—ç¬¦
            if (temp.matches(chinese)) {
                // ä¸­æ–‡å­—ç¬¦é•¿åº¦ä¸º2
                valueLength += 2;
            } else {
                // å…¶ä»–å­—ç¬¦é•¿åº¦ä¸º1
                valueLength += 1;
            }
            if (valueLength >= maxL) {
                currentIndex = i;
                break;
            }
        }
        return currentIndex;
    }

    /**
     * æ??è¿°ï¼šæ˜¯å?¦å?ªæ˜¯å­—æ¯?å’Œæ•°å­—.
     *
     * @param str
     *            æŒ‡å®šçš„å­—ç¬¦ä¸²
     * @return æ˜¯å?¦å?ªæ˜¯å­—æ¯?å’Œæ•°å­—:æ˜¯ä¸ºtrueï¼Œå?¦åˆ™false
     */
    public static Boolean isNumberLetter(String str) {
        Boolean isNoLetter = false;
        String expr = "^[A-Za-z0-9]+$";
        if (str.matches(expr)) {
            isNoLetter = true;
        }
        return isNoLetter;
    }

    /**
     * æ??è¿°ï¼šæ˜¯å?¦åŒ…å?«ä¸­æ–‡.
     *
     * @param str
     *            æŒ‡å®šçš„å­—ç¬¦ä¸²
     * @return æ˜¯å?¦åŒ…å?«ä¸­æ–‡:æ˜¯ä¸ºtrueï¼Œå?¦åˆ™false
     */
    public static Boolean isContainChinese(String str) {
        Boolean isChinese = false;
        String chinese = "[\u0391-\uFFE5]";
        if (!isEmpty(str)) {
            // èŽ·å?–å­—æ®µå€¼çš„é•¿åº¦ï¼Œå¦‚æžœå?«ä¸­æ–‡å­—ç¬¦ï¼Œåˆ™æ¯?ä¸ªä¸­æ–‡å­—ç¬¦é•¿åº¦ä¸º2ï¼Œå?¦åˆ™ä¸º1
            for (int i = 0; i < str.length(); i++) {
                // èŽ·å?–ä¸€ä¸ªå­—ç¬¦
                String temp = str.substring(i, i + 1);
                // åˆ¤æ–­æ˜¯å?¦ä¸ºä¸­æ–‡å­—ç¬¦
                if (temp.matches(chinese)) {
                    isChinese = true;
                } else {

                }
            }
        }
        return isChinese;
    }

    /**
     * æ??è¿°ï¼šä»Žè¾“å…¥æµ?ä¸­èŽ·å¾—String.
     *
     * @param is
     *            è¾“å…¥æµ?
     * @return èŽ·å¾—çš„String
     */
    public static String convertStreamToString(InputStream is) {
        BufferedReader reader = new BufferedReader(new InputStreamReader(is));
        StringBuilder sb = new StringBuilder();
        String line = null;
        try {
            while ((line = reader.readLine()) != null) {
                sb.append(line + "\n");
            }

            // æœ€å?Žä¸€ä¸ª\nåˆ é™¤
            if (sb.indexOf("\n") != -1
                && sb.lastIndexOf("\n") == sb.length() - 1) {
                sb.delete(sb.lastIndexOf("\n"), sb.lastIndexOf("\n") + 1);
            }

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                is.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return sb.toString();
    }

    /**
     * æ??è¿°ï¼šæˆªå?–å­—ç¬¦ä¸²åˆ°æŒ‡å®šå­—èŠ‚é•¿åº¦.
	 *
     * @param str
	 *            the str
	 * @param length
	 *            æŒ‡å®šå­—èŠ‚é•¿åº¦
	 * @return æˆªå?–å?Žçš„å­—ç¬¦ä¸²
	 */
    public static String cutString(String str, int length) {
        return cutString(str, length, "");
    }

    /**
     * æ??è¿°ï¼šæˆªå?–å­—ç¬¦ä¸²åˆ°æŒ‡å®šå­—èŠ‚é•¿åº¦.
     *
     * @param str
     *            æ–‡æœ¬
     * @param length
     *            å­—èŠ‚é•¿åº¦
     * @param dot
     *            çœ?ç•¥ç¬¦å?·
     * @return æˆªå?–å?Žçš„å­—ç¬¦ä¸²
     */
    public static String cutString(String str, int length, String dot) {
        int strBLen = strlen(str, "GBK");
        if (strBLen <= length) {
            return str;
        }
        int temp = 0;
        StringBuffer sb = new StringBuffer(length);
        char[] ch = str.toCharArray();
        for (char c : ch) {
            sb.append(c);
            if (c > 256) {
                temp += 2;
            } else {
                temp += 1;
            }
            if (temp >= length) {
                if (dot != null) {
                    sb.append(dot);
                }
                break;
            }
        }
        return sb.toString();
    }

    /**
     * æ??è¿°ï¼šæˆªå?–å­—ç¬¦ä¸²ä»Žç¬¬ä¸€ä¸ªæŒ‡å®šå­—ç¬¦.
     *
     * @param str1
     *            åŽŸæ–‡æœ¬
     * @param str2
     *            æŒ‡å®šå­—ç¬¦
     * @param offset
     *            å??ç§»çš„ç´¢å¼•
     * @return æˆªå?–å?Žçš„å­—ç¬¦ä¸²
     */
    public static String cutStringFromChar(String str1, String str2, int offset) {
        if (isEmpty(str1)) {
            return "";
        }
        int start = str1.indexOf(str2);
        if (start != -1) {
            if (str1.length() > start + offset) {
                return str1.substring(start + offset);
            }
        }
        return "";
    }

    /**
     * æ??è¿°ï¼šèŽ·å?–å­—èŠ‚é•¿åº¦.
     *
     * @param str
     *            æ–‡æœ¬
     * @param charset
     *            å­—ç¬¦é›†ï¼ˆGBKï¼‰
     * @return the int
     */
    public static int strlen(String str, String charset) {
        if (str == null || str.length() == 0) {
            return 0;
        }
        int length = 0;
        try {
            length = str.getBytes(charset).length;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return length;
    }

    /**
     * èŽ·å?–å¤§å°?çš„æ??è¿°.
     *
     * @param size
     *            å­—èŠ‚ä¸ªæ•°
     * @return å¤§å°?çš„æ??è¿°
     */
    public static String getSizeDesc(long size) {
        String suffix = "B";
        if (size >= 1024) {
            suffix = "K";
            size = size >> 10;
            if (size >= 1024) {
                suffix = "M";
                // size /= 1024;
                size = size >> 10;
                if (size >= 1024) {
                    suffix = "G";
                    size = size >> 10;
                    // size /= 1024;
                }
            }
        }
        return size + suffix;
    }

    /**
     * æ??è¿°ï¼šipåœ°å?€è½¬æ?¢ä¸º10è¿›åˆ¶æ•°.
     *
     * @param ip
     *            the ip
     * @return the long
     */
    public static long ip2int(String ip) {
        ip = ip.replace(".", ",");
        String[] items = ip.split(",");
        return Long.valueOf(items[0]) << 24 | Long.valueOf(items[1]) << 16
            | Long.valueOf(items[2]) << 8 | Long.valueOf(items[3]);
    }

    /**
     * èŽ·å?–UUID
     *
     * @return 32UUIDå°?å†™å­—ç¬¦ä¸²
     */
    public static String gainUUID() {
        String strUUID = UUID.randomUUID().toString();
        strUUID = strUUID.replaceAll("-", "").toLowerCase();
        return strUUID;
    }


	/**
	 * æ‰‹æœºå?·ç ?ï¼Œä¸­é—´4ä½?æ˜Ÿå?·æ›¿æ?¢
	 *
	 * @param phone æ‰‹æœºå?·
	 * @return æ˜Ÿå?·æ›¿æ?¢çš„æ‰‹æœºå?·
	 */
	public static String phoneNoHide(String phone) {
		// æ‹¬å?·è¡¨ç¤ºç»„ï¼Œè¢«æ›¿æ?¢çš„éƒ¨åˆ†$nè¡¨ç¤ºç¬¬nç»„çš„å†…å®¹
		// æ­£åˆ™è¡¨è¾¾å¼?ä¸­ï¼Œæ›¿æ?¢å­—ç¬¦ä¸²ï¼Œæ‹¬å?·çš„æ„?æ€?æ˜¯åˆ†ç»„ï¼Œåœ¨replace()æ–¹æ³•ä¸­ï¼Œ
		// å?‚æ•°äºŒä¸­å?¯ä»¥ä½¿ç”¨$n(nä¸ºæ•°å­—)æ?¥ä¾?æ¬¡å¼•ç”¨æ¨¡å¼?ä¸²ä¸­ç”¨æ‹¬å?·å®šä¹‰çš„å­—ä¸²ã€‚
		// "(\d{3})\d{4}(\d{4})", "$1****$2"çš„è¿™ä¸ªæ„?æ€?å°±æ˜¯ç”¨æ‹¬å?·ï¼Œ
		// åˆ†ä¸º(å‰?3ä¸ªæ•°å­—)ä¸­é—´4ä¸ªæ•°å­—(æœ€å?Ž4ä¸ªæ•°å­—)æ›¿æ?¢ä¸º(ç¬¬ä¸€ç»„æ•°å€¼ï¼Œä¿?æŒ?ä¸?å?˜$1)(ä¸­é—´ä¸º*)(ç¬¬äºŒç»„æ•°å€¼ï¼Œä¿?æŒ?ä¸?å?˜$2)
		return phone.replaceAll("(\\d{3})\\d{4}(\\d{4})", "$1****$2");
	}

	/**
	 * é“¶è¡Œå?¡å?·ï¼Œä¿?ç•™æœ€å?Ž4ä½?ï¼Œå…¶ä»–æ˜Ÿå?·æ›¿æ?¢
	 *
	 * @param cardId å?¡å?·
	 * @return æ˜Ÿå?·æ›¿æ?¢çš„é“¶è¡Œå?¡å?·
	 */
	public static String cardIdHide(String cardId) {
		return cardId.replaceAll("\\d{15}(\\d{3})", "**** **** **** **** $1");
	}

	/**
	 * èº«ä»½è¯?å?·ï¼Œä¸­é—´10ä½?æ˜Ÿå?·æ›¿æ?¢
	 *
	 * @param id èº«ä»½è¯?å?·
	 * @return æ˜Ÿå?·æ›¿æ?¢çš„èº«ä»½è¯?å?·
	 */
	public static String idHide(String id) {
		return id.replaceAll("(\\d{4})\\d{10}(\\d{4})", "$1** **** ****$2");
	}

	/**
	 * æ˜¯å?¦ä¸ºè½¦ç‰Œå?·ï¼ˆæ²ªA88888ï¼‰
	 *
	 * @param vehicleNo è½¦ç‰Œå?·
	 * @return æ˜¯å?¦ä¸ºè½¦ç‰Œå?·
	 */

	public static boolean checkVehicleNo(String vehicleNo) {
		Pattern pattern = Pattern.compile("^[\u4e00-\u9fa5]{1}[a-zA-Z]{1}[a-zA-Z_0-9]{5}$");
		return pattern.matcher(vehicleNo).find();

	}

//	/**
//	 * åŒ¹é…?ä¸­å›½é‚®æ”¿ç¼–ç ?
//	 *
//	 * @param postcode é‚®æ”¿ç¼–ç ?
//	 * @return éªŒè¯?æˆ?åŠŸè¿”å›žtrueï¼ŒéªŒè¯?å¤±è´¥è¿”å›žfalse
//	 */
//	public static boolean checkPostcode(String postcode) {
//		String regex = "[1-9]\\d{5}";
//		return Pattern.matches(regex, postcode);
//	}


	/**
	 * åˆ¤æ–­å­—ç¬¦ä¸²æ˜¯å?¦ä¸ºè¿žç»­æ•°å­— 45678901ç­‰
	 *
	 * @param str å¾…éªŒè¯?çš„å­—ç¬¦ä¸²
	 * @return æ˜¯å?¦ä¸ºè¿žç»­æ•°å­—
	 */
	public static boolean isContinuousNum(String str) {
		if (TextUtils.isEmpty(str))
			return false;
		if (!isNumber(str))
			return true;
		int len = str.length();
		for (int i = 0; i < len - 1; i++) {
			char curChar = str.charAt(i);
			char verifyChar = (char) (curChar + 1);
			if (curChar == '9')
				verifyChar = '0';
			char nextChar = str.charAt(i + 1);
			if (nextChar != verifyChar) {
				return false;
			}
		}
		return true;
	}



	/**
	 * æ˜¯å?¦æ˜¯çº¯å­—æ¯?
	 *
	 * @param str å¾…éªŒè¯?çš„å­—ç¬¦ä¸²
	 * @return æ˜¯å?¦æ˜¯çº¯å­—æ¯?
	 */
	public static boolean isAlphaBetaString(String str) {
		if (TextUtils.isEmpty(str)) {
			return false;
		}

		Pattern p = Pattern.compile("^[a-zA-Z]+$");// ä»Žå¼€å¤´åˆ°ç»“å°¾å¿…é¡»å…¨éƒ¨ä¸ºå­—æ¯?æˆ–è€…æ•°å­—
		Matcher m = p.matcher(str);

		return m.find();
	}

	/**
	 * åˆ¤æ–­å­—ç¬¦ä¸²æ˜¯å?¦ä¸ºè¿žç»­å­—æ¯? xyZaBcdç­‰
	 *
	 * @param str å¾…éªŒè¯?çš„å­—ç¬¦ä¸²
	 * @return æ˜¯å?¦ä¸ºè¿žç»­å­—æ¯?
	 */
	public static boolean isContinuousWord(String str) {
		if (TextUtils.isEmpty(str))
			return false;
		if (!isAlphaBetaString(str))
			return true;
		int len = str.length();
		String local = str.toLowerCase();
		for (int i = 0; i < len - 1; i++) {
			char curChar = local.charAt(i);
			char verifyChar = (char) (curChar + 1);
			if (curChar == 'z')
				verifyChar = 'a';
			char nextChar = local.charAt(i + 1);
			if (nextChar != verifyChar) {
				return false;
			}
		}
		return true;
	}

	/**
	 * æ˜¯å?¦æ˜¯æ—¥æœŸ
	 * 20120506 å…±å…«ä½?ï¼Œå‰?å››ä½?-å¹´ï¼Œä¸­é—´ä¸¤ä½?-æœˆï¼Œæœ€å?Žä¸¤ä½?-æ—¥
	 *
	 * @param date    å¾…éªŒè¯?çš„å­—ç¬¦ä¸²
	 * @param yearlen yearlength
	 * @return æ˜¯å?¦æ˜¯çœŸå®žçš„æ—¥æœŸ
	 */
	public static boolean isRealDate(String date, int yearlen) {
		int len = 4 + yearlen;
		if (date == null || date.length() != len)
			return false;

		if (!date.matches("[0-9]+"))
			return false;

		int year = Integer.parseInt(date.substring(0, yearlen));
		int month = Integer.parseInt(date.substring(yearlen, yearlen + 2));
		int day = Integer.parseInt(date.substring(yearlen + 2, yearlen + 4));

		if (year <= 0)
			return false;
		if (month <= 0 || month > 12)
			return false;
		if (day <= 0 || day > 31)
			return false;

		switch (month) {
			case 4:
			case 6:
			case 9:
			case 11:
				return day > 30 ? false : true;
			case 2:
				if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0)
					return day > 29 ? false : true;
				return day > 28 ? false : true;
			default:
				return true;
		}
	}

}
	
	
	
	
	
