/*
 * <summary></summary>
 * <author>He Han</author>
 * <email>hankcs.cn@gmail.com</email>
 * <create-date>2014/8/22 15:58</create-date>
 *
 * <copyright file="TextRank.java" company="ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸">
 * Copyright (c) 2003-2014, ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸. All Right Reserved, http://www.linrunsoft.com/
 * This source is subject to the LinrunSpace License. Please contact ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸ to get more information.
 * </copyright>
 */
package com.hankcs.hanlp.summary;


import com.hankcs.hanlp.dictionary.stopword.CoreStopWordDictionary;
import com.hankcs.hanlp.seg.common.Term;
import com.hankcs.hanlp.tokenizer.StandardTokenizer;
import com.hankcs.hanlp.utility.TextUtility;

import java.util.*;

/**
 * TextRank è‡ªåŠ¨æ‘˜è¦?
 *
 * @author hankcs
 */
public class TextRankSentence
{
    /**
     * é˜»å°¼ç³»æ•°ï¼ˆï¼¤ï½?ï½?ï½?ï½‰ï½Žï½‡ï¼¦ï½?ï½ƒî€‘ï½”ï½?ï½’ï¼‰ï¼Œä¸€èˆ¬å?–å€¼ä¸º0.85
     */
    final static double d = 0.85;
    /**
     * æœ€å¤§è¿­ä»£æ¬¡æ•°
     */
    final static int max_iter = 200;
    final static double min_diff = 0.001;
    
    final static String default_sentence_separator = "[ï¼Œ,ã€‚:ï¼šâ€œâ€?ï¼Ÿ?ï¼?!ï¼›;]";
    /**
     * æ–‡æ¡£å?¥å­?çš„ä¸ªæ•°
     */
    int D;
    /**
     * æ‹†åˆ†ä¸º[å?¥å­?[å?•è¯?]]å½¢å¼?çš„æ–‡æ¡£
     */
    List<List<String>> docs;
    /**
     * æŽ’åº?å?Žçš„æœ€ç»ˆç»“æžœ score <-> index
     */
    TreeMap<Double, Integer> top;

    /**
     * å?¥å­?å’Œå…¶ä»–å?¥å­?çš„ç›¸å…³ç¨‹åº¦
     */
    double[][] weight;
    /**
     * è¯¥å?¥å­?å’Œå…¶ä»–å?¥å­?ç›¸å…³ç¨‹åº¦ä¹‹å’Œ
     */
    double[] weight_sum;
    /**
     * è¿­ä»£ä¹‹å?Žæ”¶æ•›çš„æ?ƒé‡?
     */
    double[] vertex;

    /**
     * BM25ç›¸ä¼¼åº¦
     */
    BM25 bm25;

    public TextRankSentence(List<List<String>> docs)
    {
        this.docs = docs;
        bm25 = new BM25(docs);
        D = docs.size();
        weight = new double[D][D];
        weight_sum = new double[D];
        vertex = new double[D];
        top = new TreeMap<Double, Integer>(Collections.reverseOrder());
        solve();
    }

    private void solve()
    {
        int cnt = 0;
        for (List<String> sentence : docs)
        {
            double[] scores = bm25.simAll(sentence);
//            System.out.println(Arrays.toString(scores));
            weight[cnt] = scores;
            weight_sum[cnt] = sum(scores) - scores[cnt]; // å‡?æŽ‰è‡ªå·±ï¼Œè‡ªå·±è·Ÿè‡ªå·±è‚¯å®šæœ€ç›¸ä¼¼
            vertex[cnt] = 1.0;
            ++cnt;
        }
        for (int _ = 0; _ < max_iter; ++_)
        {
            double[] m = new double[D];
            double max_diff = 0;
            for (int i = 0; i < D; ++i)
            {
                m[i] = 1 - d;
                for (int j = 0; j < D; ++j)
                {
                    if (j == i || weight_sum[j] == 0) continue;
                    m[i] += (d * weight[j][i] / weight_sum[j] * vertex[j]);
                }
                double diff = Math.abs(m[i] - vertex[i]);
                if (diff > max_diff)
                {
                    max_diff = diff;
                }
            }
            vertex = m;
            if (max_diff <= min_diff) break;
        }
        // æˆ‘ä»¬æ?¥æŽ’ä¸ªåº?å?§
        for (int i = 0; i < D; ++i)
        {
            top.put(vertex[i], i);
        }
    }

    /**
     * èŽ·å?–å‰?å‡ ä¸ªå…³é”®å?¥å­?
     *
     * @param size è¦?å‡ ä¸ª
     * @return å…³é”®å?¥å­?çš„ä¸‹æ ‡
     */
    public int[] getTopSentence(int size)
    {
        Collection<Integer> values = top.values();
        size = Math.min(size, values.size());
        int[] indexArray = new int[size];
        Iterator<Integer> it = values.iterator();
        for (int i = 0; i < size; ++i)
        {
            indexArray[i] = it.next();
        }
        return indexArray;
    }

    /**
     * ç®€å?•çš„æ±‚å’Œ
     *
     * @param array
     * @return
     */
    private static double sum(double[] array)
    {
        double total = 0;
        for (double v : array)
        {
            total += v;
        }
        return total;
    }

    /**
     * å°†æ–‡ç« åˆ†å‰²ä¸ºå?¥å­?
     * é»˜è®¤å?¥å­?åˆ†éš”ç¬¦ä¸ºï¼š[ï¼Œ,ã€‚:ï¼šâ€œâ€?ï¼Ÿ?ï¼?!ï¼›;]
     *
     * @param document
     * @return
     */
    static List<String> splitSentence(String document)
    {
    	return splitSentence(document, default_sentence_separator);
    }

    /**
     * å°†æ–‡ç« åˆ†å‰²ä¸ºå?¥å­?
     *	 
     * @param document å¾…åˆ†å‰²çš„æ–‡æ¡£
     * @param sentence_separator å?¥å­?åˆ†éš”ç¬¦ï¼Œæ­£åˆ™è¡¨è¾¾å¼?ï¼Œå¦‚ï¼š   [ã€‚:ï¼Ÿ?ï¼?!ï¼›;]
     * @return
     */
    static List<String> splitSentence(String document, String sentence_separator)
    {
        List<String> sentences = new ArrayList<String>();
        for (String line : document.split("[\r\n]"))
        {
            line = line.trim();
            if (line.length() == 0) continue;
            for (String sent : line.split(sentence_separator))		// [ï¼Œ,ã€‚:ï¼šâ€œâ€?ï¼Ÿ?ï¼?!ï¼›;]
            {
                sent = sent.trim();
                if (sent.length() == 0) continue;
                sentences.add(sent);
            }
        }

        return sentences;
    }

    /**
     * å°†å?¥å­?åˆ—è¡¨è½¬åŒ–ä¸ºæ–‡æ¡£
     *
     * @param sentenceList
     * @return
     */
    private static List<List<String>> convertSentenceListToDocument(List<String> sentenceList)
    {
        List<List<String>> docs = new ArrayList<List<String>>(sentenceList.size());
        for (String sentence : sentenceList)
        {
            List<Term> termList = StandardTokenizer.segment(sentence.toCharArray());
            List<String> wordList = new LinkedList<String>();
            for (Term term : termList)
            {
                if (CoreStopWordDictionary.shouldInclude(term))
                {
                    wordList.add(term.word);
                }
            }
            docs.add(wordList);
        }
        return docs;
    }

    /**
     * ä¸€å?¥è¯?è°ƒç”¨æŽ¥å?£
     *
     * @param document ç›®æ ‡æ–‡æ¡£
     * @param size     éœ€è¦?çš„å…³é”®å?¥çš„ä¸ªæ•°
     * @return å…³é”®å?¥åˆ—è¡¨
     */
    public static List<String> getTopSentenceList(String document, int size)
    {
    	return getTopSentenceList(document, size, default_sentence_separator);
    }

    /**
     * ä¸€å?¥è¯?è°ƒç”¨æŽ¥å?£
     *
     * @param document ç›®æ ‡æ–‡æ¡£
     * @param size     éœ€è¦?çš„å…³é”®å?¥çš„ä¸ªæ•°
     * @param sentence_separator å?¥å­?åˆ†éš”ç¬¦ï¼Œæ­£åˆ™æ ¼å¼?ï¼Œ å¦‚ï¼š[ã€‚ï¼Ÿ?ï¼?!ï¼›;]
     * @return å…³é”®å?¥åˆ—è¡¨
     */
    public static List<String> getTopSentenceList(String document, int size, String sentence_separator)
    {
        List<String> sentenceList = splitSentence(document, sentence_separator);
        List<List<String>> docs = convertSentenceListToDocument(sentenceList);
        TextRankSentence textRank = new TextRankSentence(docs);
        int[] topSentence = textRank.getTopSentence(size);
        List<String> resultList = new LinkedList<String>();
        for (int i : topSentence)
        {
            resultList.add(sentenceList.get(i));
        }
        return resultList;
    }

    /**
     * ä¸€å?¥è¯?è°ƒç”¨æŽ¥å?£
     *
     * @param document   ç›®æ ‡æ–‡æ¡£
     * @param max_length éœ€è¦?æ‘˜è¦?çš„é•¿åº¦
     * @return æ‘˜è¦?æ–‡æœ¬
     */
    public static String getSummary(String document, int max_length)
    {
    	return getSummary(document, max_length, default_sentence_separator);
    }

    /**
     * ä¸€å?¥è¯?è°ƒç”¨æŽ¥å?£
     *
     * @param document   ç›®æ ‡æ–‡æ¡£
     * @param max_length éœ€è¦?æ‘˜è¦?çš„é•¿åº¦
     * @param sentence_separator å?¥å­?åˆ†éš”ç¬¦ï¼Œæ­£åˆ™æ ¼å¼?ï¼Œ å¦‚ï¼š[ã€‚ï¼Ÿ?ï¼?!ï¼›;]
     * @return æ‘˜è¦?æ–‡æœ¬
     */
    public static String getSummary(String document, int max_length, String sentence_separator)
    {
        List<String> sentenceList = splitSentence(document, sentence_separator);

        int sentence_count = sentenceList.size();
        int document_length = document.length();
        int sentence_length_avg = document_length / sentence_count;
        int size = max_length / sentence_length_avg + 1;
        List<List<String>> docs = convertSentenceListToDocument(sentenceList);
        TextRankSentence textRank = new TextRankSentence(docs);
        int[] topSentence = textRank.getTopSentence(size);
        List<String> resultList = new LinkedList<String>();
        for (int i : topSentence)
        {
            resultList.add(sentenceList.get(i));
        }

        resultList = permutation(resultList, sentenceList);
        resultList = pick_sentences(resultList, max_length);
        return TextUtility.join("ã€‚", resultList);
    }

    private static List<String> permutation(List<String> resultList, final List<String> sentenceList)
    {
        Collections.sort(resultList, new Comparator<String>() {
            @Override
            public int compare(String o1, String o2) {
                Integer num1 = sentenceList.indexOf(o1);
                Integer num2 = sentenceList.indexOf(o2);
                return num1.compareTo(num2);
            }
        });
        return resultList;
    }

    private static List<String> pick_sentences(List<String> resultList, int max_length)
    {
        List<String> summary = new ArrayList<String>();
        int count = 0;
        for (String result : resultList) {
            if (count + result.length() <= max_length) {
                summary.add(result);
                count += result.length();
            }
        }
        return summary;
    }

}
