package jetbrains.mps.tool.builder;

/*Generated by MPS */

import jetbrains.mps.tool.environment.Environment;
import jetbrains.mps.compiler.JavaCompilerOptions;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.make.MPSCompilationResult;
import jetbrains.mps.smodel.ModelAccessHelper;
import jetbrains.mps.util.Computable;
import jetbrains.mps.make.ModuleMaker;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.classloading.ClassLoaderManager;

public final class WorkerHelper {
  private Environment myEnv;

  public WorkerHelper(Environment env) {
    myEnv = env;
  }

  public void make(final JavaCompilerOptions opts) {
    // FIXME why do I care to make these modules? 
    final MPSModuleRepository repo = myEnv.getPlatform().findComponent(MPSModuleRepository.class);
    MPSCompilationResult mpsCompilationResult = new ModelAccessHelper(repo).runReadAction(new Computable<MPSCompilationResult>() {
      public MPSCompilationResult compute() {
        ModuleMaker maker = new ModuleMaker();
        return maker.make(IterableUtil.asCollection(repo.getModules()), new EmptyProgressMonitor(), opts);
      }
    });
    reload(mpsCompilationResult);
  }

  protected void reload(final MPSCompilationResult mpsCompilationResult) {
    if (mpsCompilationResult.isReloadingNeeded()) {
      myEnv.getPlatform().findComponent(MPSModuleRepository.class).getModelAccess().runWriteAction(new Runnable() {
        public void run() {
          ClassLoaderManager.getInstance().reloadModules(mpsCompilationResult.getChangedModules());
        }
      });
    }
  }
}
