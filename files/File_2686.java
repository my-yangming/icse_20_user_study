/*
 * <summary></summary>
 * <author>He Han</author>
 * <email>hankcs.cn@gmail.com</email>
 * <create-date>2014/11/20 12:38</create-date>
 *
 * <copyright file="CoNLLWord.java" company="ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸">
 * Copyright (c) 2003-2014, ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸. All Right Reserved, http://www.linrunsoft.com/
 * This source is subject to the LinrunSpace License. Please contact ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸ to get more information.
 * </copyright>
 */
package com.hankcs.hanlp.corpus.dependency.CoNll;

/**
 * @author hankcs
 */
public class CoNLLWord
{
    /**
     * ID	å½“å‰?è¯?åœ¨å?¥å­?ä¸­çš„åº?å?·ï¼Œï¼‘å¼€å§‹.
     */
    public int ID;
    /**
     * å½“å‰?è¯?è¯­ï¼ˆæˆ–æ ‡ç‚¹ï¼‰çš„åŽŸåž‹æˆ–è¯?å¹²ï¼Œåœ¨ä¸­æ–‡ä¸­ï¼Œæ­¤åˆ—ä¸ŽFORMç›¸å?Œ
     */
    public String LEMMA;
    /**
     * å½“å‰?è¯?è¯­çš„è¯?æ€§ï¼ˆç²—ç²’åº¦ï¼‰
     */
    public String CPOSTAG;
    /**
     * å½“å‰?è¯?è¯­çš„è¯?æ€§ï¼ˆç»†ç²’åº¦ï¼‰
     */
    public String POSTAG;
    /**
     * å½“å‰?è¯?è¯­çš„ä¸­å¿ƒè¯?
     */
    public CoNLLWord HEAD;
    /**
     * å½“å‰?è¯?è¯­ä¸Žä¸­å¿ƒè¯?çš„ä¾?å­˜å…³ç³»
     */
    public String DEPREL;

    /**
     * ç­‰æ•ˆå­—ç¬¦ä¸²
     */
    public String NAME;

    /**
     * æ ¹èŠ‚ç‚¹
     */
    public static final CoNLLWord ROOT = new CoNLLWord(0, "##æ ¸å¿ƒ##", "ROOT", "root");
    /**
     * ç©ºç™½èŠ‚ç‚¹ï¼Œç”¨äºŽæ??è¿°ä¸‹æ ‡è¶…å‡ºwordæ•°ç»„çš„è¯?è¯­
     */
    public static final CoNLLWord NULL = new CoNLLWord(-1, "##ç©ºç™½##", "NULL", "null");

    /**
     *
     * @param ID å½“å‰?è¯?åœ¨å?¥å­?ä¸­çš„åº?å?·ï¼Œï¼‘å¼€å§‹.
     * @param LEMMA å½“å‰?è¯?è¯­ï¼ˆæˆ–æ ‡ç‚¹ï¼‰çš„åŽŸåž‹æˆ–è¯?å¹²ï¼Œåœ¨ä¸­æ–‡ä¸­ï¼Œæ­¤åˆ—ä¸ŽFORMç›¸å?Œ
     * @param POSTAG å½“å‰?è¯?è¯­çš„è¯?æ€§ï¼ˆç»†ç²’åº¦ï¼‰
     */
    public CoNLLWord(int ID, String LEMMA, String POSTAG)
    {
        this.ID = ID;
        this.LEMMA = LEMMA;
        this.CPOSTAG = POSTAG.substring(0, 1);   // å?–é¦–å­—æ¯?ä½œä¸ºç²—ç²’åº¦è¯?æ€§
        this.POSTAG = POSTAG;
        compile();
    }

    /**
     *
     * @param ID å½“å‰?è¯?åœ¨å?¥å­?ä¸­çš„åº?å?·ï¼Œï¼‘å¼€å§‹.
     * @param LEMMA å½“å‰?è¯?è¯­ï¼ˆæˆ–æ ‡ç‚¹ï¼‰çš„åŽŸåž‹æˆ–è¯?å¹²ï¼Œåœ¨ä¸­æ–‡ä¸­ï¼Œæ­¤åˆ—ä¸ŽFORMç›¸å?Œ
     * @param CPOSTAG å½“å‰?è¯?è¯­çš„è¯?æ€§ï¼ˆç²—ç²’åº¦ï¼‰
     * @param POSTAG å½“å‰?è¯?è¯­çš„è¯?æ€§ï¼ˆç»†ç²’åº¦ï¼‰
     */
    public CoNLLWord(int ID, String LEMMA, String CPOSTAG, String POSTAG)
    {
        this.ID = ID;
        this.LEMMA = LEMMA;
        this.CPOSTAG = CPOSTAG;
        this.POSTAG = POSTAG;
        compile();
    }

    private void compile()
    {
        this.NAME = PosTagCompiler.compile(POSTAG, LEMMA);
    }

    public CoNLLWord(CoNllLine line)
    {
        LEMMA = line.value[2];
        CPOSTAG = line.value[3];
        POSTAG = line.value[4];
        DEPREL = line.value[7];
        ID = line.id;
        compile();
    }

    public CoNLLWord(CoNllLine[] lineArray, int index)
    {
        this(lineArray[index]);
    }

    @Override
    public String toString()
    {
        final StringBuilder sb = new StringBuilder();
        // IDä¸º0æ—¶ä¸ºæ ¹èŠ‚ç‚¹ï¼ŒIDä¸º-1æ—¶ä¸ºç©ºç™½èŠ‚ç‚¹
        if (ID!=0 && ID!=-1){
            sb.append(ID).append('\t').append(LEMMA).append('\t').append(LEMMA).append('\t').append(CPOSTAG).append('\t')
                .append(POSTAG).append('\t').append('_').append('\t').append(HEAD.ID).append('\t').append(DEPREL).append('\t')
                .append('_').append('\t').append('_');  
        } else {
            sb.append(ID).append('\t').append(LEMMA).append('\t').append(LEMMA).append('\t').append(CPOSTAG).append('\t')
                .append(POSTAG).append('\t').append('_').append('\t').append('_').append('\t').append(DEPREL).append('\t')
                .append('_').append('\t').append('_');  
        }
        return sb.toString();
    }
}
