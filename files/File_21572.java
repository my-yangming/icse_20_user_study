package org.nlpcn.es4sql.parse;

import com.alibaba.druid.sql.ast.SQLExpr;
import com.alibaba.druid.sql.ast.expr.SQLCaseExpr;
import com.alibaba.druid.sql.ast.expr.SQLNullExpr;
import com.google.common.base.Joiner;
import org.nlpcn.es4sql.Util;
import org.nlpcn.es4sql.domain.Condition;
import org.nlpcn.es4sql.domain.Condition.OPEAR;
import org.nlpcn.es4sql.domain.Where;
import org.nlpcn.es4sql.exception.SqlParseException;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

/**
 * Created by allwefantasy on 9/3/16.
 */
public class CaseWhenParser {
    private SQLCaseExpr caseExpr;

    //zhongshu-comment ä»¥ä¸‹è¿™ä¸¤ä¸ªå±žæ€§è²Œä¼¼æ²¡æœ‰è¢«ä½¿ç”¨
    private String alias;
    private String tableAlias;

    public CaseWhenParser(SQLCaseExpr caseExpr, String alias, String tableAlias) {
        this.alias = alias;
        this.tableAlias = tableAlias;
        this.caseExpr = caseExpr;

    }

    public String parse() throws SqlParseException {
        List<String> result = new ArrayList<String>();

        for (SQLCaseExpr.Item item : caseExpr.getItems()) {
            SQLExpr conditionExpr = item.getConditionExpr();

            WhereParser parser = new WhereParser(new SqlParser(), conditionExpr);
            /*
            zhongshu-comment å°†case whençš„å?„ç§?æ?¡ä»¶åˆ¤æ–­è½¬æ?¢ä¸ºscriptçš„if-elseåˆ¤æ–­ï¼Œä¸¾ä¾‹å¦‚ä¸‹
            case whenï¼š
                CASE
		        WHEN platform_id = 'PC' AND os NOT IN ('å…¨éƒ¨') THEN 'unknown'
		        ELSE os

		     scriptçš„if-elseï¼š
		        å°†ä¸Šæ–‡case whenä¾‹å­?ä¸­çš„WHEN platform_id = 'PC' AND os NOT IN ('å…¨éƒ¨') THEN 'unknown' è§£æž?æˆ?å¦‚ä¸‹çš„scriptï¼š
		        (doc['platform_id'].value=='PC') && (doc['os'].value != 'å…¨éƒ¨' )
             */
            String scriptCode = explain(parser.findWhere());
            if (scriptCode.startsWith(" &&")) {
                scriptCode = scriptCode.substring(3);
            }
            if (result.size() == 0) {
                result.add("if(" + scriptCode + ")" + "{" + Util.getScriptValueWithQuote(item.getValueExpr(), "'") + "}");
            } else {
                result.add("else if(" + scriptCode + ")" + "{" + Util.getScriptValueWithQuote(item.getValueExpr(), "'") + "}");
            }

        }
        SQLExpr elseExpr = caseExpr.getElseExpr();
        if (elseExpr == null) {
            result.add("else { null }");
        } else {
            result.add("else {" + Util.getScriptValueWithQuote(elseExpr, "'") + "}");
        }

        return Joiner.on(" ").join(result);
    }

    /**
     * zhongshu-comment
     * 1ã€?è¯¥æ–¹æ³•çš„ä½œç”¨ï¼šå°†åœ¨whereå­?å?¥ä¸­çš„case whenè§£æž?ä¸ºes script
     * 2ã€?è¯¥ç§?æƒ…å†µçš„es scriptå’Œselectã€?group byã€?order byç­‰å­?å?¥ä¸­çš„case whençš„es scriptä¸?ä¸€æ ·ï¼Œ
     *      å› ä¸ºåœ¨whereå­?å?¥ä¸­scriptçš„è¿”å›žå€¼æ˜¯å¸ƒå°”ç±»åž‹ï¼Œæ‰€ä»¥scriptä¸­éœ€è¦?æœ‰ä¸ªå¸ƒå°”åˆ¤æ–­ï¼Œ
     *      è€Œå…¶ä»–æƒ…å†µçš„scriptè¿”å›žå€¼å°±æ˜¯è½¬æ?¢å?Žçš„å€¼ï¼Œè¯¥å€¼ä¸€èˆ¬æ˜¯å­—ç¬¦ä¸²ã€?æ•°å€¼
     * @author zhongshu
     * @return
     * @throws SqlParseException
     */
    public String parseCaseWhenInWhere(Object[] valueArr) throws SqlParseException {
        List<String> result = new ArrayList<String>();
        String TMP = "tmp";
        result.add("String " + TMP + " = '';");

        for (SQLCaseExpr.Item item : caseExpr.getItems()) {
            SQLExpr conditionExpr = item.getConditionExpr();

            WhereParser parser = new WhereParser(new SqlParser(), conditionExpr);

            String scriptCode = explain(parser.findWhere());
            if (scriptCode.startsWith(" &&")) {
                scriptCode = scriptCode.substring(3);
            }
            if (result.size() == 1) { //zhongshu-comment åœ¨forå¾ªçŽ¯ä¹‹å‰?å°±å·²ç»?å…ˆaddäº†ä¸€ä¸ªå…ƒç´ 
                result.add("if(" + scriptCode + ")" + "{" + TMP + "=" + Util.getScriptValueWithQuote(item.getValueExpr(), "'") + "}");
            } else {
                result.add("else if(" + scriptCode + ")" + "{" + TMP + "=" + Util.getScriptValueWithQuote(item.getValueExpr(), "'") + "}");
            }

        }
        SQLExpr elseExpr = caseExpr.getElseExpr();
        if (elseExpr == null) {
            result.add("else { null }");
        } else {
            result.add("else {" + TMP + "=" + Util.getScriptValueWithQuote(elseExpr, "'") + "}");
        }

        /*
        zhongshu-comment
        1ã€?ç¬¬ä¸€ç§?æƒ…å†µin
        field in (a, b, c)     --> field == a || field == b || field == c

        2ã€?ç¬¬äºŒç§?æƒ…å†µnot in
        field not in (a, b, c) --> field != a && field != b && field != c
                         ç­‰ä»·äºŽ --> !(field == a || field == b || field == c) å?³å¯¹ç¬¬ä¸€ç§?æƒ…å†µå?–å??ï¼Œ
                                    (field == a || field == b || field == c)é‡Œçš„aã€?bã€?cè¦?å…¨éƒ¨ä¸ºfalseï¼Œ!(field == a || field == b || field == c)æ‰?ä¸ºtrue

        3ã€?è¿™é‡Œå?ªæ‹¼æŽ¥ç¬¬ä¸€ç§?æƒ…å†µï¼Œä¸?æ‹¼æŽ¥ç¬¬ä¸€ç§?æƒ…å†µï¼Œ
            å¦‚æžœè¦?éœ€è¦?ç¬¬äºŒç§?æƒ…å†µï¼Œé‚£å°±è°ƒç”¨è¯¥æ–¹æ³•å¾—åˆ°è¿”å›žå€¼å?Žè‡ªè¡Œæ‹¼ä¸Šå?–å??ç¬¦å?·å’Œæ‹¬å?·: !(${è¯¥æ–¹æ³•çš„è¿”å›žå€¼})
         */
        String judgeStatement = parseInNotInJudge(valueArr, TMP, "==", "||", true);
        result.add("return " + judgeStatement +  ";");
        return Joiner.on(" ").join(result);
    }

    /**
     * zhongshu-comment è¿™ä¸ªæ–¹æ³•åº”è¯¥è®¾ä¸ºprivateæ¯”è¾ƒå?ˆé€‚ï¼Œå› ä¸ºå?ªåœ¨ä¸Šæ–‡çš„parse()æ–¹æ³•ä¸­è¢«è°ƒç”¨äº†
     * zhongshu-comment å°†case whençš„å?„ç§?æ?¡ä»¶åˆ¤æ–­è½¬æ?¢ä¸ºscriptçš„if-elseåˆ¤æ–­ï¼Œä¸¾ä¾‹å¦‚ä¸‹
         case whenï¼š
         CASE
         WHEN platform_id = 'PC' AND os NOT IN ('å…¨éƒ¨') THEN 'unknown'
         ELSE os

         scriptçš„if-elseï¼š
         å°†ä¸Šæ–‡case whenä¾‹å­?ä¸­çš„WHEN platform_id = 'PC' AND os NOT IN ('å…¨éƒ¨') THEN 'unknown' è§£æž?æˆ?å¦‚ä¸‹çš„scriptï¼š
         (doc['platform_id'].value=='PC') && (doc['os'].value != 'å…¨éƒ¨' )
     * @param where
     * @return
     * @throws SqlParseException
     */
    public String explain(Where where) throws SqlParseException {
        List<String> codes = new ArrayList<String>();
        while (where.getWheres().size() == 1) {
            where = where.getWheres().getFirst();
        }
        explainWhere(codes, where);
        String relation = where.getConn().name().equals("AND") ? " && " : " || ";
        return Joiner.on(relation).join(codes);
    }


    private void explainWhere(List<String> codes, Where where) throws SqlParseException {
        if (where instanceof Condition) {
            Condition condition = (Condition) where;

            if (condition.getValue() instanceof ScriptFilter) {
                codes.add(String.format("Function.identity().compose((o)->{%s}).apply(null)", ((ScriptFilter) condition.getValue()).getScript()));
            } else if (condition.getOpear() == OPEAR.BETWEEN) {
                Object[] objs = (Object[]) condition.getValue();
                codes.add("(" + "doc['" + condition.getName() + "'].value >= " + objs[0] + " && doc['"
                        + condition.getName() + "'].value <=" + objs[1] + ")");
            } else if (condition.getOpear() == OPEAR.IN) {// in
                //zhongshu-comment å¢žåŠ è¯¥åˆ†æ”¯ï¼Œå?¯ä»¥è§£æž?case whenåˆ¤æ–­è¯­å?¥ä¸­çš„inã€?not inåˆ¤æ–­è¯­å?¥
                codes.add(parseInNotInJudge(condition, "==", "||", false));
            } else if (condition.getOpear() == OPEAR.NIN) { // not in
                codes.add(parseInNotInJudge(condition, "!=", "&&", false));
            } else {
                SQLExpr nameExpr = condition.getNameExpr();
                SQLExpr valueExpr = condition.getValueExpr();
                if(valueExpr instanceof SQLNullExpr) {
                    //zhongshu-comment ç©ºå€¼æŸ¥è¯¢çš„æ„?æ€?å?—ï¼Ÿä¾‹å¦‚ï¼šæŸ¥aå­—æ®µæ²¡æœ‰å€¼çš„é‚£äº›æ–‡æ¡£ï¼Œæ˜¯è¿™ä¸ªæ„?æ€?å?—
                    codes.add("(" + "doc['" + nameExpr.toString() + "']" + ".empty)");
                } else {
                    //zhongshu-comment è¯¥åˆ†æ”¯ç¤ºä¾‹ï¼š(doc['c'].value==1)
                    codes.add("(" + Util.getScriptValueWithQuote(nameExpr, "'") + condition.getOpertatorSymbol() + Util.getScriptValueWithQuote(valueExpr, "'") + ")");
                }
            }
        } else {
            for (Where subWhere : where.getWheres()) {
                List<String> subCodes = new ArrayList<String>();
                explainWhere(subCodes, subWhere);
                String relation = subWhere.getConn().name().equals("AND") ? "&&" : "||";
                codes.add(Joiner.on(relation).join(subCodes));
            }
        }
    }

    /**
     * @author zhongshu
     * @param condition
     * @param judgeOperator
     * @param booleanOperator
     * @throws SqlParseException
     */
    private String parseInNotInJudge(Condition condition, String judgeOperator, String booleanOperator, boolean flag) throws SqlParseException {
        Object[] objArr = (Object[]) condition.getValue();
        if (objArr.length == 0)
            throw new SqlParseException("you should assign some value in bracket!!");

        String script = "(";

        String template = "doc['" + condition.getName() + "'].value " + judgeOperator + " %s " + booleanOperator + " "; //ç»“å°¾è¿™ä¸ªç©ºæ ¼å°±å?ªç©ºä¸€æ ¼
        if (flag) {
            template = condition.getName() + " " + judgeOperator + " %s " + booleanOperator + " "; //ç»“å°¾è¿™ä¸ªç©ºæ ¼å°±å?ªç©ºä¸€æ ¼;
        }
        for (Object obj : objArr) {
            script = script + String.format(template, parseInNotInValueWithQuote(obj));
        }
        script = script.substring(0, script.lastIndexOf(booleanOperator));//åŽ»æŽ‰æœ«å°¾çš„&&
        script += ")"; //zhongshu-comment scriptç»“æžœç¤ºä¾‹ (doc['a'].value == 1 && doc['a'].value == 2 && doc['a'].value == 3 )
        return script;

    }

    private String parseInNotInJudge(Object value, String fieldName, String judgeOperator, String booleanOperator, boolean flag) throws SqlParseException {
        Condition cond = new Condition(null);
        cond.setValue(value);
        cond.setName(fieldName);

        return parseInNotInJudge(cond, judgeOperator, booleanOperator, flag);

    }

    /**
     * @author zhongshu
     * @param obj
     * @return
     */
    private Object parseInNotInValueWithQuote(Object obj) {
        //zhongshu-comment å› ä¸ºæˆ‘ä»¬çš„è¡¨å°±å?ªæœ‰String å’Œ doubleä¸¤ç§?ç±»åž‹ï¼Œæ‰€ä»¥å°±å?ªåˆ¤æ–­äº†è¿™ä¸¤ç§?æƒ…å†µ
        if (obj instanceof String) {
            return "'" + obj + "'";
        } else {
            return obj;
        }
    }
}
