/*
 * <summary></summary>
 * <author>He Han</author>
 * <email>hankcs.cn@gmail.com</email>
 * <create-date>2014/9/9 3:11</create-date>
 *
 * <copyright file="EasyDictionary.java" company="ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸">
 * Copyright (c) 2003-2014, ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸. All Right Reserved, http://www.linrunsoft.com/
 * This source is subject to the LinrunSpace License. Please contact ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸ to get more information.
 * </copyright>
 */
package com.hankcs.hanlp.corpus.dictionary;

import com.hankcs.hanlp.collection.trie.DoubleArrayTrie;
import com.hankcs.hanlp.dictionary.BaseSearcher;
import com.hankcs.hanlp.corpus.tag.Nature;

import java.io.*;
import java.util.*;

import static com.hankcs.hanlp.HanLP.Config.IOAdapter;
import static com.hankcs.hanlp.utility.Predefine.logger;

/**
 * ä¸€ä¸ªé€šç”¨çš„ã€?æ»¡è¶³ç‰¹å®šæ ¼å¼?çš„å?Œæ•°ç»„è¯?å…¸
 *
 * @author hankcs
 */
public class EasyDictionary
{
    DoubleArrayTrie<Attribute> trie = new DoubleArrayTrie<Attribute>();

    public static EasyDictionary create(String path)
    {
        EasyDictionary dictionary = new EasyDictionary();
        if (dictionary.load(path))
        {
            return dictionary;
        }
        else
        {
            logger.warning("ä»Ž" + path + "è¯»å?–å¤±è´¥");
        }

        return null;
    }

    private boolean load(String path)
    {
        logger.info("é€šç”¨è¯?å…¸å¼€å§‹åŠ è½½:" + path);
        TreeMap<String, Attribute> map = new TreeMap<String, Attribute>();
        BufferedReader br = null;
        try
        {
            br = new BufferedReader(new InputStreamReader(IOAdapter == null ? new FileInputStream(path) : IOAdapter.open(path), "UTF-8"));
            String line;
            while ((line = br.readLine()) != null)
            {
                String param[] = line.split("\\s+");
                int natureCount = (param.length - 1) / 2;
                Attribute attribute = new Attribute(natureCount);
                for (int i = 0; i < natureCount; ++i)
                {
                    attribute.nature[i] = Nature.create(param[1 + 2 * i]);
                    attribute.frequency[i] = Integer.parseInt(param[2 + 2 * i]);
                    attribute.totalFrequency += attribute.frequency[i];
                }
                map.put(param[0], attribute);
            }
            logger.info("é€šç”¨è¯?å…¸è¯»å…¥è¯?æ?¡" + map.size());
            br.close();
        }
        catch (FileNotFoundException e)
        {
            logger.severe("é€šç”¨è¯?å…¸" + path + "ä¸?å­˜åœ¨ï¼?" + e);
            return false;
        }
        catch (IOException e)
        {
            logger.severe("é€šç”¨è¯?å…¸" + path + "è¯»å?–é”™è¯¯ï¼?" + e);
            return false;
        }

        logger.info("é€šç”¨è¯?å…¸DATæž„å»ºç»“æžœ:" + trie.build(map));
        logger.info("é€šç”¨è¯?å…¸åŠ è½½æˆ?åŠŸ:" + trie.size() +"ä¸ªè¯?æ?¡" );
        return true;
    }

    public Attribute GetWordInfo(String key)
    {
        return trie.get(key);
    }

    public boolean contains(String key)
    {
        return GetWordInfo(key) != null;
    }

    public BaseSearcher getSearcher(String text)
    {
        return new Searcher(text);
    }

    public class Searcher extends BaseSearcher<Attribute>
    {
        /**
         * åˆ†è¯?ä»Žä½•å¤„å¼€å§‹ï¼Œè¿™æ˜¯ä¸€ä¸ªçŠ¶æ€?
         */
        int begin;

        private List<Map.Entry<String, Attribute>> entryList;

        protected Searcher(char[] c)
        {
            super(c);
        }

        protected Searcher(String text)
        {
            super(text);
            entryList = new LinkedList<Map.Entry<String, Attribute>>();
        }

        @Override
        public Map.Entry<String, Attribute> next()
        {
            // ä¿?è¯?é¦–æ¬¡è°ƒç”¨æ‰¾åˆ°ä¸€ä¸ªè¯?è¯­
            while (entryList.size() == 0 && begin < c.length)
            {
                entryList = trie.commonPrefixSearchWithValue(c, begin);
                ++begin;
            }
            // ä¹‹å?Žè°ƒç”¨ä»…åœ¨ç¼“å­˜ç”¨å®Œçš„æ—¶å€™è°ƒç”¨ä¸€æ¬¡
            if (entryList.size() == 0 && begin < c.length)
            {
                entryList = trie.commonPrefixSearchWithValue(c, begin);
                ++begin;
            }
            if (entryList.size() == 0)
            {
                return null;
            }
            Map.Entry<String, Attribute> result = entryList.get(0);
            entryList.remove(0);
            offset = begin - 1;
            return result;
        }
    }

    /**
     * é€šç”¨è¯?å…¸ä¸­çš„è¯?å±žæ€§
     */
    static public class Attribute
    {
        /**
         * è¯?æ€§åˆ—è¡¨
         */
        public Nature nature[];
        /**
         * è¯?æ€§å¯¹åº”çš„è¯?é¢‘
         */
        public int frequency[];

        public int totalFrequency;

        public Attribute(int size)
        {
            nature = new Nature[size];
            frequency = new int[size];
        }

        public Attribute(Nature[] nature, int[] frequency)
        {
            this.nature = nature;
            this.frequency = frequency;
        }

        public Attribute(Nature nature, int frequency)
        {
            this(1);
            this.nature[0] = nature;
            this.frequency[0] = frequency;
            totalFrequency = frequency;
        }

        /**
         * ä½¿ç”¨å?•ä¸ªè¯?æ€§ï¼Œé»˜è®¤è¯?é¢‘1000æž„é€ 
         *
         * @param nature
         */
        public Attribute(Nature nature)
        {
            this(nature, 1000);
        }

        /**
         * èŽ·å?–è¯?æ€§çš„è¯?é¢‘
         *
         * @param nature å­—ç¬¦ä¸²è¯?æ€§
         * @return è¯?é¢‘
         * @deprecated æŽ¨è??ä½¿ç”¨Natureå?‚æ•°ï¼?
         */
        public int getNatureFrequency(String nature)
        {
            try
            {
                Nature pos = Nature.create(nature);
                return getNatureFrequency(pos);
            }
            catch (IllegalArgumentException e)
            {
                return 0;
            }
        }

        /**
         * èŽ·å?–è¯?æ€§çš„è¯?é¢‘
         *
         * @param nature è¯?æ€§
         * @return è¯?é¢‘
         */
        public int getNatureFrequency(final Nature nature)
        {
            int result = 0;
            int i = 0;
            for (Nature pos : this.nature)
            {
                if (nature == pos)
                {
                    return frequency[i];
                }
                ++i;
            }
            return result;
        }

        @Override
        public String toString()
        {
            return "Attribute{" +
                    "nature=" + Arrays.toString(nature) +
                    ", frequency=" + Arrays.toString(frequency) +
                    '}';
        }
    }
}
