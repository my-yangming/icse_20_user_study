package jetbrains.mps.ide.hierarchy;

/*Generated by MPS */

import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.Language;
import org.jetbrains.mps.openapi.module.SRepositoryContentAdapter;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.event.SReferenceChangeEvent;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import java.util.Objects;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.event.SNodeAddEvent;
import org.jetbrains.mps.openapi.event.SNodeRemoveEvent;

public final class ConceptHierarchyListener {
  private SRepository myRepo;
  private final ConceptHierarchyListener.MyStructureNodesListener myListener = new ConceptHierarchyListener.MyStructureNodesListener();

  public ConceptHierarchyListener() {
  }

  private void init() {
    for (SModule module : Sequence.fromIterable(myRepo.getModules())) {
      if (module instanceof Language) {
        myListener.startListening((Language) module);
      }
    }
  }

  public void dispose() {
    for (SModule module : Sequence.fromIterable(myRepo.getModules())) {
      if (module instanceof Language) {
        myListener.stopListening((Language) module);
      }
    }
  }

  private static final class MyStructureNodesListener extends SRepositoryContentAdapter {
    @Override
    public void referenceChanged(@NotNull SReferenceChangeEvent event) {
      if (event.getNode().isInstanceOfConcept(MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"))) {
        SReferenceLink link = event.getAssociationLink();
        if (Objects.equals(link, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0xf979be93cfL, "extends")) || Objects.equals(link, MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0x110358d693eL, "implements"))) {
        }
      }
    }

    @Override
    protected void startListening(SModule module) {
      if (module instanceof Language) {
        SModel structure = getStructure((Language) module);
        if (structure != null) {
          structure.addChangeListener(this);
        }
      }
    }

    @Override
    public void modelAdded(SModule module, SModel model) {
      assert module instanceof Language;
      SModel structure = getStructure((Language) module);
      if (structure == null) {
        return;
      }
      if (model.equals(structure)) {
        structure.addChangeListener(this);
      }
    }

    @Override
    public void beforeModelRemoved(SModule module, SModel model) {
      assert module instanceof Language;
      SModel structure = getStructure((Language) module);
      if (model.equals(structure)) {
        structure.removeChangeListener(this);
      }
    }

    private SModel getStructure(Language lang) {
      return lang.getStructureModelDescriptor();
    }

    @Override
    protected void stopListening(SModule module) {
      if (module instanceof Language) {
        SModel structure = getStructure((Language) module);
        structure.removeChangeListener(this);
      }
    }

    @Override
    public void nodeAdded(@NotNull SNodeAddEvent event) {
      if (event.isRoot()) {

      }
    }

    @Override
    public void nodeRemoved(@NotNull SNodeRemoveEvent event) {
      super.nodeRemoved(event);
    }
  }
}
