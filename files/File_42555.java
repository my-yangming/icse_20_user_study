/*
 * Copyright 2015-2102 RonCoo(http://www.roncoo.com) Group.
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *  
 *      http://www.apache.org/licenses/LICENSE-2.0
 *  
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.roncoo.pay.reconciliation.service.impl;

import com.roncoo.pay.reconciliation.entity.RpAccountCheckBatch;
import com.roncoo.pay.reconciliation.entity.RpAccountCheckMistake;
import com.roncoo.pay.reconciliation.entity.RpAccountCheckMistakeScratchPool;
import com.roncoo.pay.reconciliation.enums.BatchStatusEnum;
import com.roncoo.pay.reconciliation.enums.MistakeHandleStatusEnum;
import com.roncoo.pay.reconciliation.service.RpAccountCheckBatchService;
import com.roncoo.pay.reconciliation.service.RpAccountCheckMistakeScratchPoolService;
import com.roncoo.pay.reconciliation.service.RpAccountCheckMistakeService;
import com.roncoo.pay.reconciliation.service.RpAccountCheckTransactionService;
import com.roncoo.pay.trade.service.RpTradeReconciliationService;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * å¯¹è´¦æ•°æ?®äº‹åŠ¡ä¸€è‡´æ€§service.
 *
 * é¾™æžœå­¦é™¢ï¼šwww.roncoo.com
 * 
 * @authorï¼šshenjialong
 */
@Service("rpAccountCheckTransactionService")
public class RpAccountCheckTransactionServiceImpl implements RpAccountCheckTransactionService {

	private static final Log LOG = LogFactory.getLog(RpAccountCheckTransactionServiceImpl.class);

	@Autowired
	private RpAccountCheckBatchService rpAccountCheckBatchService;
	@Autowired
	private RpAccountCheckMistakeService rpAccountCheckMistakeService;
	@Autowired
	private RpAccountCheckMistakeScratchPoolService rpAccountCheckMistakeScratchPoolService;
	@Autowired
	private RpTradeReconciliationService rpTradeReconciliationService;

	/**
	 * ä¸ºäº†ä¿?è¯?äº‹åŠ¡ä¸€è‡´æ€§ï¼ŒæŠŠå¯¹æ•°æ?®åº“çš„æ“?ä½œæ”¾å…¥ä¸€ä¸ªäº‹åŠ¡ä¸­
	 */
	@Transactional(rollbackFor = Exception.class)
	public void saveDatasaveDate(RpAccountCheckBatch batch, List<RpAccountCheckMistake> mistakeList, List<RpAccountCheckMistakeScratchPool> insertScreatchRecordList, List<RpAccountCheckMistakeScratchPool> removeScreatchRecordList) {
		LOG.info("========>  å¯¹å®Œæ•°æ?®å?Žä¸šåŠ¡æ•°æ?®å¤„ç?†å¼€å§‹=========>");

		LOG.info("===> step1:ä¿?å­˜æ‰¹æ¬¡è®°å½•====");
		if (batch.getStatus() == null) {
			batch.setStatus(BatchStatusEnum.SUCCESS.name());
		}
		rpAccountCheckBatchService.saveData(batch);

		LOG.info("===> step2:ä¿?å­˜å·®é”™è®°å½•====æ€»å…±[" + mistakeList.size() + "]æ?¡");
		rpAccountCheckMistakeService.saveListDate(mistakeList);

		LOG.info("===> step3:ä¿?å­˜è®°å½•åˆ°ç¼“å­˜æ± ä¸­====æ€»å…±[" + insertScreatchRecordList.size() + "]æ?¡");
		rpAccountCheckMistakeScratchPoolService.savaListDate(insertScreatchRecordList);

		LOG.info("===> step4:ä»Žç¼“å­˜æ± ä¸­åˆ é™¤å·²åŒ¹é…?è®°å½•====æ€»å…±[" + removeScreatchRecordList.size() + "]æ?¡");
		rpAccountCheckMistakeScratchPoolService.deleteFromPool(removeScreatchRecordList);

		LOG.info("<========  å¯¹å®Œæ•°æ?®å?Žä¸šåŠ¡æ•°æ?®å¤„ç?†ç»“æ?Ÿ<=========");
	}

	/**
	 * 
	 * @param list
	 * @param mistakeList
	 */
	@Transactional(rollbackFor = Exception.class)
	public void removeDateFromPool(List<RpAccountCheckMistakeScratchPool> list, List<RpAccountCheckMistake> mistakeList) {
		LOG.info("========>  æ¸…ç?†ç¼“å†²æ± ä¸­æ²¡æœ‰å¯¹è´¦çš„æ•°æ?®ï¼Œè®°å½•å·®é”™=========>");

		LOG.info("===> step1:ä¿?å­˜å·®é”™è®°å½•====æ€»å…±[" + mistakeList.size() + "]æ?¡");
		rpAccountCheckMistakeService.saveListDate(mistakeList);

		LOG.info("===> step2:ä»Žç¼“å­˜æ± ä¸­åˆ é™¤å·²åŒ¹é…?è®°å½•====æ€»å…±[" + list.size() + "]æ?¡");
		rpAccountCheckMistakeScratchPoolService.deleteFromPool(list);

		LOG.info("<========  æ¸…ç?†ç¼“å†²æ± ä¸­æ²¡æœ‰å¯¹è´¦çš„æ•°æ?®ï¼Œè®°å½•å·®é”™ç»“æ?Ÿ<=========");
	}

	/**
	 * å·®é”™å¤„ç?†
	 * 
	 * @param mistake
	 *            å·®é”™ä¿¡æ?¯
	 */

	@Transactional(rollbackFor = Exception.class)
	public void handle(String id, String handleType, String handleRemark) {
		// æ ¹æ?®idæŸ¥è¯¢
		RpAccountCheckMistake mistake = rpAccountCheckMistakeService.getDataById(id);
		mistake.setHandleStatus(MistakeHandleStatusEnum.HANDLED.name());
		mistake.setHandleRemark(handleRemark);
		// ä¿®æ”¹å·®é”™è®°å½•
		rpAccountCheckMistakeService.updateData(mistake);

		Boolean bank = false;
		if ("bank".equals(handleType.trim())) {
			mistake.setHandleValue("ä»¥é“¶è¡Œä¸ºå‡†");
			bank = true;
		}
		// ä»¥å¹³å?°æ•°æ?®ä¸ºå‡†ï¼šå?ªéœ€ä¿®æ”¹å·®é”™è®°å½•
		if (!bank) {
			return;
		}

		switch (mistake.getErrType()) {

		case "BANK_MISS":// é“¶è¡Œä¸?å­˜åœ¨è¯¥è®¢å?•
			// ä»¥é“¶è¡Œä¸ºå‡†
			if (bank) {
				// æŠŠè®¢å?•æ”¹ä¸ºå¤±è´¥ï¼Œå‡?æ¬¾
				String trxNo = mistake.getTrxNo();
				rpTradeReconciliationService.bankMissOrBankFailBaseBank(trxNo);
			}

			break;

		case "PLATFORM_SHORT_STATUS_MISMATCH":// é“¶è¡Œæ”¯ä»˜æˆ?åŠŸï¼Œå¹³å?°æ”¯ä»˜ä¸?æˆ?åŠŸ,é»˜è®¤ä»¥é“¶è¡Œä¸ºå‡†
			// ä»¥é“¶è¡Œä¸ºå‡†
			if (bank) {
				String trxNo = mistake.getTrxNo();
				String bankTrxNo = mistake.getBankTrxNo();
				rpTradeReconciliationService.platFailBankSuccess(trxNo, bankTrxNo);
			}
			break;

		case "PLATFORM_SHORT_CASH_MISMATCH":// å¹³å?°éœ€æ”¯ä»˜é‡‘é¢?æ¯”é“¶è¡Œå®žé™…æ”¯ä»˜é‡‘é¢?å°‘
			// ä»¥é“¶è¡Œä¸ºå‡†
			if (bank) {
				// ç´¯åŠ é‡‘é¢?
				rpTradeReconciliationService.handleAmountMistake(mistake, true);
			}
			break;

		case "PLATFORM_OVER_CASH_MISMATCH":// é“¶è¡Œå®žé™…æ”¯ä»˜é‡‘é¢?æ¯”å¹³å?°éœ€æ”¯ä»˜é‡‘é¢?å°‘
			// ä»¥é“¶è¡Œä¸ºå‡†
			if (bank) {
				// æ”¯ä»˜è®°å½•å‡?æ¬¾
				rpTradeReconciliationService.handleAmountMistake(mistake, false);
			}
			break;

		case "PLATFORM_OVER_STATUS_MISMATCH":// å¹³å?°æ”¯ä»˜æˆ?åŠŸï¼Œé“¶è¡Œæ”¯ä»˜ä¸?æˆ?åŠŸ(å’Œé“¶è¡Œæ¼?å?•ä¸€è‡´)
			// ä»¥é“¶è¡Œä¸ºå‡†
			if (bank) {
				// æŠŠè®¢å?•æ”¹ä¸ºå¤±è´¥ï¼Œå‡?æ¬¾
				String trxNo = mistake.getTrxNo();
				rpTradeReconciliationService.bankMissOrBankFailBaseBank(trxNo);
			}
			break;

		case "FEE_MISMATCH":// æ‰‹ç»­è´¹ä¸?åŒ¹é…?
			// ä»¥é“¶è¡Œä¸ºå‡†
			if (bank) {
				rpTradeReconciliationService.handleFeeMistake(mistake);
			}
			break;

		case "PLATFORM_MISS":// å¹³å?°ä¸?å­˜åœ¨è¯¥è®¢å?•(æš‚æ—¶ä¸?è€ƒè™‘è¿™ç§?æƒ…å†µ)
			break;

		default:
			break;
		}

	}
}
