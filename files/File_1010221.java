package jetbrains.mps.checkers;

/*Generated by MPS */

import jetbrains.mps.errors.item.EditorQuickFix;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.mps.openapi.model.SReference;
import org.jetbrains.mps.openapi.module.SRepository;
import java.util.Objects;
import jetbrains.mps.project.dependency.VisibilityUtil;
import java.util.Set;
import jetbrains.mps.errors.item.FlavouredItem;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.errors.item.NodeFlavouredItem;
import jetbrains.mps.errors.item.NodeFeatureFlavouredItem;
import jetbrains.mps.project.AbstractModule;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SModel;

public class ModuleImportQuickFix implements EditorQuickFix {
  private SModelReference targetModelRef;
  private SModuleReference targetModuleRef;
  private SReference myReference;
  public ModuleImportQuickFix(SReference ref) {
    myReference = ref;
    targetModelRef = ref.getTargetSModelReference();
    targetModuleRef = ref.getTargetSModelReference().resolve(ref.getSourceNode().getModel().getRepository()).getModule().getModuleReference();
  }
  public String getDescription(SRepository repo) {
    return "Import " + targetModuleRef.getModuleName() + " module";
  }
  @Override
  public boolean isExecutedImmediately() {
    return false;
  }
  @Override
  public boolean isAlive(SRepository repository) {
    if (!(Objects.equals(myReference.getTargetSModelReference(), targetModelRef))) {
      return false;
    }
    if (check_pyx31o_a0b0g(myReference.getSourceNode().getModel()) == null) {
      return false;
    }
    if (targetModelRef.resolve(repository) == null) {
      return false;
    }
    if (VisibilityUtil.isVisible(myReference.getSourceNode().getModel(), targetModelRef.resolve(repository))) {
      return false;
    }
    return true;
  }
  @Override
  public Set<FlavouredItem.ReportItemFlavour<?, ?>> getIdFlavours() {
    return SetSequence.fromSetAndArray(new HashSet<FlavouredItem.ReportItemFlavour<?, ?>>(), FLAVOUR_CLASS, NodeFlavouredItem.FLAVOUR_NODE, NodeFeatureFlavouredItem.FLAVOUR_NODE_FEATURE);
  }
  @Override
  public void execute(SRepository repository) {
    ((AbstractModule) myReference.getSourceNode().getModel().getModule()).addDependency(targetModuleRef, false);
  }
  private static SModule check_pyx31o_a0b0g(SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModule();
    }
    return null;
  }
}
