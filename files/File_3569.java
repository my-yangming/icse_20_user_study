/*
 * <summary></summary>
 * <author>He Han</author>
 * <email>hankcs.cn@gmail.com</email>
 * <create-date>2014/10/30 10:02</create-date>
 *
 * <copyright file="HiddenMarkovModelSegment.java" company="ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸">
 * Copyright (c) 2003-2014, ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸. All Right Reserved, http://www.linrunsoft.com/
 * This source is subject to the LinrunSpace License. Please contact ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸ to get more information.
 * </copyright>
 */
package com.hankcs.hanlp.seg;

import com.hankcs.hanlp.algorithm.Viterbi;
import com.hankcs.hanlp.collection.AhoCorasick.AhoCorasickDoubleArrayTrie;
import com.hankcs.hanlp.collection.trie.DoubleArrayTrie;
import com.hankcs.hanlp.corpus.tag.Nature;
import com.hankcs.hanlp.dictionary.*;
import com.hankcs.hanlp.dictionary.other.CharType;
import com.hankcs.hanlp.seg.NShort.Path.*;
import com.hankcs.hanlp.seg.common.Graph;
import com.hankcs.hanlp.seg.common.Term;
import com.hankcs.hanlp.seg.common.Vertex;
import com.hankcs.hanlp.seg.common.WordNet;
import com.hankcs.hanlp.utility.TextUtility;

import java.util.*;

/**
 * åŸºäºŽè¯?è¯­NGramæ¨¡åž‹çš„åˆ†è¯?å™¨åŸºç±»
 *
 * @author hankcs
 */
public abstract class WordBasedSegment extends Segment
{

    public WordBasedSegment()
    {
        super();
    }

    /**
     * å¯¹ç²—åˆ†ç»“æžœæ‰§è¡Œä¸€äº›è§„åˆ™ä¸Šçš„å?ˆå¹¶æ‹†åˆ†ç­‰ç­‰ï¼Œå?Œæ—¶å?ˆæˆ?æ–°è¯?ç½‘
     *
     * @param linkedArray    ç²—åˆ†ç»“æžœ
     * @param wordNetOptimum å?ˆå¹¶äº†æ‰€æœ‰ç²—åˆ†ç»“æžœçš„è¯?ç½‘
     */
    protected static void generateWord(List<Vertex> linkedArray, WordNet wordNetOptimum)
    {
        fixResultByRule(linkedArray);

        //--------------------------------------------------------------------
        // å»ºé€ æ–°è¯?ç½‘
        wordNetOptimum.addAll(linkedArray);
    }

    /**
     * é€šè¿‡è§„åˆ™ä¿®æ­£ä¸€äº›ç»“æžœ
     *
     * @param linkedArray
     */
    protected static void fixResultByRule(List<Vertex> linkedArray)
    {

        //--------------------------------------------------------------------
        //Merge all seperate continue num into one number
        mergeContinueNumIntoOne(linkedArray);

        //--------------------------------------------------------------------
        //The delimiter "ï¼?ï¼?"
        changeDelimiterPOS(linkedArray);

        //--------------------------------------------------------------------
        //å¦‚æžœå‰?ä¸€ä¸ªè¯?æ˜¯æ•°å­—ï¼Œå½“å‰?è¯?ä»¥â€œï¼?â€?æˆ–â€œ-â€?å¼€å§‹ï¼Œå¹¶ä¸”ä¸?æ­¢è¿™ä¸€ä¸ªå­—ç¬¦ï¼Œ
        //é‚£ä¹ˆå°†æ­¤â€œï¼?â€?ç¬¦å?·ä»Žå½“å‰?è¯?ä¸­åˆ†ç¦»å‡ºæ?¥ã€‚
        //ä¾‹å¦‚ â€œ3 / -4 / æœˆâ€?éœ€è¦?æ‹†åˆ†æˆ?â€œ3 / - / 4 / æœˆâ€?
        splitMiddleSlashFromDigitalWords(linkedArray);

        //--------------------------------------------------------------------
        //1ã€?å¦‚æžœå½“å‰?è¯?æ˜¯æ•°å­—ï¼Œä¸‹ä¸€ä¸ªè¯?æ˜¯â€œæœˆã€?æ—¥ã€?æ—¶ã€?åˆ†ã€?ç§’ã€?æœˆä»½â€?ä¸­çš„ä¸€ä¸ªï¼Œåˆ™å?ˆå¹¶,ä¸”å½“å‰?è¯?è¯?æ€§æ˜¯æ—¶é—´
        //2ã€?å¦‚æžœå½“å‰?è¯?æ˜¯å?¯ä»¥ä½œä¸ºå¹´ä»½çš„æ•°å­—ï¼Œä¸‹ä¸€ä¸ªè¯?æ˜¯â€œå¹´â€?ï¼Œåˆ™å?ˆå¹¶ï¼Œè¯?æ€§ä¸ºæ—¶é—´ï¼Œå?¦åˆ™ä¸ºæ•°å­—ã€‚
        //3ã€?å¦‚æžœæœ€å?Žä¸€ä¸ªæ±‰å­—æ˜¯"ç‚¹" ï¼Œåˆ™è®¤ä¸ºå½“å‰?æ•°å­—æ˜¯æ—¶é—´
        //4ã€?å¦‚æžœå½“å‰?ä¸²æœ€å?Žä¸€ä¸ªæ±‰å­—ä¸?æ˜¯"âˆ¶Â·ï¼Žï¼?"å’Œå?Šè§’çš„'.''/'ï¼Œé‚£ä¹ˆæ˜¯æ•°
        //5ã€?å½“å‰?ä¸²æœ€å?Žä¸€ä¸ªæ±‰å­—æ˜¯"âˆ¶Â·ï¼Žï¼?"å’Œå?Šè§’çš„'.''/'ï¼Œä¸”é•¿åº¦å¤§äºŽ1ï¼Œé‚£ä¹ˆåŽ»æŽ‰æœ€å?Žä¸€ä¸ªå­—ç¬¦ã€‚ä¾‹å¦‚"1."
        checkDateElements(linkedArray);
    }

    static void changeDelimiterPOS(List<Vertex> linkedArray)
    {
        for (Vertex vertex : linkedArray)
        {
            if (vertex.realWord.equals("ï¼?ï¼?") || vertex.realWord.equals("â€”") || vertex.realWord.equals("-"))
            {
                vertex.confirmNature(Nature.w);
            }
        }
    }

    //====================================================================
    //å¦‚æžœå‰?ä¸€ä¸ªè¯?æ˜¯æ•°å­—ï¼Œå½“å‰?è¯?ä»¥â€œï¼?â€?æˆ–â€œ-â€?å¼€å§‹ï¼Œå¹¶ä¸”ä¸?æ­¢è¿™ä¸€ä¸ªå­—ç¬¦ï¼Œ
    //é‚£ä¹ˆå°†æ­¤â€œï¼?â€?ç¬¦å?·ä»Žå½“å‰?è¯?ä¸­åˆ†ç¦»å‡ºæ?¥ã€‚
    //ä¾‹å¦‚ â€œ3-4 / æœˆâ€?éœ€è¦?æ‹†åˆ†æˆ?â€œ3 / - / 4 / æœˆâ€?
    //====================================================================
    private static void splitMiddleSlashFromDigitalWords(List<Vertex> linkedArray)
    {
        if (linkedArray.size() < 2)
            return;

        ListIterator<Vertex> listIterator = linkedArray.listIterator();
        Vertex next = listIterator.next();
        Vertex current = next;
        while (listIterator.hasNext())
        {
            next = listIterator.next();
//            System.out.println("current:" + current + " next:" + next);
            Nature currentNature = current.getNature();
            if (currentNature == Nature.nx && (next.hasNature(Nature.q) || next.hasNature(Nature.n)))
            {
                String[] param = current.realWord.split("-", 1);
                if (param.length == 2)
                {
                    if (TextUtility.isAllNum(param[0]) && TextUtility.isAllNum(param[1]))
                    {
                        current = current.copy();
                        current.realWord = param[0];
                        current.confirmNature(Nature.m);
                        listIterator.previous();
                        listIterator.previous();
                        listIterator.set(current);
                        listIterator.next();
                        listIterator.add(Vertex.newPunctuationInstance("-"));
                        listIterator.add(Vertex.newNumberInstance(param[1]));
                    }
                }
            }
            current = next;
        }

//        logger.trace("æ? å?·è¯†åˆ«å?Žï¼š" + Graph.parseResult(linkedArray));
    }

    //====================================================================
    //1ã€?å¦‚æžœå½“å‰?è¯?æ˜¯æ•°å­—ï¼Œä¸‹ä¸€ä¸ªè¯?æ˜¯â€œæœˆã€?æ—¥ã€?æ—¶ã€?åˆ†ã€?ç§’ã€?æœˆä»½â€?ä¸­çš„ä¸€ä¸ªï¼Œåˆ™å?ˆå¹¶ä¸”å½“å‰?è¯?è¯?æ€§æ˜¯æ—¶é—´
    //2ã€?å¦‚æžœå½“å‰?è¯?æ˜¯å?¯ä»¥ä½œä¸ºå¹´ä»½çš„æ•°å­—ï¼Œä¸‹ä¸€ä¸ªè¯?æ˜¯â€œå¹´â€?ï¼Œåˆ™å?ˆå¹¶ï¼Œè¯?æ€§ä¸ºæ—¶é—´ï¼Œå?¦åˆ™ä¸ºæ•°å­—ã€‚
    //3ã€?å¦‚æžœæœ€å?Žä¸€ä¸ªæ±‰å­—æ˜¯"ç‚¹" ï¼Œåˆ™è®¤ä¸ºå½“å‰?æ•°å­—æ˜¯æ—¶é—´
    //4ã€?å¦‚æžœå½“å‰?ä¸²æœ€å?Žä¸€ä¸ªæ±‰å­—ä¸?æ˜¯"âˆ¶Â·ï¼Žï¼?"å’Œå?Šè§’çš„'.''/'ï¼Œé‚£ä¹ˆæ˜¯æ•°
    //5ã€?å½“å‰?ä¸²æœ€å?Žä¸€ä¸ªæ±‰å­—æ˜¯"âˆ¶Â·ï¼Žï¼?"å’Œå?Šè§’çš„'.''/'ï¼Œä¸”é•¿åº¦å¤§äºŽ1ï¼Œé‚£ä¹ˆåŽ»æŽ‰æœ€å?Žä¸€ä¸ªå­—ç¬¦ã€‚ä¾‹å¦‚"1."
    //====================================================================
    private static void checkDateElements(List<Vertex> linkedArray)
    {
        if (linkedArray.size() < 2)
            return;
        ListIterator<Vertex> listIterator = linkedArray.listIterator();
        Vertex next = listIterator.next();
        Vertex current = next;
        while (listIterator.hasNext())
        {
            next = listIterator.next();
            if (TextUtility.isAllNum(current.realWord) || TextUtility.isAllChineseNum(current.realWord))
            {
                //===== 1ã€?å¦‚æžœå½“å‰?è¯?æ˜¯æ•°å­—ï¼Œä¸‹ä¸€ä¸ªè¯?æ˜¯â€œæœˆã€?æ—¥ã€?æ—¶ã€?åˆ†ã€?ç§’ã€?æœˆä»½â€?ä¸­çš„ä¸€ä¸ªï¼Œåˆ™å?ˆå¹¶ä¸”å½“å‰?è¯?è¯?æ€§æ˜¯æ—¶é—´
                String nextWord = next.realWord;
                if ((nextWord.length() == 1 && "æœˆæ—¥æ—¶åˆ†ç§’".contains(nextWord)) || (nextWord.length() == 2 && nextWord.equals("æœˆä»½")))
                {
                    mergeDate(listIterator, next, current);
                }
                //===== 2ã€?å¦‚æžœå½“å‰?è¯?æ˜¯å?¯ä»¥ä½œä¸ºå¹´ä»½çš„æ•°å­—ï¼Œä¸‹ä¸€ä¸ªè¯?æ˜¯â€œå¹´â€?ï¼Œåˆ™å?ˆå¹¶ï¼Œè¯?æ€§ä¸ºæ—¶é—´ï¼Œå?¦åˆ™ä¸ºæ•°å­—ã€‚
                else if (nextWord.equals("å¹´"))
                {
                    if (TextUtility.isYearTime(current.realWord))
                    {
                        mergeDate(listIterator, next, current);
                    }
                    //===== å?¦åˆ™å½“å‰?è¯?å°±æ˜¯æ•°å­—äº† =====
                    else
                    {
                        current.confirmNature(Nature.m);
                    }
                }
                else
                {
                    //===== 3ã€?å¦‚æžœæœ€å?Žä¸€ä¸ªæ±‰å­—æ˜¯"ç‚¹" ï¼Œåˆ™è®¤ä¸ºå½“å‰?æ•°å­—æ˜¯æ—¶é—´
                    if (current.realWord.endsWith("ç‚¹"))
                    {
                        current.confirmNature(Nature.t, true);
                    }
                    else
                    {
                        char[] tmpCharArray = current.realWord.toCharArray();
                        String lastChar = String.valueOf(tmpCharArray[tmpCharArray.length - 1]);
                        //===== 4ã€?å¦‚æžœå½“å‰?ä¸²æœ€å?Žä¸€ä¸ªæ±‰å­—ä¸?æ˜¯"âˆ¶Â·ï¼Žï¼?"å’Œå?Šè§’çš„'.''/'ï¼Œé‚£ä¹ˆæ˜¯æ•°
                        if (!"âˆ¶Â·ï¼Žï¼?./".contains(lastChar))
                        {
                            current.confirmNature(Nature.m, true);
                        }
                        //===== 5ã€?å½“å‰?ä¸²æœ€å?Žä¸€ä¸ªæ±‰å­—æ˜¯"âˆ¶Â·ï¼Žï¼?"å’Œå?Šè§’çš„'.''/'ï¼Œä¸”é•¿åº¦å¤§äºŽ1ï¼Œé‚£ä¹ˆåŽ»æŽ‰æœ€å?Žä¸€ä¸ªå­—ç¬¦ã€‚ä¾‹å¦‚"1."
                        else if (current.realWord.length() > 1)
                        {
                            char last = current.realWord.charAt(current.realWord.length() - 1);
                            current = Vertex.newNumberInstance(current.realWord.substring(0, current.realWord.length() - 1));
                            listIterator.previous();
                            listIterator.previous();
                            listIterator.set(current);
                            listIterator.next();
                            listIterator.add(Vertex.newPunctuationInstance(String.valueOf(last)));
                        }
                    }
                }
            }
            current = next;
        }
//        logger.trace("æ—¥æœŸè¯†åˆ«å?Žï¼š" + Graph.parseResult(linkedArray));
    }

    private static void mergeDate(ListIterator<Vertex> listIterator, Vertex next, Vertex current)
    {
        current = Vertex.newTimeInstance(current.realWord + next.realWord);
        listIterator.previous();
        listIterator.previous();
        listIterator.set(current);
        listIterator.next();
        listIterator.next();
        listIterator.remove();
    }

    /**
     * å°†ä¸€æ?¡è·¯å¾„è½¬ä¸ºæœ€ç»ˆç»“æžœ
     *
     * @param vertexList
     * @return
     */
    protected static List<Term> convert(List<Vertex> vertexList)
    {
        return convert(vertexList, false);
    }

    /**
     * ç”Ÿæˆ?äºŒå…ƒè¯?å›¾
     *
     * @param wordNet
     * @return
     */
    protected static Graph generateBiGraph(WordNet wordNet)
    {
        return wordNet.toGraph();
    }

    /**
     * åŽŸå­?åˆ†è¯?
     *
     * @param sSentence
     * @param start
     * @param end
     * @return
     * @deprecated åº”è¯¥ä½¿ç”¨å­—ç¬¦æ•°ç»„çš„ç‰ˆæœ¬
     */
    private static List<AtomNode> atomSegment(String sSentence, int start, int end)
    {
        if (end < start)
        {
            throw new RuntimeException("start=" + start + " < end=" + end);
        }
        List<AtomNode> atomSegment = new ArrayList<AtomNode>();
        int pCur = 0, nCurType, nNextType;
        StringBuilder sb = new StringBuilder();
        char c;


        //==============================================================================================
        // by zhenyulu:
        //
        // TODO: ä½¿ç”¨ä¸€ç³»åˆ—æ­£åˆ™è¡¨è¾¾å¼?å°†å?¥å­?ä¸­çš„å®Œæ•´æˆ?åˆ†ï¼ˆç™¾åˆ†æ¯”ã€?æ—¥æœŸã€?ç”µå­?é‚®ä»¶ã€?URLç­‰ï¼‰é¢„å…ˆæ??å?–å‡ºæ?¥
        //==============================================================================================

        char[] charArray = sSentence.substring(start, end).toCharArray();
        int[] charTypeArray = new int[charArray.length];

        // ç”Ÿæˆ?å¯¹åº”å?•ä¸ªæ±‰å­—çš„å­—ç¬¦ç±»åž‹æ•°ç»„
        for (int i = 0; i < charArray.length; ++i)
        {
            c = charArray[i];
            charTypeArray[i] = CharType.get(c);

            if (c == '.' && i < (charArray.length - 1) && CharType.get(charArray[i + 1]) == CharType.CT_NUM)
                charTypeArray[i] = CharType.CT_NUM;
            else if (c == '.' && i < (charArray.length - 1) && charArray[i + 1] >= '0' && charArray[i + 1] <= '9')
                charTypeArray[i] = CharType.CT_SINGLE;
            else if (charTypeArray[i] == CharType.CT_LETTER)
                charTypeArray[i] = CharType.CT_SINGLE;
        }

        // æ ¹æ?®å­—ç¬¦ç±»åž‹æ•°ç»„ä¸­çš„å†…å®¹å®Œæˆ?åŽŸå­?åˆ‡å‰²
        while (pCur < charArray.length)
        {
            nCurType = charTypeArray[pCur];

            if (nCurType == CharType.CT_CHINESE || nCurType == CharType.CT_INDEX ||
                nCurType == CharType.CT_DELIMITER || nCurType == CharType.CT_OTHER)
            {
                String single = String.valueOf(charArray[pCur]);
                if (single.length() != 0)
                    atomSegment.add(new AtomNode(single, nCurType));
                pCur++;
            }
            //å¦‚æžœæ˜¯å­—ç¬¦ã€?æ•°å­—æˆ–è€…å?Žé?¢è·Ÿéš?äº†æ•°å­—çš„å°?æ•°ç‚¹â€œ.â€?åˆ™ä¸€ç›´å?–ä¸‹åŽ»ã€‚
            else if (pCur < charArray.length - 1 && ((nCurType == CharType.CT_SINGLE) || nCurType == CharType.CT_NUM))
            {
                sb.delete(0, sb.length());
                sb.append(charArray[pCur]);

                boolean reachEnd = true;
                while (pCur < charArray.length - 1)
                {
                    nNextType = charTypeArray[++pCur];

                    if (nNextType == nCurType)
                        sb.append(charArray[pCur]);
                    else
                    {
                        reachEnd = false;
                        break;
                    }
                }
                atomSegment.add(new AtomNode(sb.toString(), nCurType));
                if (reachEnd)
                    pCur++;
            }
            // å¯¹äºŽæ‰€æœ‰å…¶å®ƒæƒ…å†µ
            else
            {
                atomSegment.add(new AtomNode(charArray[pCur], nCurType));
                pCur++;
            }
        }

//        logger.trace("åŽŸå­?åˆ†è¯?:" + atomSegment);
        return atomSegment;
    }

    /**
     * å°†è¿žç»­çš„æ•°å­—èŠ‚ç‚¹å?ˆå¹¶ä¸ºä¸€ä¸ª
     *
     * @param linkedArray
     */
    private static void mergeContinueNumIntoOne(List<Vertex> linkedArray)
    {
        if (linkedArray.size() < 2)
            return;

        ListIterator<Vertex> listIterator = linkedArray.listIterator();
        Vertex next = listIterator.next();
        Vertex current = next;
        while (listIterator.hasNext())
        {
            next = listIterator.next();
//            System.out.println("current:" + current + " next:" + next);
            if ((TextUtility.isAllNum(current.realWord) || TextUtility.isAllChineseNum(current.realWord)) && (TextUtility.isAllNum(next.realWord) || TextUtility.isAllChineseNum(next.realWord)))
            {
                /////////// è¿™éƒ¨åˆ†ä»Žé€»è¾‘ä¸Šç­‰å?ŒäºŽcurrent.realWord = current.realWord + next.realWord;
                // ä½†æ˜¯currentæŒ‡é’ˆè¢«å‡ ä¸ªè·¯å¾„å…±äº«ï¼Œéœ€è¦?å¤‡ä»½ï¼Œä¸?ç„¶ä¿®æ”¹äº†ä¸€å¤„å°±ä¿®æ”¹äº†å…¨å±€
                current = Vertex.newNumberInstance(current.realWord + next.realWord);
                listIterator.previous();
                listIterator.previous();
                listIterator.set(current);
                listIterator.next();
                listIterator.next();
                /////////// end è¿™éƒ¨åˆ†
//                System.out.println("before:" + linkedArray);
                listIterator.remove();
//                System.out.println("after:" + linkedArray);
            }
            else
            {
                current = next;
            }
        }

//        logger.trace("æ•°å­—è¯†åˆ«å?Žï¼š" + Graph.parseResult(linkedArray));
    }

    /**
     * ç”Ÿæˆ?ä¸€å…ƒè¯?ç½‘
     *
     * @param wordNetStorage
     */
    protected void generateWordNet(final WordNet wordNetStorage)
    {
        final char[] charArray = wordNetStorage.charArray;

        // æ ¸å¿ƒè¯?å…¸æŸ¥è¯¢
        DoubleArrayTrie<CoreDictionary.Attribute>.Searcher searcher = CoreDictionary.trie.getSearcher(charArray, 0);
        while (searcher.next())
        {
            wordNetStorage.add(searcher.begin + 1, new Vertex(new String(charArray, searcher.begin, searcher.length), searcher.value, searcher.index));
        }
        // å¼ºåˆ¶ç”¨æˆ·è¯?å…¸æŸ¥è¯¢
        if (config.forceCustomDictionary)
        {
            CustomDictionary.parseText(charArray, new AhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>()
            {
                @Override
                public void hit(int begin, int end, CoreDictionary.Attribute value)
                {
                    wordNetStorage.add(begin + 1, new Vertex(new String(charArray, begin, end - begin), value));
                }
            });
        }
        // åŽŸå­?åˆ†è¯?ï¼Œä¿?è¯?å›¾è¿žé€š
        LinkedList<Vertex>[] vertexes = wordNetStorage.getVertexes();
        for (int i = 1; i < vertexes.length; )
        {
            if (vertexes[i].isEmpty())
            {
                int j = i + 1;
                for (; j < vertexes.length - 1; ++j)
                {
                    if (!vertexes[j].isEmpty()) break;
                }
                wordNetStorage.add(i, quickAtomSegment(charArray, i - 1, j - 1));
                i = j;
            }
            else i += vertexes[i].getLast().realWord.length();
        }
    }

    /**
     * ä¸ºäº†ç´¢å¼•æ¨¡å¼?ä¿®é¥°ç»“æžœ
     *
     * @param vertexList
     * @param wordNetAll
     */
    protected List<Term> decorateResultForIndexMode(List<Vertex> vertexList, WordNet wordNetAll)
    {
        List<Term> termList = new LinkedList<Term>();
        int line = 1;
        ListIterator<Vertex> listIterator = vertexList.listIterator();
        listIterator.next();
        int length = vertexList.size() - 2;
        for (int i = 0; i < length; ++i)
        {
            Vertex vertex = listIterator.next();
            Term termMain = convert(vertex);
            termList.add(termMain);
            termMain.offset = line - 1;
            if (vertex.realWord.length() > 2)
            {
                // è¿‡é•¿è¯?æ‰€åœ¨çš„è¡Œ
                int currentLine = line;
                while (currentLine < line + vertex.realWord.length())
                {
                    Iterator<Vertex> iterator = wordNetAll.descendingIterator(currentLine);// è¿™ä¸€è¡Œçš„è¯?ï¼Œé€†åº?é??åŽ†ä¿?è¯?å­—å…¸åº?ç¨³å®šåœ°ç”±å¤§åˆ°å°?
                    while (iterator.hasNext())// è¿™ä¸€è¡Œçš„çŸ­è¯?
                    {
                        Vertex smallVertex = iterator.next();
                        if (
                            ((termMain.nature == Nature.mq && smallVertex.hasNature(Nature.q)) ||
                                smallVertex.realWord.length() >= config.indexMode)
                                && smallVertex != vertex // é˜²æ­¢é‡?å¤?æ·»åŠ 
                                && currentLine + smallVertex.realWord.length() <= line + vertex.realWord.length() // é˜²æ­¢è¶…å‡ºè¾¹ç•Œ
                            )
                        {
                            listIterator.add(smallVertex);
                            Term termSub = convert(smallVertex);
                            termSub.offset = currentLine - 1;
                            termList.add(termSub);
                        }
                    }
                    ++currentLine;
                }
            }
            line += vertex.realWord.length();
        }

        return termList;
    }

    /**
     * è¯?æ€§æ ‡æ³¨
     *
     * @param vertexList
     */
    protected static void speechTagging(List<Vertex> vertexList)
    {
        Viterbi.compute(vertexList, CoreDictionaryTransformMatrixDictionary.transformMatrixDictionary);
    }
}
