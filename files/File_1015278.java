/**
 * æ–‡   ä»¶  å??ï¼š  RandomUtil.java
 * å·¥   ç¨‹  å??ï¼š  MainServer
 * åˆ›å»ºæ—¥æœŸï¼š  2015å¹´2æœˆ5æ—¥ ä¸‹å?ˆ2:38:48
 * åˆ›å»ºä½œè€…ï¼š  æ?¨  å¼º <281455776@qq.com>
 */
package info.xiaomo.core.untils;

import org.apache.commons.lang3.RandomStringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;
import java.util.concurrent.ThreadLocalRandom;

/**
 * éš?æœºå·¥å…·ç±»
 *
 * @author : xiaomo
 */
public class RandomUtil {
    private static final Logger LOGGER = LoggerFactory.getLogger(RandomUtil.class);
    private static final String NUM_S = "0123456789";
    private static final String STR_S = "abcdefghijklmnopqrstuvwxyz0123456789";

    /**
     * éš?æœºäº§ç”Ÿminåˆ°maxä¹‹é—´çš„ä¸€ä¸ªæ•´æ•°å€¼ï¼ŒåŒ…å?«minå’Œmax
     */
    public static int random(int min, int max) {
        if (min > max) {
            throw new IllegalArgumentException("ä¼ å…¥çš„èŒƒå›´ä¸?å?ˆæ³•!æœ€å°?å€¼ä¸?èƒ½å¤§äºŽæœ€å¤§å€¼ï¼?");
        }
        return ThreadLocalRandom.current().nextInt(max - min + 1) + min;
    }

    /**
     * æ ¹æ?®å‡ çŽ‡è®¡ç®—æ˜¯å?¦ç”Ÿæˆ?ï¼Œæˆ?åŠŸå‡ çŽ‡æ˜¯sucRange/maxRange
     *
     * @param maxRange æœ€å¤§èŒƒå›´ï¼Œéš?æœºèŒƒå›´æ˜¯[1,maxRange]
     * @param sucRange æˆ?åŠŸèŒƒå›´ï¼Œæˆ?åŠŸèŒƒå›´æ˜¯[1,sucRange]
     * @return æˆ?åŠŸtrueå¤±è´¥false
     */
    public static boolean isGenerate(int maxRange, int sucRange) {
        return maxRange == sucRange || sucRange != 0 && random(1, maxRange) <= sucRange;
    }

    /**
     * ä»ŽæŒ‡å®šçš„çš„å…ƒç´ é›†ä¸­éš?æœºä¸€ä¸ªå…ƒç´ 
     *
     * @param collection å…ƒç´ é›†
     */
    public static <T> T randomElement(Collection<T> collection) {
        if (collection == null || collection.isEmpty()) {
            throw new IllegalArgumentException("å…ƒç´ é›†ä¸?èƒ½ä¸ºç©ºï¼?");
        }
        int index = random(0, collection.size() - 1);
        Iterator<T> it = collection.iterator();
        for (int i = 0; i <= index && it.hasNext(); i++) {
            T t = it.next();
            if (i == index) {
                return t;
            }
        }
        return null;
    }


    /**
     * ç”Ÿæˆ?ä¸€ä¸ª10ä½?çš„tonkenç”¨äºŽhttp cache(çº¯æ•°å­—)
     *
     * @return String    è¿”å›žç±»åž‹(çº¯æ•°å­—)
     */
    public static String getTonken() {
        return RandomStringUtils.random(10, NUM_S);
    }

    /**
     * ç”Ÿæˆ?éš?æœºæ•°
     *
     * @return String    è¿”å›žç±»åž‹
     */
    public static String randomPwd(int count) {
        return RandomStringUtils.random(count, STR_S);
    }

    /**
     * ç”Ÿæˆ?éš?æœºæ•°
     *
     * @return String    è¿”å›žç±»åž‹
     */
    public static String randomPwd() {
        return RandomStringUtils.random(10, STR_S);
    }

    /**
     * ä»ŽæŒ‡å®šçš„å…ƒç´ æ•°ç»„ä¸­éš?æœºå‡ºä¸€ä¸ªå…ƒç´ 
     *
     * @param array å…ƒç´ æ•°ç»„
     */
    public static <T> T randomElement(T[] array) {
        if (array == null || array.length == 0) {
            throw new IllegalArgumentException("å…ƒç´ æ•°ç»„ä¸?èƒ½ä¸ºç©ºï¼?");
        }
        return randomElement(Arrays.asList(array));
    }

    /**
     * æ ¹æ?®æ¯?ä¸ªå‡ çŽ‡è¿”å›žéš?æœºçš„ä¸€ä¸ªç´¢å¼•
     *
     * @return -1å¤±è´¥oréš?æœºçš„ç´¢å¼•
     */
    public static int randomIndexByProb(List<Integer> probs) {
        LinkedList<Integer> newProbs = new LinkedList<Integer>();
        int lastTotalProb = 0;
        for (Integer prob : probs) {
            int cuttentTotalProb = lastTotalProb + prob;
            newProbs.add(cuttentTotalProb);
            lastTotalProb = cuttentTotalProb;
        }
        if (newProbs.isEmpty()) {
            return -1;
        }
        int totalProb = newProbs.getLast();
        // æ€»æ¦‚çŽ‡ä¸º0
        if (totalProb == 0) {
            return -1;
        }
        int random = random(0, totalProb - 1);
        for (int i = 0; i < newProbs.size(); i++) {
            int cuttentTotalProb = newProbs.get(i);
            if (cuttentTotalProb > random) {
                return i;
            }
        }
        LOGGER.error("è®¡ç®—æ¦‚çŽ‡é”™è¯¯{}", probs.toString());
        return -1;
    }

    /**
     * æ ¹æ?®æ¯?ä¸ªå‡ çŽ‡è¿”å›žéš?æœºçš„ä¸€ä¸ªç´¢å¼•
     *
     * @return -1å¤±è´¥oréš?æœºçš„ç´¢å¼•
     */
    public static int randomIndexByProb(int[] array) {
        if (array == null || array.length == 0) {
            throw new IllegalArgumentException("å…ƒç´ æ•°ç»„ä¸?èƒ½ä¸ºç©ºï¼?");
        }
        List<Integer> list;
        list = new ArrayList<>();
        for (int i : array) {
            list.add(i);
        }
        return randomIndexByProb(list);
    }

    /**
     * ç”Ÿæˆ?ç›?å€¼
     *
     * @return
     */
    public static String createSalt() {
        return randomPwd(10);
    }


    /**
     * ç”Ÿæˆ?ç›?å€¼
     *
     * @param count
     * @return
     */
    public static String createSalt(int count) {
        return randomPwd(count);
    }

    public static void main(String[] args) {
        String salt = createSalt();
        System.out.println(salt);
        System.out.println(Md5Util.encode("xiaomo", salt));
    }
}
