package com.geekq.admin.entity;

import com.geekq.common.utils.MD5.MD5Utils;
import com.geekq.common.utils.numcal.BidConst;
import lombok.Getter;
import lombok.Setter;
import org.apache.ibatis.type.Alias;

import java.math.BigDecimal;

/**
 * ç”¨æˆ·çš„å¸?æˆ·ä¿¡æ?¯è´¦æˆ· ä¸€ä¸ªLoginInfo å¯¹åº”ä¸€ä¸ªUserInfoå¯¹åº”ä¸€ä¸ªAccount
 * 
 * @author é‚±æ¶¦æ³½
 */
@Getter
@Setter
@Alias("Account")
public class Account extends BaseDomain {
	private static final long serialVersionUID = 6760287512112252557L;
	private int version;
	private String tradePassword; // äº¤æ˜“å¯†ç ?
	private BigDecimal usableAmount = BidConst.ZERO; // å?¯ç”¨ä½™é¢?
	private BigDecimal freezedAmount = BidConst.ZERO; // å†»ç»“é‡‘é¢?
	private BigDecimal unReceiveInterest = BidConst.ZERO; // è´¦æˆ·å¾…æ”¶åˆ©æ?¯
	private BigDecimal unReceivePrincipal = BidConst.ZERO; // è´¦æˆ·å¾…æ”¶æœ¬é‡‘
	private BigDecimal unReturnAmount = BidConst.ZERO; // è´¦æˆ·å¾…è¿˜é‡‘é¢?
	private BigDecimal remainBorrowLimit = BidConst.ZERO; // è´¦æˆ·å‰©ä½™æŽˆä¿¡é¢?åº¦
	private BigDecimal borrowLimitAmount; // æŽˆä¿¡é¢?åº¦ï¼ˆå½“å‰?è¿˜å?¯ä»¥ä¿¡ç”¨å€Ÿæ¬¾é¢?åº¦ï¼‰

	private String abstractInfo;//æ‘˜è¦?ä¿¡æ?¯ç”¨äºŽé˜²ç¯¡æ”¹æ£€æŸ¥;

	public String getAbstractInfo() {//å?¯ç”¨ä½™é¢? + å†»ç»“é‡‘é¢? + è´¦æˆ·ç¥žåŸŸçš„æŽˆæ?ƒé¢?åº¦
		return MD5Utils.MD5(usableAmount.add(freezedAmount)
				.add(remainBorrowLimit).toString());
	}

	public boolean checkAbstractInfo() {//å?¯ç”¨ä½™é¢? + å†»ç»“é‡‘é¢? + è´¦æˆ·ç¥žåŸŸçš„æŽˆæ?ƒé¢?åº¦
		return MD5Utils.MD5(
				usableAmount.add(freezedAmount).add(remainBorrowLimit)
						.toString()).equals(abstractInfo);
	}

	public BigDecimal getTotalAmount() {
		return usableAmount.add(freezedAmount).add(unReceivePrincipal);
	}

	public void addUseableAmount(BigDecimal amount) {
		this.usableAmount = this.usableAmount.add(amount);
	}

	public void addFreezedAmount(BigDecimal amount) {
		this.freezedAmount = this.freezedAmount.add(amount);
	}

	public static Account empty(Long id) {
		Account account = new Account();
		account.setId(id);
		account.setBorrowLimitAmount(BidConst.DEFALUT_BORROWLIMITAMOUNT);
		account.setRemainBorrowLimit(BidConst.DEFALUT_BORROWLIMITAMOUNT);
		return account;
	}
}
