/*
 * Copyright 1999-2015 dangdang.com.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * </p>
 */

package io.elasticjob.lite.internal.storage;

import lombok.RequiredArgsConstructor;

/**
 * ä½œä¸šèŠ‚ç‚¹è·¯å¾„ç±».
 * 
 * <p>
 * ä½œä¸šèŠ‚ç‚¹æ˜¯åœ¨æ™®é€šçš„èŠ‚ç‚¹å‰?åŠ ä¸Šä½œä¸šå??ç§°çš„å‰?ç¼€.
 * </p>
 * 
 * @author zhangliang
 */
@RequiredArgsConstructor
public final class JobNodePath {
    
    private static final String LEADER_HOST_NODE = "leader/election/instance";
    
    private static final String CONFIG_NODE = "config";
    
    private static final String SERVERS_NODE = "servers";
    
    private static final String INSTANCES_NODE = "instances";
    
    private static final String SHARDING_NODE = "sharding";
    
    private final String jobName;
    
    /**
     * èŽ·å?–èŠ‚ç‚¹å…¨è·¯å¾„.
     * 
     * @param node èŠ‚ç‚¹å??ç§°
     * @return èŠ‚ç‚¹å…¨è·¯å¾„
     */
    public String getFullPath(final String node) {
        return String.format("/%s/%s", jobName, node);
    }
    
    /**
     * èŽ·å?–é…?ç½®èŠ‚ç‚¹æ ¹è·¯å¾„.
     *
     * @return é…?ç½®èŠ‚ç‚¹æ ¹è·¯å¾„
     */
    public String getConfigNodePath() {
        return String.format("/%s/%s", jobName, CONFIG_NODE);
    }
    
    /**
     * èŽ·å?–leaderé€‰ä¸¾åœ°å?€èŠ‚ç‚¹è·¯å¾„.
     *
     * @return leaderé€‰ä¸¾åœ°å?€èŠ‚ç‚¹è·¯å¾„
     */
    public String getLeaderHostNodePath() {
        return String.format("/%s/%s", jobName, LEADER_HOST_NODE);
    }
    
    /**
     * èŽ·å?–ä½œä¸šèŠ‚ç‚¹IPåœ°å?€æ ¹è·¯å¾„.
     *
     * @return ä½œä¸šèŠ‚ç‚¹IPåœ°å?€æ ¹è·¯å¾„
     */
    public String getServerNodePath() {
        return String.format("/%s/%s", jobName, SERVERS_NODE);
    }
    
    /**
     * æ ¹æ?®IPåœ°å?€èŽ·å?–ä½œä¸šèŠ‚ç‚¹è·¯å¾„.
     *
     * @param serverIp ä½œä¸šæœ?åŠ¡å™¨IPåœ°å?€
     * @return ä½œä¸šèŠ‚ç‚¹IPåœ°å?€è·¯å¾„
     */
    public String getServerNodePath(final String serverIp) {
        return String.format("%s/%s", getServerNodePath(), serverIp);
    }
    
    /**
     * èŽ·å?–ä½œä¸šå®žä¾‹èŠ‚ç‚¹æ ¹è·¯å¾„.
     *
     * @return ä½œä¸šå®žä¾‹èŠ‚ç‚¹æ ¹è·¯å¾„
     */
    public String getInstancesNodePath() {
        return String.format("/%s/%s", jobName, INSTANCES_NODE);
    }
    
    /**
     * æ ¹æ?®ä½œä¸šå®žä¾‹IDèŽ·å?–ä½œä¸šå®žä¾‹èŠ‚ç‚¹è·¯å¾„.
     *
     * @param instanceId ä½œä¸šå®žä¾‹ID
     * @return ä½œä¸šå®žä¾‹èŠ‚ç‚¹è·¯å¾„
     */
    public String getInstanceNodePath(final String instanceId) {
        return String.format("%s/%s", getInstancesNodePath(), instanceId);
    }
    
    /**
     * èŽ·å?–åˆ†ç‰‡èŠ‚ç‚¹æ ¹è·¯å¾„.
     *
     * @return åˆ†ç‰‡èŠ‚ç‚¹æ ¹è·¯å¾„
     */
    public String getShardingNodePath() {
        return String.format("/%s/%s", jobName, SHARDING_NODE);
    }
    
    /**
     * èŽ·å?–åˆ†ç‰‡èŠ‚ç‚¹è·¯å¾„.
     *
     * @param item åˆ†ç‰‡é¡¹
     * @param nodeName å­?èŠ‚ç‚¹å??ç§°
     * @return åˆ†ç‰‡èŠ‚ç‚¹è·¯å¾„
     */
    public String getShardingNodePath(final String item, final String nodeName) {
        return String.format("%s/%s/%s", getShardingNodePath(), item, nodeName);
    }
}
