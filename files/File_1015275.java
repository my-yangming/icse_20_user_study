package info.xiaomo.core.untils;

import info.xiaomo.core.constant.FileConst;
import info.xiaomo.core.constant.SymbolConst;
import org.springframework.web.multipart.MultipartFile;

import java.io.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

/**
 * æ­¤ç±»ä¸­å°?è£…ä¸€äº›å¸¸ç”¨çš„æ–‡ä»¶æ“?ä½œã€‚
 * æ‰€æœ‰æ–¹æ³•éƒ½æ˜¯é?™æ€?æ–¹æ³•ï¼Œä¸?éœ€è¦?ç”Ÿæˆ?æ­¤ç±»çš„å®žä¾‹ï¼Œ
 * ä¸ºé?¿å…?ç”Ÿæˆ?æ­¤ç±»çš„å®žä¾‹ï¼Œæž„é€ æ–¹æ³•è¢«ç”³æ˜Žä¸ºprivateç±»åž‹çš„ã€‚
 *
 * @author : xiaomo
 * @since 1.0
 */

public class FileUtil {
    /**
     * Buffer size when reading from input stream.
     *
     * @since ostermillerutils 1.00.00
     */
    private final static int BUFFER_SIZE = 1024;


    /**
     * ç§?æœ‰æž„é€ æ–¹æ³•ï¼Œé˜²æ­¢ç±»çš„å®žä¾‹åŒ–ï¼Œå› ä¸ºå·¥å…·ç±»ä¸?éœ€è¦?å®žä¾‹åŒ–ã€‚
     */
    private FileUtil() {

    }

    /**
     * ä¿®æ”¹æ–‡ä»¶çš„æœ€å?Žè®¿é—®æ—¶é—´ã€‚
     * å¦‚æžœæ–‡ä»¶ä¸?å­˜åœ¨åˆ™åˆ›å»ºè¯¥æ–‡ä»¶ã€‚
     * <b>ç›®å‰?è¿™ä¸ªæ–¹æ³•çš„è¡Œä¸ºæ–¹å¼?è¿˜ä¸?ç¨³å®šï¼Œä¸»è¦?æ˜¯æ–¹æ³•æœ‰äº›ä¿¡æ?¯è¾“å‡ºï¼Œè¿™äº›ä¿¡æ?¯è¾“å‡ºæ˜¯å?¦ä¿?ç•™è¿˜åœ¨è€ƒè™‘ä¸­ã€‚</b>
     *
     * @param file éœ€è¦?ä¿®æ”¹æœ€å?Žè®¿é—®æ—¶é—´çš„æ–‡ä»¶ã€‚
     * @since 1.0
     */
    public static void touch(File file) {
        long currentTime = System.currentTimeMillis();
        if (!file.exists()) {
            System.err.println("file not found:" + file.getName());
            System.err.println("Create a new file:" + file.getName());
            try {
                if (file.createNewFile()) {
                    System.out.println("Succeeded!");
                } else {
                    System.err.println("Create file failed!");
                }
            } catch (IOException e) {
                System.err.println("Create file failed!");
                e.printStackTrace();
            }
        }
        boolean result = file.setLastModified(currentTime);
        if (!result) {
            System.err.println("touch failed: " + file.getName());
        }
    }

    /**
     * ä¿®æ”¹æ–‡ä»¶çš„æœ€å?Žè®¿é—®æ—¶é—´ã€‚
     * å¦‚æžœæ–‡ä»¶ä¸?å­˜åœ¨åˆ™åˆ›å»ºè¯¥æ–‡ä»¶ã€‚
     * <b>ç›®å‰?è¿™ä¸ªæ–¹æ³•çš„è¡Œä¸ºæ–¹å¼?è¿˜ä¸?ç¨³å®šï¼Œä¸»è¦?æ˜¯æ–¹æ³•æœ‰äº›ä¿¡æ?¯è¾“å‡ºï¼Œè¿™äº›ä¿¡æ?¯è¾“å‡ºæ˜¯å?¦ä¿?ç•™è¿˜åœ¨è€ƒè™‘ä¸­ã€‚</b>
     *
     * @param fileName éœ€è¦?ä¿®æ”¹æœ€å?Žè®¿é—®æ—¶é—´çš„æ–‡ä»¶çš„æ–‡ä»¶å??ã€‚
     * @since 1.0
     */
    public static void touch(String fileName) {
        File file = new File(fileName);
        touch(file);
    }

    /**
     * ä¿®æ”¹æ–‡ä»¶çš„æœ€å?Žè®¿é—®æ—¶é—´ã€‚
     * å¦‚æžœæ–‡ä»¶ä¸?å­˜åœ¨åˆ™åˆ›å»ºè¯¥æ–‡ä»¶ã€‚
     * <b>ç›®å‰?è¿™ä¸ªæ–¹æ³•çš„è¡Œä¸ºæ–¹å¼?è¿˜ä¸?ç¨³å®šï¼Œä¸»è¦?æ˜¯æ–¹æ³•æœ‰äº›ä¿¡æ?¯è¾“å‡ºï¼Œè¿™äº›ä¿¡æ?¯è¾“å‡ºæ˜¯å?¦ä¿?ç•™è¿˜åœ¨è€ƒè™‘ä¸­ã€‚</b>
     *
     * @param files éœ€è¦?ä¿®æ”¹æœ€å?Žè®¿é—®æ—¶é—´çš„æ–‡ä»¶æ•°ç»„ã€‚
     * @since 1.0
     */
    public static void touch(File[] files) {
        for (File file : files) {
            touch(file);
        }
    }

    /**
     * ä¿®æ”¹æ–‡ä»¶çš„æœ€å?Žè®¿é—®æ—¶é—´ã€‚
     * å¦‚æžœæ–‡ä»¶ä¸?å­˜åœ¨åˆ™åˆ›å»ºè¯¥æ–‡ä»¶ã€‚
     * <b>ç›®å‰?è¿™ä¸ªæ–¹æ³•çš„è¡Œä¸ºæ–¹å¼?è¿˜ä¸?ç¨³å®šï¼Œä¸»è¦?æ˜¯æ–¹æ³•æœ‰äº›ä¿¡æ?¯è¾“å‡ºï¼Œè¿™äº›ä¿¡æ?¯è¾“å‡ºæ˜¯å?¦ä¿?ç•™è¿˜åœ¨è€ƒè™‘ä¸­ã€‚</b>
     *
     * @param fileNames éœ€è¦?ä¿®æ”¹æœ€å?Žè®¿é—®æ—¶é—´çš„æ–‡ä»¶å??æ•°ç»„ã€‚
     * @since 1.0
     */
    public static void touch(String[] fileNames) {
        File[] files = new File[fileNames.length];
        for (int i = 0; i < fileNames.length; i++) {
            files[i] = new File(fileNames[i]);
        }
        touch(files);
    }

    /**
     * åˆ¤æ–­æŒ‡å®šçš„æ–‡ä»¶æ˜¯å?¦å­˜åœ¨ã€‚
     *
     * @param fileName è¦?åˆ¤æ–­çš„æ–‡ä»¶çš„æ–‡ä»¶å??
     * @return å­˜åœ¨æ—¶è¿”å›žtrueï¼Œå?¦åˆ™è¿”å›žfalseã€‚
     * @since 1.0
     */
    public static boolean isFileExist(String fileName) {
        return new File(fileName).isFile();
    }

    /**
     * åˆ›å»ºæŒ‡å®šçš„ç›®å½•ã€‚
     * å¦‚æžœæŒ‡å®šçš„ç›®å½•çš„çˆ¶ç›®å½•ä¸?å­˜åœ¨åˆ™åˆ›å»ºå…¶ç›®å½•ä¹¦ä¸Šæ‰€æœ‰éœ€è¦?çš„çˆ¶ç›®å½•ã€‚
     * <b>æ³¨æ„?ï¼šå?¯èƒ½ä¼šåœ¨è¿”å›žfalseçš„æ—¶å€™åˆ›å»ºéƒ¨åˆ†çˆ¶ç›®å½•ã€‚</b>
     *
     * @param file è¦?åˆ›å»ºçš„ç›®å½•
     * @return å®Œå…¨åˆ›å»ºæˆ?åŠŸæ—¶è¿”å›žtrueï¼Œå?¦åˆ™è¿”å›žfalseã€‚
     * @since 1.0
     */
    public static boolean makeDirectory(File file) {
        File parent = file.getParentFile();
        return parent != null && parent.mkdirs();
    }

    /**
     * åˆ›å»ºæŒ‡å®šçš„ç›®å½•ã€‚
     * å¦‚æžœæŒ‡å®šçš„ç›®å½•çš„çˆ¶ç›®å½•ä¸?å­˜åœ¨åˆ™åˆ›å»ºå…¶ç›®å½•ä¹¦ä¸Šæ‰€æœ‰éœ€è¦?çš„çˆ¶ç›®å½•ã€‚
     * <b>æ³¨æ„?ï¼šå?¯èƒ½ä¼šåœ¨è¿”å›žfalseçš„æ—¶å€™åˆ›å»ºéƒ¨åˆ†çˆ¶ç›®å½•ã€‚</b>
     *
     * @param fileName è¦?åˆ›å»ºçš„ç›®å½•çš„ç›®å½•å??
     * @return å®Œå…¨åˆ›å»ºæˆ?åŠŸæ—¶è¿”å›žtrueï¼Œå?¦åˆ™è¿”å›žfalseã€‚
     * @since 1.0
     */
    public static boolean makeDirectory(String fileName) {
        File file = new File(fileName);
        return makeDirectory(file);
    }

    /**
     * æ¸…ç©ºæŒ‡å®šç›®å½•ä¸­çš„æ–‡ä»¶ã€‚
     * è¿™ä¸ªæ–¹æ³•å°†å°½å?¯èƒ½åˆ é™¤æ‰€æœ‰çš„æ–‡ä»¶ï¼Œä½†æ˜¯å?ªè¦?æœ‰ä¸€ä¸ªæ–‡ä»¶æ²¡æœ‰è¢«åˆ é™¤éƒ½ä¼šè¿”å›žfalseã€‚
     * å?¦å¤–è¿™ä¸ªæ–¹æ³•ä¸?ä¼šè¿­ä»£åˆ é™¤ï¼Œå?³ä¸?ä¼šåˆ é™¤å­?ç›®å½•å?Šå…¶å†…å®¹ã€‚
     *
     * @param directory è¦?æ¸…ç©ºçš„ç›®å½•
     * @return ç›®å½•ä¸‹çš„æ‰€æœ‰æ–‡ä»¶éƒ½è¢«æˆ?åŠŸåˆ é™¤æ—¶è¿”å›žtrueï¼Œå?¦åˆ™è¿”å›žfalse.
     * @since 1.0
     */
    public static boolean emptyDirectory(File directory) {
        boolean result = true;
        File[] entries = directory.listFiles();
        for (File entry : entries != null ? entries : new File[0]) {
            if (!entry.delete()) {
                result = false;
            }
        }
        return result;
    }

    /**
     * æ¸…ç©ºæŒ‡å®šç›®å½•ä¸­çš„æ–‡ä»¶ã€‚
     * è¿™ä¸ªæ–¹æ³•å°†å°½å?¯èƒ½åˆ é™¤æ‰€æœ‰çš„æ–‡ä»¶ï¼Œä½†æ˜¯å?ªè¦?æœ‰ä¸€ä¸ªæ–‡ä»¶æ²¡æœ‰è¢«åˆ é™¤éƒ½ä¼šè¿”å›žfalseã€‚
     * å?¦å¤–è¿™ä¸ªæ–¹æ³•ä¸?ä¼šè¿­ä»£åˆ é™¤ï¼Œå?³ä¸?ä¼šåˆ é™¤å­?ç›®å½•å?Šå…¶å†…å®¹ã€‚
     *
     * @param directoryName è¦?æ¸…ç©ºçš„ç›®å½•çš„ç›®å½•å??
     * @return ç›®å½•ä¸‹çš„æ‰€æœ‰æ–‡ä»¶éƒ½è¢«æˆ?åŠŸåˆ é™¤æ—¶è¿”å›žtrueï¼Œå?¦åˆ™è¿”å›žfalseã€‚
     * @since 1.0
     */
    public static boolean emptyDirectory(String directoryName) {
        File dir = new File(directoryName);
        return emptyDirectory(dir);
    }

    /**
     * åˆ é™¤æŒ‡å®šç›®å½•å?Šå…¶ä¸­çš„æ‰€æœ‰å†…å®¹ã€‚
     *
     * @param dirName è¦?åˆ é™¤çš„ç›®å½•çš„ç›®å½•å??
     * @return åˆ é™¤æˆ?åŠŸæ—¶è¿”å›žtrueï¼Œå?¦åˆ™è¿”å›žfalseã€‚
     * @since 1.0
     */
    public static boolean deleteDirectory(String dirName) {
        return deleteDirectory(new File(dirName));
    }

    /**
     * åˆ é™¤æŒ‡å®šç›®å½•å?Šå…¶ä¸­çš„æ‰€æœ‰å†…å®¹ã€‚
     *
     * @param dir è¦?åˆ é™¤çš„ç›®å½•
     * @return åˆ é™¤æˆ?åŠŸæ—¶è¿”å›žtrueï¼Œå?¦åˆ™è¿”å›žfalseã€‚
     * @since 1.0
     */
    public static boolean deleteDirectory(File dir) {
        if ((dir == null) || !dir.isDirectory()) {
            throw new IllegalArgumentException("Argument " + dir +
                    " is not a directory. ");
        }

        File[] entries = dir.listFiles();
        int sz = entries != null ? entries.length : 0;

        for (File entry : entries != null ? entries : new File[0]) {
            if (entry.isDirectory()) {
                if (!deleteDirectory(entry)) {
                    return false;
                }
            } else {
                if (!entry.delete()) {
                    return false;
                }
            }
        }

        return dir.delete();
    }


    /**
     * åˆ—å‡ºç›®å½•ä¸­çš„æ‰€æœ‰å†…å®¹ï¼ŒåŒ…æ‹¬å…¶å­?ç›®å½•ä¸­çš„å†…å®¹ã€‚
     *
     * @param file   è¦?åˆ—å‡ºçš„ç›®å½•
     * @param filter è¿‡æ»¤å™¨
     * @return ç›®å½•å†…å®¹çš„æ–‡ä»¶æ•°ç»„ã€‚
     * @since 1.0
     */
    public static File[] listAll(File file,
                                 javax.swing.filechooser.FileFilter filter) {
        List<File> arrayList = new ArrayList<>();
        File[] files;
        if (!file.exists() || file.isFile()) {
            return null;
        }
        list(arrayList, file, filter);
        files = new File[arrayList.size()];
        arrayList.toArray(files);
        return files;
    }


    /**
     * è¿”å›žæ–‡ä»¶çš„URLåœ°å?€ã€‚
     *
     * @param file æ–‡ä»¶
     * @return æ–‡ä»¶å¯¹åº”çš„çš„URLåœ°å?€
     * @throws MalformedURLException
     * @since 1.0
     * @deprecated åœ¨å®žçŽ°çš„æ—¶å€™æ²¡æœ‰æ³¨æ„?åˆ°Fileç±»æœ¬èº«å¸¦ä¸€ä¸ªtoURLæ–¹æ³•å°†æ–‡ä»¶è·¯å¾„è½¬æ?¢ä¸ºURLã€‚
     * è¯·ä½¿ç”¨File.toURLæ–¹æ³•ã€‚
     */
    public static URL getURL(File file) throws MalformedURLException {
        String fileURL = "file:/" + file.getAbsolutePath();
        return new URL(fileURL);
    }

    /**
     * ä»Žæ–‡ä»¶è·¯å¾„å¾—åˆ°æ–‡ä»¶å??ã€‚
     *
     * @param filePath æ–‡ä»¶çš„è·¯å¾„ï¼Œå?¯ä»¥æ˜¯ç›¸å¯¹è·¯å¾„ä¹Ÿå?¯ä»¥æ˜¯ç»?å¯¹è·¯å¾„
     * @return å¯¹åº”çš„æ–‡ä»¶å??
     * @since 1.0
     */
    public static String getFileName(String filePath) {
        File file = new File(filePath);
        return file.getName();
    }

    /**
     * ä»Žæ–‡ä»¶å??å¾—åˆ°æ–‡ä»¶ç»?å¯¹è·¯å¾„ã€‚
     *
     * @param fileName æ–‡ä»¶å??
     * @return å¯¹åº”çš„æ–‡ä»¶è·¯å¾„
     * @since 1.0
     */
    public static String getFilePath(String fileName) {
        File file = new File(fileName);
        return file.getAbsolutePath();
    }

    /**
     * å°†DOS/Windowsæ ¼å¼?çš„è·¯å¾„è½¬æ?¢ä¸ºUNIX/Linuxæ ¼å¼?çš„è·¯å¾„ã€‚
     * å…¶å®žå°±æ˜¯å°†è·¯å¾„ä¸­çš„"\"å…¨éƒ¨æ?¢ä¸º"/"ï¼Œå› ä¸ºåœ¨æŸ?äº›æƒ…å†µä¸‹æˆ‘ä»¬è½¬æ?¢ä¸ºè¿™ç§?æ–¹å¼?æ¯”è¾ƒæ–¹ä¾¿ï¼Œ
     * æŸ?ä¸­ç¨‹åº¦ä¸Šè¯´"/"æ¯”"\"æ›´é€‚å?ˆä½œä¸ºè·¯å¾„åˆ†éš”ç¬¦ï¼Œè€Œä¸”DOS/Windowsä¹Ÿå°†å®ƒå½“ä½œè·¯å¾„åˆ†éš”ç¬¦ã€‚
     *
     * @param filePath è½¬æ?¢å‰?çš„è·¯å¾„
     * @return è½¬æ?¢å?Žçš„è·¯å¾„
     * @since 1.0
     */
    public static String toUNIXpath(String filePath) {
        return filePath.replace('\\', '/');
    }

    /**
     * ä»Žæ–‡ä»¶å??å¾—åˆ°UNIXé£Žæ ¼çš„æ–‡ä»¶ç»?å¯¹è·¯å¾„ã€‚
     *
     * @param fileName æ–‡ä»¶å??
     * @return å¯¹åº”çš„UNIXé£Žæ ¼çš„æ–‡ä»¶è·¯å¾„
     * @see #toUNIXpath(String filePath) toUNIXpath
     * @since 1.0
     */
    public static String getUNIXfilePath(String fileName) {
        File file = new File(fileName);
        return toUNIXpath(file.getAbsolutePath());
    }

    /**
     * å¾—åˆ°æ–‡ä»¶çš„ç±»åž‹ã€‚
     * å®žé™…ä¸Šå°±æ˜¯å¾—åˆ°æ–‡ä»¶å??ä¸­æœ€å?Žä¸€ä¸ªâ€œ.â€?å?Žé?¢çš„éƒ¨åˆ†ã€‚
     *
     * @param fileName æ–‡ä»¶å??
     * @return æ–‡ä»¶å??ä¸­çš„ç±»åž‹éƒ¨åˆ†
     * @since 1.0
     */
    public static String getFileType(String fileName) {
        int point = fileName.lastIndexOf('.');
        int length = fileName.length();
        if (point == -1 || point == length - 1) {
            return "";
        } else {
            return fileName.substring(point + 1, length);
        }
    }

    /**
     * å¾—åˆ°æ–‡ä»¶çš„ç±»åž‹ã€‚
     * å®žé™…ä¸Šå°±æ˜¯å¾—åˆ°æ–‡ä»¶å??ä¸­æœ€å?Žä¸€ä¸ªâ€œ.â€?å?Žé?¢çš„éƒ¨åˆ†ã€‚
     *
     * @param file æ–‡ä»¶
     * @return æ–‡ä»¶å??ä¸­çš„ç±»åž‹éƒ¨åˆ†
     * @since 1.0
     */
    public static String getFileType(File file) {
        return getFileType(file.getName());
    }

    /**
     * å¾—åˆ°æ–‡ä»¶çš„å??å­—éƒ¨åˆ†ã€‚
     * å®žé™…ä¸Šå°±æ˜¯è·¯å¾„ä¸­çš„æœ€å?Žä¸€ä¸ªè·¯å¾„åˆ†éš”ç¬¦å?Žçš„éƒ¨åˆ†ã€‚
     *
     * @param fileName æ–‡ä»¶å??
     * @return æ–‡ä»¶å??ä¸­çš„å??å­—éƒ¨åˆ†
     * @since 1.0
     */
    public static String getNamePart(String fileName) {
        int point = getPathLsatIndex(fileName);
        int length = fileName.length();
        if (point == -1) {
            return fileName;
        } else if (point == length - 1) {
            int secondPoint = getPathLsatIndex(fileName, point - 1);
            if (secondPoint == -1) {
                if (length == 1) {
                    return fileName;
                } else {
                    return fileName.substring(0, point);
                }
            } else {
                return fileName.substring(secondPoint + 1, point);
            }
        } else {
            return fileName.substring(point + 1);
        }
    }

    /**
     * å¾—åˆ°æ–‡ä»¶å??ä¸­çš„çˆ¶è·¯å¾„éƒ¨åˆ†ã€‚
     * å¯¹ä¸¤ç§?è·¯å¾„åˆ†éš”ç¬¦éƒ½æœ‰æ•ˆã€‚
     * ä¸?å­˜åœ¨æ—¶è¿”å›ž""ã€‚
     * å¦‚æžœæ–‡ä»¶å??æ˜¯ä»¥è·¯å¾„åˆ†éš”ç¬¦ç»“å°¾çš„åˆ™ä¸?è€ƒè™‘è¯¥åˆ†éš”ç¬¦ï¼Œä¾‹å¦‚"/path/"è¿”å›ž""ã€‚
     *
     * @param fileName æ–‡ä»¶å??
     * @return çˆ¶è·¯å¾„ï¼Œä¸?å­˜åœ¨æˆ–è€…å·²ç»?æ˜¯çˆ¶ç›®å½•æ—¶è¿”å›ž""
     * @since 1.0
     */
    public static String getPathPart(String fileName) {
        int point = getPathLsatIndex(fileName);
        int length = fileName.length();
        if (point == -1) {
            return "";
        } else if (point == length - 1) {
            int secondPoint = getPathLsatIndex(fileName, point - 1);
            if (secondPoint == -1) {
                return "";
            } else {
                return fileName.substring(0, secondPoint);
            }
        } else {
            return fileName.substring(0, point);
        }
    }

    /**
     * å¾—åˆ°è·¯å¾„åˆ†éš”ç¬¦åœ¨æ–‡ä»¶è·¯å¾„ä¸­é¦–æ¬¡å‡ºçŽ°çš„ä½?ç½®ã€‚
     * å¯¹äºŽDOSæˆ–è€…UNIXé£Žæ ¼çš„åˆ†éš”ç¬¦éƒ½å?¯ä»¥ã€‚
     *
     * @param fileName æ–‡ä»¶è·¯å¾„
     * @return è·¯å¾„åˆ†éš”ç¬¦åœ¨è·¯å¾„ä¸­é¦–æ¬¡å‡ºçŽ°çš„ä½?ç½®ï¼Œæ²¡æœ‰å‡ºçŽ°æ—¶è¿”å›ž-1ã€‚
     * @since 1.0
     */
    public static int getPathIndex(String fileName) {
        int point = fileName.indexOf('/');
        if (point == -1) {
            point = fileName.indexOf('\\');
        }
        return point;
    }

    /**
     * å¾—åˆ°è·¯å¾„åˆ†éš”ç¬¦åœ¨æ–‡ä»¶è·¯å¾„ä¸­æŒ‡å®šä½?ç½®å?Žé¦–æ¬¡å‡ºçŽ°çš„ä½?ç½®ã€‚
     * å¯¹äºŽDOSæˆ–è€…UNIXé£Žæ ¼çš„åˆ†éš”ç¬¦éƒ½å?¯ä»¥ã€‚
     *
     * @param fileName  æ–‡ä»¶è·¯å¾„
     * @param fromIndex å¼€å§‹æŸ¥æ‰¾çš„ä½?ç½®
     * @return è·¯å¾„åˆ†éš”ç¬¦åœ¨è·¯å¾„ä¸­æŒ‡å®šä½?ç½®å?Žé¦–æ¬¡å‡ºçŽ°çš„ä½?ç½®ï¼Œæ²¡æœ‰å‡ºçŽ°æ—¶è¿”å›ž-1ã€‚
     * @since 1.0
     */
    public static int getPathIndex(String fileName, int fromIndex) {
        int point = fileName.indexOf('/', fromIndex);
        if (point == -1) {
            point = fileName.indexOf('\\', fromIndex);
        }
        return point;
    }

    /**
     * å¾—åˆ°è·¯å¾„åˆ†éš”ç¬¦åœ¨æ–‡ä»¶è·¯å¾„ä¸­æœ€å?Žå‡ºçŽ°çš„ä½?ç½®ã€‚
     * å¯¹äºŽDOSæˆ–è€…UNIXé£Žæ ¼çš„åˆ†éš”ç¬¦éƒ½å?¯ä»¥ã€‚
     *
     * @param fileName æ–‡ä»¶è·¯å¾„
     * @return è·¯å¾„åˆ†éš”ç¬¦åœ¨è·¯å¾„ä¸­æœ€å?Žå‡ºçŽ°çš„ä½?ç½®ï¼Œæ²¡æœ‰å‡ºçŽ°æ—¶è¿”å›ž-1ã€‚
     * @since 1.0
     */
    public static int getPathLsatIndex(String fileName) {
        int point = fileName.lastIndexOf('/');
        if (point == -1) {
            point = fileName.lastIndexOf('\\');
        }
        return point;
    }

    /**
     * å¾—åˆ°è·¯å¾„åˆ†éš”ç¬¦åœ¨æ–‡ä»¶è·¯å¾„ä¸­æŒ‡å®šä½?ç½®å‰?æœ€å?Žå‡ºçŽ°çš„ä½?ç½®ã€‚
     * å¯¹äºŽDOSæˆ–è€…UNIXé£Žæ ¼çš„åˆ†éš”ç¬¦éƒ½å?¯ä»¥ã€‚
     *
     * @param fileName  æ–‡ä»¶è·¯å¾„
     * @param fromIndex å¼€å§‹æŸ¥æ‰¾çš„ä½?ç½®
     * @return è·¯å¾„åˆ†éš”ç¬¦åœ¨è·¯å¾„ä¸­æŒ‡å®šä½?ç½®å‰?æœ€å?Žå‡ºçŽ°çš„ä½?ç½®ï¼Œæ²¡æœ‰å‡ºçŽ°æ—¶è¿”å›ž-1ã€‚
     * @since 1.0
     */
    public static int getPathLsatIndex(String fileName, int fromIndex) {
        int point = fileName.lastIndexOf('/', fromIndex);
        if (point == -1) {
            point = fileName.lastIndexOf('\\', fromIndex);
        }
        return point;
    }

    /**
     * å°†æ–‡ä»¶å??ä¸­çš„ç±»åž‹éƒ¨åˆ†åŽ»æŽ‰ã€‚
     *
     * @param filename æ–‡ä»¶å??
     * @return åŽ»æŽ‰ç±»åž‹éƒ¨åˆ†çš„ç»“æžœ
     * @since 1.0
     */
    public static String trimType(String filename) {
        int index = filename.lastIndexOf(".");
        if (index != -1) {
            return filename.substring(0, index);
        } else {
            return filename;
        }
    }

    /**
     * å¾—åˆ°ç›¸å¯¹è·¯å¾„ã€‚
     * æ–‡ä»¶å??ä¸?æ˜¯ç›®å½•å??çš„å­?èŠ‚ç‚¹æ—¶è¿”å›žæ–‡ä»¶å??ã€‚
     *
     * @param pathName ç›®å½•å??
     * @param fileName æ–‡ä»¶å??
     * @return å¾—åˆ°æ–‡ä»¶å??ç›¸å¯¹äºŽç›®å½•å??çš„ç›¸å¯¹è·¯å¾„ï¼Œç›®å½•ä¸‹ä¸?å­˜åœ¨è¯¥æ–‡ä»¶æ—¶è¿”å›žæ–‡ä»¶å??
     * @since 1.0
     */
    public static String getSubpath(String pathName, String fileName) {
        int index = fileName.indexOf(pathName);
        if (index != -1) {
            return fileName.substring(index + pathName.length() + 1);
        } else {
            return fileName;
        }
    }

    /**
     * æ£€æŸ¥ç»™å®šç›®å½•çš„å­˜åœ¨æ€§
     * ä¿?è¯?æŒ‡å®šçš„è·¯å¾„å?¯ç”¨ï¼Œå¦‚æžœæŒ‡å®šçš„è·¯å¾„ä¸?å­˜åœ¨ï¼Œé‚£ä¹ˆå»ºç«‹è¯¥è·¯å¾„ï¼Œå?¯ä»¥ä¸ºå¤šçº§è·¯å¾„
     *
     * @param path
     * @return çœŸå?‡å€¼
     * @since 1.0
     */
    public static boolean pathValidate(String path) {
        String[] arraypath = path.split("/");
        String tmppath = "";
        for (String anArraypath : arraypath) {
            tmppath += "/" + anArraypath;
            File d = new File(tmppath.substring(1));
            //æ£€æŸ¥Subç›®å½•æ˜¯å?¦å­˜åœ¨
            if (!d.exists()) {
                System.out.println(tmppath.substring(1));
                if (!d.mkdir()) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * æ ¹æ?®å†…å®¹ç”Ÿæˆ?æ–‡ä»¶
     *
     * @param path          è¦?ç”Ÿæˆ?æ–‡ä»¶çš„ç»?å¯¹è·¯å¾„ï¼Œ
     * @param modulecontent æ–‡ä»¶çš„å†…å®¹ã€‚
     * @return çœŸå?‡å€¼
     * @since 1.0
     */
    public static boolean genModuleTpl(String path, String modulecontent) throws IOException {

        path = getUNIXfilePath(path);
        String[] patharray = path.split("\\/");
        String modulepath = "";
        for (int i = 0; i < patharray.length - 1; i++) {
            modulepath += "/" + patharray[i];
        }
        File d = new File(modulepath.substring(1));
        if (!d.exists()) {
            if (!pathValidate(modulepath.substring(1))) {
                return false;
            }
        }
        //å»ºç«‹FileWriterå¯¹è±¡ï¼Œå¹¶å®žä¾‹åŒ–fw
        FileWriter fw = new FileWriter(path);
        //å°†å­—ç¬¦ä¸²å†™å…¥æ–‡ä»¶
        fw.write(modulecontent);
        fw.close();
        return true;
    }

    /**
     * èŽ·å?–å›¾ç‰‡æ–‡ä»¶çš„æ‰©å±•å??ï¼ˆå?‘å¸ƒç³»ç»Ÿä¸“ç”¨ï¼‰
     *
     * @param picPath ä¸ºå›¾ç‰‡å??ç§°åŠ ä¸Šå‰?é?¢çš„è·¯å¾„ä¸?åŒ…æ‹¬æ‰©å±•å??
     * @return å›¾ç‰‡çš„æ‰©å±•å??
     * @since 1.0
     */
    public static String getPicExtendName(String picPath) {
        picPath = getUNIXfilePath(picPath);
        String picExtend = "";
        String gif = ".gif";
        if (isFileExist(picPath + gif)) {
            picExtend = gif;
        }
        String jpeg = ".jpeg";
        if (isFileExist(picPath + jpeg)) {
            picExtend = jpeg;
        }
        String jpg = ".jpg";
        if (isFileExist(picPath + jpg)) {
            picExtend = jpg;
        }
        String png = ".png";
        if (isFileExist(picPath + png)) {
            picExtend = png;
        }
        //è¿”å›žå›¾ç‰‡æ‰©å±•å??
        return picExtend;
    }

    public static boolean copyFile(File in, File out) throws Exception {
        try {
            FileInputStream fis = new FileInputStream(in);
            FileOutputStream fos = new FileOutputStream(out);
            byte[] buf = new byte[1024];
            int i = 0;
            while ((i = fis.read(buf)) != -1) {
                fos.write(buf, 0, i);
            }
            fis.close();
            fos.close();
            return true;
        } catch (IOException ie) {
            ie.printStackTrace();
            return false;
        }
    }

    public static boolean copyFile(String infile, String outfile) throws Exception {
        try {
            File in = new File(infile);
            File out = new File(outfile);
            return copyFile(in, out);
        } catch (IOException ie) {
            ie.printStackTrace();
            return false;
        }

    }

    /**
     * Copy the data from the input stream to the output stream.
     *
     * @param in  data source
     * @param out data destination
     * @throws IOException in an input or output error occurs
     * @since orientals 1.00.00
     */
    private static void copy(InputStream in, OutputStream out) throws IOException {
        byte[] buffer = new byte[BUFFER_SIZE];
        int read;
        while ((read = in.read(buffer)) != -1) {
            out.write(buffer, 0, read);
        }
    }

    /**
     * å°†ç›®å½•ä¸­çš„å†…å®¹æ·»åŠ åˆ°åˆ—è¡¨ã€‚
     *
     * @param list   æ–‡ä»¶åˆ—è¡¨
     * @param filter è¿‡æ»¤å™¨
     * @param file   ç›®å½•
     */
    private static void list(List<File> list, File file,
                             javax.swing.filechooser.FileFilter filter) {
        if (filter.accept(file)) {
            list.add(file);
            if (file.isFile()) {
                return;
            }
        }
        if (file.isDirectory()) {
            File[] files = file.listFiles();
            for (File file1 : files != null ? files : new File[0]) {
                list(list, file1, filter);
            }
        }

    }


    /**
     * æ–‡ä»¶ä¸Šä¼ 
     *
     * @param file  file
     * @param email email
     * @return fileUrl
     */
    public static String upload(MultipartFile file, String email) {
        String savePath = "";
        String filename = "";
        if (file != null && !file.isEmpty()) {
            // èŽ·å?–å›¾ç‰‡çš„æ–‡ä»¶å??
            String fileName = file.getOriginalFilename();
            // é‡?æ–°å®šä¹‰å›¾ç‰‡å??å­—
            filename = FileUtil.getNewFileName(fileName, email);
            //ä¸Šä¼ æœ?åŠ¡å™¨ä¸Š æ–°æ–‡ä»¶è·¯å¾„
            String os = System.getProperty("os.name").toLowerCase();
            try {
                // åˆ¤æ–­æœ?åŠ¡å™¨ä¸Š æ–‡ä»¶å¤¹æ˜¯å?¦å­˜åœ¨
                File newFile = new File(savePath);
                if (!newFile.exists()) {
                    boolean result = newFile.mkdirs();
                    System.out.println(result);
                }
                savePath = savePath + filename;
                FileOutputStream out = new FileOutputStream(savePath);
                // å†™å…¥æ–‡ä»¶
                out.write(file.getBytes());
                out.flush();
                out.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return filename;
    }


    public static byte[] readStream(InputStream inStream) throws Exception {
        ByteArrayOutputStream outsStream = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        int len = -1;
        while ((len = inStream.read(buffer)) != -1) {
            outsStream.write(buffer, 0, len);
        }
        outsStream.close();
        inStream.close();
        return outsStream.toByteArray();
    }

    public static byte[] readFileImage(File file) throws IOException {
        BufferedInputStream bufferedInputStream = new BufferedInputStream(
                new FileInputStream(file));
        int len = bufferedInputStream.available();
        byte[] bytes = new byte[len];
        int r = bufferedInputStream.read(bytes);
        if (len != r) {
            bytes = null;
            throw new IOException("è¯»å?–æ–‡ä»¶ä¸?æ­£ç¡®");
        }
        bufferedInputStream.close();
        return bytes;
    }

    public static byte[] readFileImage(String filename) throws IOException {
        BufferedInputStream bufferedInputStream = new BufferedInputStream(
                new FileInputStream(filename));
        int len = bufferedInputStream.available();
        byte[] bytes = new byte[len];
        int r = bufferedInputStream.read(bytes);
        if (len != r) {
            bytes = null;
            throw new IOException("è¯»å?–æ–‡ä»¶ä¸?æ­£ç¡®");
        }
        bufferedInputStream.close();
        return bytes;
    }


    /**
     * è¯»å?–è¿”å›žçš„ä¿¡æ?¯
     *
     * @param in
     * @return
     */
    private static String getData(InputStream in) {
        String result = "";
        StringBuilder sb = new StringBuilder();
        BufferedReader br = new BufferedReader(new InputStreamReader(in));
        String line = "";
        try {
            while ((line = br.readLine()) != null) {
                // result = result + line;
                sb.append(line);
            }
            br.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                br.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return sb.toString();
    }


    private static String bytesToHexString(byte[] src) {
        StringBuilder stringBuilder = new StringBuilder();
        if (src == null || src.length <= 0) {
            return null;
        }
        for (byte aSrc : src) {
            int v = aSrc & 0xFF;
            String hv = Integer.toHexString(v);
            if (hv.length() < 2) {
                stringBuilder.append(0);
            }
            stringBuilder.append(hv);
        }
        return stringBuilder.toString();
    }


    /**
     * èŽ·å?–æ–‡ä»¶å†…å®¹
     *
     * @param filePath
     * @return
     * @throws IOException
     */
    private static String getFile(String filePath) throws IOException {
        byte[] b = new byte[28];
        InputStream inputStream = null;
        try {
            inputStream = new FileInputStream(filePath);
            inputStream.read(b, 0, 28);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (inputStream != null) {
                try {
                    inputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return bytesToHexString(b);
    }

    /**
     * @param filePath filePath
     * @return FileConst
     * @throws IOException
     */
    public static FileConst getType(String filePath) throws IOException {
        String fileHead = getFile(filePath);
        if (fileHead == null || fileHead.length() == 0) {
            return null;
        }
        fileHead = fileHead.toUpperCase();
        FileConst[] fileConsts = FileConst.values();
        for (FileConst type : fileConsts) {
            if (fileHead.startsWith(type.getValue())) {
                return type;
            }
        }
        return null;
    }

    public static String getNewFileName(String fileName, String email) {
        String fileType = FileUtil.getFileType(fileName);
        String newName = email.split(SymbolConst.AT)[0];
        return (TimeUtil.getDateNow(TimeUtil.DATE_FORMAT_STRING) + SymbolConst.HENGXIAN + newName + SymbolConst.DIAN + fileType).toLowerCase();
    }

    public static boolean isImage(String imageName) {
        String fileType = FileUtil.getFileType(imageName);
        return !("bmp".equals(fileType) || "BMP".equals(fileType)
                || "jpg".equals(fileType) || "JPG".equals(fileType)
                || "jpeg".equals(fileType) || "JPEG".equals(fileType)
                || "git".equals(fileType) || "GIF".equals(fileType)
                || "png".equals(fileType) || "PNG".equals(fileType));
    }

}
