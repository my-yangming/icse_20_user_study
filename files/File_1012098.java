package jetbrains.mps.ide.dialogs.project.creation;

/*Generated by MPS */

import com.intellij.openapi.ui.DialogWrapper;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.project.AbstractModule;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import javax.swing.JTextField;
import javax.swing.JComboBox;
import org.jetbrains.mps.openapi.persistence.ModelRoot;
import org.jetbrains.mps.openapi.persistence.ModelFactoryType;
import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SModelName;
import java.awt.HeadlessException;
import jetbrains.mps.ide.project.ProjectHelper;
import com.intellij.uiDesigner.core.GridLayoutManager;
import java.awt.Dimension;
import com.intellij.uiDesigner.core.GridConstraints;
import javax.swing.JLabel;
import javax.swing.DefaultComboBoxModel;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.extapi.persistence.FileBasedModelRoot;
import javax.swing.DefaultListCellRenderer;
import java.awt.event.ItemListener;
import java.awt.event.ItemEvent;
import jetbrains.mps.persistence.DefaultModelRoot;
import java.awt.Insets;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.List;
import java.util.LinkedList;
import java.util.Arrays;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.extapi.persistence.ModelFactoryService;
import com.intellij.ui.ColoredListCellRenderer;
import javax.swing.JList;
import jetbrains.mps.smodel.ModelAccessHelper;
import jetbrains.mps.util.Computable;
import jetbrains.mps.smodel.language.LanguageAspectSupport;
import javax.lang.model.SourceVersion;
import org.jetbrains.annotations.Nullable;
import javax.swing.JComponent;

public class NewModelDialog extends DialogWrapper {
  @NotNull
  private final MPSProject myProject;
  @NotNull
  private final AbstractModule myModule;

  private final JPanel myContentPane = new JPanel(new BorderLayout());
  private final JTextField myModelName = new JTextField();
  private final JComboBox<String> myModelStereotype = new JComboBox<String>();
  private final JComboBox<ModelRoot> myModelRoots = new JComboBox<ModelRoot>();
  private final JComboBox<ModelFactoryType> myModelStorageFormat = new JComboBox<ModelFactoryType>();

  private ModelCreateHelper myResult;

  public static NewModelDialog createForNewModel(Project project, SModule module, String namespace, String stereotype, boolean strict) {
    NewModelDialog dialog = new NewModelDialog(project, (AbstractModule) module, stereotype, strict, "New Model", (namespace == null || namespace.length() == 0 ? namespace : namespace + "."), false);
    return dialog;

  }

  public static NewModelDialog createForCloneModel(Project project, SModule containingModule, @NotNull SModelName originalModelName) {
    NewModelDialog dialog = new NewModelDialog(project, (AbstractModule) containingModule, originalModelName.getStereotype(), false, String.format("Clone Model %s", originalModelName.getValue()), new SModelName(originalModelName.getLongName() + "_clone").getValue(), true);
    return dialog;
  }

  public static NewModelDialog createForMoveModel(Project project, SModule targetModule, @NotNull SModelName originalModelName) {
    NewModelDialog dialog = new NewModelDialog(project, (AbstractModule) targetModule, originalModelName.getStereotype(), true, String.format("Move Model %s", originalModelName.getValue()), originalModelName.getLongName(), true);
    return dialog;
  }

  /*package*/ NewModelDialog(Project project, @NotNull AbstractModule module, String stereotype, boolean strict, String title, String modelName, boolean checkInitial) throws HeadlessException {
    super(ProjectHelper.toIdeaProject(project));
    setTitle(title);
    myProject = (MPSProject) project;
    myModule = module;
    project.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        assert myModule.getModelRoots().iterator().hasNext() : "Can't create a model in solution with no model roots";
        initContentPane();
      }
    });
    myModelName.setText(modelName);
    if (stereotype != null) {
      myModelStereotype.setSelectedItem(stereotype);
      myModelStereotype.setEnabled(!(strict));
    }

    init();
    if (checkInitial) {
      check();
    }
  }

  public ModelCreateHelper getResultHelper() {
    return myResult;
  }

  private void initContentPane() {
    JPanel mainPanel = new JPanel(new GridLayoutManager(6, 1));
    mainPanel.setPreferredSize(new Dimension(200, 50));

    GridConstraints constraints = new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null);

    mainPanel.add(new JLabel("Model root:"), constraints);

    constraints.setRow(constraints.getRow() + 1);
    mainPanel.add(myModelRoots, constraints);
    DefaultComboBoxModel<ModelRoot> model = new DefaultComboBoxModel<ModelRoot>();
    for (ModelRoot root : myModule.getModelRoots()) {
      if (root.canCreateModels()) {
        model.addElement(root);
      } else if (myModule instanceof Language && root instanceof FileBasedModelRoot) {
        // Can fix only FileBased model root (default for language) 
        model.addElement(root);
      }
    }

    if (model.getSize() == 0) {
      model.addElement(null);
    }
    myModelRoots.setRenderer(new DefaultListCellRenderer());
    myModelRoots.addItemListener(new ItemListener() {
      @Override
      public void itemStateChanged(ItemEvent e) {
        check();
        myModelStorageFormat.setVisible(myModelRoots.getSelectedItem() instanceof DefaultModelRoot);
      }
    });
    myModelRoots.setModel(model);

    constraints.setRow(constraints.getRow() + 1);
    mainPanel.add(new JLabel("Model name:"), constraints);

    JPanel nameAndStereotype = new JPanel(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
    GridConstraints nameConstraints = new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null);

    nameAndStereotype.add(myModelName, nameConstraints);
    myModelName.addKeyListener(new KeyAdapter() {
      @Override
      public void keyReleased(KeyEvent event) {
        check();
      }
    });

    final JLabel atSign = new JLabel();
    nameConstraints.setColumn(nameConstraints.getColumn() + 1);
    nameConstraints.setHSizePolicy(GridConstraints.SIZEPOLICY_FIXED);
    nameAndStereotype.add(atSign, nameConstraints);

    List<String> stereotypes = new LinkedList<String>(Arrays.asList(SModelStereotype.values));
    if (!(myModule instanceof Generator)) {
      stereotypes.remove(SModelStereotype.GENERATOR);
    }
    myModelStereotype.setEditable(true);
    myModelStereotype.setModel(new DefaultComboBoxModel<String>(stereotypes.toArray(new String[stereotypes.size()])));
    myModelStereotype.addKeyListener(new KeyAdapter() {
      @Override
      public void keyReleased(KeyEvent event) {
        check();
      }
    });
    myModelStereotype.addItemListener(new ItemListener() {
      @Override
      public void itemStateChanged(ItemEvent p0) {
        check();
        atSign.setText((myModelStereotype.getSelectedItem().equals(SModelStereotype.NONE) ? "" : "@"));
      }
    });

    nameConstraints.setColumn(nameConstraints.getColumn() + 1);
    nameAndStereotype.add(myModelStereotype, nameConstraints);

    constraints.setRow(constraints.getRow() + 1);
    mainPanel.add(nameAndStereotype, constraints);

    constraints.setRow(constraints.getRow() + 1);
    mainPanel.add(new JLabel("Storage format:"), constraints);
    constraints.setRow(constraints.getRow() + 1);
    ModelFactoryService modelFactories = myProject.getComponent(ModelFactoryService.class);
    List<ModelFactoryType> factoryTypes = modelFactories.getFactoryTypes();
    myModelStorageFormat.setModel(new DefaultComboBoxModel<ModelFactoryType>(factoryTypes.toArray(new ModelFactoryType[factoryTypes.size()])));
    myModelStorageFormat.setRenderer(new ColoredListCellRenderer<ModelFactoryType>() {
      protected void customizeCellRenderer(JList<? extends ModelFactoryType> p0, ModelFactoryType factoryType, int p2, boolean p3, boolean p4) {
        append(factoryType.getFormatTitle());
      }
    });
    myModelStorageFormat.setSelectedItem(factoryTypes.get(0));
    mainPanel.add(myModelStorageFormat, constraints);
    myContentPane.add(mainPanel, BorderLayout.CENTER);
  }

  @Override
  protected void doOKAction() {
    if (!(check())) {
      return;
    }

    myResult = makeHelper();

    super.doOKAction();
  }

  public ModelCreateHelper makeHelper() {
    return new ModelCreateHelper(myProject, myModule, new SModelName(myModelName.getText(), ((String) myModelStereotype.getSelectedItem()).trim()), (ModelRoot) myModelRoots.getSelectedItem(), myModelStorageFormat.getItemAt(myModelStorageFormat.getSelectedIndex()));
  }

  private boolean check() {
    return new ModelAccessHelper(myProject.getModelAccess()).runReadAction(new Computable<Boolean>() {
      public Boolean compute() {
        return checkImpl();
      }
    });
  }

  private boolean checkImpl() {
    Object selected = myModelRoots.getSelectedItem();

    if (!((selected instanceof ModelRoot))) {
      setErrorText("Model root is not selected");
      return false;
    }

    ModelRoot mr = ((ModelRoot) selected);

    String modelName = myModelName.getText();
    if (modelName.length() == 0) {
      setErrorText("Empty model name isn't allowed");
      return false;
    }

    if (modelName.lastIndexOf(".") == modelName.length()) {
      setErrorText("Empty model short name isn't allowed");
      return false;
    }

    if (myModule instanceof Language) {
      if (LanguageAspectSupport.isLanguageModelNameForbidden(modelName)) {
        String shortName = modelName.substring(modelName.lastIndexOf(".") + 1);
        setErrorText("This name isn't allowed because '" + shortName + "' is language aspect name");
        return false;
      }
    }

    if (!(SourceVersion.isName(modelName))) {
      setErrorText("Model name should be valid Java package");
      return false;
    }

    if (!(mr.canCreateModel(new SModelName(myModelName.getText(), myModelStereotype.getSelectedItem().toString().trim()).getLongName()))) {
      boolean isLang = myModule instanceof Language;
      if (!(isLang) || !((mr instanceof FileBasedModelRoot))) {
        setErrorText("Can't create a model with this name under this model root");
        return false;
      }
    }

    setErrorText(null);
    return true;
  }

  @Nullable
  @Override
  protected JComponent createCenterPanel() {
    return myContentPane;
  }

  @Nullable
  @Override
  public JComponent getPreferredFocusedComponent() {
    return myModelName;
  }
}
