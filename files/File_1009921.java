package com.xiaojinzi.component.cache;

import android.support.annotation.Nullable;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;


/**
 * ================================================
 * LRU å?³ Least Recently Used,æœ€è¿‘æœ€å°‘ä½¿ç”¨,å½“ç¼“å­˜æ»¡äº†,ä¼šä¼˜å…ˆæ·˜æ±°é‚£äº›æœ€è¿‘æœ€ä¸?å¸¸è®¿é—®çš„æ•°æ?®
 * @see Cache
 * ================================================
 */
public class LruCache<K, V> implements Cache<K, V> {
    private final LinkedHashMap<K, V> cache = new LinkedHashMap<>(100, 0.75f, true);
    private final int initialMaxSize;
    private int maxSize;
    private int currentSize = 0;

    /**
     * Constructor for LruCache.
     *
     * @param size è¿™ä¸ªç¼“å­˜çš„æœ€å¤§ size,è¿™ä¸ª size æ‰€ä½¿ç”¨çš„å?•ä½?å¿…é¡»å’Œ {@link #getItemSize(Object)} æ‰€ä½¿ç”¨çš„å?•ä½?ä¸€è‡´.
     */
    public LruCache(int size) {
        this.initialMaxSize = size;
        this.maxSize = size;
    }

    /**
     * è®¾ç½®ä¸€ä¸ªç³»æ•°åº”ç”¨äºŽå½“æ—¶æž„é€ å‡½æ•°ä¸­æ‰€ä¼ å…¥çš„ size, ä»Žè€Œå¾—åˆ°ä¸€ä¸ªæ–°çš„ {@link #maxSize}
     * å¹¶ä¼šç«‹å?³è°ƒç”¨ {@link #evict} å¼€å§‹æ¸…é™¤æ»¡è¶³æ?¡ä»¶çš„æ?¡ç›®
     *
     * @param multiplier ç³»æ•°
     */
    public synchronized void setSizeMultiplier(float multiplier) {
        if (multiplier < 0) {
            throw new IllegalArgumentException("Multiplier must be >= 0");
        }
        maxSize = Math.round(initialMaxSize * multiplier);
        evict();
    }

    /**
     * è¿”å›žæ¯?ä¸ª {@code item} æ‰€å? ç”¨çš„ size,é»˜è®¤ä¸º1,è¿™ä¸ª size çš„å?•ä½?å¿…é¡»å’Œæž„é€ å‡½æ•°æ‰€ä¼ å…¥çš„ size ä¸€è‡´
     * å­?ç±»å?¯ä»¥é‡?å†™è¿™ä¸ªæ–¹æ³•ä»¥é€‚åº”ä¸?å?Œçš„å?•ä½?,æ¯”å¦‚è¯´ bytes
     *
     * @param value æ¯?ä¸ª {@code item} key æ‰€å? ç”¨çš„ size
     * @param value æ¯?ä¸ª {@code item} value æ‰€å? ç”¨çš„ size
     * @return å?•ä¸ª item çš„ {@code size}
     */
    protected int getItemSize(K key,V value) {
        return 1;
    }

    private int safeSizeOf(K key,V value) {
        int result = getItemSize(key, value);
        if (result < 0) {
            throw new IllegalStateException("Negative size: " + key + "=" + value);
        }
        return result;
    }

    /**
     * å½“ç¼“å­˜ä¸­æœ‰è¢«é©±é€?çš„æ?¡ç›®æ—¶,ä¼šå›žè°ƒæ­¤æ–¹æ³•,é»˜è®¤ç©ºå®žçŽ°,å­?ç±»å?¯ä»¥é‡?å†™è¿™ä¸ªæ–¹æ³•
     *
     * @param key   è¢«é©±é€?æ?¡ç›®çš„ {@code key}
     * @param value è¢«é©±é€?æ?¡ç›®çš„ {@code value}
     */
    protected void onItemEvicted(K key, V value) {
        // optional override
    }

    /**
     * è¿”å›žå½“å‰?ç¼“å­˜æ‰€èƒ½å…?è®¸çš„æœ€å¤§ size
     *
     * @return {@code maxSize}
     */
    @Override
    public synchronized int getMaxSize() {
        return maxSize;
    }

    /**
     * è¿”å›žå½“å‰?ç¼“å­˜å·²å? ç”¨çš„æ€» size
     *
     * @return {@code size}
     */
    @Override
    public synchronized int size() {
        return currentSize;
    }

    /**
     * å¦‚æžœè¿™ä¸ª {@code key} åœ¨ç¼“å­˜ä¸­æœ‰å¯¹åº”çš„ {@code value} å¹¶ä¸”ä¸?ä¸º {@code null},åˆ™è¿”å›ž true
     *
     * @param key ç”¨æ?¥æ˜ å°„çš„ {@code key}
     * @return {@code true} ä¸ºåœ¨å®¹å™¨ä¸­å?«æœ‰è¿™ä¸ª {@code key}, å?¦åˆ™ä¸º {@code false}
     */
    @Override
    public synchronized boolean containsKey(K key) {
        return cache.containsKey(key);
    }

    /**
     * è¿”å›žå½“å‰?ç¼“å­˜ä¸­å?«æœ‰çš„æ‰€æœ‰ {@code key}
     *
     * @return {@code keySet}
     */
    @Override
    public synchronized Set<K> keySet() {
        return cache.keySet();
    }

    /**
     * è¿”å›žè¿™ä¸ª {@code key} åœ¨ç¼“å­˜ä¸­å¯¹åº”çš„ {@code value}, å¦‚æžœè¿”å›ž {@code null} è¯´æ˜Žè¿™ä¸ª {@code key} æ²¡æœ‰å¯¹åº”çš„ {@code value}
     *
     * @param key ç”¨æ?¥æ˜ å°„çš„ {@code key}
     * @return {@code value}
     */
    @Override
    @Nullable
    public synchronized V get(K key) {
        return cache.get(key);
    }

    /**
     * å°† {@code key} å’Œ {@code value} ä»¥æ?¡ç›®çš„å½¢å¼?åŠ å…¥ç¼“å­˜,å¦‚æžœè¿™ä¸ª {@code key} åœ¨ç¼“å­˜ä¸­å·²ç»?æœ‰å¯¹åº”çš„ {@code value}
     * åˆ™æ­¤ {@code value} è¢«æ–°çš„ {@code value} æ›¿æ?¢å¹¶è¿”å›ž,å¦‚æžœä¸º {@code null} è¯´æ˜Žæ˜¯ä¸€ä¸ªæ–°æ?¡ç›®
     * <p>
     * å¦‚æžœ {@link #safeSizeOf} è¿”å›žçš„ size å¤§äºŽæˆ–ç­‰äºŽç¼“å­˜æ‰€èƒ½å…?è®¸çš„æœ€å¤§ size, åˆ™ä¸?èƒ½å?‘ç¼“å­˜ä¸­æ·»åŠ æ­¤æ?¡ç›®
     * æ­¤æ—¶ä¼šå›žè°ƒ {@link #onItemEvicted(Object, Object)} é€šçŸ¥æ­¤æ–¹æ³•å½“å‰?è¢«é©±é€?çš„æ?¡ç›®
     *
     * @param key   é€šè¿‡è¿™ä¸ª {@code key} æ·»åŠ æ?¡ç›®
     * @param value éœ€è¦?æ·»åŠ çš„ {@code value}
     * @return å¦‚æžœè¿™ä¸ª {@code key} åœ¨å®¹å™¨ä¸­å·²ç»?å‚¨å­˜æœ‰ {@code value}, åˆ™è¿”å›žä¹‹å‰?çš„ {@code value} å?¦åˆ™è¿”å›ž {@code null}
     */
    @Override
    @Nullable
    public synchronized V put(K key, V value) {
        final int itemSize = safeSizeOf(key,value);
        if (itemSize >= maxSize) {
            onItemEvicted(key, value);
            return null;
        }

        final V result = cache.put(key, value);
        if (value != null) {
            currentSize += safeSizeOf(key,value);
        }
        if (result != null) {
            currentSize -= safeSizeOf(key,result);
        }
        evict();

        return result;
    }

    /**
     * ç§»é™¤ç¼“å­˜ä¸­è¿™ä¸ª {@code key} æ‰€å¯¹åº”çš„æ?¡ç›®,å¹¶è¿”å›žæ‰€ç§»é™¤æ?¡ç›®çš„ {@code value}
     * å¦‚æžœè¿”å›žä¸º {@code null} åˆ™æœ‰å?¯èƒ½æ—¶å› ä¸ºè¿™ä¸ª {@code key} å¯¹åº”çš„ {@code value} ä¸º {@code null} æˆ–æ?¡ç›®ä¸?å­˜åœ¨
     *
     * @param key ä½¿ç”¨è¿™ä¸ª {@code key} ç§»é™¤å¯¹åº”çš„æ?¡ç›®
     * @return å¦‚æžœè¿™ä¸ª {@code key} åœ¨å®¹å™¨ä¸­å·²ç»?å‚¨å­˜æœ‰ {@code value} å¹¶ä¸”åˆ é™¤æˆ?åŠŸåˆ™è¿”å›žåˆ é™¤çš„ {@code value}, å?¦åˆ™è¿”å›ž {@code null}
     */
    @Override
    @Nullable
    public synchronized V remove(K key) {
        final V value = cache.remove(key);
        if (value != null) {
            currentSize -= safeSizeOf(key,value);
        }
        return value;
    }

    /**
     * æ¸…é™¤ç¼“å­˜ä¸­æ‰€æœ‰çš„å†…å®¹
     */
    @Override
    public void clear() {
        trimToSize(0);
    }

    /**
     * å½“æŒ‡å®šçš„ size å°?äºŽå½“å‰?ç¼“å­˜å·²å? ç”¨çš„æ€» size æ—¶,ä¼šå¼€å§‹æ¸…é™¤ç¼“å­˜ä¸­æœ€è¿‘æœ€å°‘ä½¿ç”¨çš„æ?¡ç›®
     *
     * @param size {@code size}
     */
    protected synchronized void trimToSize(int size) {
        Map.Entry<K, V> last;
        Iterator<Entry<K, V>> iterator = null;
        while (currentSize > size) {
            if (iterator == null) {
                iterator = cache.entrySet().iterator();
            }
            last = iterator.next();
            final K key = last.getKey();
            final V value = last.getValue();

            iterator.remove();
            currentSize -= safeSizeOf(key,value);
            onItemEvicted(key, value);
        }
    }

    /**
     * å½“ç¼“å­˜ä¸­å·²å? ç”¨çš„æ€» size å¤§äºŽæ‰€èƒ½å…?è®¸çš„æœ€å¤§ size ,ä¼šä½¿ç”¨  {@link #trimToSize(int)} å¼€å§‹æ¸…é™¤æ»¡è¶³æ?¡ä»¶çš„æ?¡ç›®
     */
    private void evict() {
        trimToSize(maxSize);
    }
}

