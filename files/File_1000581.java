package org.nutz.json;

import java.text.DateFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import java.util.regex.Pattern;

import org.nutz.castor.Castors;
import org.nutz.lang.util.NutMap;

/**
 * æ??è¿°Jsonè¾“å‡ºçš„æ ¼å¼?
 *
 * @author zozoh(zozohtnt@gmail.com)
 * @author Wendal(wendal1985@gmail.com)
 * @author æœ‰å¿ƒçŒ´(belialofking@163.com)
 *
 */
public class JsonFormat extends NutMap {

    private static final long serialVersionUID = 1L;
    private static char DEFAULT_SEPARATOR = '\"';

    /**
     * ç´§å‡‘æ¨¡å¼? -- æ— æ?¢è¡Œ,å¿½ç•¥nullå€¼
     */
    public static JsonFormat compact() {
        return new JsonFormat(true).setIgnoreNull(true);
    }

    /**
     * å…¨éƒ¨è¾“å‡ºæ¨¡å¼? -- æ?¢è¡Œ,ä¸?å¿½ç•¥nullå€¼
     */
    public static JsonFormat full() {
        return new JsonFormat(false).setIgnoreNull(false);
    }

    /**
     * ä¸€èˆ¬æ¨¡å¼? -- æ?¢è¡Œ,ä½†å¿½ç•¥nullå€¼
     */
    public static JsonFormat nice() {
        return new JsonFormat(false).setIgnoreNull(true);
    }

    /**
     * ä¸ºäº†æ‰“å?°å‡ºæ?¥å®¹æ˜“çœ‹ï¼ŒæŠŠå??å­—åŽ»æŽ‰å¼•å?·
     */
    public static JsonFormat forLook() {
        return new JsonFormat(false).setQuoteName(false).setIgnoreNull(true);
    }

    /**
     * ä¸?æ?¢è¡Œ,ä¸?å¿½ç•¥ç©ºå€¼
     */
    public static JsonFormat tidy() {
        return new JsonFormat(true).setIgnoreNull(false);
    }

    /**
     * èŽ·å¾—ä¸€ä¸ªJsonè¾“å‡ºæ ¼å¼?ï¼Œé»˜è®¤æ ¼å¼?å¦‚ä¸‹: <br>
     * <li>ä½¿ç”¨ç´§å‡‘æ¨¡å¼?è¾“å‡º
     * <li>ç¼©è¿›æ—¶ç”¨çš„å­—ç¬¦ä¸²ä¸ºã€Ž&nbsp;&nbsp;&nbsp;ã€?ï¼ˆä¸‰ä¸ªç©ºæ ¼ï¼‰
     * <li>ç»™å­—æ®µæ·»åŠ å?Œå¼•å?·
     * <li>åˆ†éš”ç¬¦ä¸ºã€Ž"ã€?
     *
     */
    public JsonFormat() {
        this(true);
    }

    /**
     * èŽ·å¾—ä¸€ä¸ªJsonè¾“å‡ºæ ¼å¼?ï¼Œé»˜è®¤æ ¼å¼?å¦‚ä¸‹: <br>
     * <li>ç¼©è¿›æ—¶ç”¨çš„å­—ç¬¦ä¸²ä¸ºã€Ž&nbsp;&nbsp;&nbsp;ã€?ï¼ˆä¸‰ä¸ªç©ºæ ¼ï¼‰
     * <li>ç»™å­—æ®µæ·»åŠ å?Œå¼•å?·
     * <li>åˆ†éš”ç¬¦ä¸ºã€Ž"ã€?
     *
     * @param compact
     *            true: ä½¿ç”¨ç´§å‡‘æ¨¡å¼?è¾“å‡ºï¼Œfalse: ä¸?ä½¿ç”¨ç´§å‡‘æ¨¡å¼?è¾“å‡º
     */
    public JsonFormat(boolean compact) {
        setCompact(compact);
    }

    public static class Function {
    	/**
    	 * æ˜¯å?¦å¿½ç•¥ JsonShape æ³¨è§£
    	 */
    	public static String ignoreJsonShape = "ignoreJsonShape";
        /**
         * ç¼©è¿›æ—¶ç”¨çš„å­—ç¬¦ä¸²
         */
        public static String indentBy = "indentBy";
        /**
         * æ˜¯å?¦ä½¿ç”¨ç´§å‡‘æ¨¡å¼?è¾“å‡º
         */
        public static String compact = "compact";
        /**
         * æ˜¯å?¦ç»™å­—æ®µæ·»åŠ å?Œå¼•å?·
         */
        public static String quoteName = "quoteName";
        /**
         * æ˜¯å?¦å¿½ç•¥nullå€¼
         */
        public static String ignoreNull = "ignoreNull";
        /**
         * ä»…è¾“å‡ºçš„å­—æ®µçš„æ­£åˆ™è¡¨è¾¾å¼?
         */
        public static String actived = "actived";
        /**
         * ä¸?è¾“å‡ºçš„å­—æ®µçš„æ­£åˆ™è¡¨è¾¾å¼?
         */
        public static String locked = "locked";
        /**
         * ç”¨åˆ°çš„ç±»åž‹è½¬æ?¢å™¨
         */
        public static String castors = "castors";
        /**
         * åˆ†éš”ç¬¦
         */
        public static String separator = "separator";
        /**
         * æ˜¯å?¦è‡ªåŠ¨å°†å€¼åº”ç”¨Unicodeç¼–ç ?
         */
        public static String autoUnicode = "autoUnicode";
        /**
         * unicodeç¼–ç ?ç”¨å¤§å†™è¿˜æ˜¯å°?å†™
         */
        public static String unicodeLower = "unicodeLower";
        /**
         * æ—¥æœŸæ ¼å¼?
         */
        public static String dateFormat = "dateFormat";
        /**
         * æ•°å­—æ ¼å¼?
         */
        public static String numberFormat = "numberFormat";
        /**
         * é?‡åˆ°ç©ºå€¼çš„æ—¶å€™å†™å…¥å­—ç¬¦ä¸²
         */
        public static String nullAsEmtry = "nullAsEmtry";
        public static String nullListAsEmpty = "nullListAsEmpty";
        public static String nullStringAsEmpty = "nullStringAsEmpty";
        public static String nullBooleanAsFalse = "nullBooleanAsFalse";
        public static String nullNumberAsZero = "nullNumberAsZero";
        public static String timeZone = "timeZone";
        public static String locale = "locale";
        public static String dateFormatRaw = "dateFormatRaw";
    }

    @JsonField(ignore = true)
    private Castors castors;

    /**
     * åˆ¤æ–­è¯¥å­—æ®µæ˜¯å?¦æ˜¯æŒ‡å®šè¾“å‡ºæ–¹å¼?ä¸­çš„å­—æ®µ
     *
     * @param name
     *            å­—æ®µå??
     * @return true: è¯¥å­—æ®µåœ¨å¿½ç•¥å­—æ®µä¸­ï¼Œfalse: è¯¥å­—æ®µä¸?åœ¨å¿½ç•¥å­—æ®µä¸­
     */
    public boolean ignore(String name) {
        if (null != getActived())
            return !getActived().matcher(name).find();
        if (null != getLocked())
            return getLocked().matcher(name).find();
        return false;
    }

    // ===================================================================
    // getter setter

    /**
     * Jsonè¾“å‡ºæ ¼å¼?çš„ç´§å‡‘æ¨¡å¼?
     *
     * @return true: ä½¿ç”¨ç´§å‡‘æ¨¡å¼?è¾“å‡ºï¼Œfalse: ä¸?ä½¿ç”¨ç´§å‡‘æ¨¡å¼?è¾“å‡º
     */
    public boolean isCompact() {
        return getBoolean(Function.compact, false);
    }

    /**
     * è®¾ç½®Jsonè¾“å‡ºæ ¼å¼?çš„ç´§å‡‘æ¨¡å¼?
     *
     * @param compact
     *            true: ä½¿ç”¨ç´§å‡‘æ¨¡å¼?è¾“å‡ºï¼Œfalse: ä¸?ä½¿ç”¨ç´§å‡‘æ¨¡å¼?è¾“å‡º
     * @return è¯¥Jsonè¾“å‡ºæ ¼å¼?
     */
    public JsonFormat setCompact(boolean compact) {
        put(Function.compact, compact);
        return this;
    }

    @Deprecated
    public int getIndent() {
        return 0;
    }

    @Deprecated
    public JsonFormat setIndent(int indent) {
        return this;
    }

    @Deprecated
    public JsonFormat increaseIndent() {
        return this;
    }

    @Deprecated
    public JsonFormat decreaseIndent() {
        return this;
    }

    /**
     * Jsonè¾“å‡ºæ ¼å¼?çš„ç¼©è¿›æ—¶ç”¨çš„å­—ç¬¦ä¸²
     *
     * @return ç¼©è¿›æ—¶ç”¨çš„å­—ç¬¦ä¸²
     */
    public String getIndentBy() {
        return getString(Function.indentBy, "   ");
    }
    /**
     * è®¾ç½®å¿½ç•¥ JsonShape æ³¨è§£
     * @return
     */
    public JsonFormat ignoreJsonShape() {
		put(Function.ignoreJsonShape,true);
		return this;
	}
    
    public boolean isIgnoreJsonShape() {
		return getBoolean(Function.ignoreJsonShape);
	}

    /**
     * è®¾ç½®Jsonè¾“å‡ºæ ¼å¼?çš„ç¼©è¿›æ—¶ç”¨çš„å­—ç¬¦ä¸²
     *
     * @param indentBy
     *            è®¾ç½®ç¼©è¿›æ—¶ç”¨çš„å­—ç¬¦ä¸²
     * @return è¯¥Jsonè¾“å‡ºæ ¼å¼?
     */
    public JsonFormat setIndentBy(String indentBy) {
        put(Function.indentBy, indentBy);
        return this;
    }

    /**
     * Jsonè¾“å‡ºæ ¼å¼?çš„ç»™å­—æ®µæ·»åŠ å?Œå¼•å?·
     *
     * @return æ˜¯å?¦ç»™å­—æ®µæ·»åŠ å?Œå¼•å?·
     */
    public boolean isQuoteName() {
        return getBoolean(Function.quoteName, true); // é»˜è®¤ä¸ºtrue
    }

    /**
     * è®¾ç½®Jsonè¾“å‡ºæ ¼å¼?çš„ç»™å­—æ®µæ·»åŠ å?Œå¼•å?·
     *
     * @param quoteName
     *            true: ç»™å­—æ®µæ·»åŠ å?Œå¼•å?·ï¼Œfalse: ä¸?ç»™å­—æ®µæ·»åŠ å?Œå¼•å?·
     * @return è¯¥Jsonè¾“å‡ºæ ¼å¼?
     */
    public JsonFormat setQuoteName(boolean quoteName) {
        put(Function.quoteName, quoteName);
        return this;
    }

    /**
     * Jsonè¾“å‡ºæ ¼å¼?çš„å¿½ç•¥nullå€¼
     *
     * @return æ˜¯å?¦å¿½ç•¥nullçš„å€¼
     */
    public boolean isIgnoreNull() {
        return getBoolean(Function.ignoreNull, false);
    }

    /**
     * è®¾ç½®Jsonè¾“å‡ºæ ¼å¼?ä¸­æ˜¯å?¦å¿½ç•¥null
     *
     * @param ignoreNull
     *            true: å¿½ç•¥nullçš„å€¼ï¼Œfalse: ä¸?å¿½ç•¥nullçš„å€¼
     * @return è¯¥Jsonè¾“å‡ºæ ¼å¼?
     */
    public JsonFormat setIgnoreNull(boolean ignoreNull) {
        put(Function.ignoreNull, ignoreNull);
        return this;
    }

    /**
     * è®¾ç½®Jsonè¾“å‡ºæ ¼å¼?ä¸­è¾“å‡ºçš„å­—æ®µ
     *
     * @param regex
     *            è¾“å‡ºçš„å­—æ®µçš„æ­£åˆ™è¡¨è¾¾å¼?
     * @return è¯¥Jsonè¾“å‡ºæ ¼å¼?
     */
    public JsonFormat setActived(String regex) {
        put(Function.actived, Pattern.compile(regex));
        return this;
    }

    /**
     * è®¾ç½®Jsonè¾“å‡ºæ ¼å¼?ä¸­ä¸?è¾“å‡ºçš„å­—æ®µ
     *
     * @param regex
     *            ä¸?è¾“å‡ºçš„å­—æ®µçš„æ­£åˆ™è¡¨è¾¾å¼?
     * @return è¯¥Jsonè¾“å‡ºæ ¼å¼?
     */
    public JsonFormat setLocked(String regex) {
        put(Function.locked, Pattern.compile(regex));
        return this;
    }

    public Castors getCastors() {
        return castors == null ? Castors.me() : castors;
    }

    public JsonFormat setCastors(Castors castors) {
        this.castors = castors;
        return this;
    }

    /**
     * è®¾ç½®Jsonè¾“å‡ºæ ¼å¼?çš„åˆ†éš”ç¬¦
     *
     * @param separator
     *            åˆ†éš”ç¬¦
     * @return è¯¥Jsonè¾“å‡ºæ ¼å¼?
     */
    public JsonFormat setSeparator(char separator) {
        put(Function.separator, separator);
        return this;
    }

    /**
     * Jsonè¾“å‡ºæ ¼å¼?çš„åˆ†éš”ç¬¦
     *
     * @return åˆ†éš”ç¬¦
     */
    public char getSeparator() {
        Character separator = getAs(Function.separator, Character.class);
        if (separator != null)
            return separator;
        return DEFAULT_SEPARATOR;
    }

    /**
     * è®¾ç½®Jsonè¾“å‡ºæ ¼å¼?çš„è‡ªåŠ¨å°†å€¼åº”ç”¨unicodeç¼–ç ?
     *
     * @param autoUnicode
     *            true: è‡ªåŠ¨å°†å€¼åº”ç”¨unicodeç¼–ç ?ï¼Œfalse: ä¸?è‡ªåŠ¨å°†å€¼åº”ç”¨unicodeç¼–ç ?
     * @return è¯¥Jsonè¾“å‡ºæ ¼å¼?
     */
    public JsonFormat setAutoUnicode(boolean autoUnicode) {
        put(Function.autoUnicode, autoUnicode);
        return this;
    }

    /**
     * Jsonè¾“å‡ºæ ¼å¼?çš„è‡ªåŠ¨unicodeç¼–ç ?
     *
     * @return true: è‡ªåŠ¨å°†å€¼åº”ç”¨unicodeç¼–ç ?ï¼Œfalse: ä¸?è‡ªåŠ¨å°†å€¼åº”ç”¨unicodeç¼–ç ?
     */
    public boolean isAutoUnicode() {
        return getBoolean(Function.autoUnicode, false);
    }

    /**
     * Jsonè¾“å‡ºæ ¼å¼?çš„unicodeç¼–ç ?
     *
     * @return true: unicodeç¼–ç ?ç”¨å¤§å†™ï¼Œfalse: unicodeç¼–ç ?ç”¨å°?å†™
     */
    public boolean isUnicodeLower() {
        return getBoolean(Function.unicodeLower, false);
    }

    /**
     * è®¾ç½®Jsonè¾“å‡ºæ ¼å¼?çš„unicodeç¼–ç ?å¤§å°?å†™è§„åˆ™
     *
     * @param unicodeLower
     *            true: unicodeç¼–ç ?ç”¨å¤§å†™ï¼Œfalse: unicodeç¼–ç ?ç”¨å°?å†™
     * @return è¯¥Jsonè¾“å‡ºæ ¼å¼?
     */
    public JsonFormat setUnicodeLower(boolean unicodeLower) {
        put(Function.unicodeLower, unicodeLower);
        return this;
    }

    /**
     * è®¾ç½®Jsonè¾“å‡ºæ ¼å¼?çš„è®¾ç½®æ—¥æœŸæ ¼å¼?
     *
     * @param df
     *            æ—¥æœŸæ ¼å¼?
     * @return è¯¥Jsonè¾“å‡ºæ ¼å¼?
     */
    public JsonFormat setDateFormat(String df) {
        if (df == null) {
            remove(Function.dateFormat);
        } else if (DATEFORMAT_TIMESTAMP.equals(df)) {
            put(Function.dateFormat, new TimeStampDateFormat());
        } else {
            put(Function.dateFormat, new SimpleDateFormat(df));
            put(Function.dateFormatRaw, df);
        }
        return this;
    }

    /**
     * è®¾ç½®Jsonè¾“å‡ºæ ¼å¼?çš„æ—¥æœŸæ ¼å¼?
     *
     * @param df
     *            æ—¥æœŸæ ¼å¼?
     * @return è¯¥Jsonè¾“å‡ºæ ¼å¼?
     */
    public JsonFormat setDateFormat(DateFormat df) {
        put(Function.dateFormat, df);
        return this;
    }

    /**
     * Jsonè¾“å‡ºæ ¼å¼?çš„æ—¥æœŸæ ¼å¼?
     *
     * @return æ—¥æœŸæ ¼å¼?
     */
    public DateFormat getDateFormat() {
        DateFormat df = getAs(Function.dateFormat, DateFormat.class);
        return df == null ? null : (DateFormat) df.clone();
    }

    /**
     * Jsonè¾“å‡ºæ ¼å¼?çš„æ•°å­—æ ¼å¼?
     *
     * @return æ•°å­—æ ¼å¼?
     */
    public NumberFormat getNumberFormat() {
        NumberFormat nf = getAs(Function.numberFormat, NumberFormat.class);
        return nf == null ? null : (NumberFormat) nf.clone();
    }

    /**
     * è®¾ç½®Jsonè¾“å‡ºæ ¼å¼?çš„æ•°å­—æ ¼å¼?
     *
     * @param numberFormat
     *            æ•°å­—æ ¼å¼?
     * @return è¯¥Jsonè¾“å‡ºæ ¼å¼?
     */
    public JsonFormat setNumberFormat(NumberFormat numberFormat) {
        put(Function.numberFormat, numberFormat);
        return this;
    }

    /**
     * ç”Ÿæˆ?ä¸€ä¸ªè¯¥Jsonè¾“å‡ºæ ¼å¼?çš„å‰¯æœ¬
     *
     * @return è¯¥Jsonè¾“å‡ºæ ¼å¼?çš„å‰¯æœ¬
     */
    @Override
    public JsonFormat clone() {
        JsonFormat jf = new JsonFormat();
        jf.putAll(this);
        return jf;
    }

    public static String DATEFORMAT_TIMESTAMP = "timestamp";

    public Pattern getActived() {
        return getAs(Function.actived, Pattern.class);
    }

    public JsonFormat setActived(Pattern actived) {
        put(Function.actived, actived);
        return this;
    }

    public Pattern getLocked() {
        return getAs(Function.locked, Pattern.class);
    }

    public JsonFormat setLocked(Pattern locked) {
        put(Function.locked, locked);
        return this;
    }

    public boolean isNullAsEmtry() {
        return getBoolean(Function.nullAsEmtry, false);
    }

    public JsonFormat setNullAsEmtry(boolean nullAsEmtry) {
        put(Function.nullAsEmtry, nullAsEmtry);
        return this;
    }

    public TimeZone getTimeZone() {
        return getAs(Function.timeZone, TimeZone.class);
    }

    public JsonFormat setTimeZone(TimeZone timeZone) {
        put(Function.timeZone, timeZone);
        return this;
    }

    public boolean isNullListAsEmpty() {
        return getBoolean(Function.nullListAsEmpty, false);
    }

    public JsonFormat setNullListAsEmpty(boolean nullListAsEmpty) {
        put(Function.nullListAsEmpty, nullListAsEmpty);
        return this;
    }

    public boolean isNullStringAsEmpty() {
        return getBoolean(Function.nullStringAsEmpty, false);
    }

    public JsonFormat setNullStringAsEmpty(boolean nullStringAsEmpty) {
        put(Function.nullStringAsEmpty, nullStringAsEmpty);
        return this;
    }

    public boolean isNullBooleanAsFalse() {
        return getBoolean(Function.nullBooleanAsFalse, false);
    }

    public JsonFormat setNullBooleanAsFalse(boolean nullBooleanAsFalse) {
        put(Function.nullBooleanAsFalse, nullBooleanAsFalse);
        return this;
    }

    public boolean isNullNumberAsZero() {
        return getBoolean(Function.nullNumberAsZero, false);
    }

    public JsonFormat setNullNumberAsZero(boolean nullNumberAsZero) {
        put(Function.nullNumberAsZero, nullNumberAsZero);
        return this;
    }
    
    public JsonFormat setLocale(String locale) {
        put(Function.locale, locale);
        return this;
    }
    
    public String getLocale() {
        return getString(Function.locale);
    }
    
    public String getDateFormatRaw() {
        return getString(Function.dateFormatRaw);
    }
}
