package com.cg.baseproject.encryption;

import java.math.BigInteger;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.lang3.StringUtils;

/**
 * ç¼–ç ?å·¥å…·ç±» 
 * å®žçŽ°aesåŠ å¯†ã€?è§£å¯† 
 */
public class EncryptUtils {

    /**
     * åŠ å¯†ç”¨çš„Key å?¯ä»¥ç”¨26ä¸ªå­—æ¯?å’Œæ•°å­—ç»„æˆ? æ­¤å¤„ä½¿ç”¨AES-128-CBCåŠ å¯†æ¨¡å¼?ï¼Œkeyéœ€è¦?ä¸º16ä½?ã€‚
     */
    private static final String KEY = "!@cdabcdabc8751%";//ç§˜é’¥é•¿åº¦å®šé•¿,16

    /**
     * ç®—æ³• 
     */
    private static final String ALGORITHMSTR = "AES/ECB/PKCS5Padding";

    public static void main(String[] args) throws Exception {
        System.out.println("key lengthï¼š" + KEY.length());
        String content = "æˆ‘çˆ±ä½ ";
        System.out.println("åŠ å¯†å‰?ï¼š" + content);

        System.out.println("åŠ å¯†å¯†é’¥å’Œè§£å¯†å¯†é’¥ï¼š" + KEY);

        String encrypt = aesEncrypt(content, KEY);
        System.out.println("åŠ å¯†å?Žï¼š" + encrypt);

        String decrypt = aesDecrypt(encrypt, KEY);
        System.out.println("è§£å¯†å?Žï¼š" + decrypt);
    }

    /**
     * aesè§£å¯† 
     * @param encrypt   å†…å®¹ 
     * @return
     * @throws Exception
     */
    public static String aesDecrypt(String encrypt) throws Exception {
        return aesDecrypt(encrypt, KEY);
    }

    /**
     * aesåŠ å¯† 
     * @param content
     * @return
     * @throws Exception
     */
    public static String aesEncrypt(String content) throws Exception {
        return aesEncrypt(content, KEY);
    }

    /**
     * å°†byte[]è½¬ä¸ºå?„ç§?è¿›åˆ¶çš„å­—ç¬¦ä¸² 
     * @param bytes byte[] 
     * @param radix å?¯ä»¥è½¬æ?¢è¿›åˆ¶çš„èŒƒå›´ï¼Œä»ŽCharacter.MIN_RADIXåˆ°Character.MAX_RADIXï¼Œè¶…å‡ºèŒƒå›´å?Žå?˜ä¸º10è¿›åˆ¶ 
     * @return è½¬æ?¢å?Žçš„å­—ç¬¦ä¸²
     */
    public static String binary(byte[] bytes, int radix){
        return new BigInteger(1, bytes).toString(radix);// è¿™é‡Œçš„1ä»£è¡¨æ­£æ•°  
    }

    /**
     * base 64 encode 
     * @param bytes å¾…ç¼–ç ?çš„byte[] 
     * @return ç¼–ç ?å?Žçš„base 64 code 
     */
    public static String base64Encode(byte[] bytes){
        return Base64Utils.encodeToString(bytes,true);
    }

    /**
     * base 64 decode 
     * @param base64Code å¾…è§£ç ?çš„base 64 code 
     * @return è§£ç ?å?Žçš„byte[]
     * @throws Exception
     */
    public static byte[] base64Decode(String base64Code) throws Exception{
        return StringUtils.isEmpty(base64Code) ? null : Base64Utils.decode(base64Code);
    }


    /**
     * AESåŠ å¯† 
     * @param content å¾…åŠ å¯†çš„å†…å®¹ 
     * @param encryptKey åŠ å¯†å¯†é’¥ 
     * @return åŠ å¯†å?Žçš„byte[]
     * @throws Exception
     */
    public static byte[] aesEncryptToBytes(String content, String encryptKey) throws Exception {
        KeyGenerator kgen = KeyGenerator.getInstance("AES");
        kgen.init(256);
        Cipher cipher = Cipher.getInstance(ALGORITHMSTR);
        cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(encryptKey.getBytes(), "AES"));

        return cipher.doFinal(content.getBytes("utf-8"));
    }


    /**
     * AESåŠ å¯†ä¸ºbase 64 code 
     * @param content å¾…åŠ å¯†çš„å†…å®¹ 
     * @param encryptKey åŠ å¯†å¯†é’¥ 
     * @return åŠ å¯†å?Žçš„base 64 code 
     * @throws Exception
     */
    public static String aesEncrypt(String content, String encryptKey) throws Exception {
        return base64Encode(aesEncryptToBytes(content, encryptKey));
    }

    /**
     * AESè§£å¯† 
     * @param encryptBytes å¾…è§£å¯†çš„byte[] 
     * @param decryptKey è§£å¯†å¯†é’¥ 
     * @return è§£å¯†å?Žçš„String
     * @throws Exception
     */
    public static String aesDecryptByBytes(byte[] encryptBytes, String decryptKey) throws Exception {
        KeyGenerator kgen = KeyGenerator.getInstance("AES");
        kgen.init(128);

        Cipher cipher = Cipher.getInstance(ALGORITHMSTR);
        cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(decryptKey.getBytes(), "AES"));
        byte[] decryptBytes = cipher.doFinal(encryptBytes);

        return new String(decryptBytes);
    }


    /**
     * å°†base 64 code AESè§£å¯† 
     * @param encryptStr å¾…è§£å¯†çš„base 64 code 
     * @param decryptKey è§£å¯†å¯†é’¥ 
     * @return è§£å¯†å?Žçš„string
     * @throws Exception
     */
    public static String aesDecrypt(String encryptStr, String decryptKey) throws Exception {
        return StringUtils.isEmpty(encryptStr) ? null : aesDecryptByBytes(base64Decode(encryptStr), decryptKey);
    }

}  

