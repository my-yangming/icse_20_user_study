/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.alipay.sofa.rpc.client;

import com.alipay.sofa.rpc.bootstrap.ConsumerBootstrap;
import com.alipay.sofa.rpc.common.RpcConstants;
import com.alipay.sofa.rpc.common.utils.ClassUtils;
import com.alipay.sofa.rpc.common.utils.CommonUtils;
import com.alipay.sofa.rpc.common.utils.StringUtils;
import com.alipay.sofa.rpc.config.ConsumerConfig;
import com.alipay.sofa.rpc.context.AsyncRuntime;
import com.alipay.sofa.rpc.context.RpcInternalContext;
import com.alipay.sofa.rpc.context.RpcRuntimeContext;
import com.alipay.sofa.rpc.core.exception.RpcErrorType;
import com.alipay.sofa.rpc.core.exception.SofaRouteException;
import com.alipay.sofa.rpc.core.exception.SofaRpcException;
import com.alipay.sofa.rpc.core.exception.SofaRpcRuntimeException;
import com.alipay.sofa.rpc.core.invoke.SofaResponseCallback;
import com.alipay.sofa.rpc.core.request.SofaRequest;
import com.alipay.sofa.rpc.core.response.SofaResponse;
import com.alipay.sofa.rpc.dynamic.DynamicConfigKeys;
import com.alipay.sofa.rpc.dynamic.DynamicConfigManager;
import com.alipay.sofa.rpc.dynamic.DynamicConfigManagerFactory;
import com.alipay.sofa.rpc.event.EventBus;
import com.alipay.sofa.rpc.event.ProviderInfoAddEvent;
import com.alipay.sofa.rpc.event.ProviderInfoRemoveEvent;
import com.alipay.sofa.rpc.event.ProviderInfoUpdateAllEvent;
import com.alipay.sofa.rpc.event.ProviderInfoUpdateEvent;
import com.alipay.sofa.rpc.filter.ConsumerInvoker;
import com.alipay.sofa.rpc.filter.FilterChain;
import com.alipay.sofa.rpc.listener.ConsumerStateListener;
import com.alipay.sofa.rpc.log.LogCodes;
import com.alipay.sofa.rpc.log.Logger;
import com.alipay.sofa.rpc.log.LoggerFactory;
import com.alipay.sofa.rpc.message.ResponseFuture;
import com.alipay.sofa.rpc.transport.ClientTransport;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

import static com.alipay.sofa.rpc.client.ProviderInfoAttrs.ATTR_TIMEOUT;
import static com.alipay.sofa.rpc.common.RpcConfigs.getIntValue;
import static com.alipay.sofa.rpc.common.RpcOptions.CONSUMER_INVOKE_TIMEOUT;

/**
 * Abstract cluster, contains router chain, filter chain, address holder, connection holder and load balancer.
 *
 * @author <a href=mailto:zhanggeng.zg@antfin.com>GengZhang</a>
 */
public abstract class AbstractCluster extends Cluster {

    /**
     * slf4j Logger for this class
     */
    private final static Logger LOGGER = LoggerFactory.getLogger(AbstractCluster.class);

    /**
     * æž„é€ å‡½æ•°
     *
     * @param consumerBootstrap æœ?åŠ¡ç«¯æ¶ˆè´¹è€…å?¯åŠ¨å™¨
     */
    public AbstractCluster(ConsumerBootstrap consumerBootstrap) {
        super(consumerBootstrap);
    }

    /**
     * æ˜¯å?¦å·²å?¯åŠ¨(å·²å»ºç«‹è¿žæŽ¥)
     */
    protected volatile boolean initialized   = false;

    /**
     * æ˜¯å?¦å·²ç»?é”€æ¯?ï¼ˆå·²ç»?é”€æ¯?ä¸?èƒ½å†?ç»§ç»­ä½¿ç”¨ï¼‰
     */
    protected volatile boolean destroyed     = false;

    /**
     * å½“å‰?Clientæ­£åœ¨å?‘é€?çš„è°ƒç”¨æ•°é‡?
     */
    protected AtomicInteger    countOfInvoke = new AtomicInteger(0);

    /**
     * è·¯ç”±åˆ—è¡¨
     */
    protected RouterChain      routerChain;
    /**
     * è´Ÿè½½å?‡è¡¡æŽ¥å?£
     */
    protected LoadBalancer     loadBalancer;
    /**
     * åœ°å?€ä¿?æŒ?å™¨
     */
    protected AddressHolder    addressHolder;
    /**
     * è¿žæŽ¥ç®¡ç?†å™¨
     */
    protected ConnectionHolder connectionHolder;
    /**
     * è¿‡æ»¤å™¨é“¾
     */
    protected FilterChain      filterChain;

    @Override
    public synchronized void init() {
        if (initialized) { // å·²åˆ?å§‹åŒ–
            return;
        }
        // æž„é€ Routeré“¾
        routerChain = RouterChain.buildConsumerChain(consumerBootstrap);
        // è´Ÿè½½å?‡è¡¡ç­–ç•¥ è€ƒè™‘æ˜¯å?¦å?¯åŠ¨æ€?æ›¿æ?¢ï¼Ÿ
        loadBalancer = LoadBalancerFactory.getLoadBalancer(consumerBootstrap);
        // åœ°å?€ç®¡ç?†å™¨
        addressHolder = AddressHolderFactory.getAddressHolder(consumerBootstrap);
        // è¿žæŽ¥ç®¡ç?†å™¨
        connectionHolder = ConnectionHolderFactory.getConnectionHolder(consumerBootstrap);
        // æž„é€ Filteré“¾,æœ€åº•å±‚æ˜¯è°ƒç”¨è¿‡æ»¤å™¨
        this.filterChain = FilterChain.buildConsumerChain(this.consumerConfig,
            new ConsumerInvoker(consumerBootstrap));

        if (consumerConfig.isLazy()) { // å»¶è¿Ÿè¿žæŽ¥
            if (LOGGER.isInfoEnabled(consumerConfig.getAppName())) {
                LOGGER.infoWithApp(consumerConfig.getAppName(), "Connection will be initialized when first invoke.");
            }
        }

        // å?¯åŠ¨é‡?è¿žçº¿ç¨‹
        connectionHolder.init();
        try {
            // å¾—åˆ°æœ?åŠ¡ç«¯åˆ—è¡¨
            List<ProviderGroup> all = consumerBootstrap.subscribe();
            if (CommonUtils.isNotEmpty(all)) {
                // åˆ?å§‹åŒ–æœ?åŠ¡ç«¯è¿žæŽ¥ï¼ˆå»ºç«‹é•¿è¿žæŽ¥)
                updateAllProviders(all);
            }
        } catch (SofaRpcRuntimeException e) {
            throw e;
        } catch (Throwable e) {
            throw new SofaRpcRuntimeException("Init provider's transport error!", e);
        }

        // å?¯åŠ¨æˆ?åŠŸ
        initialized = true;

        // å¦‚æžœcheck=trueè¡¨ç¤ºå¼ºä¾?èµ–
        if (consumerConfig.isCheck() && !isAvailable()) {
            throw new SofaRpcRuntimeException("The consumer is depend on alive provider " +
                "and there is no alive provider, you can ignore it " +
                "by ConsumerConfig.setCheck(boolean) (default is false)");
        }
    }

    /**
     * æ£€æµ‹çŠ¶æ€?
     */
    protected void checkClusterState() {
        if (destroyed) { // å·²é”€æ¯?
            throw new SofaRpcRuntimeException("Client has been destroyed!");
        }
        if (!initialized) { // æœªåˆ?å§‹åŒ–
            init();
        }
    }

    @Override
    public void addProvider(ProviderGroup providerGroup) {
        // åŒ…è£…äº†å?„ä¸ªç»„ä»¶çš„æ“?ä½œ
        addressHolder.addProvider(providerGroup);
        connectionHolder.addProvider(providerGroup);
        if (EventBus.isEnable(ProviderInfoAddEvent.class)) {
            ProviderInfoAddEvent event = new ProviderInfoAddEvent(consumerConfig, providerGroup);
            EventBus.post(event);
        }
    }

    @Override
    public void removeProvider(ProviderGroup providerGroup) {
        // åŒ…è£…äº†å?„ä¸ªç»„ä»¶çš„æ“?ä½œ
        addressHolder.removeProvider(providerGroup);
        connectionHolder.removeProvider(providerGroup);
        if (EventBus.isEnable(ProviderInfoRemoveEvent.class)) {
            ProviderInfoRemoveEvent event = new ProviderInfoRemoveEvent(consumerConfig, providerGroup);
            EventBus.post(event);
        }
    }

    @Override
    public void updateProviders(ProviderGroup providerGroup) {
        checkProviderInfo(providerGroup);
        ProviderGroup oldProviderGroup = addressHolder.getProviderGroup(providerGroup.getName());
        if (ProviderHelper.isEmpty(providerGroup)) {
            addressHolder.updateProviders(providerGroup);
            if (!ProviderHelper.isEmpty(oldProviderGroup)) {
                if (LOGGER.isWarnEnabled(consumerConfig.getAppName())) {
                    LOGGER.warnWithApp(consumerConfig.getAppName(), "Provider list is emptied, may be all " +
                        "providers has been closed, or this consumer has been add to blacklist");
                    closeTransports();
                }
            }
        } else {
            addressHolder.updateProviders(providerGroup);
            connectionHolder.updateProviders(providerGroup);
        }
        if (EventBus.isEnable(ProviderInfoUpdateEvent.class)) {
            ProviderInfoUpdateEvent event = new ProviderInfoUpdateEvent(consumerConfig, oldProviderGroup, providerGroup);
            EventBus.post(event);
        }
    }

    @Override
    public void updateAllProviders(List<ProviderGroup> providerGroups) {
        List<ProviderGroup> oldProviderGroups = new ArrayList<ProviderGroup>(addressHolder.getProviderGroups());
        int count = 0;
        if (providerGroups != null) {
            for (ProviderGroup providerGroup : providerGroups) {
                checkProviderInfo(providerGroup);
                count += providerGroup.size();
            }
        }
        if (count == 0) {
            Collection<ProviderInfo> currentProviderList = currentProviderList();
            addressHolder.updateAllProviders(providerGroups);
            if (CommonUtils.isNotEmpty(currentProviderList)) {
                if (LOGGER.isWarnEnabled(consumerConfig.getAppName())) {
                    LOGGER.warnWithApp(consumerConfig.getAppName(), "Provider list is emptied, may be all " +
                        "providers has been closed, or this consumer has been add to blacklist");
                    closeTransports();
                }
            }
        } else {
            addressHolder.updateAllProviders(providerGroups);
            connectionHolder.updateAllProviders(providerGroups);
        }
        if (EventBus.isEnable(ProviderInfoUpdateAllEvent.class)) {
            ProviderInfoUpdateAllEvent event = new ProviderInfoUpdateAllEvent(consumerConfig, oldProviderGroups,
                providerGroups);
            EventBus.post(event);
        }
    }

    /**
     * æ£€æµ‹æœ?åŠ¡èŠ‚ç‚¹çš„ä¸€äº›ä¿¡æ?¯
     *
     * @param providerGroup æœ?åŠ¡åˆ—è¡¨åˆ†ç»„
     */
    protected void checkProviderInfo(ProviderGroup providerGroup) {
        List<ProviderInfo> providerInfos = providerGroup == null ? null : providerGroup.getProviderInfos();
        if (CommonUtils.isEmpty(providerInfos)) {
            return;
        }
        Iterator<ProviderInfo> iterator = providerInfos.iterator();
        while (iterator.hasNext()) {
            ProviderInfo providerInfo = iterator.next();
            if (!StringUtils.equals(providerInfo.getProtocolType(), consumerConfig.getProtocol())) {
                if (LOGGER.isWarnEnabled(consumerConfig.getAppName())) {
                    LOGGER.warnWithApp(consumerConfig.getAppName(),
                        "Unmatched protocol between consumer [{}] and provider [{}].",
                        consumerConfig.getProtocol(), providerInfo.getProtocolType());
                }
            }
        }
    }

    @Override
    public SofaResponse invoke(SofaRequest request) throws SofaRpcException {
        SofaResponse response = null;
        try {
            // å?šä¸€äº›åˆ?å§‹åŒ–æ£€æŸ¥ï¼Œä¾‹å¦‚æœªè¿žæŽ¥å?¯ä»¥è¿žæŽ¥
            checkClusterState();
            // å¼€å§‹è°ƒç”¨
            countOfInvoke.incrementAndGet(); // è®¡æ•°+1         
            response = doInvoke(request);
            return response;
        } catch (SofaRpcException e) {
            // å®¢æˆ·ç«¯æ”¶åˆ°å¼‚å¸¸ï¼ˆå®¢æˆ·ç«¯è‡ªå·±çš„å¼‚å¸¸ï¼‰
            throw e;
        } finally {
            countOfInvoke.decrementAndGet(); // è®¡æ•°-1
        }
    }

    /**
     * å­?ç±»å®žçŽ°å?„è‡ªé€»è¾‘çš„è°ƒç”¨ï¼Œä¾‹å¦‚é‡?è¯•ç­‰
     *
     * @param msg Requestå¯¹è±¡
     * @return è°ƒç”¨ç»“æžœ
     * @throws SofaRpcException rpcå¼‚å¸¸
     */
    protected abstract SofaResponse doInvoke(SofaRequest msg) throws SofaRpcException;

    /**
     * æ£€æŸ¥æœ?åŠ¡ç«¯ç‰ˆæœ¬ï¼Œç‰¹æ®Šå¤„ç?†
     *
     * @param providerInfo æœ?åŠ¡ç«¯
     * @param request      è¯·æ±‚å¯¹è±¡
     */
    protected void checkProviderVersion(ProviderInfo providerInfo, SofaRequest request) {

    }

    /**
     * ä¸Šä¸€æ¬¡è¿žæŽ¥ï¼Œç›®å‰?æ˜¯è®°å½•æ•´ä¸ªæŽ¥å?£çš„ï¼Œæ˜¯å?¦éœ€è¦?æ–¹æ³•çº§çš„ï¼Ÿï¼Ÿ
     */
    private volatile ProviderInfo lastProviderInfo;

    /**
     * æ ¹æ?®è§„åˆ™è¿›è¡Œè´Ÿè½½å?‡è¡¡
     *
     * @param message è°ƒç”¨å¯¹è±¡
     * @return ä¸€ä¸ªå?¯ç”¨çš„provider
     * @throws SofaRpcException rpcå¼‚å¸¸
     */
    protected ProviderInfo select(SofaRequest message) throws SofaRpcException {
        return select(message, null);
    }

    /**
     * æ ¹æ?®è§„åˆ™è¿›è¡Œè´Ÿè½½å?‡è¡¡
     *
     * @param message              è°ƒç”¨å¯¹è±¡
     * @param invokedProviderInfos å·²è°ƒç”¨åˆ—è¡¨
     * @return ä¸€ä¸ªå?¯ç”¨çš„provider
     * @throws SofaRpcException rpcå¼‚å¸¸
     */
    protected ProviderInfo select(SofaRequest message, List<ProviderInfo> invokedProviderInfos)
        throws SofaRpcException {
        // ç²˜æ»žè¿žæŽ¥ï¼Œå½“å‰?è¿žæŽ¥å?¯ç”¨
        if (consumerConfig.isSticky()) {
            if (lastProviderInfo != null) {
                ProviderInfo providerInfo = lastProviderInfo;
                ClientTransport lastTransport = connectionHolder.getAvailableClientTransport(providerInfo);
                if (lastTransport != null && lastTransport.isAvailable()) {
                    checkAlias(providerInfo, message);
                    return providerInfo;
                }
            }
        }
        // åŽŸå§‹æœ?åŠ¡åˆ—è¡¨æ•°æ?® --> è·¯ç”±ç»“æžœ
        List<ProviderInfo> providerInfos = routerChain.route(message, null);

        //ä¿?å­˜ä¸€ä¸‹åŽŸå§‹åœ°å?€,ä¸ºäº†æ‰“å?°
        List<ProviderInfo> orginalProviderInfos = new ArrayList<ProviderInfo>(providerInfos);

        if (CommonUtils.isEmpty(providerInfos)) {
            throw noAvailableProviderException(message.getTargetServiceUniqueName());
        }
        if (CommonUtils.isNotEmpty(invokedProviderInfos) && providerInfos.size() > invokedProviderInfos.size()) { // æ€»æ•°å¤§äºŽå·²è°ƒç”¨æ•°
            providerInfos.removeAll(invokedProviderInfos);// å·²ç»?è°ƒç”¨å¼‚å¸¸çš„æœ¬æ¬¡ä¸?å†?é‡?è¯•
        }

        String targetIP = null;
        ProviderInfo providerInfo;
        RpcInternalContext context = RpcInternalContext.peekContext();
        if (context != null) {
            targetIP = (String) RpcInternalContext.getContext().getAttachment(RpcConstants.HIDDEN_KEY_PINPOINT);
        }
        if (StringUtils.isNotBlank(targetIP)) {
            // å¦‚æžœæŒ‡å®šäº†è°ƒç”¨åœ°å?€
            providerInfo = selectPinpointProvider(targetIP, providerInfos);
            if (providerInfo == null) {
                // æŒ‡å®šçš„ä¸?å­˜åœ¨
                throw unavailableProviderException(message.getTargetServiceUniqueName(), targetIP);
            }
            ClientTransport clientTransport = selectByProvider(message, providerInfo);
            if (clientTransport == null) {
                // æŒ‡å®šçš„ä¸?å­˜åœ¨æˆ–å·²æ­»ï¼ŒæŠ›å‡ºå¼‚å¸¸
                throw unavailableProviderException(message.getTargetServiceUniqueName(), targetIP);
            }
            return providerInfo;
        } else {
            do {
                // å†?è¿›è¡Œè´Ÿè½½å?‡è¡¡ç­›é€‰
                providerInfo = loadBalancer.select(message, providerInfos);
                ClientTransport transport = selectByProvider(message, providerInfo);
                if (transport != null) {
                    return providerInfo;
                }
                providerInfos.remove(providerInfo);
            } while (!providerInfos.isEmpty());
        }
        throw unavailableProviderException(message.getTargetServiceUniqueName(),
            convertProviders2Urls(orginalProviderInfos));
    }

    /**
     * Select provider.
     *
     * @param targetIP the target ip
     * @return the provider
     */
    protected ProviderInfo selectPinpointProvider(String targetIP, List<ProviderInfo> providerInfos) {
        ProviderInfo tp = ProviderHelper.toProviderInfo(targetIP);
        for (ProviderInfo providerInfo : providerInfos) {
            if (providerInfo.getHost().equals(tp.getHost())
                && StringUtils.equals(providerInfo.getProtocolType(), tp.getProtocolType())
                && providerInfo.getPort() == tp.getPort()) {
                return providerInfo;
            }
        }
        return null;
    }

    /**
     * æ‰¾ä¸?åˆ°å?¯ç”¨çš„æœ?åŠ¡åˆ—è¡¨çš„å¼‚å¸¸
     *
     * @param serviceKey æœ?åŠ¡å…³é”®å­—
     * @return æœ?åŠ¡ç«¯
     */
    protected SofaRouteException noAvailableProviderException(String serviceKey) {
        return new SofaRouteException(LogCodes.getLog(LogCodes.ERROR_NO_AVAILBLE_PROVIDER, serviceKey));
    }

    /**
     * æŒ‡å®šåœ°å?€ä¸?å?¯ç”¨
     *
     * @param serviceKey æœ?åŠ¡å…³é”®å­—
     * @return æœ?åŠ¡ç«¯
     */
    protected SofaRouteException unavailableProviderException(String serviceKey, String providerInfo) {
        return new SofaRouteException(LogCodes.getLog(LogCodes.ERROR_TARGET_URL_INVALID, serviceKey, providerInfo));
    }

    /**
     * å¾—åˆ°providerå¾—åˆ°è¿žæŽ¥
     *
     * @param message      è°ƒç”¨å¯¹è±¡
     * @param providerInfo æŒ‡å®šProvider
     * @return ä¸€ä¸ªå?¯ç”¨çš„transportæˆ–è€…null
     */
    protected ClientTransport selectByProvider(SofaRequest message, ProviderInfo providerInfo) {
        ClientTransport transport = connectionHolder.getAvailableClientTransport(providerInfo);
        if (transport != null) {
            if (transport.isAvailable()) {
                lastProviderInfo = providerInfo;
                checkAlias(providerInfo, message); //æ£€æŸ¥åˆ†ç»„
                return transport;
            } else {
                connectionHolder.setUnavailable(providerInfo, transport);
            }
        }
        return null;
    }

    /**
     * æ£€æŸ¥åˆ†ç»„æ˜ å°„
     *
     * @param providerInfo æœ?åŠ¡ç«¯
     * @param message      è¯·æ±‚å¯¹è±¡
     */
    protected void checkAlias(ProviderInfo providerInfo, SofaRequest message) {

    }

    /**
     * å?‘èµ·è°ƒç”¨é“¾
     *
     * @param providerInfo æœ?åŠ¡ç«¯ä¿¡æ?¯
     * @param request      è¯·æ±‚å¯¹è±¡
     * @return æ‰§è¡Œå?Žè¿”å›žçš„å“?åº”
     * @throws SofaRpcException è¯·æ±‚RPCå¼‚å¸¸
     */
    protected SofaResponse filterChain(ProviderInfo providerInfo, SofaRequest request) throws SofaRpcException {
        RpcInternalContext context = RpcInternalContext.getContext();
        context.setProviderInfo(providerInfo);
        return filterChain.invoke(request);
    }

    @Override
    public SofaResponse sendMsg(ProviderInfo providerInfo, SofaRequest request) throws SofaRpcException {
        ClientTransport clientTransport = connectionHolder.getAvailableClientTransport(providerInfo);
        if (clientTransport != null && clientTransport.isAvailable()) {
            return doSendMsg(providerInfo, clientTransport, request);
        } else {
            throw unavailableProviderException(request.getTargetServiceUniqueName(), providerInfo.getOriginUrl());
        }
    }

    /**
     * è°ƒç”¨å®¢æˆ·ç«¯
     *
     * @param transport å®¢æˆ·ç«¯è¿žæŽ¥
     * @param request   Requestå¯¹è±¡
     * @return è°ƒç”¨ç»“æžœ
     * @throws SofaRpcException rpcå¼‚å¸¸
     */
    protected SofaResponse doSendMsg(ProviderInfo providerInfo, ClientTransport transport,
                                     SofaRequest request) throws SofaRpcException {
        RpcInternalContext context = RpcInternalContext.getContext();
        // æ·»åŠ è°ƒç”¨çš„æœ?åŠ¡ç«¯è¿œç¨‹åœ°å?€
        RpcInternalContext.getContext().setRemoteAddress(providerInfo.getHost(), providerInfo.getPort());
        try {
            checkProviderVersion(providerInfo, request); // æ ¹æ?®æœ?åŠ¡ç«¯ç‰ˆæœ¬ç‰¹æ®Šå¤„ç?†
            String invokeType = request.getInvokeType();
            int timeout = resolveTimeout(request, consumerConfig, providerInfo);

            SofaResponse response = null;
            // å?Œæ­¥è°ƒç”¨
            if (RpcConstants.INVOKER_TYPE_SYNC.equals(invokeType)) {
                long start = RpcRuntimeContext.now();
                try {
                    response = transport.syncSend(request, timeout);
                } finally {
                    if (RpcInternalContext.isAttachmentEnable()) {
                        long elapsed = RpcRuntimeContext.now() - start;
                        context.setAttachment(RpcConstants.INTERNAL_KEY_CLIENT_ELAPSE, elapsed);
                    }
                }
            }
            // å?•å?‘è°ƒç”¨
            else if (RpcConstants.INVOKER_TYPE_ONEWAY.equals(invokeType)) {
                long start = RpcRuntimeContext.now();
                try {
                    transport.oneWaySend(request, timeout);
                    response = buildEmptyResponse(request);
                } finally {
                    if (RpcInternalContext.isAttachmentEnable()) {
                        long elapsed = RpcRuntimeContext.now() - start;
                        context.setAttachment(RpcConstants.INTERNAL_KEY_CLIENT_ELAPSE, elapsed);
                    }
                }
            }
            // Callbackè°ƒç”¨
            else if (RpcConstants.INVOKER_TYPE_CALLBACK.equals(invokeType)) {
                // è°ƒç”¨çº§åˆ«å›žè°ƒç›‘å?¬å™¨
                SofaResponseCallback sofaResponseCallback = request.getSofaResponseCallback();
                if (sofaResponseCallback == null) {
                    SofaResponseCallback methodResponseCallback = consumerConfig
                        .getMethodOnreturn(request.getMethodName());
                    if (methodResponseCallback != null) { // æ–¹æ³•çš„Callback
                        request.setSofaResponseCallback(methodResponseCallback);
                    }
                }
                // è®°å½•å?‘é€?å¼€å§‹æ—¶é—´
                context.setAttachment(RpcConstants.INTERNAL_KEY_CLIENT_SEND_TIME, RpcRuntimeContext.now());
                // å¼€å§‹è°ƒç”¨
                transport.asyncSend(request, timeout);
                response = buildEmptyResponse(request);
            }
            // Futureè°ƒç”¨
            else if (RpcConstants.INVOKER_TYPE_FUTURE.equals(invokeType)) {
                // è®°å½•å?‘é€?å¼€å§‹æ—¶é—´
                context.setAttachment(RpcConstants.INTERNAL_KEY_CLIENT_SEND_TIME, RpcRuntimeContext.now());
                // å¼€å§‹è°ƒç”¨
                ResponseFuture future = transport.asyncSend(request, timeout);
                // æ”¾å…¥çº¿ç¨‹ä¸Šä¸‹æ–‡
                RpcInternalContext.getContext().setFuture(future);
                response = buildEmptyResponse(request);
            } else {
                throw new SofaRpcException(RpcErrorType.CLIENT_UNDECLARED_ERROR, "Unknown invoke type:" + invokeType);
            }
            return response;
        } catch (SofaRpcException e) {
            throw e;
        } catch (Throwable e) { // å®¢æˆ·ç«¯å…¶å®ƒå¼‚å¸¸
            throw new SofaRpcException(RpcErrorType.CLIENT_UNDECLARED_ERROR, e);
        }
    }

    private SofaResponse buildEmptyResponse(SofaRequest request) {
        SofaResponse response = new SofaResponse();
        Method method = request.getMethod();
        if (method != null) {
            response.setAppResponse(ClassUtils.getDefaultPrimitiveValue(method.getReturnType()));
        }
        return response;
    }

    /**
     * å†³å®šè¶…æ—¶æ—¶é—´
     *
     * @param request        è¯·æ±‚
     * @param consumerConfig å®¢æˆ·ç«¯é…?ç½®
     * @param providerInfo   æœ?åŠ¡æ??ä¾›è€…ä¿¡æ?¯
     * @return è°ƒç”¨è¶…æ—¶
     */
    private int resolveTimeout(SofaRequest request, ConsumerConfig consumerConfig, ProviderInfo providerInfo) {
        // åŠ¨æ€?é…?ç½®ä¼˜å…ˆ
        final String dynamicAlias = consumerConfig.getParameter(DynamicConfigKeys.DYNAMIC_ALIAS);
        if (StringUtils.isNotBlank(dynamicAlias)) {
            String dynamicTimeout = null;
            DynamicConfigManager dynamicConfigManager = DynamicConfigManagerFactory.getDynamicManager(
                consumerConfig.getAppName(),
                dynamicAlias);

            if (dynamicConfigManager != null) {
                dynamicTimeout = dynamicConfigManager.getConsumerMethodProperty(request.getInterfaceName(),
                    request.getMethodName(),
                    "timeout");
            }

            if (StringUtils.isNotBlank(dynamicTimeout)) {
                return Integer.parseInt(dynamicTimeout);
            }
        }
        // å…ˆåŽ»è°ƒç”¨çº§åˆ«é…?ç½®
        Integer timeout = request.getTimeout();
        if (timeout == null) {
            // å?–å®¢æˆ·ç«¯é…?ç½®ï¼ˆå…ˆæ–¹æ³•çº§åˆ«å†?æŽ¥å?£çº§åˆ«ï¼‰
            timeout = consumerConfig.getMethodTimeout(request.getMethodName());
            if (timeout == null || timeout < 0) {
                // å†?å?–æœ?åŠ¡ç«¯é…?ç½®
                timeout = (Integer) providerInfo.getDynamicAttr(ATTR_TIMEOUT);
                if (timeout == null) {
                    // å?–æ¡†æž¶é»˜è®¤å€¼
                    timeout = getIntValue(CONSUMER_INVOKE_TIMEOUT);
                }
            }
        }
        return timeout;
    }

    @Override
    public void destroy() {
        destroy(null);
    }

    @Override
    public void destroy(DestroyHook hook) {
        if (destroyed) {
            return;
        }
        if (hook != null) {
            hook.postDestroy();
        }
        if (connectionHolder != null) {
            connectionHolder.destroy(new GracefulDestroyHook());
        }
        destroyed = true;
        initialized = false;
        if (hook != null) {
            hook.postDestroy();
        }
    }

    /**
     * å…³é—­è¿žæŽ¥<br>
     * æ³¨æ„?ï¼šå…³é—­æœ‰é£Žé™©ï¼Œå?¯èƒ½æœ‰æ­£åœ¨è°ƒç”¨çš„è¯·æ±‚ï¼Œå»ºè®®åˆ¤æ–­ä¸‹isAvailable()
     */
    protected void closeTransports() {
        if (connectionHolder != null) {
            connectionHolder.closeAllClientTransports(new GracefulDestroyHook());
        }
    }

    /**
     * ä¼˜é›…å…³é—­çš„é’©å­?
     */
    protected class GracefulDestroyHook implements DestroyHook {
        @Override
        public void preDestroy() {
            // å‡†å¤‡å…³é—­è¿žæŽ¥
            int count = countOfInvoke.get();
            final int timeout = consumerConfig.getDisconnectTimeout(); // ç­‰å¾…ç»“æžœè¶…æ—¶æ—¶é—´
            if (count > 0) { // æœ‰æ­£åœ¨è°ƒç”¨çš„è¯·æ±‚
                long start = RpcRuntimeContext.now();
                if (LOGGER.isWarnEnabled()) {
                    LOGGER.warn("There are {} outstanding call in client, will close transports util return",
                        count);
                }
                while (countOfInvoke.get() > 0 && RpcRuntimeContext.now() - start < timeout) { // ç­‰å¾…è¿”å›žç»“æžœ
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ignore) {
                    }
                }
            }
        }

        @Override
        public void postDestroy() {
        }
    }

    @Override
    public boolean isAvailable() {
        if (destroyed || !initialized) {
            return false;
        }
        List<ProviderGroup> providerGroups = addressHolder.getProviderGroups();
        if (CommonUtils.isEmpty(providerGroups)) {
            return false;
        }
        for (ProviderGroup entry : providerGroups) {
            List<ProviderInfo> providerInfos = entry.getProviderInfos();
            for (ProviderInfo providerInfo : providerInfos) {
                ClientTransport transport = connectionHolder.getAvailableClientTransport(providerInfo);
                if (transport != null && transport.isAvailable()) {
                    return true; // å?ªæœ‰æœ‰1ä¸ªå?¯ç”¨ å?³å?¯è¿”å›ž
                } else {
                    connectionHolder.setUnavailable(providerInfo, transport);
                }
            }
        }
        return false;
    }

    @Override
    public void checkStateChange(boolean originalState) {
        if (originalState) { // åŽŸæ?¥å?¯ä»¥
            if (!isAvailable()) { // å?˜ä¸?å?¯ä»¥
                notifyStateChangeToUnavailable();
            }
        } else { // åŽŸæ?¥ä¸?å?¯ç”¨
            if (isAvailable()) { // å?˜æˆ?å?¯ç”¨
                notifyStateChangeToAvailable();
            }
        }
    }

    /**
     * é€šçŸ¥çŠ¶æ€?å?˜æˆ?ä¸?å?¯ç”¨,ä¸»è¦?æ˜¯ï¼š<br>
     * 1.æ³¨å†Œä¸­å¿ƒåˆ é™¤ï¼Œæ›´æ–°èŠ‚ç‚¹å?Žå?˜æˆ?ä¸?å?¯ç”¨æ—¶<br>
     * 2.è¿žæŽ¥æ–­çº¿å?Žï¼ˆå¿ƒè·³+è°ƒç”¨ï¼‰ï¼Œå¦‚æžœæ˜¯å?¯ç”¨èŠ‚ç‚¹ä¸ºç©º
     */
    public void notifyStateChangeToUnavailable() {
        final List<ConsumerStateListener> onprepear = consumerConfig.getOnAvailable();
        if (onprepear != null) {
            AsyncRuntime.getAsyncThreadPool().execute(new Runnable() {
                @Override
                public void run() {
                    // çŠ¶æ€?å?˜åŒ–é€šçŸ¥ç›‘å?¬å™¨
                    for (ConsumerStateListener listener : onprepear) {
                        try {
                            listener.onUnavailable(consumerBootstrap.getProxyIns());
                        } catch (Exception e) {
                            LOGGER.error("Failed to notify consumer state listener when state change to unavailable");
                        }
                    }
                }
            });
        }
    }

    /**
     * é€šçŸ¥çŠ¶æ€?å?˜æˆ?å?¯ç”¨,ä¸»è¦?æ˜¯ï¼š<br>
     * 1.å?¯åŠ¨æˆ?åŠŸå?˜æˆ?å?¯ç”¨æ—¶<br>
     * 2.æ³¨å†Œä¸­å¿ƒå¢žåŠ ï¼Œæ›´æ–°èŠ‚ç‚¹å?Žå?˜æˆ?å?¯ç”¨æ—¶<br>
     * 3.é‡?è¿žä¸Šä»Žä¸€ä¸ªå?¯ç”¨èŠ‚ç‚¹éƒ½æ²¡æœ‰-->æœ‰å?¯ç”¨èŠ‚ç‚¹æ—¶
     */
    public void notifyStateChangeToAvailable() {
        final List<ConsumerStateListener> onprepear = consumerConfig.getOnAvailable();
        if (onprepear != null) {
            AsyncRuntime.getAsyncThreadPool().execute(new Runnable() {
                @Override
                public void run() {
                    // çŠ¶æ€?å?˜åŒ–é€šçŸ¥ç›‘å?¬å™¨
                    for (ConsumerStateListener listener : onprepear) {
                        try {
                            listener.onAvailable(consumerBootstrap.getProxyIns());
                        } catch (Exception e) {
                            LOGGER.error("Failed to notify consumer state listener when state change to available");
                        }
                    }
                }
            });
        }
    }

    /**
     * èŽ·å?–å½“å‰?çš„Providerå…¨éƒ¨åˆ—è¡¨ï¼ˆåŒ…æ‹¬è¿žä¸Šå’Œæ²¡è¿žä¸Šçš„ï¼‰ï¼Œæ¯”è¾ƒè´¹æ€§èƒ½ï¼Œæ…Žç”¨
     *
     * @return å½“å‰?çš„Provideråˆ—è¡¨
     */
    public Collection<ProviderInfo> currentProviderList() {
        List<ProviderInfo> providerInfos = new ArrayList<ProviderInfo>();
        List<ProviderGroup> providerGroups = addressHolder.getProviderGroups();
        if (CommonUtils.isNotEmpty(providerGroups)) {
            for (ProviderGroup entry : providerGroups) {
                providerInfos.addAll(entry.getProviderInfos());
            }
        }
        return providerInfos;
    }

    private String convertProviders2Urls(List<ProviderInfo> providerInfos) {

        StringBuilder sb = new StringBuilder();
        if (CommonUtils.isNotEmpty(providerInfos)) {
            for (ProviderInfo providerInfo : providerInfos) {
                sb.append(providerInfo).append(",");
            }
        }

        return sb.toString();
    }

    /**
     * @return the consumerConfig
     */
    public ConsumerConfig<?> getConsumerConfig() {
        return consumerConfig;
    }

    @Override
    public AddressHolder getAddressHolder() {
        return addressHolder;
    }

    @Override
    public ConnectionHolder getConnectionHolder() {
        return connectionHolder;
    }

    @Override
    public FilterChain getFilterChain() {
        return filterChain;
    }

    @Override
    public RouterChain getRouterChain() {
        return routerChain;
    }
}
