package jetbrains.mps.debugger.java.evaluation.plugin;

/*Generated by MPS */

import jetbrains.mps.make.facet.IFacet;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.util.List;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.make.resources.IPropertiesPersistence;
import jetbrains.mps.make.facet.ITargetEx;
import jetbrains.mps.make.script.IJob;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.resources.IPropertiesAccessor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.smodel.resources.GResource;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.TransientModelsModule;
import org.jetbrains.mps.openapi.model.SModelName;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelId;
import jetbrains.mps.lang.core.plugin.Generate_Facet.Target_configure;
import jetbrains.mps.generator.impl.CloneUtil;
import jetbrains.mps.smodel.SModelOperations;
import jetbrains.mps.debugger.java.runtime.evaluation.container.Properties;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.debugger.java.api.evaluation.transform.TransformatorBuilder;
import jetbrains.mps.generator.GenerationStatus;
import jetbrains.mps.make.script.IFeedback;
import jetbrains.mps.make.script.IConfig;
import jetbrains.mps.lang.core.plugin.TextGenOutcomeResource;
import java.util.stream.IntStream;
import jetbrains.mps.compiler.EclipseJavaCompiler;
import java.util.HashSet;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.util.JavaNameUtil;
import jetbrains.mps.text.TextUnit;
import jetbrains.mps.util.Reference;
import org.eclipse.jdt.internal.compiler.CompilationResult;
import jetbrains.mps.compiler.CompilationResultListener;
import jetbrains.mps.compiler.CompilationResultAdapter;
import jetbrains.mps.project.Project;
import jetbrains.mps.compiler.JavaCompilerOptions;
import jetbrains.mps.compiler.JavaCompilerOptionsComponent;
import java.util.Set;
import jetbrains.mps.smodel.ModelAccessHelper;
import jetbrains.mps.util.Computable;
import jetbrains.mps.project.facets.JavaModuleOperations;
import org.eclipse.jdt.core.compiler.CategorizedProblem;
import jetbrains.mps.smodel.resources.CResource;
import jetbrains.mps.compiler.IClassesData;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.make.script.IPropertiesPool;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;

public class JavaDebugEvaluate_Facet extends IFacet.Stub {
  private static final Logger LOG = LogManager.getLogger(JavaDebugEvaluate_Facet.class);
  private List<ITarget> targets = ListSequence.fromList(new ArrayList<ITarget>());
  private IFacet.Name name = new IFacet.Name("jetbrains.mps.debugger.java.evaluation.JavaDebugEvaluate");
  public JavaDebugEvaluate_Facet() {
    ListSequence.fromList(targets).addElement(new JavaDebugEvaluate_Facet.Target_transformEvaluator());
    ListSequence.fromList(targets).addElement(new JavaDebugEvaluate_Facet.Target_compileEvaluator());
  }
  public Iterable<ITarget> targets() {
    return targets;
  }
  public Iterable<IFacet.Name> optional() {
    return null;
  }
  public Iterable<IFacet.Name> required() {
    return Sequence.fromArray(new IFacet.Name[]{new IFacet.Name("jetbrains.mps.lang.core.Generate"), new IFacet.Name("jetbrains.mps.lang.core.TextGen")});
  }
  public Iterable<IFacet.Name> extended() {
    return null;
  }
  public IFacet.Name getName() {
    return this.name;
  }
  public IPropertiesPersistence propertiesPersistence() {
    return new JavaDebugEvaluate_Facet.TargetProperties();
  }
  public static class Target_transformEvaluator implements ITargetEx {
    private static final ITarget.Name name = new ITarget.Name("jetbrains.mps.debugger.java.evaluation.JavaDebugEvaluate.transformEvaluator");
    public Target_transformEvaluator() {
    }
    public IJob createJob() {
      return new IJob.Stub() {
        @Override
        public IResult execute(final Iterable<IResource> rawInput, final IJobMonitor monitor, final IPropertiesAccessor pa, @NotNull final ProgressMonitor progressMonitor) {
          Iterable<IResource> _output_it4uid_a0a = null;
          final Iterable<GResource> input = (Iterable<GResource>) (Iterable) rawInput;
          switch (0) {
            case 0:

              for (final GResource res : Sequence.fromIterable(input)) {
                final SModel outcomeModel = res.status().getOutputModel();
                // The code below was copied from TransformingGenerationHandler 
                final Wrappers._T<SNode> evaluator = new Wrappers._T<SNode>();
                if (outcomeModel != null) {
                  // XXX would be better to create new module rather than expect output model to belong to transient module, but not sure if 
                  //     there's any hidden assumption regarding Evaluator location (dependencies, module name, etc.) 
                  final TransientModelsModule module = (TransientModelsModule) outcomeModel.getModule();
                  SModelName newModelName = res.model().getName().withStereotype("evaluate");
                  final SModel newModel = module.createTransientModel(PersistenceFacade.getInstance().createModelReference(module.getModuleReference(), SModelId.generate(), newModelName.getValue()));
                  Target_configure.vars(pa.global()).transientModelsProvider().getRepository().getModelAccess().runWriteAction(new Runnable() {
                    public void run() {
                      // evaluator node belongs to a model already in the repository, and AttachedNodeOwner allows to change attached nodes 
                      // from within a command only. Here we are in a thread different from EDT, and have no chance to execute a command. 
                      // Nor do I want to relax ANO's requirement for the command now (I failed to figure out a reason for it). 
                      // That's why we make a copy of generator output model here, modify the copy, publish it and expose as a final outcome. 
                      CloneUtil cu = new CloneUtil(outcomeModel, newModel);
                      cu.cloneModelWithImports();
                      evaluator.value = SModelOperations.getRootByName(newModel, Properties.EVALUATOR_NAME);
                      if (evaluator.value != null) {
                        try {
                          assert SNodeOperations.getModel(evaluator.value) != null;
                          SNode evaluateMethod = ListSequence.fromList(SNodeOperations.getNodeDescendants(evaluator.value, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"), false, new SAbstractConcept[]{})).findFirst(new IWhereFilter<SNode>() {
                            public boolean accept(SNode it) {
                              return "evaluate".equals(SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
                            }
                          });
                          TransformatorBuilder.getInstance().build(evaluateMethod, true).transformEvaluator();
                          // TextGen would use model's repository to obtain read lock, and if model is not registered, there'd be no lock 
                          // which is fine for the transient model itself, but once there's reference outside of the model, e.g. to a java stub elsewhere, 
                          // there would be a lock violation exception 
                          module.addModelToKeep(newModel.getReference(), true);
                          Target_configure.vars(pa.global()).transientModelsProvider().publishAll();
                          res.status(new GenerationStatus(res.status().getInputModel(), newModel, null, res.status().isError()));
                        } catch (Throwable ex) {
                          monitor.reportFeedback(new IFeedback.ERROR(String.valueOf(ex)));
                        }
                      }
                    }
                  });
                }
              }
              _output_it4uid_a0a = Sequence.fromIterable(_output_it4uid_a0a).concat(Sequence.fromIterable(input));
            default:
              progressMonitor.done();
              return new IResult.SUCCESS(_output_it4uid_a0a);
          }
        }
      };
    }
    public IConfig createConfig() {
      return null;
    }
    public Iterable<ITarget.Name> notAfter() {
      return null;
    }
    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.Generate.generate"), new ITarget.Name("jetbrains.mps.lang.core.Generate.configure")});
    }
    public Iterable<ITarget.Name> notBefore() {
      return null;
    }
    public Iterable<ITarget.Name> before() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.TextGen.textGenToMemory"), new ITarget.Name("jetbrains.mps.lang.core.TextGen.textGen")});
    }
    public ITarget.Name getName() {
      return name;
    }
    public boolean isOptional() {
      return false;
    }
    public boolean requiresInput() {
      return true;
    }
    public boolean producesOutput() {
      return true;
    }
    public Iterable<Class<? extends IResource>> expectedInput() {
      List<Class<? extends IResource>> rv = ListSequence.fromList(new ArrayList<Class<? extends IResource>>());
      ListSequence.fromList(rv).addElement(GResource.class);
      return rv;
    }
    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }
    public <T> T createParameters(Class<T> cls) {
      return null;
    }
    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      return t;
    }
  }
  public static class Target_compileEvaluator implements ITargetEx {
    private static final ITarget.Name name = new ITarget.Name("jetbrains.mps.debugger.java.evaluation.JavaDebugEvaluate.compileEvaluator");
    public Target_compileEvaluator() {
    }
    public IJob createJob() {
      return new IJob.Stub() {
        @Override
        public IResult execute(final Iterable<IResource> rawInput, final IJobMonitor monitor, final IPropertiesAccessor pa, @NotNull final ProgressMonitor progressMonitor) {
          Iterable<IResource> _output_it4uid_a0b = null;
          final Iterable<TextGenOutcomeResource> input = (Iterable<TextGenOutcomeResource>) (Iterable) rawInput;
          progressMonitor.start("", IntStream.of(1000).sum());
          switch (0) {
            case 0:
              final ProgressMonitor subProgress_a0a0b = progressMonitor.subTask(1000);
              subProgress_a0a0b.start("Compile Evaluator classes...", Sequence.fromIterable(input).count() * 2);
              final EclipseJavaCompiler javaCompiler = new EclipseJavaCompiler();
              final HashSet<SModule> modules = new HashSet<SModule>();
              String evaluatorClassQualifiedName = null;
              for (TextGenOutcomeResource tgRes : Sequence.fromIterable(input).ofType(TextGenOutcomeResource.class)) {
                // XXX in fact, likely need original module as there might be troubles deducing CP from a transient module which is likely to be in TGOR. 
                //     Besides, it's impossible to calculate runtime modules of languages used during generation 
                // FIXME To deal with that, we pass evaluationClasspathModule from outside, the module which is populated with all possible dependencies. 
                //       It's a hack, indeed, and un ugly one (the code that populates properties pool makes me cry). Alternative approach I don't find 
                //       enough mental powers to try to is to find original input resource (likely, need to use 'transform IResource' as resource policy then, 
                //       although not sure I can get access to the original input resource sequence, as Make has some magic to prepare input for a task based on 
                //       an output of a predecessor). 
                modules.add(tgRes.getModule());
                String packageName = JavaNameUtil.packageName(tgRes.getModel());
                for (TextUnit tu : tgRes.getTextGenResult().getUnits()) {
                  if (tu.getState() != TextUnit.Status.Generated || !(tu.getFileName().endsWith(".java"))) {
                    continue;
                  }
                  final String unitName = tu.getFileName().substring(0, tu.getFileName().length() - 5);
                  final String unitQualifiedName = packageName + '.' + unitName;
                  final String unitSource = new String(tu.getBytes(), tu.getEncoding());
                  if (Properties.EVALUATOR_NAME.equals(unitName)) {
                    if (evaluatorClassQualifiedName != null) {
                      monitor.reportFeedback(new IFeedback.ERROR(String.valueOf(String.format("Duplicating evaluator classes: %s and %s", evaluatorClassQualifiedName, unitQualifiedName))));
                      // fall-through, use the last one discovered. 
                    }
                    evaluatorClassQualifiedName = unitQualifiedName;
                    if (LOG.isDebugEnabled()) {
                      LOG.debug(unitSource);
                    }
                  } else {
                    if (LOG.isTraceEnabled()) {
                      LOG.trace(unitSource);
                    }
                  }
                  javaCompiler.addSource(unitQualifiedName, unitSource);
                }
                subProgress_a0a0b.advance(1);
              }
              modules.remove(null);
              if (vars(pa.global()).evaluationClasspathModule() != null) {
                modules.add(vars(pa.global()).evaluationClasspathModule());
              }
              if (evaluatorClassQualifiedName == null) {
                monitor.reportFeedback(new IFeedback.ERROR(String.valueOf(String.format("No generated Java class with name %s", Properties.EVALUATOR_NAME))));
                return new IResult.FAILURE(_output_it4uid_a0b);
              }
              final Reference<CompilationResult> compilationResult = new Reference<CompilationResult>(null);
              CompilationResultListener listener = new CompilationResultAdapter() {
                @Override
                public void onCompilationResult(CompilationResult r) {
                  compilationResult.set(r);
                }
              };
              javaCompiler.addCompilationResultListener(listener);
              Project mpsProject = monitor.getSession().getProject();
              JavaCompilerOptions options = JavaCompilerOptionsComponent.getInstance().getJavaCompilerOptions(mpsProject);
              // FIXME In fact, I'd rather have a NameEnvironment implementation that can construct IBinaryType from regular Class<> objects loaded 
              //       through regular module classloader instead of a bunch of filesystem paths and ClassFileReader to parse them again. But it's a huge change. 
              Set<String> cp = new ModelAccessHelper(mpsProject.getModelAccess()).runReadAction(new Computable<Set<String>>() {
                public Set<String> compute() {
                  return JavaModuleOperations.collectCompileClasspath(modules, false);
                }
              });
              javaCompiler.compile(cp, options);
              javaCompiler.removeCompilationResultListener(listener);
              if (compilationResult.isNull()) {
                monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("Compilation did not complete")));
                return new IResult.FAILURE(_output_it4uid_a0b);
              }
              if (compilationResult.get().hasErrors()) {
                monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("Compilation failed:")));
                for (CategorizedProblem e : compilationResult.get().getErrors()) {
                  monitor.reportFeedback(new IFeedback.ERROR(String.valueOf(e.getMessage())));
                }
                return new IResult.FAILURE(_output_it4uid_a0b);
              }
              _output_it4uid_a0b = Sequence.fromIterable(_output_it4uid_a0b).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new CResource(new IClassesData() {
                public ClassLoader getClassLoader(ClassLoader cl) {
                  return javaCompiler.getClassLoader(cl);
                }
              }))));
              subProgress_a0a0b.done();
            default:
              progressMonitor.done();
              return new IResult.SUCCESS(_output_it4uid_a0b);
          }
        }
      };
    }
    public IConfig createConfig() {
      return null;
    }
    public Iterable<ITarget.Name> notAfter() {
      return null;
    }
    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.TextGen.textGenToMemory")});
    }
    public Iterable<ITarget.Name> notBefore() {
      return null;
    }
    public Iterable<ITarget.Name> before() {
      return null;
    }
    public ITarget.Name getName() {
      return name;
    }
    public boolean isOptional() {
      return false;
    }
    public boolean requiresInput() {
      return true;
    }
    public boolean producesOutput() {
      return true;
    }
    public Iterable<Class<? extends IResource>> expectedInput() {
      List<Class<? extends IResource>> rv = ListSequence.fromList(new ArrayList<Class<? extends IResource>>());
      ListSequence.fromList(rv).addElement(TextGenOutcomeResource.class);
      return rv;
    }
    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }
    public <T> T createParameters(Class<T> cls) {
      return cls.cast(new Parameters());
    }
    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      if (t != null) {
        ((Tuples._1) t).assign((Tuples._1) copyFrom);
      }
      return t;
    }
    public static JavaDebugEvaluate_Facet.Target_compileEvaluator.Parameters vars(IPropertiesPool ppool) {
      return ppool.properties(name, JavaDebugEvaluate_Facet.Target_compileEvaluator.Parameters.class);
    }
    public static class Parameters extends MultiTuple._1<SModule> {
      public Parameters() {
        super();
      }
      public Parameters(SModule evaluationClasspathModule) {
        super(evaluationClasspathModule);
      }
      public SModule evaluationClasspathModule(SModule value) {
        return super._0(value);
      }
      public SModule evaluationClasspathModule() {
        return super._0();
      }
    }
  }
  public static class TargetProperties implements IPropertiesPersistence {
    public TargetProperties() {
    }
    public void storeValues(Map<String, String> store, IPropertiesPool properties) {
      {
        ITarget.Name name = new ITarget.Name("jetbrains.mps.debugger.java.evaluation.JavaDebugEvaluate.compileEvaluator");
        if (properties.hasProperties(name)) {
          JavaDebugEvaluate_Facet.Target_compileEvaluator.Parameters props = properties.properties(name, JavaDebugEvaluate_Facet.Target_compileEvaluator.Parameters.class);
          MapSequence.fromMap(store).put("jetbrains.mps.debugger.java.evaluation.JavaDebugEvaluate.compileEvaluator.evaluationClasspathModule", null);
        }
      }
    }
    public void loadValues(Map<String, String> store, IPropertiesPool properties) {
      try {
        {
          ITarget.Name name = new ITarget.Name("jetbrains.mps.debugger.java.evaluation.JavaDebugEvaluate.compileEvaluator");
          JavaDebugEvaluate_Facet.Target_compileEvaluator.Parameters props = properties.properties(name, JavaDebugEvaluate_Facet.Target_compileEvaluator.Parameters.class);
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.debugger.java.evaluation.JavaDebugEvaluate.compileEvaluator.evaluationClasspathModule")) {
            props.evaluationClasspathModule(null);
          }
        }
      } catch (RuntimeException re) {
      }
    }
  }
}
