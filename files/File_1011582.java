package jetbrains.mps.execution.configurations.implementation.plugin.plugin;

/*Generated by MPS */

import jetbrains.mps.project.MPSProject;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.baseLanguage.unitTest.execution.client.ITestNodeWrapper;
import jetbrains.mps.debug.api.IDebuggerSettings;
import com.intellij.execution.process.ProcessHandler;
import com.intellij.execution.ExecutionException;
import org.jetbrains.annotations.TestOnly;
import jetbrains.mps.debug.api.EmptyDebuggerSettings;
import jetbrains.mps.baseLanguage.unitTest.execution.client.RunCachesManager;
import jetbrains.mps.baseLanguage.unitTest.execution.client.JUnit_Command;
import com.intellij.execution.process.ProcessAdapter;
import com.intellij.execution.process.ProcessEvent;

public class JUnitOutOfProcessStarter implements JUnitProcessStarter {
  private final JUnitOutOfProcessStarter.JUnitOutOfProcessStarter0 myStarter0;

  public JUnitOutOfProcessStarter(MPSProject project, @NotNull List<ITestNodeWrapper> testNodes, JUnitTests_Configuration junitRC, String toolWindowIdToShowNotifications, IDebuggerSettings debuggerSettings) {
    myStarter0 = new JUnitOutOfProcessStarter.JUnitOutOfProcessStarter0(project, testNodes, junitRC, toolWindowIdToShowNotifications, debuggerSettings);
  }

  @Override
  public ProcessHandler execute() throws ExecutionException {
    return myStarter0.execute();
  }

  @TestOnly
  public static class JUnitOutOfProcessStarter0 {
    private final MPSProject myProject;
    private final List<ITestNodeWrapper> myTestNodes;
    private final String myHostToolWindowId;
    @NotNull
    private final JUnitTests_Configuration myJUnitRC;
    private final IDebuggerSettings myDebuggerSettings;

    public JUnitOutOfProcessStarter0(MPSProject project, @NotNull List<ITestNodeWrapper> testNodes, JUnitTests_Configuration junitRC, String toolWindowIdToShowNotifications, IDebuggerSettings debuggerSettings) {
      myProject = project;
      myHostToolWindowId = toolWindowIdToShowNotifications;
      myJUnitRC = (JUnitTests_Configuration) junitRC.clone();
      myDebuggerSettings = debuggerSettings;
      myTestNodes = testNodes;
    }

    public JUnitOutOfProcessStarter0(MPSProject project, @NotNull List<ITestNodeWrapper> testNodes, JUnitTests_Configuration junitRC) {
      this(project, testNodes, junitRC, null, EmptyDebuggerSettings.getInstance());
    }

    public ProcessHandler execute() throws ExecutionException {
      final boolean dirLock = RunCachesManager.acquireLock(myJUnitRC.getJUnitSettings().getCachesPath());
      ProcessHandler commandProcess = new JUnit_Command().setDebuggerSettings_String(myDebuggerSettings.getCommandLine(true)).createProcess(myProject, myTestNodes, myJUnitRC);
      commandProcess.addProcessListener(new ProcessAdapter() {
        @Override
        public void processTerminated(ProcessEvent p0) {
          if (dirLock) {
            RunCachesManager.releaseLock(myJUnitRC.getJUnitSettings().getCachesPath());
          }
        }
      });
      return commandProcess;
    }

  }
}
