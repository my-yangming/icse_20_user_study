/*Copyright Â©2016 TommyLemon(https://github.com/TommyLemon/APIJSON)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.*/

package zuo.biao.apijson.server;

import static zuo.biao.apijson.JSONObject.KEY_EXPLAIN;
import static zuo.biao.apijson.RequestMethod.GET;

import java.io.UnsupportedEncodingException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.TimeoutException;

import javax.activation.UnsupportedDataTypeException;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;

import zuo.biao.apijson.JSON;
import zuo.biao.apijson.JSONResponse;
import zuo.biao.apijson.Log;
import zuo.biao.apijson.NotNull;
import zuo.biao.apijson.RequestMethod;
import zuo.biao.apijson.RequestRole;
import zuo.biao.apijson.StringUtil;
import zuo.biao.apijson.server.exception.ConditionErrorException;
import zuo.biao.apijson.server.exception.ConflictException;
import zuo.biao.apijson.server.exception.NotExistException;
import zuo.biao.apijson.server.exception.NotLoggedInException;
import zuo.biao.apijson.server.exception.OutOfRangeException;

/**parser for parsing request to JSONObject
 * @author Lemon
 */
public abstract class AbstractParser<T> implements Parser<T>, SQLCreator {
	protected static final String TAG = "AbstractParser";


	/**
	 * GET
	 */
	public AbstractParser() {
		this(null);
	}
	/**
	 * @param requestMethod null ? requestMethod = GET
	 */
	public AbstractParser(RequestMethod method) {
		this(method, false);
	}


	/**
	 * @param requestMethod null ? requestMethod = GET
	 * @param noVerify ä»…é™?äºŽä¸ºæœ?åŠ¡ç«¯æ??ä¾›æ–¹æ³•å…?éªŒè¯?ç‰¹æ?ƒï¼Œæ™®é€šè¯·æ±‚ä¸?è¦?è®¾ç½®ä¸ºtrueï¼? å¦‚æžœå¯¹åº”Tableæœ‰æ?ƒé™?ä¹Ÿå»ºè®®ç”¨é»˜è®¤å€¼falseï¼Œä¿?æŒ?å’Œå®¢æˆ·ç«¯æ?ƒé™?ä¸€è‡´
	 */
	public AbstractParser(RequestMethod method, boolean noVerify) {
		super();
		setMethod(method);
		setNoVerify(noVerify);
	}

	@NotNull
	protected Visitor<T> visitor;
	@NotNull
	@Override
	public Visitor<T> getVisitor() {
		if (visitor == null) {
			visitor = new Visitor<T>() {

				@Override
				public T getId() {
					return null;
				}

				@Override
				public List<T> getContactIdList() {
					return null;
				}
			};
		}
		return visitor;
	}
	@Override
	public AbstractParser<T> setVisitor(@NotNull Visitor<T> visitor) {
		this.visitor = visitor;
		return this;
	}

	protected RequestMethod requestMethod;
	@NotNull
	@Override
	public RequestMethod getMethod() {
		return requestMethod;
	}
	@NotNull
	@Override
	public AbstractParser<T> setMethod(RequestMethod method) {
		this.requestMethod = method == null ? GET : method;
		return this;
	}

	protected JSONObject requestObject;
	@Override
	public JSONObject getRequest() {
		return requestObject;
	}
	@Override
	public AbstractParser<T> setRequest(JSONObject request) {
		this.requestObject = request;
		return this;
	}

	protected Boolean globleFormat;
	public AbstractParser<T> setGlobleFormat(Boolean globleFormat) {
		this.globleFormat = globleFormat;
		return this;
	}
	@Override
	public Boolean getGlobleFormat() {
		return globleFormat;
	}
	protected RequestRole globleRole;
	public AbstractParser<T> setGlobleRole(RequestRole globleRole) {
		this.globleRole = globleRole;
		return this;
	}
	@Override
	public RequestRole getGlobleRole() {
		return globleRole;
	}
	protected String globleDatabase;
	public AbstractParser<T> setGlobleDatabase(String globleDatabase) {
		this.globleDatabase = globleDatabase;
		return this;
	}
	@Override
	public String getGlobleDatabase() {
		return globleDatabase;
	}
	protected String globleSchema;
	public AbstractParser<T> setGlobleSchema(String globleSchema) {
		this.globleSchema = globleSchema;
		return this;
	}
	@Override
	public String getGlobleSchema() {
		return globleSchema;
	}
	protected Boolean globleExplain;
	public AbstractParser<T> setGlobleExplain(Boolean globleExplain) {
		this.globleExplain = globleExplain;
		return this;
	}
	@Override
	public Boolean getGlobleExplain() {
		return globleExplain;
	}
	protected String globleCache;
	public AbstractParser<T> setGlobleCache(String globleCache) {
		this.globleCache = globleCache;
		return this;
	}
	@Override
	public String getGlobleCache() {
		return globleCache;
	}

	@Override
	public boolean isNoVerify() {
		return noVerifyLogin && noVerifyRole && noVerifyContent;
	}
	@Override
	public AbstractParser<T> setNoVerify(boolean noVerify) {
		setNoVerifyLogin(noVerify);
		setNoVerifyRole(noVerify);
		setNoVerifyContent(noVerify);
		return this;
	}

	protected boolean noVerifyLogin;
	@Override
	public boolean isNoVerifyLogin() {
		return noVerifyLogin;
	}
	@Override
	public AbstractParser<T> setNoVerifyLogin(boolean noVerifyLogin) {
		this.noVerifyLogin = noVerifyLogin;
		return this;
	}
	protected boolean noVerifyRole;
	@Override
	public boolean isNoVerifyRole() {
		return noVerifyRole;
	}
	@Override
	public AbstractParser<T> setNoVerifyRole(boolean noVerifyRole) {
		this.noVerifyRole = noVerifyRole;
		return this;
	}
	protected boolean noVerifyContent;
	@Override
	public boolean isNoVerifyContent() {
		return noVerifyContent;
	}
	@Override
	public AbstractParser<T> setNoVerifyContent(boolean noVerifyContent) {
		this.noVerifyContent = noVerifyContent;
		return this;
	}





	protected SQLExecutor sqlExecutor;
	protected Verifier<T> verifier;
	protected Map<String, Object> queryResultMap;//path-result

	@Override
	public SQLExecutor getSQLExecutor() {
		return sqlExecutor;
	}
	@Override
	public Verifier<T> getVerifier() {
		return verifier;
	}

	/**è§£æž?è¯·æ±‚jsonå¹¶èŽ·å?–å¯¹åº”ç»“æžœ
	 * @param request
	 * @return
	 */
	@Override
	public String parse(String request) {
		return JSON.toJSONString(parseResponse(request));
	}
	/**è§£æž?è¯·æ±‚jsonå¹¶èŽ·å?–å¯¹åº”ç»“æžœ
	 * @param request
	 * @return
	 */
	@NotNull
	@Override
	public String parse(JSONObject request) {
		return JSON.toJSONString(parseResponse(request));
	}

	/**è§£æž?è¯·æ±‚jsonå¹¶èŽ·å?–å¯¹åº”ç»“æžœ
	 * @param request å…ˆparseRequestä¸­URLDecoder.decode(request, UTF_8);å†?parseResponse(getCorrectRequest(...))
	 * @return parseResponse(requestObject);
	 */
	@NotNull
	@Override
	public JSONObject parseResponse(String request) {
		Log.d(TAG, "\n\n\n\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n"
				+ requestMethod + "/parseResponse  request = \n" + request + "\n\n");

		try {
			requestObject = parseRequest(request);
		} catch (Exception e) {
			return newErrorResult(e);
		}

		return parseResponse(requestObject);
	}

	private int queryDepth;

	/**è§£æž?è¯·æ±‚jsonå¹¶èŽ·å?–å¯¹åº”ç»“æžœ
	 * @param request
	 * @return requestObject
	 */
	@NotNull
	@Override
	public JSONObject parseResponse(JSONObject request) {
		long startTime = System.currentTimeMillis();
		Log.d(TAG, "parseResponse  startTime = " + startTime
				+ "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n\n\n ");

		requestObject = request;

		verifier = createVerifier().setVisitor(getVisitor());

		if (RequestMethod.isPublicMethod(requestMethod) == false) {
			try {
				if (noVerifyLogin == false) {
					onVerifyLogin();
				}
				if (noVerifyContent == false) {
					onVerifyContent();
				}
			} catch (Exception e) {
				return extendErrorResult(requestObject, e);
			}
		}

		//å¿…é¡»åœ¨parseCorrectRequestå?Žé?¢ï¼Œå› ä¸ºparseCorrectRequestå?¯èƒ½ä¼šæ·»åŠ  @role
		if (noVerifyRole == false && globleRole == null) {
			try {
				setGlobleRole(RequestRole.get(requestObject.getString(JSONRequest.KEY_ROLE)));
				requestObject.remove(JSONRequest.KEY_ROLE);
			} catch (Exception e) {
				return extendErrorResult(requestObject, e);
			}
		}

		try {
			setGlobleFormat(requestObject.getBoolean(JSONRequest.KEY_FORMAT));
			setGlobleDatabase(requestObject.getString(JSONRequest.KEY_DATABASE));
			setGlobleSchema(requestObject.getString(JSONRequest.KEY_SCHEMA));
			setGlobleExplain(requestObject.getBoolean(JSONRequest.KEY_EXPLAIN));
			setGlobleCache(requestObject.getString(JSONRequest.KEY_CACHE));

			requestObject.remove(JSONRequest.KEY_FORMAT);
			requestObject.remove(JSONRequest.KEY_DATABASE);
			requestObject.remove(JSONRequest.KEY_SCHEMA);
			requestObject.remove(JSONRequest.KEY_EXPLAIN);
			requestObject.remove(JSONRequest.KEY_CACHE);
		} catch (Exception e) {
			return extendErrorResult(requestObject, e);
		}

		final String requestString = JSON.toJSONString(request);//requestä¼ è¿›åŽ»è§£æž?å?Žå·²ç»?å?˜äº†


		queryResultMap = new HashMap<String, Object>();

		Exception error = null;
		sqlExecutor = createSQLExecutor();
		try {
			queryDepth = 0;
			requestObject = onObjectParse(request, null, null, null, false);
		} catch (Exception e) {
			e.printStackTrace();
			error = e;
		}

		requestObject = error == null ? extendSuccessResult(requestObject) : extendErrorResult(requestObject, error);

		JSONObject res = (globleFormat != null && globleFormat) && JSONResponse.isSuccess(requestObject) ? new JSONResponse(requestObject) : requestObject;

		long endTime = System.currentTimeMillis();
		long duration = endTime - startTime;

		if (Log.DEBUG) {
			requestObject.put("sql:generate/cache/execute/maxExecute", sqlExecutor.getGeneratedSQLCount() + "/" + sqlExecutor.getCachedSQLCount() + "/" + sqlExecutor.getExecutedSQLCount() + "/" + getMaxSQLCount());
			requestObject.put("depth:count/max", queryDepth + "/" + getMaxQueryDepth());
			requestObject.put("time:start/duration/end", startTime + "/" + duration + "/" + endTime);
		}

		sqlExecutor.close();
		sqlExecutor = null;
		queryResultMap.clear();
		queryResultMap = null;

		//ä¼šä¸?ä¼šå¯¼è‡´åŽŸæ?¥çš„session = nullï¼Ÿ		session = null;

		if (Log.DEBUG) {
			Log.d(TAG, "\n\n\n\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n "
					+ requestMethod + "/parseResponse  request = \n" + requestString + "\n\n");

			Log.d(TAG, "parseResponse  return response = \n" + JSON.toJSONString(requestObject)
			+ "\n >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> \n\n\n");
		}
		Log.d(TAG, "parseResponse  endTime = " + endTime + ";  duration = " + duration
				+ ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n\n");

		return res;
	}


	@Override
	public void onVerifyLogin() throws Exception {
		verifier.verifyLogin();
	}
	@Override
	public void onVerifyContent() throws Exception {
		requestObject = parseCorrectRequest();
	}
	/**æ ¡éªŒè§’è‰²å?Šå¯¹åº”æ“?ä½œçš„æ?ƒé™?
	 * @param config
	 * @return
	 * @throws Exception
	 */
	@Override
	public void onVerifyRole(@NotNull SQLConfig config) throws Exception {
		if (Log.DEBUG) {
			Log.i(TAG, "onVerifyRole  config = " + JSON.toJSONString(config));
		}

		if (noVerifyRole == false) {
			if (config.getRole() == null) {
				if (globleRole != null) {
					config.setRole(globleRole);
				} else {
					config.setRole(getVisitor().getId() == null ? RequestRole.UNKNOWN : RequestRole.LOGIN);
				}
			}
			verifier.verify(config);
		}

	}


	/**è§£æž?è¯·æ±‚JSONObject
	 * @param request => URLDecoder.decode(request, UTF_8);
	 * @return
	 * @throws Exception 
	 */
	@NotNull
	public static JSONObject parseRequest(String request) throws Exception {
		JSONObject obj = JSON.parseObject(request);
		if (obj == null) {
			throw new UnsupportedEncodingException("JSONæ ¼å¼?ä¸?å?ˆæ³•ï¼?");
		}
		return obj;
	}

	@Override
	public JSONObject parseCorrectRequest(JSONObject target) throws Exception {
		return Structure.parseRequest(requestMethod, "", target, requestObject, getMaxUpdateCount(), this);
	}


	/**æ–°å»ºå¸¦çŠ¶æ€?å†…å®¹çš„JSONObject
	 * @param code
	 * @param msg
	 * @return
	 */
	public static JSONObject newResult(int code, String msg) {
		return extendResult(null, code, msg);
	}
	/**æ·»åŠ JSONObjectçš„çŠ¶æ€?å†…å®¹ï¼Œä¸€èˆ¬ç”¨äºŽé”™è¯¯æ??ç¤ºç»“æžœ
	 * @param object
	 * @param code
	 * @param msg
	 * @return
	 */
	public static JSONObject extendResult(JSONObject object, int code, String msg) {
		if (object == null) {
			object = new JSONObject(true);
		}
		if (object.containsKey(JSONResponse.KEY_CODE) == false) {
			object.put(JSONResponse.KEY_CODE, code);
		}
		String m = StringUtil.getString(object.getString(JSONResponse.KEY_MSG));
		if (m.isEmpty() == false) {
			msg = m + " ;\n " + StringUtil.getString(msg);
		}
		object.put(JSONResponse.KEY_MSG, msg);
		return object;
	}


	/**æ·»åŠ è¯·æ±‚æˆ?åŠŸçš„çŠ¶æ€?å†…å®¹
	 * @param object
	 * @return
	 */
	public static JSONObject extendSuccessResult(JSONObject object) {
		return extendResult(object, JSONResponse.CODE_SUCCESS, JSONResponse.MSG_SUCCEED);
	}
	/**èŽ·å?–è¯·æ±‚æˆ?åŠŸçš„çŠ¶æ€?å†…å®¹
	 * @return
	 */
	public static JSONObject newSuccessResult() {
		return newResult(JSONResponse.CODE_SUCCESS, JSONResponse.MSG_SUCCEED);
	}
	/**æ·»åŠ è¯·æ±‚æˆ?åŠŸçš„çŠ¶æ€?å†…å®¹
	 * @param object
	 * @return
	 */
	public static JSONObject extendErrorResult(JSONObject object, Exception e) {
		JSONObject error = newErrorResult(e);
		return extendResult(object, error.getIntValue(JSONResponse.KEY_CODE), error.getString(JSONResponse.KEY_MSG));
	}
	/**æ–°å»ºé”™è¯¯çŠ¶æ€?å†…å®¹
	 * @param e
	 * @return
	 */
	public static JSONObject newErrorResult(Exception e) {
		if (e != null) {
			e.printStackTrace();

			int code;
			if (e instanceof UnsupportedEncodingException) {
				code = JSONResponse.CODE_UNSUPPORTED_ENCODING;
			} 
			else if (e instanceof IllegalAccessException) {
				code = JSONResponse.CODE_ILLEGAL_ACCESS;
			}
			else if (e instanceof UnsupportedOperationException) {
				code = JSONResponse.CODE_UNSUPPORTED_OPERATION;
			}
			else if (e instanceof NotExistException) {
				code = JSONResponse.CODE_NOT_FOUND;
			}
			else if (e instanceof IllegalArgumentException) {
				code = JSONResponse.CODE_ILLEGAL_ARGUMENT;
			}
			else if (e instanceof NotLoggedInException) {
				code = JSONResponse.CODE_NOT_LOGGED_IN;
			}
			else if (e instanceof TimeoutException) {
				code = JSONResponse.CODE_TIME_OUT;
			} 
			else if (e instanceof ConflictException) {
				code = JSONResponse.CODE_CONFLICT;
			}
			else if (e instanceof ConditionErrorException) {
				code = JSONResponse.CODE_CONDITION_ERROR;
			}
			else if (e instanceof UnsupportedDataTypeException) {
				code = JSONResponse.CODE_UNSUPPORTED_TYPE;
			}
			else if (e instanceof OutOfRangeException) {
				code = JSONResponse.CODE_OUT_OF_RANGE;
			}
			else if (e instanceof NullPointerException) {
				code = JSONResponse.CODE_NULL_POINTER;
			}
			else {
				code = JSONResponse.CODE_SERVER_ERROR;
			}

			return newResult(code, e.getMessage());
		}

		return newResult(JSONResponse.CODE_SERVER_ERROR, JSONResponse.MSG_SERVER_ERROR);
	}




	//TODO å?¯åŠ¨æ—¶ä¸€æ¬¡æ€§åŠ è½½Requestæ‰€æœ‰å†…å®¹ï¼Œä½œä¸ºåˆ?å§‹åŒ–ã€‚
	/**èŽ·å?–æ­£ç¡®çš„è¯·æ±‚ï¼Œé?žGETè¯·æ±‚å¿…é¡»æ˜¯æœ?åŠ¡å™¨æŒ‡å®šçš„
	 * @param method
	 * @param request
	 * @return
	 * @throws Exception 
	 */
	@Override
	public JSONObject parseCorrectRequest() throws Exception {
		if (RequestMethod.isPublicMethod(requestMethod)) {
			return requestObject;//éœ€è¦?æŒ‡å®šJSONç»“æž„çš„getè¯·æ±‚å?¯ä»¥æ”¹ä¸ºpostè¯·æ±‚ã€‚ä¸€èˆ¬å?ªæœ‰å¯¹å®‰å…¨æ€§è¦?æ±‚é«˜çš„æ‰?ä¼šæŒ‡å®šï¼Œè€Œè¿™ç§?æƒ…å†µç”¨æ˜Žæ–‡çš„GETæ–¹å¼?å‡ ä¹Žè‚¯å®šä¸?å®‰å…¨
		}

		String tag = requestObject.getString(JSONRequest.KEY_TAG);
		if (StringUtil.isNotEmpty(tag, true) == false) {
			throw new IllegalArgumentException("è¯·åœ¨æœ€å¤–å±‚è®¾ç½®tagï¼?ä¸€èˆ¬æ˜¯Tableå??ï¼Œä¾‹å¦‚ \"tag\": \"User\" ");
		}
		int version = requestObject.getIntValue(JSONRequest.KEY_VERSION);

		JSONObject object = null;
		String error = "";
		try {
			object = getStructure("Request", JSONRequest.KEY_TAG, tag, version);
		} catch (Exception e) {
			error = e.getMessage();
		}
		if (object == null) {//emptyè¡¨ç¤ºéš?æ„?æ“?ä½œ  || object.isEmpty()) {
			throw new UnsupportedOperationException("é?žå¼€æ”¾è¯·æ±‚å¿…é¡»æ˜¯Requestè¡¨ä¸­æ ¡éªŒè§„åˆ™å…?è®¸çš„æ“?ä½œï¼?\n " + error);
		}

		JSONObject target = null;
		if (zuo.biao.apijson.JSONObject.isTableKey(tag) && object.containsKey(tag) == false) {//tagæ˜¯tableå??
			target = new JSONObject(true);
			target.put(tag, object);
		} else {
			target = object;
		}
		//èŽ·å?–æŒ‡å®šçš„JSONç»“æž„ >>>>>>>>>>>>>>

		requestObject.remove(JSONRequest.KEY_TAG);
		requestObject.remove(JSONRequest.KEY_VERSION);
		return parseCorrectRequest((JSONObject) target.clone());
	}


	//TODO ä¼˜åŒ–æ€§èƒ½ï¼?
	/**èŽ·å?–æ­£ç¡®çš„è¿”å›žç»“æžœ
	 * @param method
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	@Override
	public JSONObject parseCorrectResponse(String table, JSONObject response) throws Exception {
		//		Log.d(TAG, "getCorrectResponse  method = " + method + "; table = " + table);
		//		if (response == null || response.isEmpty()) {//é?¿å…?æ— æ•ˆç©ºresult:{}æ·»åŠ å†…å®¹å?Žå?˜æœ‰æ•ˆ
		//			Log.e(TAG, "getCorrectResponse  response == null || response.isEmpty() >> return response;");
		return response;
		//		}
		//
		//		JSONObject target = zuo.biao.apijson.JSONObject.isTableKey(table) == false
		//				? new JSONObject() : getStructure(method, "Response", "model", table);
		//
		//				return MethodStructure.parseResponse(method, table, target, response, new OnParseCallback() {
		//
		//					@Override
		//					protected JSONObject onParseJSONObject(String key, JSONObject tobj, JSONObject robj) throws Exception {
		//						return getCorrectResponse(method, key, robj);
		//					}
		//				});
	}

	/**èŽ·å?–Requestæˆ–Responseå†…æŒ‡å®šJSONç»“æž„
	 * @param table
	 * @param key
	 * @param value
	 * @param version
	 * @return
	 * @throws Exception
	 */
	@Override
	public JSONObject getStructure(@NotNull String table, String key, String value, int version) throws Exception  {
		//èŽ·å?–æŒ‡å®šçš„JSONç»“æž„ <<<<<<<<<<<<<<
		SQLConfig config = createSQLConfig().setMethod(GET).setTable(table);
		config.setPrepared(false);
		config.setColumn(Arrays.asList("structure"));

		Map<String, Object> where = new HashMap<String, Object>();
		where.put("method", requestMethod.name());
		if (key != null) {
			where.put(key, value);
		}
		if (version > 0) {
			where.put(JSONRequest.KEY_VERSION + "{}", ">=" + version);
		}
		config.setWhere(where);
		config.setOrder(JSONRequest.KEY_VERSION + (version > 0 ? "+" : "-"));
		config.setCount(1);

		SQLExecutor executor = createSQLExecutor();

		//too many connections error: ä¸?try-catchï¼Œå?¯ä»¥è®©å®¢æˆ·ç«¯çœ‹åˆ°æ˜¯æœ?åŠ¡å™¨å†…éƒ¨å¼‚å¸¸
		try {
			JSONObject result = executor.execute(config, false);
			return getJSONObject(result, "structure");//è§£å†³è¿”å›žå€¼å¥—äº†ä¸€å±‚ "structure":{}
		} finally {
			executor.close();
		}
	}



	//	protected SQLConfig itemConfig;
	/**èŽ·å?–å?•ä¸ªå¯¹è±¡ï¼Œè¯¥å¯¹è±¡å¤„äºŽparentObjectå†…
	 * @param parentPath parentObjectçš„è·¯å¾„
	 * @param name parentObjectçš„key
	 * @param request parentObjectçš„value
	 * @param config for array item
	 * @return
	 * @throws Exception 
	 */
	@Override
	public JSONObject onObjectParse(final JSONObject request
			, String parentPath, String name, final SQLConfig arrayConfig, boolean isSubquery) throws Exception {

		if (Log.DEBUG) {
			Log.i(TAG, "\ngetObject:  parentPath = " + parentPath
					+ ";\n name = " + name + "; request = " + JSON.toJSONString(request));
		}
		if (request == null) {// Moment:{}   || request.isEmpty()) {//key-valueæ?¡ä»¶
			return null;
		}

		int type = arrayConfig == null ? 0 : arrayConfig.getType();

		String[] arr = StringUtil.split(parentPath, "/");
		if (arrayConfig == null || arrayConfig.getPosition() == 0) {
			int d = arr == null ? 1 : arr.length + 1;
			if (queryDepth < d) {
				queryDepth = d;
				int maxQueryDepth = getMaxQueryDepth();
				if (queryDepth > maxQueryDepth) {
					throw new IllegalArgumentException(parentPath + "/" + name + ":{} çš„æ·±åº¦(æˆ–è€…è¯´å±‚çº§) ä¸º " + queryDepth + " å·²è¶…é™?ï¼Œå¿…é¡»åœ¨ 1-" + maxQueryDepth + " å†… !");
				}
			}
		}

		ObjectParser op = createObjectParser(request, parentPath, name, arrayConfig, isSubquery).parse();


		JSONObject response = null;
		if (op != null) {//TODO SQLæŸ¥è¯¢ç»“æžœä¸ºç©ºæ—¶ï¼ŒfunctionMapå’ŒcustomMapè¿˜æœ‰æ²¡æœ‰æ„?ä¹‰ï¼Ÿ
			if (arrayConfig == null) {//Common
				response = op.setSQLConfig().executeSQL().response();
			}
			else {//Array Item Child
				int query = arrayConfig.getQuery();

				//total è¿™é‡Œä¸?èƒ½ç”¨arrayConfig.getType()ï¼Œå› ä¸ºåœ¨createObjectParser.onChildParseä¼ åˆ°onObjectParseæ—¶å·²è¢«æ”¹æŽ‰
				if (type == SQLConfig.TYPE_ITEM_CHILD_0 && query != JSONRequest.QUERY_TABLE
						&& arrayConfig.getPosition() == 0) {
					JSONObject rp = op.setMethod(RequestMethod.HEAD).setSQLConfig().executeSQL().getSqlReponse();
					if (rp != null) {
						int index = parentPath.lastIndexOf("]/");
						if (index >= 0) {
							int total = rp.getIntValue(JSONResponse.KEY_COUNT);
							putQueryResult(parentPath.substring(0, index) + "]/" + JSONResponse.KEY_TOTAL, total);

							if (total <= arrayConfig.getCount()*arrayConfig.getPage()) {
								query = JSONRequest.QUERY_TOTAL;//æ•°é‡?ä¸?å¤Ÿäº†ï¼Œä¸?å†?å¾€å?ŽæŸ¥è¯¢
							}
						}
					}

					op.setMethod(requestMethod);
				}

				//Table
				if (query == JSONRequest.QUERY_TOTAL) {
					response = null;//ä¸?å†?å¾€å?ŽæŸ¥è¯¢
				} else {
					response = op
							.setSQLConfig(arrayConfig.getCount(), arrayConfig.getPage(), arrayConfig.getPosition())
							.executeSQL()
							.response();
					//					itemConfig = op.getConfig();
				}
			}

			op.recycle();
			op = null;
		}

		return response;
	}

	/**èŽ·å?–å¯¹è±¡æ•°ç»„ï¼Œè¯¥å¯¹è±¡æ•°ç»„å¤„äºŽparentObjectå†…
	 * @param parentPath parentObjectçš„è·¯å¾„
	 * @param name parentObjectçš„key
	 * @param request parentObjectçš„value
	 * @return 
	 * @throws Exception
	 */
	@Override
	public JSONArray onArrayParse(JSONObject request, String parentPath, String name, boolean isSubquery) throws Exception {
		if (Log.DEBUG) {
			Log.i(TAG, "\n\n\n onArrayParse parentPath = " + parentPath
					+ "; name = " + name + "; request = " + JSON.toJSONString(request));
		}

		//ä¸?èƒ½å…?è®¸GETSï¼Œå?¦åˆ™ä¼šè¢«é€šè¿‡"[]":{"@role":"ADMIN"},"Table":{},"tag":"Table"ç»•è¿‡æ?ƒé™?å¹¶èƒ½æ‰¹é‡?æŸ¥è¯¢
		if (RequestMethod.isGetMethod(requestMethod, false) == false) {
			throw new UnsupportedOperationException("key[]:{}å?ªæ”¯æŒ?GETæ–¹æ³•ï¼?ä¸?å…?è®¸ä¼  " + name + ":{} ï¼?");
		}
		if (request == null || request.isEmpty()) {//jsonKey-jsonValueæ?¡ä»¶
			return null;
		}
		String path = getAbsPath(parentPath, name);


		//ä¸?èƒ½æ”¹å?˜ï¼Œå› ä¸ºå?Žé?¢å?¯èƒ½ç»§ç»­ç”¨åˆ°ï¼Œå¯¼è‡´1ä»¥ä¸Šéƒ½æ”¹å?˜ []:{0:{Comment[]:{0:{Comment:{}},1:{...},...}},1:{...},...}
		final String query = request.getString(JSONRequest.KEY_QUERY);
		final Integer count = request.getInteger(JSONRequest.KEY_COUNT); //TODO å¦‚æžœä¸?æƒ³ç”¨é»˜è®¤æ•°é‡?å?¯ä»¥æ”¹æˆ? getIntValue(JSONRequest.KEY_COUNT);
		final int page = request.getIntValue(JSONRequest.KEY_PAGE);
		final Object join = request.get(JSONRequest.KEY_JOIN);

		int query2;
		if (query == null) {
			query2 = JSONRequest.QUERY_TABLE;
		}
		else {
			switch (query) {
			case "0":
			case JSONRequest.QUERY_TABLE_STRING:
				query2 = JSONRequest.QUERY_TABLE;
				break;
			case "1":
			case JSONRequest.QUERY_TOTAL_STRING:
				query2 = JSONRequest.QUERY_TOTAL;
				break;
			case "2":
			case JSONRequest.QUERY_ALL_STRING:
				query2 = JSONRequest.QUERY_ALL;
				break;
			default:
				throw new IllegalArgumentException(path + "/" + JSONRequest.KEY_QUERY + ":value ä¸­ value çš„å€¼ä¸?å?ˆæ³•ï¼?å¿…é¡»åœ¨ [0,1,2] æˆ– [TABLE, TOTAL, ALL] å†… !");
			}
		}

		int maxPage = getMaxQueryPage();
		if (page < 0 || page > maxPage) {
			throw new IllegalArgumentException(path + "/" + JSONRequest.KEY_PAGE + ":value ä¸­ value çš„å€¼ä¸?å?ˆæ³•ï¼?å¿…é¡»åœ¨ 0-" + maxPage + " å†… !");
		}

		//ä¸?ç”¨totalé™?åˆ¶æ•°é‡?äº†ï¼Œå?ªç”¨ä¸­æ–­æœºåˆ¶ï¼Œtotalå?ªåœ¨query = 1,2çš„æ—¶å€™æ‰?èŽ·å?–
		int count2 = isSubquery || count != null ? (count == null ? 0 : count) : getDefaultQueryCount();
		int max = isSubquery ? count2 : getMaxQueryCount();

		if (count2 < 0 || count2 > max) {
			throw new IllegalArgumentException(path + "/" + JSONRequest.KEY_COUNT + ":value ä¸­ value çš„å€¼ä¸?å?ˆæ³•ï¼?å¿…é¡»åœ¨ 0-" + max + " å†… !");
		}

		request.remove(JSONRequest.KEY_QUERY);
		request.remove(JSONRequest.KEY_COUNT);
		request.remove(JSONRequest.KEY_PAGE);
		request.remove(JSONRequest.KEY_JOIN);
		Log.d(TAG, "onArrayParse  query = " + query + "; count = " + count + "; page = " + page + "; join = " + join);

		if (request.isEmpty()) {//å¦‚æžœæ?¡ä»¶æˆ?ç«‹ï¼Œè¯´æ˜Žæ‰€æœ‰çš„ parentPath/name:request ä¸­requestéƒ½æ— æ•ˆï¼?ï¼?ï¼?
			Log.e(TAG, "onArrayParse  request.isEmpty() >> return null;");
			return null;
		}


		int size = count2 == 0 ? max : count2;//countä¸ºæ¯?é¡µæ•°é‡?ï¼Œsizeä¸ºç¬¬pageé¡µå®žé™…æ•°é‡?ï¼Œmax(size) = count
		Log.d(TAG, "onArrayParse  size = " + size + "; page = " + page);


		//key[]:{Table:{}}ä¸­key equals Tableæ—¶ æ??å?–Table
		int index = name == null ? -1 : name.lastIndexOf("[]");
		String childPath = index <= 0 ? null : Pair.parseEntry(name.substring(0, index), true).getKey(); // Table-key1-key2...

		//åˆ¤æ–­ç¬¬ä¸€ä¸ªkeyï¼Œå?³Tableæ˜¯å?¦å­˜åœ¨ï¼Œå¦‚æžœå­˜åœ¨å°±æ??å?–
		String[] childKeys = StringUtil.split(childPath, "-", false);
		if (childKeys == null || childKeys.length <= 0 || request.containsKey(childKeys[0]) == false) {
			childKeys = null;
		}


		//Table<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
		JSONArray response = new JSONArray();
		SQLConfig config = createSQLConfig()
				.setMethod(requestMethod)
				.setCount(size)
				.setPage(page)
				.setQuery(query2)
				.setJoinList(onJoinParse(join, request));

		JSONObject parent;
		//ç”Ÿæˆ?sizeä¸ª
		for (int i = 0; i < (isSubquery ? 1 : size); i++) {
			parent = onObjectParse(request, path, "" + i, config.setType(SQLConfig.TYPE_ITEM).setPosition(i), isSubquery);
			if (parent == null || parent.isEmpty()) {
				break;
			}
			//key[]:{Table:{}}ä¸­key equals Tableæ—¶ æ??å?–Table
			response.add(getValue(parent, childKeys)); //nullæœ‰æ„?ä¹‰
		}
		//Table>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


		/*
		 * æ”¯æŒ?å¼•ç”¨å?–å€¼å?Žçš„æ•°ç»„
			{
			    "User-id[]": {
			        "User": {
			            "contactIdList<>": 82002
			        }
			    },
			    "Moment-userId[]": {
			        "Moment": {
			            "userId{}@": "User-id[]"
			        }
			    }
			}
		 */
		Object fo = childKeys == null || response.isEmpty() ? null : response.get(0);
		if (fo instanceof Boolean || fo instanceof Number || fo instanceof String) { //[{}] å’Œ [[]] éƒ½æ²¡æ„?ä¹‰
			putQueryResult(path, response);
		}


		//å?Žé?¢è¿˜å?¯èƒ½ç”¨åˆ°ï¼Œè¦?è¿˜åŽŸ
		request.put(JSONRequest.KEY_QUERY, query);
		request.put(JSONRequest.KEY_COUNT, count);
		request.put(JSONRequest.KEY_PAGE, page);
		request.put(JSONRequest.KEY_JOIN, join);

		if (Log.DEBUG) {
			Log.i(TAG, "onArrayParse  return response = \n" + JSON.toJSONString(response) + "\n>>>>>>>>>>>>>>>\n\n\n");
		}
		return response;
	}

	/**å¤šè¡¨å?Œæ—¶ç­›é€‰
	 * @param join "&/User/id@,</User[]/User/id{}@,</[]/Comment/momentId@"
	 * @param request
	 * @return 
	 * @throws Exception 
	 */
	private List<Join> onJoinParse(Object join, JSONObject request) throws Exception {
		JSONObject joinMap = null;

		if (join instanceof JSONObject) {
			joinMap = (JSONObject) join;
		}
		else if (join instanceof String) {
			String[] sArr = request == null || request.isEmpty() ? null : StringUtil.split((String) join);
			if (sArr != null && sArr.length > 0) {
				joinMap = new JSONObject();
				for (int i = 0; i < sArr.length; i++) {
					joinMap.put(sArr[i], new JSONObject());
				}
			}
		}
		else if (join != null){
			throw new UnsupportedDataTypeException(TAG + ".onJoinParse  join å?ªèƒ½æ˜¯ String æˆ– JSONObject ç±»åž‹ï¼?");
		}

		Set<Entry<String, Object>> set = joinMap == null ? null : joinMap.entrySet();
		if (set == null || set.isEmpty()) {
			Log.e(TAG, "doJoin  set == null || set.isEmpty() >> return null;");
			return null;
		}



		List<Join> joinList = new ArrayList<>();


		JSONObject tableObj;
		String targetPath;

		JSONObject targetObj;
		String targetTable;
		String targetKey;

		String path;

		//		List<String> onList = new ArrayList<>();
		for (Entry<String, Object> e : set) {//User/id@
			if (e.getValue() instanceof JSONObject == false) {
				throw new IllegalArgumentException(JSONRequest.KEY_JOIN + ":value ä¸­valueä¸?å?ˆæ³•ï¼?"
						+ "å¿…é¡»ä¸º &/Table0/key0,</Table1/key1,... æˆ– { '&/Table0/key0':{}, '</Table1/key1':{},... } è¿™ç§?å½¢å¼?ï¼?");
			}

			//åˆ†å‰² /Table/key
			path = "" + e.getKey();

			int index = path.indexOf("/");
			if (index < 0) {
				throw new IllegalArgumentException(JSONRequest.KEY_JOIN + ":value ä¸­valueä¸?å?ˆæ³•ï¼?"
						+ "å¿…é¡»ä¸º &/Table0/key0,</Table1/key1,... æˆ– { '&/Table0/key0':{}, '</Table1/key1':{},... } è¿™ç§?å½¢å¼?ï¼?");
			}
			String joinType = path.substring(0, index); //& | ! < > ( ) <> () *
			//			if (StringUtil.isEmpty(joinType, true)) {
			//				joinType = "|"; // FULL JOIN
			//			}
			path = path.substring(index + 1);

			index = path.indexOf("/");
			String tableKey = index < 0 ? null : path.substring(0, index); //User:owner
			String table = Pair.parseEntry(tableKey, true).getKey(); //User
			String key = StringUtil.isEmpty(table, true) ? null : path.substring(index + 1);//id@
			if (StringUtil.isEmpty(key, true)) {
				throw new IllegalArgumentException(JSONRequest.KEY_JOIN + ":value ä¸­valueä¸?å?ˆæ³•ï¼?"
						+ "å¿…é¡»ä¸º &/Table0/key0,</Table1/key1,... è¿™ç§?å½¢å¼?ï¼?");
			}

			//å?–å‡ºTableå¯¹åº”çš„JSONObjectï¼Œå?Šå†…éƒ¨å¼•ç”¨èµ‹å€¼ key:value
			tableObj = request.getJSONObject(tableKey);
			targetPath = tableObj == null ? null : tableObj.getString(key);
			if (StringUtil.isEmpty(targetPath, true)) {
				throw new IllegalArgumentException("/" + path + ":value ä¸­valueå¿…é¡»ä¸ºå¼•ç”¨èµ‹å€¼çš„è·¯å¾„ '/targetTable/targetKey' ï¼?");
			}

			//å?–å‡ºå¼•ç”¨èµ‹å€¼è·¯å¾„targetPathå¯¹åº”çš„Tableå’Œkey
			index = targetPath.lastIndexOf("/");
			targetKey = index < 0 ? null : targetPath.substring(index + 1);
			if (StringUtil.isEmpty(targetKey, true)) {
				throw new IllegalArgumentException("/" + path + ":'/targetTable/targetKey' ä¸­targetKeyä¸?èƒ½ä¸ºç©ºï¼?");
			}

			targetPath = targetPath.substring(0, index);
			index = targetPath.lastIndexOf("/");
			targetTable = index < 0 ? targetPath : targetPath.substring(index + 1);


			//å¯¹å¼•ç”¨çš„JSONObjectæ·»åŠ æ?¡ä»¶
			targetObj = request.getJSONObject(targetTable);
			if (targetObj == null) {
				throw new IllegalArgumentException(targetTable + "." + targetKey
						+ ":'/targetTable/targetKey' ä¸­è·¯å¾„å¯¹åº”çš„å¯¹è±¡ä¸?å­˜åœ¨ï¼?");
			}

			tableObj.put(key, tableObj.remove(key)); //ä¿?è¯?å’ŒSQLExcecutorç¼“å­˜çš„Configé‡Œwhereé¡ºåº?ä¸€è‡´ï¼Œç”Ÿæˆ?çš„SQLä¹Ÿå°±ä¸€è‡´

			Join j = new Join();
			j.setPath(path);
			j.setOriginKey(key);
			j.setOriginValue(targetPath);
			j.setJoinType(joinType);
			j.setName(table);
			j.setTargetName(targetTable);
			j.setTargetKey(targetKey);
			j.setKeyAndType(key);
			j.setTable(getJoinObject(table, tableObj, key));
			j.setOutter((JSONObject) e.getValue());

			joinList.add(j);

			//			onList.add(table + "." + key + " = " + targetTable + "." + targetKey); // ON User.id = Moment.userId

		}


		//æ‹¼æŽ¥å¤šä¸ª SQLConfig çš„SQLè¯­å?¥ï¼Œç„¶å?Žæ‰§è¡Œï¼Œå†?æŠŠç»“æžœåˆ†åˆ«ç¼“å­˜(Moment, Userç­‰)åˆ° SQLExecutor çš„ cacheMap
		//		AbstractSQLConfig config0 = null;
		//		String sql = "SELECT " + config0.getColumnString() + " FROM " + config0.getTable() + " INNER JOIN " + targetTable + " ON "
		//				+ onList.get(0) + config0.getGroupString() + config0.getHavingString() + config0.getOrderString();


		return joinList;
	}



	private static final List<String> JOIN_COPY_KEY_LIST;
	static {//TODO ä¸?å…¨
		JOIN_COPY_KEY_LIST = new ArrayList<String>();
		JOIN_COPY_KEY_LIST.add(JSONRequest.KEY_DATABASE);
		JOIN_COPY_KEY_LIST.add(JSONRequest.KEY_SCHEMA);
		JOIN_COPY_KEY_LIST.add(JSONRequest.KEY_COLUMN);
		JOIN_COPY_KEY_LIST.add(JSONRequest.KEY_COMBINE);
		JOIN_COPY_KEY_LIST.add(JSONRequest.KEY_GROUP);
		JOIN_COPY_KEY_LIST.add(JSONRequest.KEY_HAVING);
		JOIN_COPY_KEY_LIST.add(JSONRequest.KEY_ORDER);
	}

	/**
	 * å?–æŒ‡å®šjsonå¯¹è±¡çš„idé›†å?ˆ
	 * @param table
	 * @param key
	 * @param obj
	 * @param targetKey 
	 * @return null ? å…¨éƒ¨ : æœ‰é™?çš„æ•°ç»„
	 */
	private JSONObject getJoinObject(String table, JSONObject obj, String key) {
		if (obj == null || obj.isEmpty()) {
			Log.e(TAG, "getIdList  obj == null || obj.isEmpty() >> return null;");
			return null;
		}
		if (StringUtil.isEmpty(key, true)) {
			Log.e(TAG, "getIdList  StringUtil.isEmpty(key, true) >> return null;");
			return null;
		}

		//å?–å‡ºæ‰€æœ‰joinæ?¡ä»¶
		JSONObject requestObj = new JSONObject(true);//(JSONObject) obj.clone();//
		Set<String> set = new LinkedHashSet<>(obj.keySet());
		for (String k : set) {
			if (StringUtil.isEmpty(k, true)) {
				continue;
			}

			if (k.startsWith("@")) {
				if (JOIN_COPY_KEY_LIST.contains(k)) {
					requestObj.put(k, obj.get(k)); //ä¿?ç•™
				}
			}
			else {
				if (k.endsWith("@")) {
					if (k.equals(key)) {
						continue;
					}
					throw new UnsupportedOperationException(table + "." + k + " ä¸?å?ˆæ³•ï¼?" + JSONRequest.KEY_JOIN
							+ " å…³è?”çš„Tableä¸­å?ªèƒ½æœ‰1ä¸ª key@:value ï¼?");
				}

				if (k.contains("()") == false) { //ä¸?éœ€è¦?è¿œç¨‹å‡½æ•°
					//					requestObj.put(k, obj.remove(k)); //removeæ˜¯ä¸ºäº†é?¿å…?é‡?å¤?æŸ¥è¯¢å‰¯è¡¨
					requestObj.put(k, obj.get(k)); //removeæ˜¯ä¸ºäº†é?¿å…?é‡?å¤?æŸ¥è¯¢å‰¯è¡¨
				}
			}
		}


		return requestObj;
	}

	@Override
	public int getDefaultQueryCount() {
		return DEFAULT_QUERY_COUNT;
	}
	@Override
	public int getMaxQueryPage() {
		return MAX_QUERY_PAGE;
	}
	@Override
	public int getMaxQueryCount() {
		return MAX_QUERY_COUNT;
	}
	@Override
	public int getMaxUpdateCount() {
		return MAX_UPDATE_COUNT;
	}
	@Override
	public int getMaxSQLCount() {
		return MAX_SQL_COUNT;
	}
	@Override
	public int getMaxObjectCount() {
		return MAX_OBJECT_COUNT;
	}
	@Override
	public int getMaxArrayCount() {
		return MAX_ARRAY_COUNT;
	}
	@Override
	public int getMaxQueryDepth() {
		return MAX_QUERY_DEPTH;
	}


	/**æ ¹æ?®è·¯å¾„å?–å€¼
	 * @param parent
	 * @param pathKeys
	 * @return
	 */
	protected static Object getValue(JSONObject parent, String[] pathKeys) {
		if (parent == null || pathKeys == null || pathKeys.length <= 0) {
			Log.w(TAG, "getChild  parent == null || pathKeys == null || pathKeys.length <= 0 >> return parent;");
			return parent;
		}

		//é€?å±‚åˆ°è¾¾childçš„ç›´æŽ¥å®¹å™¨JSONObject parent
		final int last = pathKeys.length - 1;
		for (int i = 0; i < last; i++) {//ä¸€æ­¥ä¸€æ­¥åˆ°è¾¾æŒ‡å®šä½?ç½®
			if (parent == null) {//ä¸?å­˜åœ¨æˆ–è·¯å¾„é”™è¯¯(ä¸­é—´çš„keyå¯¹åº”valueä¸?æ˜¯JSONObject)
				break;
			}
			parent = getJSONObject(parent, pathKeys[i]);
		}

		return parent == null ? null : parent.get(pathKeys[last]);
	}


	/**èŽ·å?–è¢«ä¾?èµ–å¼•ç”¨çš„keyçš„è·¯å¾„, å®žæ—¶æ›¿æ?¢[] -> []/i
	 * @param parentPath
	 * @param valuePath
	 * @return
	 */
	public static String getValuePath(String parentPath, String valuePath) {
		if (valuePath.startsWith("/")) {
			valuePath = getAbsPath(parentPath, valuePath);
		} else {//å¤„ç?†[] -> []/i
			valuePath = replaceArrayChildPath(parentPath, valuePath);
		}
		return valuePath;
	}

	/**èŽ·å?–ç»?å¯¹è·¯å¾„
	 * @param path
	 * @param name
	 * @return
	 */
	public static String getAbsPath(String path, String name) {
		Log.i(TAG, "getPath  path = " + path + "; name = " + name + " <<<<<<<<<<<<<");
		path = StringUtil.getString(path);
		name = StringUtil.getString(name);
		if (StringUtil.isNotEmpty(path, false)) {
			if (StringUtil.isNotEmpty(name, false)) {
				path += ((name.startsWith("/") ? "" : "/") + name);
			}
		} else {
			path = name;
		}
		if (path.startsWith("/")) {
			path = path.substring(1);
		}
		Log.i(TAG, "getPath  return " + path + " >>>>>>>>>>>>>>>>");
		return path;
	}

	/**æ›¿æ?¢[] -> []/i
	 * ä¸?èƒ½å†™åœ¨getAbsPathé‡Œï¼Œå› ä¸ºnameä¸?ä¸€å®šæ˜¯ä¾?èµ–è·¯å¾„
	 * @param parentPath
	 * @param valuePath
	 * @return
	 */
	public static String replaceArrayChildPath(String parentPath, String valuePath) {
		String[] ps = StringUtil.split(parentPath, "]/");//"[]/");
		if (ps != null && ps.length > 1) {
			String[] vs = StringUtil.split(valuePath, "]/");

			if (vs != null && vs.length > 0) {
				String pos;
				for (int i = 0; i < ps.length - 1; i++) {
					if (ps[i] == null || ps[i].equals(vs[i]) == false) {//å…?è®¸""ï¼Ÿ
						break;
					}

					pos = ps[i+1].contains("/") == false ? ps[i+1]
							: ps[i+1].substring(0, ps[i+1].indexOf("/"));
					if (
							//StringUtil.isNumer(pos) && 
							vs[i+1].startsWith(pos + "/") == false) {
						vs[i+1] = pos + "/" + vs[i+1];
					}
				}
				return StringUtil.getString(vs, "]/");
			}
		}
		return valuePath;
	}

	//ä¾?èµ–å¼•ç”¨å…³ç³» <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	/**å°†å·²èŽ·å?–å®Œæˆ?çš„objectçš„å†…å®¹æ›¿æ?¢requestObjecté‡Œå¯¹åº”çš„å€¼
	 * @param path objectçš„è·¯å¾„
	 * @param result éœ€è¦?è¢«å…³è?”çš„object
	 */
	@Override
	public synchronized void putQueryResult(String path, Object result) {
		Log.i(TAG, "\n putQueryResult  valuePath = " + path + "; result = " + result + "\n <<<<<<<<<<<<<<<<<<<<<<<");
		//		if (queryResultMap.containsKey(valuePath)) {//å?ªä¿?å­˜è¢«å…³è?”çš„value
		Log.d(TAG, "putQueryResult  queryResultMap.containsKey(valuePath) >> queryResultMap.put(path, result);");
		queryResultMap.put(path, result);
		//		}
	}
	/**æ ¹æ?®è·¯å¾„èŽ·å?–å€¼
	 * @param valuePath
	 * @return parent == null ? valuePath : parent.get(keys[keys.length - 1])
	 */
	@Override
	public Object getValueByPath(String valuePath) {
		Log.i(TAG, "<<<<<<<<<<<<<<< \n getValueByPath  valuePath = " + valuePath + "\n <<<<<<<<<<<<<<<<<<");
		if (StringUtil.isEmpty(valuePath, true)) {
			Log.e(TAG, "getValueByPath  StringUtil.isNotEmpty(valuePath, true) == false >> return null;");
			return null;
		}
		Object target = queryResultMap.get(valuePath);
		if (target != null) {
			return target;
		}

		//å?–å‡ºkeyè¢«valuePathåŒ…å?«çš„resultï¼Œå†?ä»Žé‡Œé?¢èŽ·å?–keyå¯¹åº”çš„value
		Set<String> set = queryResultMap.keySet();
		JSONObject parent = null;
		String[] keys = null;
		for (String path : set) {
			if (valuePath.startsWith(path + "/")) {
				try {
					parent = (JSONObject) queryResultMap.get(path);
				} catch (Exception e) {
					Log.e(TAG, "getValueByPath  try { parent = (JSONObject) queryResultMap.get(path); } catch { "
							+ "\n parent not instanceof JSONObject!");
					parent = null;
				}
				if (parent != null) {
					keys = StringUtil.splitPath(valuePath.substring(path.length()));
				}
				break;
			}
		}

		//é€?å±‚åˆ°è¾¾targetKeyçš„ç›´æŽ¥å®¹å™¨JSONObject parent
		if (keys != null && keys.length > 1) {
			for (int i = 0; i < keys.length - 1; i++) {//ä¸€æ­¥ä¸€æ­¥åˆ°è¾¾æŒ‡å®šä½?ç½®parentPath
				if (parent == null) {//ä¸?å­˜åœ¨æˆ–è·¯å¾„é”™è¯¯(ä¸­é—´çš„keyå¯¹åº”valueä¸?æ˜¯JSONObject)
					break;
				}
				parent = getJSONObject(parent, keys[i]);
			}
		}

		if (parent != null) {
			Log.i(TAG, "getValueByPath >> get from queryResultMap >> return  parent.get(keys[keys.length - 1]);");
			target = parent.get(keys[keys.length - 1]); //å€¼ä¸ºnullåº”è¯¥æŠ¥é”™NotExistExeptionï¼Œä¸€èˆ¬éƒ½æ˜¯idå…³è?”ï¼Œä¸?å?¯ä¸ºnullï¼Œå?¦åˆ™å?¯èƒ½ç»•è¿‡å®‰å…¨æœºåˆ¶
			if (target != null) {
				Log.i(TAG, "getValueByPath >> getValue >> return target = " + target);
				return target;
			}
		}


		//ä»ŽrequestObjectä¸­å?–å€¼
		target = getValue(requestObject, StringUtil.splitPath(valuePath));
		if (target != null) {
			Log.i(TAG, "getValueByPath >> getValue >> return target = " + target);
			return target;
		}

		Log.i(TAG, "getValueByPath  return valuePath;");
		return valuePath;
	}

	//ä¾?èµ–å¼•ç”¨å…³ç³» >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>




	public static JSONObject getJSONObject(JSONObject object, String key) {
		try {
			return object.getJSONObject(key);
		} catch (Exception e) {
			Log.i(TAG, "getJSONObject  try { return object.getJSONObject(key);"
					+ " } catch (Exception e) { \n"  + e.getMessage());
		}
		return null;
	}


	public static final String KEY_CONFIG = "config";

	/**æ‰§è¡Œ SQL å¹¶è¿”å›ž JSONObject
	 * @param config
	 * @return
	 * @throws Exception
	 */
	@Override
	public JSONObject executeSQL(SQLConfig config, boolean isSubquery) throws Exception {
		if (config == null) {
			Log.d(TAG, "executeSQL  config == null >> return null;");
			return null;
		}

		if (isSubquery) {
			JSONObject sqlObj = new JSONObject(true);
			sqlObj.put(KEY_CONFIG, config);
			return sqlObj;//å®¹æ˜“ä¸¢å¤±ä¿¡æ?¯ JSON.parseObject(config);
		}

		try {
			boolean explain = config.isExplain();
			JSONObject result;
			if (explain) { //å¦‚æžœå…ˆæ‰§è¡Œ explainï¼Œåˆ™ execute ä¼šæ­»å¾ªçŽ¯ï¼Œæ‰€ä»¥å?ªèƒ½å…ˆæ‰§è¡Œé?ž explain
				config.setExplain(false); //å¯¹ä¸‹é?¢ config.getSQL(false); ç”Ÿæ•ˆ
				JSONObject res = sqlExecutor.execute(config, false);

				config.setExplain(explain);
				JSONObject explainResult = config.isMain() && config.getPosition() != 0 ? null : sqlExecutor.execute(config, false);

				if (explainResult == null) {
					result = res;
				}
				else {
					result = new JSONObject(true);
					result.put(KEY_EXPLAIN, explainResult);
					result.putAll(res);
				}
			}
			else {
				result = sqlExecutor.execute(config, false);
			}

			return parseCorrectResponse(config.getTable(), result);
		}
		catch (Exception e) {
			if (Log.DEBUG == false && e instanceof SQLException) {
				throw new SQLException("æ•°æ?®åº“é©±åŠ¨æ‰§è¡Œå¼‚å¸¸SQLExceptionï¼Œé?ž Log.DEBUG æ¨¡å¼?ä¸‹ä¸?æ˜¾ç¤ºè¯¦æƒ…ï¼Œé?¿å…?æ³„æ¼?çœŸå®žæ¨¡å¼?å??ã€?è¡¨å??ç­‰éš?ç§?ä¿¡æ?¯", e);
			}
			throw e;
		}
		finally {
			if (config.getPosition() == 0) {
				int maxSQLCount = getMaxSQLCount();
				int sqlCount = sqlExecutor.getExecutedSQLCount();
				Log.d(TAG, "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< \n\n\n å·²æ‰§è¡Œ " + sqlCount + "/" + maxSQLCount + " æ?¡ SQL \n\n\n >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
				if (sqlCount > maxSQLCount) {
					throw new IllegalArgumentException("æˆªè‡³ " + config.getTable() + " å·²æ‰§è¡Œ " + sqlCount + " æ?¡ SQLï¼Œæ•°é‡?å·²è¶…é™?ï¼Œå¿…é¡»åœ¨ 0-" + maxSQLCount + " å†… !");
				}
			}
		}
	}



}
