/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.alipay.sofa.rpc.config;

import com.alipay.sofa.rpc.common.utils.StringUtils;

/**
 * ç»Ÿä¸€çš„é…?ç½®å??ç§°ç”Ÿæˆ?å™¨
 *
 * @author <a href="mailto:zhanggeng.zg@antfin.com">GengZhang</a>
 */
public class ConfigUniqueNameGenerator {

    /**
     * å¾—åˆ°æœ?åŠ¡å”¯ä¸€å??ç§°ï¼Œæ— éœ€å…¼å®¹ä¹‹å‰?çš„ç‰ˆæœ¬
     * 
     * @param interfaceConfig æœ?åŠ¡æ??ä¾›è€…æˆ–è€…æœ?åŠ¡æ¶ˆè´¹è€…é…?ç½®
     * @return æœ?åŠ¡å”¯ä¸€å??ç§°
     * @since 5.4.0
     */
    public static String getServiceName(AbstractInterfaceConfig interfaceConfig) {
        String uniqueId = interfaceConfig.getUniqueId();
        return interfaceConfig.getInterfaceId() + (StringUtils.isEmpty(uniqueId) ? "" : ":" + uniqueId);
    }

    /**
     * å”¯ä¸€æ ‡è¯†UniqueNameçš„äº§ç”Ÿæ–¹æ³•ï¼Œä¸»è¦?ç”¨äºŽå†…éƒ¨æ‰¾æŽ¥å?£ç­‰ï¼Œæ ¼å¼?ä¸ºinterface:version[:uniqueId]
     *
     * @param interfaceConfig æœ?åŠ¡æ??ä¾›è€…æˆ–è€…æœ?åŠ¡æ¶ˆè´¹è€…é…?ç½®
     * @return é…?ç½®å”¯ä¸€å??å­—
     */
    public static String getUniqueName(AbstractInterfaceConfig interfaceConfig) {
        // åŠ ä¸Š 1.0 æ˜¯ä¸ºäº†å…¼å®¹ä¹‹å‰?çš„ç‰ˆæœ¬
        String version = interfaceConfig.getVersion();
        String uniqueId = interfaceConfig.getUniqueId();
        return interfaceConfig.getInterfaceId()
            + (StringUtils.isEmpty(version) ? ":1.0" : ":" + version)
            + (StringUtils.isEmpty(uniqueId) ? "" : ":" + uniqueId);
    }

    /**
     * å”¯ä¸€æ ‡è¯†UniqueNameçš„äº§ç”Ÿæ–¹æ³•ï¼Œä¸»è¦?ç”¨äºŽå¤–éƒ¨æœ?åŠ¡å?‘çŽ°ç­‰ï¼Œæ ¼å¼?ä¸ºinterface:version[:uniqueId]@protocol
     *
     * @param providerConfig æœ?åŠ¡ç«¯æ??ä¾›è€…é…?ç½®
     * @param protocol       å??è®®
     * @return é…?ç½®å”¯ä¸€å??å­—
     */
    public static String getUniqueNameProtocol(ProviderConfig providerConfig, String protocol) {
        if (StringUtils.isNotEmpty(protocol)) {
            return getUniqueName(providerConfig) + "@" + protocol;
        } else {
            return getUniqueName(providerConfig);
        }
    }

    /**
     * è§£æž?å”¯ä¸€æ ‡è¯†UniqueNameå¾—åˆ°æŽ¥å?£å??
     *
     * @param uniqueName æœ?åŠ¡å”¯ä¸€æ ‡è¯†
     * @return æŽ¥å?£å??
     */
    public static String getInterfaceName(String uniqueName) {
        if (StringUtils.isEmpty(uniqueName)) {
            return uniqueName;
        }
        int index = uniqueName.indexOf(':');
        return index < 0 ? uniqueName : uniqueName.substring(0, index);
    }

    /**
     * å”¯ä¸€æ ‡è¯†UniqueNameçš„äº§ç”Ÿæ–¹æ³•ï¼Œä¸»è¦?ç”¨äºŽå¤–éƒ¨æœ?åŠ¡å?‘çŽ°ç­‰
     *
     * @param consumerConfig æœ?åŠ¡ç«¯è°ƒç”¨è€…é…?ç½®
     * @return é…?ç½®å”¯ä¸€å??å­—
     */
    public static String getUniqueNameProtocol(ConsumerConfig consumerConfig) {
        return getUniqueName(consumerConfig) + "@" + consumerConfig.getProtocol();
    }
}
