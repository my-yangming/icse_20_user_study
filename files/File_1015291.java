package info.xiaomo.website.controller;

import info.xiaomo.core.base.BaseController;
import info.xiaomo.core.base.Result;
import info.xiaomo.core.constant.CodeConst;
import info.xiaomo.core.exception.UserNotFoundException;
import info.xiaomo.core.untils.Md5Util;
import info.xiaomo.core.untils.RandomUtil;
import info.xiaomo.website.model.AdminModel;
import info.xiaomo.website.service.AdminUserService;
import io.swagger.annotations.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * â”‚ï¼¼ï¼¿ï¼¿â•­â•­â•­â•­â•­ï¼¿ï¼¿ï¼?â”‚
 * â”‚ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€â”‚
 * â”‚ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€â”‚
 * â”‚ã€€ï¼?ã€€ã€€ã€€ã€€ã€€ã€€ï¼?â”‚
 * â”‚â‰¡ã€€ã€€ã€€ã€€ï½?ã€€â‰¡   â”‚
 * â”‚ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€â”‚
 * â•°â€”â€”â”¬ï¼¯â—¤â–½â—¥ï¼¯â”¬â€”â€”â•¯
 * ï½œã€€ã€€ï½?ã€€ã€€ï½œ
 * ï½œâ•­ï¼?ï¼?ï¼?â•®æŠŠä»Šå¤©æœ€å¥½çš„è¡¨çŽ°å½“ä½œæ˜Žå¤©æœ€æ–°çš„èµ·ç‚¹ï¼Žï¼Žï½ž
 * ã?„ã?¾ æœ€é«˜ã?®è¡¨ç?¾ ã?¨ã?—ã?¦ æ˜Žæ—¥æœ€æ–°ã?®å§‹ç™ºï¼Žï¼Žï½ž
 * Today the best performance  as tomorrow newest starter!
 * Created by IntelliJ IDEA.
 *
 * @author : xiaomo
 * github: https://github.com/xiaomoinfo
 * email: xiaomo@xiaomo.info
 * <p>
 * Date: 16/4/2 12:47
 * Description: å?Žå?°ç”¨æˆ·æŽ§åˆ¶å™¨
 * Copyright(Â©) 2015 by xiaomo.
 */
@RestController
@RequestMapping("/adminUser")
@Api(value = "å?Žå?°ç”¨æˆ·ç›¸å…³api", description = "å?Žå?°ç”¨æˆ·ç›¸å…³api")
public class AdminUserController extends BaseController {

    private final AdminUserService service;

    @Autowired
    public AdminUserController(AdminUserService service) {
        this.service = service;
    }

    /**
     * å?Žå?°è´¦æˆ·ç™»å½•
     *
     * @return Result
     */
    @RequestMapping(value = "login/{userName}/{password}", method = RequestMethod.POST)
    @ApiOperation(value = "èŽ·å?–ç”¨æˆ·ä¿¡æ?¯", notes = "æ ¹æ?®ç”¨æˆ·å¸?å?·å’Œå¯†ç ?ç™»å½•å?Žå?°", httpMethod = "POST", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ApiImplicitParams({
            @ApiImplicitParam(name = "userName", value = "ç”¨æˆ·å??", required = true, dataType = "Result", paramType = "path"),
            @ApiImplicitParam(name = "password", value = "ç”¨æˆ·å??", required = true, dataType = "Result", paramType = "path")
    })
    @ApiResponses(value = {
            @ApiResponse(code = 404, message = "Not Found"),
            @ApiResponse(code = 400, message = "No Name Provided"),
    })
    public Result login(@PathVariable("userName") String userName, @PathVariable("password") String password) {
        AdminModel adminModel = service.findAdminUserByUserName(userName);
        if (adminModel == null) {
            return new Result(CodeConst.USER_NOT_FOUND.getResultCode(), CodeConst.USER_NOT_FOUND.getMessage());
        }
        if (!Md5Util.encode(password, adminModel.getSalt()).equals(adminModel.getPassword())) {
            return new Result(CodeConst.AUTH_FAILED.getResultCode(), CodeConst.AUTH_FAILED.getMessage());
        }
        return new Result<>(adminModel);
    }


    /**
     * æ·»åŠ ç”¨æˆ·
     *
     * @return Result
     */
    @ApiOperation(value = "æ·»åŠ å?Žå?°ç”¨æˆ·", notes = "ä¼ ä¸€ä¸ªç®¡ç?†å‘˜ç”¨æˆ·æ¨¡åž‹è¿‡æ?¥ç„¶å?Žä¿?å­˜åˆ°æ•°æ?®åº“", httpMethod = "POST", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @RequestMapping(value = "add", method = RequestMethod.POST)
    @ApiResponses(value = {
            @ApiResponse(code = 404, message = "Not Found"),
            @ApiResponse(code = 400, message = "No Name Provided"),
    })
    public Result add(@RequestBody AdminModel model) {
        AdminModel adminModel = service.findAdminUserByUserName(model.getUserName());
        if (adminModel != null) {
            return new Result(CodeConst.ADMIN_USER_REPEAT.getResultCode(), CodeConst.ADMIN_USER_REPEAT.getMessage());
        }
        String salt = RandomUtil.createSalt();
        model.setSalt(salt);
        model.setPassword(Md5Util.encode(model.getPassword(), salt));
        AdminModel saveModel = service.addAdminUser(model);
        return new Result<>(saveModel);
    }

    /**
     * æ ¹æ?®idæŸ¥æ‰¾
     *
     * @param id id
     * @return Result
     */
    @ApiOperation(value = "æŸ¥æ‰¾ç”¨æˆ·", notes = "æ ¹æ?®ä¼ æ?¥çš„idæŸ¥æ‰¾ç”¨æˆ·å¹¶è¿”å›ž", httpMethod = "GET", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @RequestMapping(value = "findById/{id}", method = RequestMethod.GET)
    @ApiImplicitParams({
            @ApiImplicitParam(name = "id", value = "å?Žå?°ç”¨æˆ·å”¯ä¸€id", required = true, dataType = "Long", paramType = "path")
    })
    @ApiResponses(value = {
            @ApiResponse(code = 404, message = "Not Found"),
            @ApiResponse(code = 400, message = "No Name Provided"),
    })
    public Result findUserById(@PathVariable("id") Long id) {
        AdminModel adminModel = service.findAdminUserById(id);
        if (adminModel == null) {
            return new Result(CodeConst.NULL_DATA.getResultCode(), CodeConst.NULL_DATA.getMessage());
        }
        return new Result<>(adminModel);
    }

    /**
     * æŸ¥æ‰¾æ‰€æœ‰(ä¸?å¸¦åˆ†é¡µ)
     *
     * @return result
     */
    @Override
    public Result<List> findAll() {
        return null;
    }

    /**
     * å¸¦åˆ†é¡µ
     *
     * @param start    èµ·å§‹é¡µ
     * @param pageSize é¡µç ?æ•°
     * @return result
     */
    @Override
    public Result<Page> findAll(@PathVariable int start, @PathVariable int pageSize) {
        return null;
    }

    /**
     * æ ¹æ?®idæŸ¥çœ‹æ¨¡åž‹
     *
     * @param id id
     * @return result
     */
    @Override
    public Result findById(@PathVariable Long id) {
        return null;
    }

    /**
     * æ ¹æ?®å??å­—æŸ¥æ‰¾
     *
     * @param userName userName
     * @return Result
     */
    @Override
    @ApiOperation(value = "æŸ¥æ‰¾ç”¨æˆ·", notes = "æ ¹æ?®ä¼ æ?¥çš„ç”¨æˆ·å??æŸ¥æ‰¾ç”¨æˆ·å¹¶è¿”å›ž", httpMethod = "GET", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @RequestMapping(value = "findByName/{userName}", method = RequestMethod.GET)
    @ApiImplicitParams({
            @ApiImplicitParam(name = "userName", value = "ç”¨æˆ·å??", required = true, dataType = "String", paramType = "path")
    })
    @ApiResponses(value = {
            @ApiResponse(code = 404, message = "Not Found"),
            @ApiResponse(code = 400, message = "No Name Provided"),
    })
    public Result findByName(@PathVariable("userName") String userName) {
        AdminModel adminModel = service.findAdminUserByUserName(userName);
        if (adminModel == null) {
            return new Result(CodeConst.NULL_DATA.getResultCode(), CodeConst.NULL_DATA.getMessage());
        }
        return new Result<>(adminModel);
    }

    /**
     * æ ¹æ?®å??å­—åˆ é™¤æ¨¡åž‹
     *
     * @param name name
     * @return result
     */
    @Override
    public Result<Boolean> delByName(@PathVariable String name) {
        return null;
    }

    /**
     * æ ¹æ?®idåˆ é™¤æ¨¡åž‹
     *
     * @param id id
     * @return result
     */
    @Override
    public Result<Boolean> delById(@PathVariable Long id) {
        return null;
    }

    /**
     * æ·»åŠ æ¨¡åž‹
     *
     * @param model model
     * @return result
     */
    @Override
    public Result<Boolean> add(@RequestBody Object model) {
        return null;
    }

    /**
     * æ›´æ–°
     *
     * @param model model
     * @return result
     */
    @Override
    public Result<Boolean> update(@RequestBody Object model) {
        return null;
    }

    /**
     * æ‰¹é‡?åˆ é™¤
     *
     * @param ids ids
     * @return result
     */
    @Override
    public Result<Boolean> delByIds(@PathVariable List ids) {
        return null;
    }

    /**
     * ä¿®æ”¹å¯†ç ?
     *
     * @return model
     * @throws UserNotFoundException UserNotFoundException
     */
    @RequestMapping(value = "changePassword", method = RequestMethod.POST)
    @ApiOperation(value = "ä¿®æ”¹ç”¨æˆ·å¯†ç ?", notes = "ä¼ æ?¥æ¨¡åž‹éªŒè¯?å¹¶ä¿®æ”¹å¯†ç ?", httpMethod = "POST", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ApiResponses(value = {
            @ApiResponse(code = 404, message = "Not Found"),
            @ApiResponse(code = 400, message = "No Name Provided"),
    })
    public Result changePassword(@RequestBody AdminModel model) throws UserNotFoundException {
        AdminModel adminModel = service.findAdminUserByUserName(model.getUserName());
        if (adminModel == null) {
            return new Result(CodeConst.NULL_DATA.getResultCode(), CodeConst.NULL_DATA.getMessage());
        }
        String salt = RandomUtil.createSalt();
        adminModel.setSalt(salt);
        adminModel.setPassword(Md5Util.encode(model.getPassword(), salt));
        service.updateAdminUser(adminModel);
        return new Result<>(adminModel);
    }


    /**
     * è¿”å›žæ‰€æœ‰
     *
     * @return ä¸?åˆ†é¡µ
     */
    @RequestMapping(value = "findAll", method = RequestMethod.GET)
    @ApiOperation(value = "è¿”å›žæ‰€æœ‰ç”¨æˆ·ä¿¡æ?¯", notes = "ä¸?åˆ†é¡µ", httpMethod = "GET", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ApiResponses(value = {
            @ApiResponse(code = 404, message = "Not Found"),
            @ApiResponse(code = 400, message = "No Name Provided"),
    })
    public Result getAll() {
        List<AdminModel> pages = service.getAdminUsers();
        if (pages == null || pages.size() <= 0) {
            return new Result<>(pages);
        }
        return new Result<>(pages);
    }

    /**
     * æ ¹æ?®idåˆ é™¤æ•°æ?®
     *
     * @param id id
     * @return model
     * @throws UserNotFoundException UserNotFoundException
     */
    @RequestMapping(value = "delete/{id}", method = RequestMethod.GET)
    @ApiOperation(value = "åˆ é™¤ç”¨æˆ·", notes = "æ ¹æ?®ä¼ å…¥çš„idåˆ é™¤å¯¹åº”çš„ç”¨æˆ·", httpMethod = "GET", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ApiImplicitParams({
            @ApiImplicitParam(name = "id", value = "ç”¨æˆ·å”¯ä¸€id", required = true, dataType = "Long", paramType = "path")
    })
    @ApiResponses(value = {
            @ApiResponse(code = 404, message = "Not Found"),
            @ApiResponse(code = 400, message = "No Name Provided"),
    })
    public Result deleteUserById(@PathVariable("id") Long id) throws UserNotFoundException {
        AdminModel adminModel = service.findAdminUserById(id);
        if (adminModel == null) {
            return new Result(CodeConst.NULL_DATA.getResultCode(), CodeConst.NULL_DATA.getMessage());
        }
        service.deleteAdminUserById(id);
        return new Result<>(adminModel);
    }

    /**
     * æ›´æ–°
     *
     * @param userName userName
     * @return model
     * @throws UserNotFoundException UserNotFoundException
     */
    @RequestMapping(value = "update/{userName}", method = RequestMethod.POST)
    @ApiOperation(value = "æ›´æ–°ç”¨æˆ·ä¿¡æ?¯", notes = "æ ¹æ?®ä¼ å…¥çš„æ¨¡åž‹æ›´æ–°ç”¨æˆ·ä¿¡æ?¯", httpMethod = "POST", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ApiImplicitParams({
            @ApiImplicitParam(name = "userName", value = "ç”¨æˆ·å??", required = true, dataType = "String", paramType = "path")
    })
    @ApiResponses(value = {
            @ApiResponse(code = 404, message = "Not Found"),
            @ApiResponse(code = 400, message = "No Name Provided"),
    })
    public Result update(@PathVariable("userName") String userName) throws UserNotFoundException {
        AdminModel adminModel = service.findAdminUserByUserName(userName);
        if (adminModel == null) {
            return null;
        }
        adminModel.setUserName(userName);
        service.updateAdminUser(adminModel);
        return new Result<>(adminModel);
    }

    /**
     * å°?å?·
     *
     * @param id id
     * @return model
     * @throws UserNotFoundException UserNotFoundException
     */
    @RequestMapping(value = "forbid/{id}", method = RequestMethod.GET)
    @ApiOperation(value = "å°?å?·", notes = "æ ¹æ?®ä¼ å…¥çš„idå¯¹ä¿®æ”¹å¯¹åº”å¸?å?·çŠ¶æ€?", httpMethod = "GET", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ApiImplicitParams({
            @ApiImplicitParam(name = "id", value = "å?Žå?°ç”¨æˆ·å”¯ä¸€id", required = true, dataType = "Long", paramType = "path")
    })
    @ApiResponses(value = {
            @ApiResponse(code = 404, message = "Not Found"),
            @ApiResponse(code = 400, message = "No Name Provided"),
    })
    public Result forbid(@PathVariable("id") Long id) throws UserNotFoundException {
        AdminModel model = service.findAdminUserById(id);
        if (model == null) {
            return new Result(CodeConst.NULL_DATA.getResultCode(), CodeConst.NULL_DATA.getMessage());
        }
        model = service.forbidAdminUserById(id);
        return new Result<>(model);
    }
}

