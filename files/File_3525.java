/*
 * <summary></summary>
 * <author>He Han</author>
 * <email>hankcs.cn@gmail.com</email>
 * <create-date>2014/05/2014/5/21 21:36</create-date>
 *
 * <copyright file="CQueue.java" company="ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸">
 * Copyright (c) 2003-2014, ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸. All Right Reserved, http://www.linrunsoft.com/
 * This source is subject to the LinrunSpace License. Please contact ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸ to get more information.
 * </copyright>
 */
package com.hankcs.hanlp.seg.NShort.Path;

/**
 * ä¸€ä¸ªç»´æŠ¤äº†ä¸Šæ¬¡è®¿é—®ä½?ç½®çš„ä¼˜å…ˆçº§é˜Ÿåˆ—ï¼ˆæœ€å°?å †ï¼‰
 *
 * @author hankcs
 */
public class CQueue
{
    private QueueElement pHead = null;
    private QueueElement pLastAccess = null;

    /**
     * å°†QueueElementæ ¹æ?®eWeightç”±å°?åˆ°å¤§çš„é¡ºåº?æ?’å…¥é˜Ÿåˆ—
     * @param newElement
     */
    public void enQueue(QueueElement newElement)
    {
        QueueElement pCur = pHead, pPre = null;

        while (pCur != null && pCur.weight < newElement.weight)
        {
            pPre = pCur;
            pCur = pCur.next;
        }

        newElement.next = pCur;

        if (pPre == null)
            pHead = newElement;
        else
            pPre.next = newElement;
    }

    /**
     * ä»Žé˜Ÿåˆ—ä¸­å?–å‡ºå‰?é?¢çš„ä¸€ä¸ªå…ƒç´ 
     * @return
     */
    public QueueElement deQueue()
    {
        if (pHead == null)
            return null;

        QueueElement pRet = pHead;
        pHead = pHead.next;

        return pRet;
    }

    /**
     * è¯»å?–ç¬¬ä¸€ä¸ªå…ƒç´ ï¼Œä½†ä¸?æ‰§è¡ŒDeQueueæ“?ä½œ
     * @return
     */
    public QueueElement GetFirst()
    {
        pLastAccess = pHead;
        return pLastAccess;
    }

    /**
     * è¯»å?–ä¸Šæ¬¡è¯»å?–å?Žçš„ä¸‹ä¸€ä¸ªå…ƒç´ ï¼Œä¸?æ‰§è¡ŒDeQueueæ“?ä½œ
     * @return
     */
    public QueueElement GetNext()
    {
        if (pLastAccess != null)
            pLastAccess = pLastAccess.next;

        return pLastAccess;
    }

    /**
     * æ˜¯å?¦ä»?ç„¶æœ‰ä¸‹ä¸€ä¸ªå…ƒç´ å?¯ä¾›è¯»å?–
     * @return
     */
    public boolean CanGetNext()
    {
        return (pLastAccess.next != null);
    }

    /**
     * æ¸…é™¤æ‰€æœ‰å…ƒç´ 
     */
    public void clear()
    {
        pHead = null;
        pLastAccess = null;
    }
}
