package sandboxModel;

/*Generated by MPS */

import jetbrains.mps.samples.lambdaCalculus.runtime.Function;
import java.util.List;
import java.util.ArrayList;

public class fixpoint {
  public fixpoint() {
  }
  public static void main(String[] args) {
    System.out.println((eval()));
  }
  public static Object eval() {
    return new fixpoint.Function_1751004816843424603();
  }
  public static class Function_1751004816843424603 extends Function {
    private List myOuterVars = new ArrayList();
    public Function_1751004816843424603() {
      myType = "((AnyType->AnyType)->AnyType)";
    }
    public Function_1751004816843424603(List outerVars) {
      myType = "((AnyType->AnyType)->AnyType)";
      myOuterVars.addAll(outerVars);
    }
    public Object eval() {
      int i = 0;
      int j = 0;
      Function f = (Function) myArgs.get(i++);
      return lambdaAbstr_1751004816843424696(new fixpoint.Function_1751004816843424603.Function_1751004816843561803(f), f);
    }
    public int getParamsCount() {
      return 1;
    }
    public Function copy() {
      return new fixpoint.Function_1751004816843424603(myOuterVars);
    }
    public static class Function_1751004816843561803 extends Function {
      private List myOuterVars = new ArrayList();
      public Function_1751004816843561803(Function f) {
        myType = "((AnyType->AnyType)->AnyType)";
        myOuterVars.add(f);
      }
      public Function_1751004816843561803(List outerVars) {
        myType = "((AnyType->AnyType)->AnyType)";
        myOuterVars.addAll(outerVars);
      }
      public Object eval() {
        int i = 0;
        int j = 0;
        Function f = (Function) myOuterVars.get(j++);
        Function x = (Function) myArgs.get(i++);
        return (Object) ((Function) f).apply((Object) ((Function) x).apply(x));
      }
      public int getParamsCount() {
        return 1;
      }
      public Function copy() {
        return new fixpoint.Function_1751004816843424603.Function_1751004816843561803(myOuterVars);
      }
    }
    public static Object lambdaAbstr_1751004816843424696(Function x, Function f) {
      return (Object) ((Function) f).apply((Object) ((Function) x).apply(x));
    }
  }
}
