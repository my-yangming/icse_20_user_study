/**
 * IK ä¸­æ–‡åˆ†è¯?  ç‰ˆæœ¬ 5.0
 * IK Analyzer release 5.0
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * æº?ä»£ç ?ç”±æž—è‰¯ç›Š(linliangyi2005@gmail.com)æ??ä¾›
 * ç‰ˆæ?ƒå£°æ˜Ž 2012ï¼Œä¹Œé¾™èŒ¶å·¥ä½œå®¤
 * provided by Linliangyi and copyright 2012 by Oolong studio
 * 
 */
package org.wltea.analyzer.core;

import java.util.Arrays;

/**
 * 
 * è‹±æ–‡å­—ç¬¦å?Šé˜¿æ‹‰ä¼¯æ•°å­—å­?åˆ†è¯?å™¨
 */
class LetterSegmenter implements ISegmenter {
	
	//å­?åˆ†è¯?å™¨æ ‡ç­¾
	static final String SEGMENTER_NAME = "LETTER_SEGMENTER";
	//é“¾æŽ¥ç¬¦å?·
	private static final char[] Letter_Connector = new char[]{'#' , '&' , '+' , '-' , '.' , '@' , '_'};
	
	//æ•°å­—ç¬¦å?·
	private static final char[] Num_Connector = new char[]{',' , '.'};
	
	/*
	 * è¯?å…ƒçš„å¼€å§‹ä½?ç½®ï¼Œ
	 * å?Œæ—¶ä½œä¸ºå­?åˆ†è¯?å™¨çŠ¶æ€?æ ‡è¯†
	 * å½“start > -1 æ—¶ï¼Œæ ‡è¯†å½“å‰?çš„åˆ†è¯?å™¨æ­£åœ¨å¤„ç?†å­—ç¬¦
	 */
	private int start;
	/*
	 * è®°å½•è¯?å…ƒç»“æ?Ÿä½?ç½®
	 * endè®°å½•çš„æ˜¯åœ¨è¯?å…ƒä¸­æœ€å?Žä¸€ä¸ªå‡ºçŽ°çš„Letterä½†é?žSign_Connectorçš„å­—ç¬¦çš„ä½?ç½®
	 */
	private int end;
	
	/*
	 * å­—æ¯?èµ·å§‹ä½?ç½®
	 */
	private int englishStart;

	/*
	 * å­—æ¯?ç»“æ?Ÿä½?ç½®
	 */
	private int englishEnd;
	
	/*
	 * é˜¿æ‹‰ä¼¯æ•°å­—èµ·å§‹ä½?ç½®
	 */
	private int arabicStart;
	
	/*
	 * é˜¿æ‹‰ä¼¯æ•°å­—ç»“æ?Ÿä½?ç½®
	 */
	private int arabicEnd;
	
	LetterSegmenter(){
		Arrays.sort(Letter_Connector);
		Arrays.sort(Num_Connector);
		this.start = -1;
		this.end = -1;
		this.englishStart = -1;
		this.englishEnd = -1;
		this.arabicStart = -1;
		this.arabicEnd = -1;
	}


	/* (non-Javadoc)
	 * @see org.wltea.analyzer.core.ISegmenter#analyze(org.wltea.analyzer.core.AnalyzeContext)
	 */
	public void analyze(AnalyzeContext context) {
		boolean bufferLockFlag = false;
		//å¤„ç?†è‹±æ–‡å­—æ¯?
		bufferLockFlag = this.processEnglishLetter(context) || bufferLockFlag;
		//å¤„ç?†é˜¿æ‹‰ä¼¯å­—æ¯?
		bufferLockFlag = this.processArabicLetter(context) || bufferLockFlag;
		//å¤„ç?†æ··å?ˆå­—æ¯?(è¿™ä¸ªè¦?æ”¾æœ€å?Žå¤„ç?†ï¼Œå?¯ä»¥é€šè¿‡QuickSortSetæŽ’é™¤é‡?å¤?)
		bufferLockFlag = this.processMixLetter(context) || bufferLockFlag;
		
		//åˆ¤æ–­æ˜¯å?¦é”?å®šç¼“å†²åŒº
		if(bufferLockFlag){
			context.lockBuffer(SEGMENTER_NAME);
		}else{
			//å¯¹ç¼“å†²åŒºè§£é”?
			context.unlockBuffer(SEGMENTER_NAME);
		}
	}
	
	/* (non-Javadoc)
	 * @see org.wltea.analyzer.core.ISegmenter#reset()
	 */
	public void reset() {
		this.start = -1;
		this.end = -1;
		this.englishStart = -1;
		this.englishEnd = -1;
		this.arabicStart = -1;
		this.arabicEnd = -1;
	}	
	
	/**
	 * å¤„ç?†æ•°å­—å­—æ¯?æ··å?ˆè¾“å‡º
	 * å¦‚ï¼šwindos2000 | linliangyi2005@gmail.com
//	 * @param input
	 * @param context
	 * @return
	 */
	private boolean processMixLetter(AnalyzeContext context){
		boolean needLock = false;
		
		if(this.start == -1){//å½“å‰?çš„åˆ†è¯?å™¨å°šæœªå¼€å§‹å¤„ç?†å­—ç¬¦
			if(CharacterUtil.CHAR_ARABIC == context.getCurrentCharType()
					|| CharacterUtil.CHAR_ENGLISH == context.getCurrentCharType()){
				//è®°å½•èµ·å§‹æŒ‡é’ˆçš„ä½?ç½®,æ ‡æ˜Žåˆ†è¯?å™¨è¿›å…¥å¤„ç?†çŠ¶æ€?
				this.start = context.getCursor();
				this.end = start;
			}
			
		}else{//å½“å‰?çš„åˆ†è¯?å™¨æ­£åœ¨å¤„ç?†å­—ç¬¦			
			if(CharacterUtil.CHAR_ARABIC == context.getCurrentCharType()
					|| CharacterUtil.CHAR_ENGLISH == context.getCurrentCharType()){
				//è®°å½•ä¸‹å?¯èƒ½çš„ç»“æ?Ÿä½?ç½®
				this.end = context.getCursor();
				
			}else if(CharacterUtil.CHAR_USELESS == context.getCurrentCharType()
						&& this.isLetterConnector(context.getCurrentChar())){
				//è®°å½•ä¸‹å?¯èƒ½çš„ç»“æ?Ÿä½?ç½®
				this.end = context.getCursor();
			}else{
				//é?‡åˆ°é?žLetterå­—ç¬¦ï¼Œè¾“å‡ºè¯?å…ƒ
				Lexeme newLexeme = new Lexeme(context.getBufferOffset() , this.start , this.end - this.start + 1 , Lexeme.TYPE_LETTER);
				context.addLexeme(newLexeme);
				this.start = -1;
				this.end = -1;
			}			
		}
		
		//åˆ¤æ–­ç¼“å†²åŒºæ˜¯å?¦å·²ç»?è¯»å®Œ
		if(context.isBufferConsumed() && (this.start != -1 && this.end != -1)){
            //ç¼“å†²ä»¥è¯»å®Œï¼Œè¾“å‡ºè¯?å…ƒ
            Lexeme newLexeme = new Lexeme(context.getBufferOffset() , this.start , this.end - this.start + 1 , Lexeme.TYPE_LETTER);
            context.addLexeme(newLexeme);
            this.start = -1;
            this.end = -1;
		}
		
		//åˆ¤æ–­æ˜¯å?¦é”?å®šç¼“å†²åŒº
		if(this.start == -1 && this.end == -1){
			//å¯¹ç¼“å†²åŒºè§£é”?
			needLock = false;
		}else{
			needLock = true;
		}
		return needLock;
	}
	
	/**
	 * å¤„ç?†çº¯è‹±æ–‡å­—æ¯?è¾“å‡º
	 * @param context
	 * @return
	 */
	private boolean processEnglishLetter(AnalyzeContext context){
		boolean needLock = false;
		
		if(this.englishStart == -1){//å½“å‰?çš„åˆ†è¯?å™¨å°šæœªå¼€å§‹å¤„ç?†è‹±æ–‡å­—ç¬¦	
			if(CharacterUtil.CHAR_ENGLISH == context.getCurrentCharType()){
				//è®°å½•èµ·å§‹æŒ‡é’ˆçš„ä½?ç½®,æ ‡æ˜Žåˆ†è¯?å™¨è¿›å…¥å¤„ç?†çŠ¶æ€?
				this.englishStart = context.getCursor();
				this.englishEnd = this.englishStart;
			}
		}else {//å½“å‰?çš„åˆ†è¯?å™¨æ­£åœ¨å¤„ç?†è‹±æ–‡å­—ç¬¦	
			if(CharacterUtil.CHAR_ENGLISH == context.getCurrentCharType()){
				//è®°å½•å½“å‰?æŒ‡é’ˆä½?ç½®ä¸ºç»“æ?Ÿä½?ç½®
				this.englishEnd =  context.getCursor();
			}else{
				//é?‡åˆ°é?žEnglishå­—ç¬¦,è¾“å‡ºè¯?å…ƒ
				Lexeme newLexeme = new Lexeme(context.getBufferOffset() , this.englishStart , this.englishEnd - this.englishStart + 1 , Lexeme.TYPE_ENGLISH);
				context.addLexeme(newLexeme);
				this.englishStart = -1;
				this.englishEnd= -1;
			}
		}
		
		//åˆ¤æ–­ç¼“å†²åŒºæ˜¯å?¦å·²ç»?è¯»å®Œ
		if(context.isBufferConsumed() && (this.englishStart != -1 && this.englishEnd != -1)){
            //ç¼“å†²ä»¥è¯»å®Œï¼Œè¾“å‡ºè¯?å…ƒ
            Lexeme newLexeme = new Lexeme(context.getBufferOffset() , this.englishStart , this.englishEnd - this.englishStart + 1 , Lexeme.TYPE_ENGLISH);
            context.addLexeme(newLexeme);
            this.englishStart = -1;
            this.englishEnd= -1;
		}	
		
		//åˆ¤æ–­æ˜¯å?¦é”?å®šç¼“å†²åŒº
		if(this.englishStart == -1 && this.englishEnd == -1){
			//å¯¹ç¼“å†²åŒºè§£é”?
			needLock = false;
		}else{
			needLock = true;
		}
		return needLock;			
	}
	
	/**
	 * å¤„ç?†é˜¿æ‹‰ä¼¯æ•°å­—è¾“å‡º
	 * @param context
	 * @return
	 */
	private boolean processArabicLetter(AnalyzeContext context){
		boolean needLock = false;
		
		if(this.arabicStart == -1){//å½“å‰?çš„åˆ†è¯?å™¨å°šæœªå¼€å§‹å¤„ç?†æ•°å­—å­—ç¬¦	
			if(CharacterUtil.CHAR_ARABIC == context.getCurrentCharType()){
				//è®°å½•èµ·å§‹æŒ‡é’ˆçš„ä½?ç½®,æ ‡æ˜Žåˆ†è¯?å™¨è¿›å…¥å¤„ç?†çŠ¶æ€?
				this.arabicStart = context.getCursor();
				this.arabicEnd = this.arabicStart;
			}
		}else {//å½“å‰?çš„åˆ†è¯?å™¨æ­£åœ¨å¤„ç?†æ•°å­—å­—ç¬¦	
			if(CharacterUtil.CHAR_ARABIC == context.getCurrentCharType()){
				//è®°å½•å½“å‰?æŒ‡é’ˆä½?ç½®ä¸ºç»“æ?Ÿä½?ç½®
				this.arabicEnd = context.getCursor();
			}else if(CharacterUtil.CHAR_USELESS == context.getCurrentCharType()
					&& this.isNumConnector(context.getCurrentChar())){
				//ä¸?è¾“å‡ºæ•°å­—ï¼Œä½†ä¸?æ ‡è®°ç»“æ?Ÿ
			}else{
				////é?‡åˆ°é?žArabicå­—ç¬¦,è¾“å‡ºè¯?å…ƒ
				Lexeme newLexeme = new Lexeme(context.getBufferOffset() , this.arabicStart , this.arabicEnd - this.arabicStart + 1 , Lexeme.TYPE_ARABIC);
				context.addLexeme(newLexeme);
				this.arabicStart = -1;
				this.arabicEnd = -1;
			}
		}
		
		//åˆ¤æ–­ç¼“å†²åŒºæ˜¯å?¦å·²ç»?è¯»å®Œ
		if(context.isBufferConsumed() && (this.arabicStart != -1 && this.arabicEnd != -1)){
            //ç”Ÿæˆ?å·²åˆ‡åˆ†çš„è¯?å…ƒ
            Lexeme newLexeme = new Lexeme(context.getBufferOffset() ,  this.arabicStart , this.arabicEnd - this.arabicStart + 1 , Lexeme.TYPE_ARABIC);
            context.addLexeme(newLexeme);
            this.arabicStart = -1;
            this.arabicEnd = -1;
		}
		
		//åˆ¤æ–­æ˜¯å?¦é”?å®šç¼“å†²åŒº
		if(this.arabicStart == -1 && this.arabicEnd == -1){
			//å¯¹ç¼“å†²åŒºè§£é”?
			needLock = false;
		}else{
			needLock = true;
		}
		return needLock;		
	}	

	/**
	 * åˆ¤æ–­æ˜¯å?¦æ˜¯å­—æ¯?è¿žæŽ¥ç¬¦å?·
	 * @param input
	 * @return
	 */
	private boolean isLetterConnector(char input){
		int index = Arrays.binarySearch(Letter_Connector, input);
		return index >= 0;
	}
	
	/**
	 * åˆ¤æ–­æ˜¯å?¦æ˜¯æ•°å­—è¿žæŽ¥ç¬¦å?·
	 * @param input
	 * @return
	 */
	private boolean isNumConnector(char input){
		int index = Arrays.binarySearch(Num_Connector, input);
		return index >= 0;
	}
}
