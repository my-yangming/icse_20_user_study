package com.hankcs.hanlp.algorithm.ahocorasick.interval;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * çº¿æ®µæ ‘ä¸Šé?¢çš„èŠ‚ç‚¹ï¼Œå®žé™…ä¸Šæ˜¯ä¸€äº›åŒºé—´çš„é›†å?ˆï¼Œå¹¶ä¸”æŒ‰ä¸­ç‚¹ç»´æŠ¤äº†ä¸¤ä¸ªèŠ‚ç‚¹
 */
public class IntervalNode
{
    /**
     * æ–¹å?‘
     */
    private enum Direction
    {
        LEFT, RIGHT
    }

    /**
     * åŒºé—´é›†å?ˆçš„æœ€å·¦ç«¯
     */
    private IntervalNode left = null;
    /**
     * æœ€å?³ç«¯
     */
    private IntervalNode right = null;
    /**
     * ä¸­ç‚¹
     */
    private int point;
    /**
     * åŒºé—´é›†å?ˆ
     */
    private List<Intervalable> intervals = new ArrayList<Intervalable>();

    /**
     * æž„é€ ä¸€ä¸ªèŠ‚ç‚¹
     * @param intervals
     */
    public IntervalNode(List<Intervalable> intervals)
    {
        this.point = determineMedian(intervals);

        List<Intervalable> toLeft = new ArrayList<Intervalable>();  // ä»¥ä¸­ç‚¹ä¸ºç•Œé? å·¦çš„åŒºé—´
        List<Intervalable> toRight = new ArrayList<Intervalable>(); // é? å?³çš„åŒºé—´

        for (Intervalable interval : intervals)
        {
            if (interval.getEnd() < this.point)
            {
                toLeft.add(interval);
            }
            else if (interval.getStart() > this.point)
            {
                toRight.add(interval);
            }
            else
            {
                this.intervals.add(interval);
            }
        }

        if (toLeft.size() > 0)
        {
            this.left = new IntervalNode(toLeft);
        }
        if (toRight.size() > 0)
        {
            this.right = new IntervalNode(toRight);
        }
    }

    /**
     * è®¡ç®—ä¸­ç‚¹
     * @param intervals åŒºé—´é›†å?ˆ
     * @return ä¸­ç‚¹å??æ ‡
     */
    public int determineMedian(List<Intervalable> intervals)
    {
        int start = -1;
        int end = -1;
        for (Intervalable interval : intervals)
        {
            int currentStart = interval.getStart();
            int currentEnd = interval.getEnd();
            if (start == -1 || currentStart < start)
            {
                start = currentStart;
            }
            if (end == -1 || currentEnd > end)
            {
                end = currentEnd;
            }
        }
        return (start + end) / 2;
    }

    /**
     * å¯»æ‰¾ä¸Žintervalæœ‰é‡?å? çš„åŒºé—´
     * @param interval
     * @return
     */
    public List<Intervalable> findOverlaps(Intervalable interval)
    {

        List<Intervalable> overlaps = new ArrayList<Intervalable>();

        if (this.point < interval.getStart())
        {
            // å?³è¾¹æ‰¾æ‰¾
            addToOverlaps(interval, overlaps, findOverlappingRanges(this.right, interval));
            addToOverlaps(interval, overlaps, checkForOverlapsToTheRight(interval));
        }
        else if (this.point > interval.getEnd())
        {
            // å·¦è¾¹æ‰¾æ‰¾
            addToOverlaps(interval, overlaps, findOverlappingRanges(this.left, interval));
            addToOverlaps(interval, overlaps, checkForOverlapsToTheLeft(interval));
        }
        else
        {
            // å?¦åˆ™åœ¨å½“å‰?åŒºé—´
            addToOverlaps(interval, overlaps, this.intervals);
            addToOverlaps(interval, overlaps, findOverlappingRanges(this.left, interval));
            addToOverlaps(interval, overlaps, findOverlappingRanges(this.right, interval));
        }

        return overlaps;
    }

    /**
     * æ·»åŠ åˆ°é‡?å? åŒºé—´åˆ—è¡¨ä¸­
     * @param interval è·Ÿæ­¤åŒºé—´é‡?å? 
     * @param overlaps é‡?å? åŒºé—´åˆ—è¡¨
     * @param newOverlaps å¸Œæœ›å°†è¿™äº›åŒºé—´åŠ å…¥
     */
    protected void addToOverlaps(Intervalable interval, List<Intervalable> overlaps, List<Intervalable> newOverlaps)
    {
        for (Intervalable currentInterval : newOverlaps)
        {
            if (!currentInterval.equals(interval))
            {
                overlaps.add(currentInterval);
            }
        }
    }

    /**
     * å¾€å·¦è¾¹å¯»æ‰¾é‡?å? 
     * @param interval
     * @return
     */
    protected List<Intervalable> checkForOverlapsToTheLeft(Intervalable interval)
    {
        return checkForOverlaps(interval, Direction.LEFT);
    }

    /**
     * å¾€å?³è¾¹å¯»æ‰¾é‡?å? 
     * @param interval
     * @return
     */
    protected List<Intervalable> checkForOverlapsToTheRight(Intervalable interval)
    {
        return checkForOverlaps(interval, Direction.RIGHT);
    }

    /**
     * å¯»æ‰¾é‡?å? 
     * @param interval ä¸€ä¸ªåŒºé—´ï¼Œä¸Žè¯¥åŒºé—´é‡?å? 
     * @param direction æ–¹å?‘ï¼Œè¡¨æ˜Žé‡?å? åŒºé—´åœ¨intervalçš„å·¦è¾¹è¿˜æ˜¯å?³è¾¹
     * @return
     */
    protected List<Intervalable> checkForOverlaps(Intervalable interval, Direction direction)
    {

        List<Intervalable> overlaps = new ArrayList<Intervalable>();
        for (Intervalable currentInterval : this.intervals)
        {
            switch (direction)
            {
                case LEFT:
                    if (currentInterval.getStart() <= interval.getEnd())
                    {
                        overlaps.add(currentInterval);
                    }
                    break;
                case RIGHT:
                    if (currentInterval.getEnd() >= interval.getStart())
                    {
                        overlaps.add(currentInterval);
                    }
                    break;
            }
        }
        return overlaps;
    }

    /**
     * æ˜¯å¯¹IntervalNode.findOverlaps(Intervalable)çš„ä¸€ä¸ªåŒ…è£…ï¼Œé˜²æ­¢NPE
     * @see com.hankcs.hanlp.algorithm.ahocorasick.interval.IntervalNode#findOverlaps(Intervalable)
     * @param node
     * @param interval
     * @return
     */
    protected static List<Intervalable> findOverlappingRanges(IntervalNode node, Intervalable interval)
    {
        if (node != null)
        {
            return node.findOverlaps(interval);
        }
        return Collections.emptyList();
    }

}
