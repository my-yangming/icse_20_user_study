package org.hswebframework.web.starter;

import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;

import java.util.Collections;
import java.util.Optional;

/**
 * è·¨åŸŸè®¾ç½®ï¼Œæ”¯æŒ?ä¸?å?Œçš„è¯·æ±‚è·¯å¾„ï¼Œé…?ç½®ä¸?å?Œçš„è·¨åŸŸä¿¡æ?¯é…?ç½®
 *
 * <p>
 * Example:
 * <pre class="code">
 *   {@code
 *      hsweb:
 *        cors:
 *          enable: true
 *          configs:
 *            - /**:
 *                allowed-headers: "*"
 *                allowed-methods: ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"]
 *                allowed-origins: ["http://xxx.example.com"]
 *                allow-credentials: true
 *                maxAge: 1800
 *   }
 * </pre>
 *
 * enableè®¾ä¸ºtrueï¼Œä½†æ˜¯configsæœªé…?ç½®ï¼Œå°†ä½¿ç”¨å·²ä¸‹çš„é»˜è®¤é…?ç½®:
 * <pre class="code">
 *   {@code
 *      hsweb:
 *        cors:
 *          enable: true
 *          configs:
 *            - /**:
 *                allowed-headers: "*"
 *                allowed-methods: ["GET", "POST", "HEAD"]
 *                allowed-origins: "*"
 *                allow-credentials: true
 *                maxAge: 1800
 *   }
 * </pre>
 *
 * <p>
 * <b>æ³¨æ„?:</b>
 * é…?ç½®æ–‡ä»¶ä¸­å¯¹è±¡çš„å±žæ€§å??åœ¨ SpringBoot 2.x ç‰ˆæœ¬å¼€å§‹ä¸?åœ¨æ”¯æŒ?ç‰¹æ®Šå­—ç¬¦ï¼Œä¼šå°†ç‰¹æ®Šå­—ç¬¦è¿‡æ»¤æŽ‰ï¼Œ
 * ä»…æ”¯æŒ?{@code [A-Za-z0-9\-\_]}ï¼Œå…·ä½“ç»†èŠ‚è¯·æŸ¥çœ‹{@code ConfigurationPropertyName}ç±»çš„{@code adapt}æ–¹æ³•
 *
 * @author zhouhao
 * @author Jia
 * @since 1.0
 */
@Configuration
@ConditionalOnProperty(prefix = "hsweb.cors", name = "enable", havingValue = "true")
@EnableConfigurationProperties(CorsProperties.class)
public class CorsAutoConfiguration {

    /**
     * é»˜è®¤åŒ¹é…?å…¨éƒ¨
     */
    private static final String CORS_PATH_ALL = "/**";

    @Bean
    public CorsFilter corsFilter(CorsProperties corsProperties) {
        UrlBasedCorsConfigurationSource corsConfigurationSource = new UrlBasedCorsConfigurationSource();

        Optional.ofNullable(corsProperties.getConfigs())
                .orElse(Collections.singletonList(Collections.singletonMap(CORS_PATH_ALL,
                        new CorsProperties.CorsConfiguration().applyPermitDefaultValues())))
                .forEach((map) ->
                        map.forEach((path, config) ->
                                corsConfigurationSource.registerCorsConfiguration(path, buildConfiguration(config))
                        )
                );

        return new CorsFilter(corsConfigurationSource);
    }

    private CorsConfiguration buildConfiguration(CorsProperties.CorsConfiguration config) {
        CorsConfiguration corsConfiguration = new CorsConfiguration();
        corsConfiguration.setAllowedHeaders(config.getAllowedHeaders());
        corsConfiguration.setAllowedMethods(config.getAllowedMethods());
        corsConfiguration.setAllowedOrigins(config.getAllowedOrigins());
        corsConfiguration.setAllowCredentials(config.getAllowCredentials());
        corsConfiguration.setExposedHeaders(config.getExposedHeaders());
        corsConfiguration.setMaxAge(config.getMaxAge());

        return corsConfiguration;
    }
}
