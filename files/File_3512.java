/*
 * <summary></summary>
 * <author>hankcs</author>
 * <email>me@hankcs.com</email>
 * <create-date>2015/5/7 18:47</create-date>
 *
 * <copyright file="DictionaryBasedSegment.java">
 * Copyright (c) 2003-2015, hankcs. All Right Reserved, http://www.hankcs.com/
 * </copyright>
 */
package com.hankcs.hanlp.seg;

import com.hankcs.hanlp.corpus.tag.Nature;
import com.hankcs.hanlp.seg.NShort.Path.AtomNode;

import java.util.List;

import static com.hankcs.hanlp.utility.Predefine.logger;

/**
 * åŸºäºŽè¯?å…¸çš„æœºæ¢°åˆ†è¯?å™¨åŸºç±»
 *
 * @author hankcs
 */
public abstract class DictionaryBasedSegment extends Segment
{
    /**
     * å¼€å?¯æ•°è¯?å’Œè‹±æ–‡è¯†åˆ«ï¼ˆä¸Žæ ‡å‡†æ„?ä¹‰ä¸Šçš„è¯?æ€§æ ‡æ³¨ä¸?å?Œï¼Œå?ªæ˜¯å€Ÿç”¨è¿™ä¸ªé…?ç½®æ–¹æ³•ï¼Œä¸?æ˜¯çœŸçš„å¼€å?¯äº†è¯?æ€§æ ‡æ³¨ã€‚
     * ä¸€èˆ¬ç”¨è¯?å…¸åˆ†è¯?çš„ç”¨æˆ·ä¸?å¤ªå?¯èƒ½æ˜¯NLPä¸“ä¸šäººå£«ï¼Œå¯¹è¯?æ€§å‡†ç¡®çŽ‡è¦?æ±‚ä¸?é«˜ï¼Œæ‰€ä»¥å¹²è„†ä¸?ä¸ºè¯?å…¸åˆ†è¯?å®žçŽ°è¯?æ€§æ ‡æ³¨ã€‚ï¼‰
     *
     * @param enable
     * @return
     */
    public Segment enablePartOfSpeechTagging(boolean enable)
    {
        return super.enablePartOfSpeechTagging(enable);
    }

    /**
     * è¯?æ€§æ ‡æ³¨
     *
     * @param charArray   å­—ç¬¦æ•°ç»„
     * @param wordNet     è¯?è¯­é•¿åº¦
     * @param natureArray è¾“å‡ºè¯?æ€§
     */
    protected void posTag(char[] charArray, int[] wordNet, Nature[] natureArray)
    {
        if (config.speechTagging)
        {
            for (int i = 0; i < natureArray.length; )
            {
                if (natureArray[i] == null)
                {
                    int j = i + 1;
                    for (; j < natureArray.length; ++j)
                    {
                        if (natureArray[j] != null) break;
                    }
                    List<AtomNode> atomNodeList = quickAtomSegment(charArray, i, j);
                    for (AtomNode atomNode : atomNodeList)
                    {
                        if (atomNode.sWord.length() >= wordNet[i])
                        {
                            wordNet[i] = atomNode.sWord.length();
                            natureArray[i] = atomNode.getNature();
                            i += wordNet[i];
                        }
                    }
                    i = j;
                }
                else
                {
                    ++i;
                }
            }
        }
    }

    @Override
    public Segment enableCustomDictionary(boolean enable)
    {
        if (enable)
        {
            logger.warning("ä¸ºåŸºäºŽè¯?å…¸çš„åˆ†è¯?å™¨å¼€å?¯ç”¨æˆ·è¯?å…¸å¤ªæµªè´¹äº†ï¼Œå»ºè®®ç›´æŽ¥å°†æ‰€æœ‰è¯?å…¸çš„è·¯å¾„ä¼ å…¥æž„é€ å‡½æ•°ï¼Œè¿™æ ·é€Ÿåº¦æ›´å¿«ã€?å†…å­˜æ›´çœ?");
        }
        return super.enableCustomDictionary(enable);
    }
}
