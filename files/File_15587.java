/*Copyright Â©2016 TommyLemon(https://github.com/TommyLemon/APIJSON)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.*/

package zuo.biao.apijson.server;

import java.lang.reflect.InvocationTargetException;

import javax.activation.UnsupportedDataTypeException;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;

import zuo.biao.apijson.NotNull;
import zuo.biao.apijson.StringUtil;

/**å?¯è¿œç¨‹è°ƒç”¨çš„å‡½æ•°ç±»
 * @author Lemon
 */
public class RemoteFunction {
	//	private static final String TAG = "RemoteFunction";

	/**å??å°„è°ƒç”¨
	 * @param fun
	 * @param request
	 * @param function ä¾‹å¦‚get(Map:map,key)ï¼Œå?‚æ•°å?ªå…?è®¸å¼•ç”¨ï¼Œä¸?èƒ½ç›´æŽ¥ä¼ å€¼
	 * @return
	 */
	public static Object invoke(@NotNull RemoteFunction fun, @NotNull JSONObject request, @NotNull String function) throws Exception {

		FunctionBean fb = parseFunction(function, request, false);

		try {
			return invoke(fun, fb.getMethod(), fb.getTypes(), fb.getValues()); 
		} catch (Exception e) {
			if (e instanceof NoSuchMethodException) {
				throw new IllegalArgumentException("å­—ç¬¦ " + function + " å¯¹åº”çš„è¿œç¨‹å‡½æ•° " + getFunction(fb.getMethod(), fb.getKeys()) + " ä¸?åœ¨å?Žç«¯å·¥ç¨‹çš„DemoFunctionå†…ï¼?"
						+ "\nè¯·æ£€æŸ¥å‡½æ•°å??å’Œå?‚æ•°æ•°é‡?æ˜¯å?¦ä¸Žå·²å®šä¹‰çš„å‡½æ•°ä¸€è‡´ï¼?"
						+ "\nä¸”å¿…é¡»ä¸º function(key0,key1,...) è¿™ç§?å?•å‡½æ•°æ ¼å¼?ï¼?"
						+ "\nfunctionå¿…é¡»ç¬¦å?ˆJavaå‡½æ•°å‘½å??ï¼Œkeyæ˜¯ç”¨äºŽåœ¨requestå†…å?–å€¼çš„é”®ï¼?"
						+ "\nè°ƒç”¨æ—¶ä¸?è¦?æœ‰ç©ºæ ¼ï¼?");
			}
			if (e instanceof InvocationTargetException) {
				Throwable te = ((InvocationTargetException) e).getTargetException();
				if (StringUtil.isEmpty(te.getMessage(), true) == false) { //åˆ°å¤„æŠŠå‡½æ•°å£°æ˜Žthrows Exceptionæ”¹æˆ?throws ThrowableæŒºéº»çƒ¦
					throw te instanceof Exception ? (Exception) te : new Exception(te.getMessage());
				}
				throw new IllegalArgumentException("å­—ç¬¦ " + function + " å¯¹åº”çš„è¿œç¨‹å‡½æ•°ä¼ å?‚ç±»åž‹é”™è¯¯ï¼?"
						+ "\nè¯·æ£€æŸ¥ key:value ä¸­valueçš„ç±»åž‹æ˜¯å?¦æ»¡è¶³å·²å®šä¹‰çš„å‡½æ•° " + getFunction(fb.getMethod(), fb.getKeys()) + " çš„è¦?æ±‚ï¼?");
			}
			throw e;
		}

	}

	/**è§£æž?å‡½æ•°
	 * @param function
	 * @param request
	 * @param isSQLFunction
	 * @return
	 * @throws Exception
	 */
	@NotNull
	public static FunctionBean parseFunction(@NotNull String function, @NotNull JSONObject request, boolean isSQLFunction) throws Exception {

		int start = function.indexOf("(");
		int end = function.lastIndexOf(")");
		String method = end != function.length() - 1 ? null : function.substring(0, start);
		if (StringUtil.isEmpty(method, true)) {
			throw new IllegalArgumentException("å­—ç¬¦ " + function + " ä¸?å?ˆæ³•ï¼?å‡½æ•°çš„å??ç§° function ä¸?èƒ½ä¸ºç©ºï¼Œ"
					+ "ä¸”å¿…é¡»ä¸º function(key0,key1,...) è¿™ç§?å?•å‡½æ•°æ ¼å¼?ï¼?"
					+ "\nfunctionå¿…é¡»ç¬¦å?ˆ " + (isSQLFunction ? "SQL å‡½æ•°/SQL å­˜å‚¨è¿‡ç¨‹" : "Java å‡½æ•°") + " å‘½å??ï¼Œkey æ˜¯ç”¨äºŽåœ¨ request å†…å?–å€¼çš„é”®ï¼?");
		}

		String[] keys = StringUtil.split(function.substring(start + 1, end));

		int length = keys == null ? 0 : keys.length;

		Class<?>[] types;
		Object[] values;

		if (isSQLFunction) {
			types = new Class<?>[length];
			values = new Object[length];

			//ç¢°åˆ°nullå°±æŒ‚äº†ï¼?ï¼?ï¼?Numberè¿˜å¾—å?„ç§?è½¬æ?¢ä¸?ç?µæ´»ï¼?ä¸?å¦‚ç›´æŽ¥ä¼ requestå’Œå¯¹åº”çš„keyåˆ°å‡½æ•°é‡Œï¼Œå‡½æ•°å†…å®žçŽ°æ—¶è‡ªå·± getLongValue,getJSONObject ...
			Object v;
			for (int i = 0; i < length; i++) {
				v = values[i] = request.get(keys[i]);
				if (v == null) {
					types[i] = Object.class;
					values[i] = null;
					break;
				}

				if (v instanceof Boolean) {
					types[i] = Boolean.class; //å?ªæ”¯æŒ?JSONçš„å‡ ç§?ç±»åž‹ 
				}
				else if (v instanceof Number) {
					types[i] = Number.class;
				}
				else if (v instanceof String) {
					types[i] = String.class;
				}
				else if (v instanceof JSONObject) { // Map) {
					types[i] = JSONObject.class;
					//æ€§èƒ½æ¯”è¾ƒå·®	values[i] = request.getJSONObject(keys[i]);
				}
				else if (v instanceof JSONArray) { // Collection) {
					types[i] = JSONArray.class;
					//æ€§èƒ½æ¯”è¾ƒå·®	values[i] = request.getJSONArray(keys[i]);
				}
				else { //FIXME ç¢°åˆ°nullå°±æŒ‚äº†ï¼?ï¼?ï¼?
					throw new UnsupportedDataTypeException(keys[i] + ":value ä¸­valueä¸?å?ˆæ³•ï¼?è¿œç¨‹å‡½æ•° key():" + function + " ä¸­çš„argå¯¹åº”çš„å€¼ç±»åž‹"
							+ "å?ªèƒ½æ˜¯ [Boolean, Number, String, JSONObject, JSONArray] ä¸­çš„ä¸€ç§?ï¼?");
				}
			}
		}
		else {
			types = new Class<?>[length + 1];
			types[0] = JSONObject.class;

			values = new Object[length + 1];
			values[0] = request;

			for (int i = 0; i < length; i++) {
				types[i + 1] = String.class;
				values[i + 1] = keys[i];
			}
		}

		FunctionBean fb = new FunctionBean();
		fb.setFunction(function);
		fb.setMethod(method);
		fb.setKeys(keys);
		fb.setTypes(types);
		fb.setValues(values);

		return fb;
	}


	/**å??å°„è°ƒç”¨
	 * @param methodName
	 * @param parameterTypes
	 * @param args
	 * @return
	 */
	public static Object invoke(@NotNull RemoteFunction fun, @NotNull String methodName, @NotNull Class<?>[] parameterTypes, @NotNull Object[] args) throws Exception {
		return fun.getClass().getDeclaredMethod(methodName, parameterTypes).invoke(fun, args);
	}

	/**
	 * @param method
	 * @param keys
	 * @return
	 */
	public static String getFunction(String method, String[] keys) {
		String f = method + "(JSONObject request";

		if (keys != null) {
			for (int i = 0; i < keys.length; i++) {
				f += (", String " + keys[i]);
			}
		}

		f += ")";

		return f;
	}


	public static class FunctionBean {
		private String function;
		private String method;
		private String[] keys;
		private Class<?>[] types;
		private Object[] values;

		public String getFunction() {
			return function;
		}
		public void setFunction(String function) {
			this.function = function;
		}

		public String getMethod() {
			return method;
		}
		public void setMethod(String method) {
			this.method = method;
		}

		public String[] getKeys() {
			return keys;
		}
		public void setKeys(String[] keys) {
			this.keys = keys;
		}

		public Class<?>[] getTypes() {
			return types;
		}
		public void setTypes(Class<?>[] types) {
			this.types = types;
		}

		public Object[] getValues() {
			return values;
		}
		public void setValues(Object[] values) {
			this.values = values;
		}


		/**
		 * @param useValue
		 * @return
		 */
		public String toFunctionCallString(boolean useValue) {
			return toFunctionCallString(useValue, null);
		}
		/**
		 * @param useValue
		 * @param quote
		 * @return
		 */
		public String toFunctionCallString(boolean useValue, String quote) {
			String s = getMethod() + "(";

			Object[] args = useValue ? getValues() : getKeys();
			if (args != null && args.length > 0) {
				if (quote == null) {
					quote = "'";
				}

				Object arg;
				for (int i = 0; i < args.length; i++) {
					arg = args[i];
					s += (i <= 0 ? "" : ",") + (arg instanceof Boolean || arg instanceof Number ? arg : quote + arg + quote);
				}
			}
			
			return s + ")";
		}

	}

}
