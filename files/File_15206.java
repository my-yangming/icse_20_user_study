/*Copyright Â©2015 TommyLemon(https://github.com/TommyLemon)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.*/

package zuo.biao.library.ui;

import zuo.biao.library.R;
import android.annotation.SuppressLint;
import android.content.Context;
import android.util.Log;
import android.view.GestureDetector;
import android.view.GestureDetector.OnGestureListener;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.widget.AbsListView;

/**
 * åŽŸå·¥ç¨‹åœ°å?€å?Šå…·ä½“ä»‹ç»?
 * https://github.com/TommyLemon/PagedListView
 */
/**é¡µé?¢æ»šåŠ¨ï¼Œè§£å†³ListViewç­‰æ»šåŠ¨ä½?ç½®ç»?å¸¸ä¸?ç¬¦å?ˆç”¨æˆ·é¢„æœŸé—®é¢˜ã€‚
 * *ä¸­ä½Žé€Ÿæ»‘åŠ¨ä¼šæ»šåŠ¨ä¸€é¡µï¼Œå¾ˆæ…¢æ»‘åŠ¨æˆ–å¾ˆå¿«æ»‘åŠ¨åˆ™æŒ‰é»˜è®¤å¤„ç?†ã€‚
 * *é€‚ç”¨äºŽListViewï¼ŒGridViewç­‰AbsListViewçš„å­?ç±»
 * @author Lemon
 * @see #dispatchTouchEvent
 * @use new PageScroller(listView).init();
 */
public class PageScroller implements OnGestureListener, OnTouchListener {
	private static final String TAG = "PageScroller";

	private OnTouchListener onTouchListener;
	/**é?¿å…?lvè®¾ç½®OnTouchListenerå†²çª?
	 * @param onTouchListener
	 * @warn åœ¨initå‰?è°ƒç”¨æœ‰æ•ˆ
	 * @use è°ƒç”¨è¯¥æ–¹æ³• >> onTouchä¸­pageScroller.onTouch(v, event);
	 */
	public void setOnTouchListener(OnTouchListener onTouchListener) {
		this.onTouchListener = onTouchListener;
	}


	private Context context;
	private AbsListView lv;
	/**
	 * ä¸?æ”¯æŒ?ScrollView,å› ä¸ºScrollViewå¾€å¾€ä¸?ä¼šå¤ªé•¿,è€Œä¸”å°?è¯•å¤šæ¬¡smoothScrollBy,pageScrolléƒ½æ— æ•ˆã€‚
	 * ä¸?æ”¯æŒ?WebView,å› ä¸ºæ²¡æ‰¾åˆ°WebViewæ»šåŠ¨ç½‘é¡µæ–¹æ³•,å°?è¯•è¿‡scrollByä¹Ÿæ— æ•ˆã€‚
	 */
	public PageScroller(AbsListView lv) {
		this.lv = lv;
		this.context = lv.getContext();
	}

	/**
	 * æœ€å°?çºµå?‘æ»‘åŠ¨è·?ç¦»
	 */
	private float minDistanceY;
	/**
	 * æœ€å¤§çºµå?‘æ»‘åŠ¨è·?ç¦»
	 */
	private float maxDistanceY;
	/**
	 * æ‰‹åŠ¿ç›‘å?¬ç±»
	 */
	private GestureDetector gestureDetector;
	/**åˆ?å§‹åŒ–
	 * @return
	 * @must è°ƒç”¨
	 */
	public void init() {
		minDistanceY = context.getResources().getDimension(R.dimen.min_distance_y);
		maxDistanceY = context.getResources().getDimension(R.dimen.max_distance_y);

		gestureDetector = new GestureDetector(context, this);

		lv.setOnTouchListener(onTouchListener == null ? this : onTouchListener);
	}

	/**
	 * @param ev
	 * @return
	 * @must åœ¨Activityçš„dispatchTouchEventæ–¹æ³•å†…è°ƒç”¨
	 */
	public void dispatchTouchEvent(MotionEvent ev) {  
		gestureDetector.onTouchEvent(ev);  
	}




	/**æ»šåŠ¨é¡µé?¢
	 * @param upToDown
	 */
	private void scrollPage(boolean upToDown) {
		Log.d(TAG, "scrollPage upToDown = " + upToDown + "; lv.getHeight() = " + lv.getHeight());
		lv.smoothScrollBy((int) ((upToDown ? -0.8 : 0.8) * lv.getHeight()), 120);
	}  



	@Override
	public boolean onDown(MotionEvent e) {
		return false;
	}
	@Override
	public void onShowPress(MotionEvent e) {
	}
	@Override
	public boolean onSingleTapUp(MotionEvent e) {
		return false;
	}
	@Override
	public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {
		return false;
	}
	@Override
	public void onLongPress(MotionEvent e) {
	}

	private float distanceY;
	@Override
	public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
		//TODO è¿žç»­å¿«é€Ÿåˆ·æ–°åˆ—è¡¨(æ¯”å¦‚ç–¯ç‹‚ç‚¹å‡»DemoActivityåˆ—è¡¨Itemä¸­çš„Name)æœ‰æ—¶å¯¼è‡´e1æˆ–e2ä¸ºnullè€Œå´©æºƒã€‚è€ƒè™‘åˆ°å?‘ç”Ÿæ¦‚çŽ‡å°?ï¼Œåˆ¤ç©ºæ?Ÿè€—æ€§èƒ½å°±æš‚æ—¶ä¸?ç®¡ã€‚
		distanceY = e2.getRawY() - e1.getRawY();
		if (Math.abs(distanceY) < maxDistanceY) {
			if (distanceY > minDistanceY) {
				scrollPage(true);
				return true;
			}
			if (distanceY < - minDistanceY) {
				scrollPage(false);
				return true;
			}
		}

		return false;
	}

	@SuppressLint("ClickableViewAccessibility")
	@Override
	public boolean onTouch(View v, MotionEvent event) {
		return gestureDetector.onTouchEvent(event);
	}

}
