/*
 * Copyright 2015-2102 RonCoo(http://www.roncoo.com) Group.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.roncoo.pay.trade.service.impl;

import com.alibaba.fastjson.JSON;
import com.roncoo.pay.account.service.RpAccountTransactionService;
import com.roncoo.pay.common.core.enums.PayTypeEnum;
import com.roncoo.pay.common.core.enums.PayWayEnum;
import com.roncoo.pay.common.core.enums.PublicEnum;
import com.roncoo.pay.common.core.utils.DateUtils;
import com.roncoo.pay.common.core.utils.StringUtil;
import com.roncoo.pay.notify.service.RpNotifyService;
import com.roncoo.pay.trade.dao.RpTradePaymentOrderDao;
import com.roncoo.pay.trade.dao.RpTradePaymentRecordDao;
import com.roncoo.pay.trade.entity.RoncooPayGoodsDetails;
import com.roncoo.pay.trade.entity.RpTradePaymentOrder;
import com.roncoo.pay.trade.entity.RpTradePaymentRecord;
import com.roncoo.pay.trade.entity.weixinpay.WeiXinPrePay;
import com.roncoo.pay.trade.enums.OrderFromEnum;
import com.roncoo.pay.trade.enums.TradeStatusEnum;
import com.roncoo.pay.trade.enums.TrxTypeEnum;
import com.roncoo.pay.trade.enums.alipay.AliPayTradeStateEnum;
import com.roncoo.pay.trade.enums.weixinpay.WeiXinTradeTypeEnum;
import com.roncoo.pay.trade.enums.weixinpay.WeixinTradeStateEnum;
import com.roncoo.pay.trade.exception.TradeBizException;
import com.roncoo.pay.trade.service.RpTradePaymentManagerService;
import com.roncoo.pay.trade.utils.MerchantApiUtil;
import com.roncoo.pay.trade.utils.WeiXinPayUtils;
import com.roncoo.pay.trade.utils.WeixinConfigUtil;
import com.roncoo.pay.trade.utils.alipay.AliPayUtil;
import com.roncoo.pay.trade.utils.alipay.config.AlipayConfigUtil;
import com.roncoo.pay.trade.utils.alipay.util.AlipayNotify;
import com.roncoo.pay.trade.utils.alipay.util.AlipaySubmit;
import com.roncoo.pay.trade.utils.weixin.WeiXinPayUtil;
import com.roncoo.pay.trade.vo.*;
import com.roncoo.pay.user.entity.RpPayWay;
import com.roncoo.pay.user.entity.RpUserInfo;
import com.roncoo.pay.user.entity.RpUserPayConfig;
import com.roncoo.pay.user.entity.RpUserPayInfo;
import com.roncoo.pay.user.enums.FundInfoTypeEnum;
import com.roncoo.pay.user.exception.UserBizException;
import com.roncoo.pay.user.service.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.util.*;

/**
 * <b>åŠŸèƒ½è¯´æ˜Ž:äº¤æ˜“æ¨¡å?—ç®¡ç?†å®žçŽ°ç±»å®žçŽ°</b>
 *
 * @author Peter <a href="http://www.roncoo.com">é¾™æžœå­¦é™¢(www.roncoo.com)</a>
 */
@Service("rpTradePaymentManagerService")
public class RpTradePaymentManagerServiceImpl implements RpTradePaymentManagerService {

    private static final Logger LOG = LoggerFactory.getLogger(RpTradePaymentManagerServiceImpl.class);

    @Autowired
    private RpTradePaymentOrderDao rpTradePaymentOrderDao;

    @Autowired
    private RpTradePaymentRecordDao rpTradePaymentRecordDao;

    @Autowired
    private RpUserInfoService rpUserInfoService;

    @Autowired
    private RpUserPayInfoService rpUserPayInfoService;

    @Autowired
    private RpUserPayConfigService rpUserPayConfigService;

    @Autowired
    private RpPayWayService rpPayWayService;

    @Autowired
    private BuildNoService buildNoService;

    @Autowired
    private RpNotifyService rpNotifyService;

    @Autowired
    private RpAccountTransactionService rpAccountTransactionService;

    /*@Autowired
    private AliF2FPaySubmit aliF2FPaySubmit;*/

    /**
     * åˆ?å§‹åŒ–ç›´è¿žæ‰«ç ?æ”¯ä»˜æ•°æ?®,ç›´è¿žæ‰«ç ?æ”¯ä»˜åˆ?å§‹åŒ–æ–¹æ³•è§„åˆ™ 1:æ ¹æ?®(å•†æˆ·ç¼–å?· + å•†æˆ·è®¢å?•å?·)ç¡®å®šè®¢å?•æ˜¯å?¦å­˜åœ¨
     * 1.1:å¦‚æžœè®¢å?•å­˜åœ¨,æŠ›å¼‚å¸¸,æ??ç¤ºè®¢å?•å·²å­˜åœ¨ 1.2:å¦‚æžœè®¢å?•ä¸?å­˜åœ¨,åˆ›å»ºæ”¯ä»˜è®¢å?• 2:åˆ›å»ºæ”¯ä»˜è®°å½• 3:æ ¹æ?®ç›¸åº”æ¸ é?“æ–¹æ³•
     * 4:è°ƒè½¬åˆ°ç›¸åº”æ”¯ä»˜æ¸ é?“æ‰«ç ?ç•Œé?¢
     *
     * @param payKey      å•†æˆ·æ”¯ä»˜KEY
     * @param productName äº§å“?å??ç§°
     * @param orderNo     å•†æˆ·è®¢å?•å?·
     * @param orderDate   ä¸‹å?•æ—¥æœŸ
     * @param orderTime   ä¸‹å?•æ—¶é—´
     * @param orderPrice  è®¢å?•é‡‘é¢?(å…ƒ)
     * @param payWayCode  æ”¯ä»˜æ–¹å¼?ç¼–ç ?
     * @param orderIp     ä¸‹å?•IP
     * @param orderPeriod è®¢å?•æœ‰æ•ˆæœŸ(åˆ†é’Ÿ)
     * @param returnUrl   æ”¯ä»˜ç»“æžœé¡µé?¢é€šçŸ¥åœ°å?€
     * @param notifyUrl   æ”¯ä»˜ç»“æžœå?Žå?°é€šçŸ¥åœ°å?€
     * @param remark      æ”¯ä»˜å¤‡æ³¨
     * @param field1      æ‰©å±•å­—æ®µ1
     * @param field2      æ‰©å±•å­—æ®µ2
     * @param field3      æ‰©å±•å­—æ®µ3
     * @param field4      æ‰©å±•å­—æ®µ4
     * @param field5      æ‰©å±•å­—æ®µ5
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public ScanPayResultVo initDirectScanPay(String payKey, String productName, String orderNo, Date orderDate, Date orderTime, BigDecimal orderPrice, String payWayCode, String orderIp, Integer orderPeriod, String returnUrl, String notifyUrl, String remark, String field1, String field2, String field3, String field4, String field5) {

        RpUserPayConfig rpUserPayConfig = rpUserPayConfigService.getByPayKey(payKey);
        if (rpUserPayConfig == null) {
            throw new UserBizException(UserBizException.USER_PAY_CONFIG_ERRPR, "ç”¨æˆ·æ”¯ä»˜é…?ç½®æœ‰è¯¯");
        }

        // æ ¹æ?®æ”¯ä»˜äº§å“?å?Šæ”¯ä»˜æ–¹å¼?èŽ·å?–è´¹çŽ‡
        RpPayWay payWay = null;
        PayTypeEnum payType = null;
        if (PayWayEnum.WEIXIN.name().equals(payWayCode)) {
            payWay = rpPayWayService.getByPayWayTypeCode(rpUserPayConfig.getProductCode(), payWayCode, PayTypeEnum.SCANPAY.name());
            payType = PayTypeEnum.SCANPAY;
        } else if (PayWayEnum.ALIPAY.name().equals(payWayCode)) {
            payWay = rpPayWayService.getByPayWayTypeCode(rpUserPayConfig.getProductCode(), payWayCode, PayTypeEnum.DIRECT_PAY.name());
            payType = PayTypeEnum.DIRECT_PAY;
        }

        if (payWay == null) {
            throw new UserBizException(UserBizException.USER_PAY_CONFIG_ERRPR, "ç”¨æˆ·æ”¯ä»˜é…?ç½®æœ‰è¯¯");
        }

        String merchantNo = rpUserPayConfig.getUserNo();// å•†æˆ·ç¼–å?·
        RpUserInfo rpUserInfo = rpUserInfoService.getDataByMerchentNo(merchantNo);
        if (rpUserInfo == null) {
            throw new UserBizException(UserBizException.USER_IS_NULL, "ç”¨æˆ·ä¸?å­˜åœ¨");
        }

        RpTradePaymentOrder rpTradePaymentOrder = rpTradePaymentOrderDao.selectByMerchantNoAndMerchantOrderNo(merchantNo, orderNo);
        if (rpTradePaymentOrder == null) {
            rpTradePaymentOrder = sealRpTradePaymentOrder(merchantNo, rpUserInfo.getUserName(), productName, orderNo, orderDate, orderTime, orderPrice, payWayCode, PayWayEnum.getEnum(payWayCode).getDesc(), payType, rpUserPayConfig.getFundIntoType(), orderIp, orderPeriod, returnUrl, notifyUrl, remark, field1, field2, field3, field4, field5);
            rpTradePaymentOrderDao.insert(rpTradePaymentOrder);
        } else {
            if (TradeStatusEnum.SUCCESS.name().equals(rpTradePaymentOrder.getStatus())) {
                throw new TradeBizException(TradeBizException.TRADE_ORDER_ERROR, "è®¢å?•å·²æ”¯ä»˜æˆ?åŠŸ,æ— éœ€é‡?å¤?æ”¯ä»˜");
            }
            if (rpTradePaymentOrder.getOrderAmount().compareTo(orderPrice) != 0) {
                rpTradePaymentOrder.setOrderAmount(orderPrice);// å¦‚æžœé‡‘é¢?ä¸?ä¸€è‡´,ä¿®æ”¹é‡‘é¢?ä¸ºæœ€æ–°çš„é‡‘é¢?
            }
        }

        return getScanPayResultVo(rpTradePaymentOrder, payWay);

    }

    /**
     * æ?¡ç ?æ”¯ä»˜,å¯¹åº”çš„æ˜¯æ”¯ä»˜å®?çš„æ?¡ç ?æ”¯ä»˜æˆ–è€…å¾®ä¿¡çš„åˆ·å?¡æ”¯ä»˜
     *
     * @param payKey      å•†æˆ·æ”¯ä»˜key
     * @param authCode    æ”¯ä»˜æŽˆæ?ƒç ?
     * @param productName äº§å“?å??ç§°
     * @param orderNo     å•†æˆ·è®¢å?•å?·
     * @param orderDate   ä¸‹å?•æ—¥æœŸ
     * @param orderTime   ä¸‹å?•æ—¶é—´
     * @param orderPrice  è®¢å?•é‡‘é¢?(å…ƒ)
     * @param payWayCode  æ”¯ä»˜æ–¹å¼?
     * @param orderIp     ä¸‹å?•IP
     * @param remark      æ”¯ä»˜å¤‡æ³¨
     * @param field1      æ‰©å±•å­—æ®µ1
     * @param field2      æ‰©å±•å­—æ®µ2
     * @param field3      æ‰©å±•å­—æ®µ3
     * @param field4      æ‰©å±•å­—æ®µ4
     * @param field5      æ‰©å±•å­—æ®µ5
     * @return
     */
    @Override
    public F2FPayResultVo f2fPay(String payKey, String authCode, String productName, String orderNo, Date orderDate, Date orderTime, BigDecimal orderPrice, String payWayCode, String orderIp, String remark, String field1, String field2, String field3, String field4, String field5) {

        RpUserPayConfig rpUserPayConfig = rpUserPayConfigService.getByPayKey(payKey);
        if (rpUserPayConfig == null) {
            throw new UserBizException(UserBizException.USER_PAY_CONFIG_ERRPR, "ç”¨æˆ·æ”¯ä»˜é…?ç½®æœ‰è¯¯");
        }

        if (StringUtil.isEmpty(authCode)) {
            throw new TradeBizException(TradeBizException.TRADE_PARAM_ERROR, "æ”¯ä»˜æŽˆæ?ƒç ?ä¸?èƒ½ä¸ºç©º");
        }
        // æ ¹æ?®æ”¯ä»˜äº§å“?å?Šæ”¯ä»˜æ–¹å¼?èŽ·å?–è´¹çŽ‡
        RpPayWay payWay = null;
        PayTypeEnum payType = null;
        if (PayWayEnum.WEIXIN.name().equals(payWayCode)) {
            payWay = rpPayWayService.getByPayWayTypeCode(rpUserPayConfig.getProductCode(), payWayCode, PayTypeEnum.MICRO_PAY.name());
            payType = PayTypeEnum.MICRO_PAY;
        } else if (PayWayEnum.ALIPAY.name().equals(payWayCode)) {
            payWay = rpPayWayService.getByPayWayTypeCode(rpUserPayConfig.getProductCode(), payWayCode, PayTypeEnum.F2F_PAY.name());
            payType = PayTypeEnum.F2F_PAY;
        }
        if (payWay == null) {
            throw new UserBizException(UserBizException.USER_PAY_CONFIG_ERRPR, "ç”¨æˆ·æ”¯ä»˜é…?ç½®æœ‰è¯¯");
        }

        String merchantNo = rpUserPayConfig.getUserNo();// å•†æˆ·ç¼–å?·
        RpUserInfo rpUserInfo = rpUserInfoService.getDataByMerchentNo(merchantNo);
        if (rpUserInfo == null) {
            throw new UserBizException(UserBizException.USER_IS_NULL, "ç”¨æˆ·ä¸?å­˜åœ¨");
        }

        //æ ¹æ?®å•†æˆ·å?·å’Œè®¢å?•å?·åŽ»æŸ¥è¯¢è®¢å?•æ˜¯å?¦å­˜åœ¨
        RpTradePaymentOrder rpTradePaymentOrder = rpTradePaymentOrderDao.selectByMerchantNoAndMerchantOrderNo(merchantNo, orderNo);
        if (rpTradePaymentOrder == null) {
            //è®¢å?•ä¸?å­˜åœ¨ï¼Œåˆ›å»ºè®¢å?•
            rpTradePaymentOrder = sealRpTradePaymentOrder(merchantNo, rpUserInfo.getUserName(), productName, orderNo, orderDate, orderTime, orderPrice, payWayCode, PayWayEnum.getEnum(payWayCode).getDesc(), payType, rpUserPayConfig.getFundIntoType(), orderIp, 5, "f2fPay", "f2fPay", remark, field1, field2, field3, field4, field5);
            rpTradePaymentOrderDao.insert(rpTradePaymentOrder);
        } else {
            //è®¢å?•å·²å­˜åœ¨ï¼Œè®¢å?•é‡‘é¢?ä¸Žä¼ å…¥é‡‘é¢?ä¸?ç›¸ç­‰
            if (rpTradePaymentOrder.getOrderAmount().compareTo(orderPrice) != 0) {
                throw new TradeBizException(TradeBizException.TRADE_ORDER_ERROR, "é”™è¯¯çš„è®¢å?•");
            }
            //è®¢å?•å·²å­˜åœ¨ï¼Œä¸”è®¢å?•çŠ¶æ€?ä¸ºæ”¯ä»˜æˆ?åŠŸ
            if (TradeStatusEnum.SUCCESS.name().equals(rpTradePaymentOrder.getStatus())) {
                throw new TradeBizException(TradeBizException.TRADE_ORDER_ERROR, "è®¢å?•å·²æ”¯ä»˜æˆ?åŠŸ,æ— éœ€é‡?å¤?æ”¯ä»˜");
            }
        }

        return getF2FPayResultVo(rpTradePaymentOrder, payWay, payKey, rpUserPayConfig.getPaySecret(), authCode, null);
    }

    /**
     * é€šè¿‡æ”¯ä»˜è®¢å?•å?Šå•†æˆ·è´¹çŽ‡ç”Ÿæˆ?æ”¯ä»˜è®°å½•
     *
     * @param rpTradePaymentOrder æ”¯ä»˜è®¢å?•
     * @param payWay              å•†æˆ·æ”¯ä»˜é…?ç½®
     * @return
     */
    private F2FPayResultVo getF2FPayResultVo(RpTradePaymentOrder rpTradePaymentOrder, RpPayWay payWay, String payKey, String merchantPaySecret, String authCode, List<RoncooPayGoodsDetails> roncooPayGoodsDetailses) {

        F2FPayResultVo f2FPayResultVo = new F2FPayResultVo();
        String payWayCode = payWay.getPayWayCode();// æ”¯ä»˜æ–¹å¼?

        PayTypeEnum payType = null;
        if (PayWayEnum.WEIXIN.name().equals(payWay.getPayWayCode())) {
            payType = PayTypeEnum.MICRO_PAY;
        } else if (PayWayEnum.ALIPAY.name().equals(payWay.getPayWayCode())) {
            payType = PayTypeEnum.F2F_PAY;
        }

        rpTradePaymentOrder.setPayTypeCode(payType.name());// æ”¯ä»˜ç±»åž‹
        rpTradePaymentOrder.setPayTypeName(payType.getDesc());// æ”¯ä»˜æ–¹å¼?
        rpTradePaymentOrder.setPayWayCode(payWay.getPayWayCode());//æ”¯ä»˜é€šé?“ç¼–å?·
        rpTradePaymentOrder.setPayWayName(payWay.getPayWayName());//æ”¯ä»˜é€šé?“å??ç§°

        //ç”Ÿæˆ?æ”¯ä»˜æµ?æ°´
        RpTradePaymentRecord rpTradePaymentRecord = sealRpTradePaymentRecord(rpTradePaymentOrder.getMerchantNo(), rpTradePaymentOrder.getMerchantName(), rpTradePaymentOrder.getProductName(), rpTradePaymentOrder.getMerchantOrderNo(), rpTradePaymentOrder.getOrderAmount(), payWay.getPayWayCode(), payWay.getPayWayName(), payType, rpTradePaymentOrder.getFundIntoType(), BigDecimal.valueOf(payWay.getPayRate()), rpTradePaymentOrder.getOrderIp(), rpTradePaymentOrder.getReturnUrl(), rpTradePaymentOrder.getNotifyUrl(), rpTradePaymentOrder.getRemark(), rpTradePaymentOrder.getField1(), rpTradePaymentOrder.getField2(), rpTradePaymentOrder.getField3(), rpTradePaymentOrder.getField4(), rpTradePaymentOrder.getField5());
        rpTradePaymentRecordDao.insert(rpTradePaymentRecord);

        if (PayWayEnum.WEIXIN.name().equals(payWayCode)) {// å¾®ä¿¡æ”¯ä»˜
            RpUserPayInfo rpUserPayInfo = rpUserPayInfoService.getByUserNo(rpTradePaymentOrder.getMerchantNo(), payWayCode);
            if (rpUserPayInfo == null) {
                throw new UserBizException(UserBizException.USER_PAY_CONFIG_ERRPR, "å•†æˆ·æ”¯ä»˜é…?ç½®æœ‰è¯¯");
            }
            Map<String, Object> wxResultMap = WeiXinPayUtil.micropay(rpTradePaymentRecord.getBankOrderNo(), rpTradePaymentOrder.getProductName(), rpTradePaymentRecord.getOrderAmount(), rpTradePaymentRecord.getOrderIp(), authCode);
            if (wxResultMap == null || wxResultMap.isEmpty()) {
                //è¿”å›žç»“æžœä¸ºç©ºï¼Œæ”¯ä»˜ç»“æžœæœªçŸ¥éœ€è¦?è½®è¯¢
                rpNotifyService.orderSend(rpTradePaymentRecord.getBankOrderNo());
            } else {
                if ("YES".equals(wxResultMap.get("verify"))) {
                    //éªŒç­¾æˆ?åŠŸ
                    if ("SUCCESS".equals(wxResultMap.get("return_code")) && "SUCCESS".equals(wxResultMap.get("result_code"))) {
                        //é€šè®¯æˆ?åŠŸä¸”ä¸šåŠ¡ç»“æžœä¸ºæˆ?åŠŸ
                        completeSuccessOrder(rpTradePaymentRecord, String.valueOf(wxResultMap.get("transaction_id")), new Date(), "æ”¯ä»˜æˆ?åŠŸ");
                    } else if ("SUCCESS".equals(wxResultMap.get("return_code")) && !StringUtil.isEmpty(wxResultMap.get("err_code")) && !"BANKERROR".equals(wxResultMap.get("err_code")) && !"USERPAYING".equals(wxResultMap.get("err_code")) && !"SYSTEMERROR".equals(wxResultMap.get("err_code"))) {
                        //æ”¯ä»˜å¤±è´¥
                        completeFailOrder(rpTradePaymentRecord, String.valueOf(wxResultMap.get("err_code_des")));
                    } else {
                        //è¿”å›žç»“æžœæœªçŸ¥ï¼Œéœ€è¦?è½®è¯¢
                        rpNotifyService.orderSend(rpTradePaymentRecord.getBankOrderNo());
                    }
                } else {
                    completeFailOrder(rpTradePaymentRecord, "ç­¾å??æ ¡éªŒå¤±è´¥!");
                    //éªŒç­¾å¤±è´¥
                }
            }

        } else if (PayWayEnum.ALIPAY.name().equals(payWayCode)) {// æ”¯ä»˜å®?æ”¯ä»˜
            RpUserPayInfo rpUserPayInfo = rpUserPayInfoService.getByUserNo(rpTradePaymentOrder.getMerchantNo(), payWayCode);
            if (rpUserPayInfo == null) {
                throw new UserBizException(UserBizException.USER_PAY_CONFIG_ERRPR, "å•†æˆ·æ”¯ä»˜é…?ç½®æœ‰è¯¯");
            }
            Map<String, Object> resultMap = AliPayUtil.tradePay(rpTradePaymentRecord.getBankOrderNo(), authCode, rpTradePaymentOrder.getProductName(), rpTradePaymentRecord.getOrderAmount(), "", roncooPayGoodsDetailses);
            //æ”¯ä»˜æ?¡ç ?æ”¯ä»˜--ç»Ÿä¸€æ ¹æ?®è®¢å?•è½®è¯¢åŽ»ç¡®è®¤æ”¯ä»˜ç»“æžœ
            rpNotifyService.orderSend(rpTradePaymentRecord.getBankOrderNo());
        } else {
            throw new TradeBizException(TradeBizException.TRADE_PAY_WAY_ERROR, "é”™è¯¯çš„æ”¯ä»˜æ–¹å¼?");
        }

        Map<String, Object> paramMap = new HashMap<String, Object>();
        f2FPayResultVo.setStatus(rpTradePaymentRecord.getStatus());// æ”¯ä»˜ç»“æžœ
        paramMap.put("status", rpTradePaymentRecord.getStatus());

        f2FPayResultVo.setField1(rpTradePaymentRecord.getField1());// æ‰©å±•å­—æ®µ1
        paramMap.put("field1", rpTradePaymentRecord.getField1());

        f2FPayResultVo.setField2(rpTradePaymentRecord.getField2());// æ‰©å±•å­—æ®µ2
        paramMap.put("field2", rpTradePaymentRecord.getField2());

        f2FPayResultVo.setField3(rpTradePaymentRecord.getField3());// æ‰©å±•å­—æ®µ3
        paramMap.put("field3", rpTradePaymentRecord.getField3());

        f2FPayResultVo.setField4(rpTradePaymentRecord.getField4());// æ‰©å±•å­—æ®µ4
        paramMap.put("field4", rpTradePaymentRecord.getField4());

        f2FPayResultVo.setField5(rpTradePaymentRecord.getField5());// æ‰©å±•å­—æ®µ5
        paramMap.put("field5", rpTradePaymentRecord.getField5());

        f2FPayResultVo.setOrderIp(rpTradePaymentRecord.getOrderIp());// ä¸‹å?•ip
        paramMap.put("orderIp", rpTradePaymentRecord.getOrderIp());

        f2FPayResultVo.setOrderNo(rpTradePaymentRecord.getMerchantOrderNo());// å•†æˆ·è®¢å?•å?·
        paramMap.put("merchantOrderNo", rpTradePaymentRecord.getMerchantOrderNo());

        f2FPayResultVo.setPayKey(payKey);// æ”¯ä»˜å?·
        paramMap.put("payKey", payKey);

        f2FPayResultVo.setProductName(rpTradePaymentRecord.getProductName());// äº§å“?å??ç§°
        paramMap.put("productName", rpTradePaymentRecord.getProductName());

        f2FPayResultVo.setRemark(rpTradePaymentRecord.getRemark());// æ”¯ä»˜å¤‡æ³¨
        paramMap.put("remark", rpTradePaymentRecord.getRemark());

        f2FPayResultVo.setTrxNo(rpTradePaymentRecord.getTrxNo());// äº¤æ˜“æµ?æ°´å?·
        paramMap.put("trxNo", rpTradePaymentRecord.getTrxNo());

        String sign = MerchantApiUtil.getSign(paramMap, merchantPaySecret);

        f2FPayResultVo.setSign(sign);
        return f2FPayResultVo;
    }

    /**
     * æ”¯ä»˜æˆ?åŠŸæ–¹æ³•
     *
     * @param rpTradePaymentRecord
     */
    @Transactional(rollbackFor = Exception.class)
    void completeSuccessOrder(RpTradePaymentRecord rpTradePaymentRecord, String bankTrxNo, Date timeEnd, String bankReturnMsg) {
        LOG.info("è®¢å?•æ”¯ä»˜æˆ?åŠŸ!");
        rpTradePaymentRecord.setPaySuccessTime(timeEnd);
        rpTradePaymentRecord.setBankTrxNo(bankTrxNo);// è®¾ç½®é“¶è¡Œæµ?æ°´å?·
        rpTradePaymentRecord.setBankReturnMsg(bankReturnMsg);
        rpTradePaymentRecord.setStatus(TradeStatusEnum.SUCCESS.name());
        rpTradePaymentRecordDao.update(rpTradePaymentRecord);

        RpTradePaymentOrder rpTradePaymentOrder = rpTradePaymentOrderDao.selectByMerchantNoAndMerchantOrderNo(rpTradePaymentRecord.getMerchantNo(), rpTradePaymentRecord.getMerchantOrderNo());
        rpTradePaymentOrder.setStatus(TradeStatusEnum.SUCCESS.name());
        rpTradePaymentOrder.setTrxNo(rpTradePaymentRecord.getTrxNo());// è®¾ç½®æ”¯ä»˜å¹³å?°æ”¯ä»˜æµ?æ°´å?·
        rpTradePaymentOrderDao.update(rpTradePaymentOrder);

        if (FundInfoTypeEnum.PLAT_RECEIVES.name().equals(rpTradePaymentRecord.getFundIntoType())) {
            rpAccountTransactionService.creditToAccount(rpTradePaymentRecord.getMerchantNo(), rpTradePaymentRecord.getOrderAmount().subtract(rpTradePaymentRecord.getPlatIncome()), rpTradePaymentRecord.getBankOrderNo(), rpTradePaymentRecord.getBankTrxNo(), rpTradePaymentRecord.getTrxType(), rpTradePaymentRecord.getRemark());
        }

        if (PayTypeEnum.F2F_PAY.name().equals(rpTradePaymentOrder.getPayTypeCode())) {// æ”¯ä»˜å®?
            // æ?¡ç ?æ”¯ä»˜å®žæ—¶è¿”å›žæ”¯ä»˜ç»“æžœ,ä¸?éœ€è¦?å•†æˆ·é€šçŸ¥ï¼ˆä¿®æ”¹å?Žï¼Œæ?¡ç ?æ”¯ä»˜ç»“æžœé€šè¿‡è®¢å?•è½®è¯¢åŽ»ç¡®è®¤è®¢å?•çŠ¶æ€?ï¼Œæˆ?åŠŸå?Žé€šçŸ¥å•†æˆ·ï¼‰
            String notifyUrl = getMerchantNotifyUrl(rpTradePaymentRecord, rpTradePaymentOrder, rpTradePaymentRecord.getNotifyUrl(), TradeStatusEnum.SUCCESS);
            rpNotifyService.notifySend(notifyUrl, rpTradePaymentRecord.getMerchantOrderNo(), rpTradePaymentRecord.getMerchantNo());
            //return;
        } else {
            String notifyUrl = getMerchantNotifyUrl(rpTradePaymentRecord, rpTradePaymentOrder, rpTradePaymentRecord.getNotifyUrl(), TradeStatusEnum.SUCCESS);
            rpNotifyService.notifySend(notifyUrl, rpTradePaymentRecord.getMerchantOrderNo(), rpTradePaymentRecord.getMerchantNo());
        }
    }

    private String getMerchantNotifyUrl(RpTradePaymentRecord rpTradePaymentRecord, RpTradePaymentOrder rpTradePaymentOrder, String sourceUrl, TradeStatusEnum tradeStatusEnum) {

        RpUserPayConfig rpUserPayConfig = rpUserPayConfigService.getByUserNo(rpTradePaymentRecord.getMerchantNo());
        if (rpUserPayConfig == null) {
            throw new UserBizException(UserBizException.USER_PAY_CONFIG_ERRPR, "ç”¨æˆ·æ”¯ä»˜é…?ç½®æœ‰è¯¯");
        }

        Map<String, Object> paramMap = new HashMap<>();

        String payKey = rpUserPayConfig.getPayKey();// ä¼?ä¸šæ”¯ä»˜KEY
        paramMap.put("payKey", payKey);
        String productName = rpTradePaymentRecord.getProductName(); // å•†å“?å??ç§°
        paramMap.put("productName", productName);
        String orderNo = rpTradePaymentRecord.getMerchantOrderNo(); // è®¢å?•ç¼–å?·
        paramMap.put("orderNo", orderNo);
        BigDecimal orderPrice = rpTradePaymentRecord.getOrderAmount(); // è®¢å?•é‡‘é¢? ,
        // å?•ä½?:å…ƒ
        paramMap.put("orderPrice", orderPrice);
        String payWayCode = rpTradePaymentRecord.getPayWayCode(); // æ”¯ä»˜æ–¹å¼?ç¼–ç ? æ”¯ä»˜å®?:
        // ALIPAY
        // å¾®ä¿¡:WEIXIN
        paramMap.put("payWayCode", payWayCode);
        paramMap.put("tradeStatus", tradeStatusEnum);// äº¤æ˜“çŠ¶æ€?
        String orderDateStr = DateUtils.formatDate(rpTradePaymentOrder.getOrderDate(), "yyyyMMdd"); // è®¢å?•æ—¥æœŸ
        paramMap.put("orderDate", orderDateStr);
        String orderTimeStr = DateUtils.formatDate(rpTradePaymentOrder.getOrderTime(), "yyyyMMddHHmmss"); // è®¢å?•æ—¶é—´
        paramMap.put("orderTime", orderTimeStr);
        String remark = rpTradePaymentRecord.getRemark(); // æ”¯ä»˜å¤‡æ³¨
        paramMap.put("remark", remark);
        String trxNo = rpTradePaymentRecord.getTrxNo();// æ”¯ä»˜æµ?æ°´å?·
        paramMap.put("trxNo", trxNo);

        String field1 = rpTradePaymentOrder.getField1(); // æ‰©å±•å­—æ®µ1
        paramMap.put("field1", field1);
        String field2 = rpTradePaymentOrder.getField2(); // æ‰©å±•å­—æ®µ2
        paramMap.put("field2", field2);
        String field3 = rpTradePaymentOrder.getField3(); // æ‰©å±•å­—æ®µ3
        paramMap.put("field3", field3);
        String field4 = rpTradePaymentOrder.getField4(); // æ‰©å±•å­—æ®µ4
        paramMap.put("field4", field4);
        String field5 = rpTradePaymentOrder.getField5(); // æ‰©å±•å­—æ®µ5
        paramMap.put("field5", field5);

        String paramStr = MerchantApiUtil.getParamStr(paramMap);
        String sign = MerchantApiUtil.getSign(paramMap, rpUserPayConfig.getPaySecret());
        String notifyUrl = sourceUrl + "?" + paramStr + "&sign=" + sign;

        return notifyUrl;
    }

    /**
     * æ”¯ä»˜å¤±è´¥æ–¹æ³•
     *
     * @param rpTradePaymentRecord
     */
    private void completeFailOrder(RpTradePaymentRecord rpTradePaymentRecord, String bankReturnMsg) {
        rpTradePaymentRecord.setBankReturnMsg(bankReturnMsg);
        rpTradePaymentRecord.setStatus(TradeStatusEnum.FAILED.name());
        rpTradePaymentRecordDao.update(rpTradePaymentRecord);

        RpTradePaymentOrder rpTradePaymentOrder = rpTradePaymentOrderDao.selectByMerchantNoAndMerchantOrderNo(rpTradePaymentRecord.getMerchantNo(), rpTradePaymentRecord.getMerchantOrderNo());
        rpTradePaymentOrder.setStatus(TradeStatusEnum.FAILED.name());
        rpTradePaymentOrderDao.update(rpTradePaymentOrder);

        String notifyUrl = getMerchantNotifyUrl(rpTradePaymentRecord, rpTradePaymentOrder, rpTradePaymentRecord.getNotifyUrl(), TradeStatusEnum.FAILED);
        rpNotifyService.notifySend(notifyUrl, rpTradePaymentRecord.getMerchantOrderNo(), rpTradePaymentRecord.getMerchantNo());
    }

    /**
     * åˆ?å§‹åŒ–é?žç›´è¿žæ‰«ç ?æ”¯ä»˜æ•°æ?®,é?žç›´è¿žæ‰«ç ?æ”¯ä»˜åˆ?å§‹åŒ–æ–¹æ³•è§„åˆ™ 1:æ ¹æ?®(å•†æˆ·ç¼–å?· + å•†æˆ·è®¢å?•å?·)ç¡®å®šè®¢å?•æ˜¯å?¦å­˜åœ¨
     * 1.1:å¦‚æžœè®¢å?•å­˜åœ¨ä¸”ä¸ºæœªæ”¯ä»˜,æŠ›å¼‚å¸¸æ??ç¤ºè®¢å?•å·²å­˜åœ¨ 1.2:å¦‚æžœè®¢å?•ä¸?å­˜åœ¨,åˆ›å»ºæ”¯ä»˜è®¢å?• 2:èŽ·å?–å•†æˆ·æ”¯ä»˜é…?ç½®,è·³è½¬åˆ°æ”¯ä»˜ç½‘å…³,é€‰æ‹©æ”¯ä»˜æ–¹å¼?
     *
     * @param payKey      å•†æˆ·æ”¯ä»˜KEY
     * @param productName äº§å“?å??ç§°
     * @param orderNo     å•†æˆ·è®¢å?•å?·
     * @param orderDate   ä¸‹å?•æ—¥æœŸ
     * @param orderTime   ä¸‹å?•æ—¶é—´
     * @param orderPrice  è®¢å?•é‡‘é¢?(å…ƒ)
     * @param orderIp     ä¸‹å?•IP
     * @param orderPeriod è®¢å?•æœ‰æ•ˆæœŸ(åˆ†é’Ÿ)
     * @param returnUrl   æ”¯ä»˜ç»“æžœé¡µé?¢é€šçŸ¥åœ°å?€
     * @param notifyUrl   æ”¯ä»˜ç»“æžœå?Žå?°é€šçŸ¥åœ°å?€
     * @param remark      æ”¯ä»˜å¤‡æ³¨
     * @param field1      æ‰©å±•å­—æ®µ1
     * @param field2      æ‰©å±•å­—æ®µ2
     * @param field3      æ‰©å±•å­—æ®µ3
     * @param field4      æ‰©å±•å­—æ®µ4
     * @param field5      æ‰©å±•å­—æ®µ5
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public RpPayGateWayPageShowVo initNonDirectScanPay(String payKey, String productName, String orderNo, Date orderDate, Date orderTime, BigDecimal orderPrice, String orderIp, Integer orderPeriod, String returnUrl, String notifyUrl, String remark, String field1, String field2, String field3, String field4, String field5) {

        RpUserPayConfig rpUserPayConfig = rpUserPayConfigService.getByPayKey(payKey);
        if (rpUserPayConfig == null) {
            throw new UserBizException(UserBizException.USER_PAY_CONFIG_ERRPR, "ç”¨æˆ·æ”¯ä»˜é…?ç½®æœ‰è¯¯");
        }

        String merchantNo = rpUserPayConfig.getUserNo();// å•†æˆ·ç¼–å?·
        RpUserInfo rpUserInfo = rpUserInfoService.getDataByMerchentNo(merchantNo);
        if (rpUserInfo == null) {
            throw new UserBizException(UserBizException.USER_IS_NULL, "ç”¨æˆ·ä¸?å­˜åœ¨");
        }

        List<RpPayWay> payWayList = rpPayWayService.listByProductCode(rpUserPayConfig.getProductCode());
        if (payWayList == null || payWayList.size() <= 0) {
            throw new UserBizException(UserBizException.USER_PAY_CONFIG_ERRPR, "æ”¯ä»˜äº§å“?é…?ç½®æœ‰è¯¯");
        }

        RpTradePaymentOrder rpTradePaymentOrder = rpTradePaymentOrderDao.selectByMerchantNoAndMerchantOrderNo(merchantNo, orderNo);
        if (rpTradePaymentOrder == null) {
            rpTradePaymentOrder = sealRpTradePaymentOrder(merchantNo, rpUserInfo.getUserName(), productName, orderNo, orderDate, orderTime, orderPrice, null, null, null, rpUserPayConfig.getFundIntoType(), orderIp, orderPeriod, returnUrl, notifyUrl, remark, field1, field2, field3, field4, field5);
            rpTradePaymentOrderDao.insert(rpTradePaymentOrder);
        } else {

            if (TradeStatusEnum.SUCCESS.name().equals(rpTradePaymentOrder.getStatus())) {
                throw new TradeBizException(TradeBizException.TRADE_ORDER_ERROR, "è®¢å?•å·²æ”¯ä»˜æˆ?åŠŸ,æ— éœ€é‡?å¤?æ”¯ä»˜");
            }

            if (rpTradePaymentOrder.getOrderAmount().compareTo(orderPrice) != 0) {
                rpTradePaymentOrder.setOrderAmount(orderPrice);// å¦‚æžœé‡‘é¢?ä¸?ä¸€è‡´,ä¿®æ”¹é‡‘é¢?ä¸ºæœ€æ–°çš„é‡‘é¢?
                rpTradePaymentOrderDao.update(rpTradePaymentOrder);
            }
        }

        RpPayGateWayPageShowVo payGateWayPageShowVo = new RpPayGateWayPageShowVo();
        payGateWayPageShowVo.setProductName(rpTradePaymentOrder.getProductName());// äº§å“?å??ç§°
        payGateWayPageShowVo.setMerchantName(rpTradePaymentOrder.getMerchantName());// å•†æˆ·å??ç§°
        payGateWayPageShowVo.setOrderAmount(rpTradePaymentOrder.getOrderAmount());// è®¢å?•é‡‘é¢?
        payGateWayPageShowVo.setMerchantOrderNo(rpTradePaymentOrder.getMerchantOrderNo());// å•†æˆ·è®¢å?•å?·
        payGateWayPageShowVo.setPayKey(payKey);// å•†æˆ·æ”¯ä»˜key

        Map<String, PayWayEnum> payWayEnumMap = new HashMap<String, PayWayEnum>();
        for (RpPayWay payWay : payWayList) {
            payWayEnumMap.put(payWay.getPayWayCode(), PayWayEnum.getEnum(payWay.getPayWayCode()));
        }

        payGateWayPageShowVo.setPayWayEnumMap(payWayEnumMap);

        return payGateWayPageShowVo;

    }

    /**
     * é?žç›´è¿žæ‰«ç ?æ”¯ä»˜,é€‰æ‹©æ”¯ä»˜æ–¹å¼?å?Ž,åŽ»æ”¯ä»˜
     *
     * @param payKey
     * @param orderNo
     * @param payWayCode
     * @return
     */
    @Override
    public ScanPayResultVo toNonDirectScanPay(String payKey, String orderNo, String payWayCode) {

        RpUserPayConfig rpUserPayConfig = rpUserPayConfigService.getByPayKey(payKey);
        if (rpUserPayConfig == null) {
            throw new UserBizException(UserBizException.USER_PAY_CONFIG_ERRPR, "ç”¨æˆ·æ”¯ä»˜é…?ç½®æœ‰è¯¯");
        }

        // æ ¹æ?®æ”¯ä»˜äº§å“?å?Šæ”¯ä»˜æ–¹å¼?èŽ·å?–è´¹çŽ‡
        RpPayWay payWay = null;
        if (PayWayEnum.WEIXIN.name().equals(payWayCode)) {
            payWay = rpPayWayService.getByPayWayTypeCode(rpUserPayConfig.getProductCode(), payWayCode, PayTypeEnum.SCANPAY.name());
        } else if (PayWayEnum.ALIPAY.name().equals(payWayCode)) {
            payWay = rpPayWayService.getByPayWayTypeCode(rpUserPayConfig.getProductCode(), payWayCode, PayTypeEnum.DIRECT_PAY.name());
        }

        if (payWay == null) {
            throw new UserBizException(UserBizException.USER_PAY_CONFIG_ERRPR, "ç”¨æˆ·æ”¯ä»˜é…?ç½®æœ‰è¯¯");
        }

        String merchantNo = rpUserPayConfig.getUserNo();// å•†æˆ·ç¼–å?·
        RpUserInfo rpUserInfo = rpUserInfoService.getDataByMerchentNo(merchantNo);
        if (rpUserInfo == null) {
            throw new UserBizException(UserBizException.USER_IS_NULL, "ç”¨æˆ·ä¸?å­˜åœ¨");
        }

        // æ ¹æ?®å•†æˆ·è®¢å?•å?·èŽ·å?–è®¢å?•ä¿¡æ?¯
        RpTradePaymentOrder rpTradePaymentOrder = rpTradePaymentOrderDao.selectByMerchantNoAndMerchantOrderNo(merchantNo, orderNo);
        if (rpTradePaymentOrder == null) {
            throw new TradeBizException(TradeBizException.TRADE_ORDER_ERROR, "è®¢å?•ä¸?å­˜åœ¨");
        }

        if (TradeStatusEnum.SUCCESS.name().equals(rpTradePaymentOrder.getStatus())) {
            throw new TradeBizException(TradeBizException.TRADE_ORDER_ERROR, "è®¢å?•å·²æ”¯ä»˜æˆ?åŠŸ,æ— éœ€é‡?å¤?æ”¯ä»˜");
        }

        return getScanPayResultVo(rpTradePaymentOrder, payWay);

    }

    /**
     * é€šè¿‡æ”¯ä»˜è®¢å?•å?Šå•†æˆ·è´¹çŽ‡ç”Ÿæˆ?æ”¯ä»˜è®°å½•
     *
     * @param rpTradePaymentOrder æ”¯ä»˜è®¢å?•
     * @param payWay              å•†æˆ·æ”¯ä»˜é…?ç½®
     * @return
     */
    private ScanPayResultVo getScanPayResultVo(RpTradePaymentOrder rpTradePaymentOrder, RpPayWay payWay) {

        ScanPayResultVo scanPayResultVo = new ScanPayResultVo();
        String payWayCode = payWay.getPayWayCode();// æ”¯ä»˜æ–¹å¼?

        PayTypeEnum payType = null;
        if (PayWayEnum.WEIXIN.name().equals(payWay.getPayWayCode())) {
            payType = PayTypeEnum.SCANPAY;
        } else if (PayWayEnum.ALIPAY.name().equals(payWay.getPayWayCode())) {
            payType = PayTypeEnum.DIRECT_PAY;
        }

        rpTradePaymentOrder.setPayTypeCode(payType.name());
        rpTradePaymentOrder.setPayTypeName(payType.getDesc());
        rpTradePaymentOrder.setPayWayCode(payWay.getPayWayCode());
        rpTradePaymentOrder.setPayWayName(payWay.getPayWayName());
        rpTradePaymentOrderDao.update(rpTradePaymentOrder);

        RpTradePaymentRecord rpTradePaymentRecord = sealRpTradePaymentRecord(rpTradePaymentOrder.getMerchantNo(), rpTradePaymentOrder.getMerchantName(), rpTradePaymentOrder.getProductName(), rpTradePaymentOrder.getMerchantOrderNo(), rpTradePaymentOrder.getOrderAmount(), payWay.getPayWayCode(), payWay.getPayWayName(), payType, rpTradePaymentOrder.getFundIntoType(), BigDecimal.valueOf(payWay.getPayRate()), rpTradePaymentOrder.getOrderIp(), rpTradePaymentOrder.getReturnUrl(), rpTradePaymentOrder.getNotifyUrl(), rpTradePaymentOrder.getRemark(), rpTradePaymentOrder.getField1(), rpTradePaymentOrder.getField2(), rpTradePaymentOrder.getField3(), rpTradePaymentOrder.getField4(), rpTradePaymentOrder.getField5());
        rpTradePaymentRecordDao.insert(rpTradePaymentRecord);

        if (PayWayEnum.WEIXIN.name().equals(payWayCode)) {// å¾®ä¿¡æ”¯ä»˜
            String appid = "";
            String mch_id = "";
            String partnerKey = "";
            if (FundInfoTypeEnum.MERCHANT_RECEIVES.name().equals(rpTradePaymentOrder.getFundIntoType())) {// å•†æˆ·æ”¶æ¬¾
                // æ ¹æ?®èµ„é‡‘æµ?å?‘èŽ·å?–é…?ç½®ä¿¡æ?¯
                RpUserPayInfo rpUserPayInfo = rpUserPayInfoService.getByUserNo(rpTradePaymentOrder.getMerchantNo(), payWayCode);
                appid = rpUserPayInfo.getAppId();
                mch_id = rpUserPayInfo.getMerchantId();
                partnerKey = rpUserPayInfo.getPartnerKey();
            } else if (FundInfoTypeEnum.PLAT_RECEIVES.name().equals(rpTradePaymentOrder.getFundIntoType())) {// å¹³å?°æ”¶æ¬¾
                appid = WeixinConfigUtil.readConfig("appId");
                mch_id = WeixinConfigUtil.readConfig("mch_id");
                partnerKey = WeixinConfigUtil.readConfig("partnerKey");
            }

            WeiXinPrePay weiXinPrePay = sealWeixinPerPay(appid, mch_id, rpTradePaymentOrder.getProductName(), rpTradePaymentOrder.getRemark(), rpTradePaymentRecord.getBankOrderNo(), rpTradePaymentOrder.getOrderAmount(), rpTradePaymentOrder.getOrderTime(), rpTradePaymentOrder.getOrderPeriod(), WeiXinTradeTypeEnum.NATIVE, rpTradePaymentRecord.getBankOrderNo(), "", rpTradePaymentOrder.getOrderIp());
            String prePayXml = WeiXinPayUtils.getPrePayXml(weiXinPrePay, partnerKey);
            LOG.info("æ‰«ç ?æ”¯ä»˜ï¼Œå¾®ä¿¡è¯·æ±‚æŠ¥æ–‡:{}", prePayXml);
            // è°ƒç”¨å¾®ä¿¡æ”¯ä»˜çš„åŠŸèƒ½,èŽ·å?–å¾®ä¿¡æ”¯ä»˜code_url
            Map<String, Object> prePayRequest = WeiXinPayUtils.httpXmlRequest(WeixinConfigUtil.readConfig("prepay_url"), "POST", prePayXml);
            LOG.info("æ‰«ç ?æ”¯ä»˜ï¼Œå¾®ä¿¡è¿”å›žæŠ¥æ–‡:{}", prePayRequest.toString());
            if (WeixinTradeStateEnum.SUCCESS.name().equals(prePayRequest.get("return_code")) && WeixinTradeStateEnum.SUCCESS.name().equals(prePayRequest.get("result_code"))) {
                String weiXinPrePaySign = WeiXinPayUtils.geWeiXintPrePaySign(appid, mch_id, weiXinPrePay.getDeviceInfo(), WeiXinTradeTypeEnum.NATIVE.name(), prePayRequest, partnerKey);
                String codeUrl = String.valueOf(prePayRequest.get("code_url"));
                LOG.info("é¢„æ”¯ä»˜ç”Ÿæˆ?æˆ?åŠŸ,{}", codeUrl);
                if (prePayRequest.get("sign").equals(weiXinPrePaySign)) {
                    rpTradePaymentRecord.setBankReturnMsg(prePayRequest.toString());
                    rpTradePaymentRecordDao.update(rpTradePaymentRecord);
                    scanPayResultVo.setCodeUrl(codeUrl);// è®¾ç½®å¾®ä¿¡è·³è½¬åœ°å?€
                    scanPayResultVo.setPayWayCode(PayWayEnum.WEIXIN.name());
                    scanPayResultVo.setProductName(rpTradePaymentOrder.getProductName());
                    scanPayResultVo.setOrderAmount(rpTradePaymentOrder.getOrderAmount());
                } else {
                    throw new TradeBizException(TradeBizException.TRADE_WEIXIN_ERROR, "å¾®ä¿¡è¿”å›žç»“æžœç­¾å??å¼‚å¸¸");
                }
            } else {
                throw new TradeBizException(TradeBizException.TRADE_WEIXIN_ERROR, "è¯·æ±‚å¾®ä¿¡å¼‚å¸¸");
            }
        } else if (PayWayEnum.ALIPAY.name().equals(payWayCode)) {// æ”¯ä»˜å®?æ”¯ä»˜

            // æŠŠè¯·æ±‚å?‚æ•°æ‰“åŒ…æˆ?æ•°ç»„
            Map<String, String> sParaTemp = new HashMap<String, String>();
            sParaTemp.put("service", AlipayConfigUtil.service);
            sParaTemp.put("partner", AlipayConfigUtil.partner);
            sParaTemp.put("seller_id", AlipayConfigUtil.seller_id);
            sParaTemp.put("_input_charset", AlipayConfigUtil.input_charset);
            sParaTemp.put("payment_type", AlipayConfigUtil.payment_type);
            sParaTemp.put("notify_url", AlipayConfigUtil.notify_url);
            sParaTemp.put("return_url", AlipayConfigUtil.return_url);
            sParaTemp.put("anti_phishing_key", AlipayConfigUtil.anti_phishing_key);
            sParaTemp.put("exter_invoke_ip", AlipayConfigUtil.exter_invoke_ip);
            sParaTemp.put("out_trade_no", rpTradePaymentRecord.getBankOrderNo());
            sParaTemp.put("subject", rpTradePaymentOrder.getProductName());
            sParaTemp.put("total_fee", String.valueOf(rpTradePaymentOrder.getOrderAmount().setScale(2, BigDecimal.ROUND_HALF_UP)));// å°?æ•°ç‚¹å?Žä¸¤ä½?
            sParaTemp.put("body", "");
            LOG.info("æ‰«ç ?æ”¯ä»˜ï¼Œæ”¯ä»˜å®?è¯·æ±‚å?‚æ•°:{}", sParaTemp);

            // èŽ·å?–è¯·æ±‚é¡µé?¢æ•°æ?®
            String sHtmlText = AlipaySubmit.buildRequest(sParaTemp, "get", "ç¡®è®¤");
            LOG.info("æ‰«ç ?æ”¯ä»˜ï¼Œæ”¯ä»˜å®?è¿”å›žæŠ¥æ–‡:{}", sHtmlText);

            rpTradePaymentRecord.setBankReturnMsg(sHtmlText);
            rpTradePaymentRecordDao.update(rpTradePaymentRecord);
            scanPayResultVo.setCodeUrl(sHtmlText);// è®¾ç½®æ”¯ä»˜å®?è·³è½¬åœ°å?€
            scanPayResultVo.setPayWayCode(PayWayEnum.ALIPAY.name());
            scanPayResultVo.setProductName(rpTradePaymentOrder.getProductName());
            scanPayResultVo.setOrderAmount(rpTradePaymentOrder.getOrderAmount());

        } else {
            throw new TradeBizException(TradeBizException.TRADE_PAY_WAY_ERROR, "é”™è¯¯çš„æ”¯ä»˜æ–¹å¼?");
        }
        rpNotifyService.orderSend(rpTradePaymentRecord.getBankOrderNo());
        return scanPayResultVo;
    }

    /**
     * å®Œæˆ?æ‰«ç ?æ”¯ä»˜(æ”¯ä»˜å®?å?³æ—¶åˆ°è´¦æ”¯ä»˜)
     *
     * @param payWayCode
     * @param notifyMap
     * @return
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public String completeScanPay(String payWayCode, Map<String, String> notifyMap) {
        LOG.info("æŽ¥æ”¶åˆ°{}æ”¯ä»˜ç»“æžœ{}", payWayCode, notifyMap);

        String returnStr = null;
        String bankOrderNo = notifyMap.get("out_trade_no");
        // æ ¹æ?®é“¶è¡Œè®¢å?•å?·èŽ·å?–æ”¯ä»˜ä¿¡æ?¯
        RpTradePaymentRecord rpTradePaymentRecord = rpTradePaymentRecordDao.getByBankOrderNo(bankOrderNo);
        if (rpTradePaymentRecord == null) {
            throw new TradeBizException(TradeBizException.TRADE_ORDER_ERROR, ",é?žæ³•è®¢å?•,è®¢å?•ä¸?å­˜åœ¨");
        }

        if (TradeStatusEnum.SUCCESS.name().equals(rpTradePaymentRecord.getStatus())) {
            throw new TradeBizException(TradeBizException.TRADE_ORDER_ERROR, "è®¢å?•ä¸ºæˆ?åŠŸçŠ¶æ€?");
        }
        String merchantNo = rpTradePaymentRecord.getMerchantNo();// å•†æˆ·ç¼–å?·

        // æ ¹æ?®æ”¯ä»˜è®¢å?•èŽ·å?–é…?ç½®ä¿¡æ?¯
        String fundIntoType = rpTradePaymentRecord.getFundIntoType();// èŽ·å?–èµ„é‡‘æµ?å…¥ç±»åž‹
        String partnerKey = "";

        if (FundInfoTypeEnum.MERCHANT_RECEIVES.name().equals(fundIntoType)) {// å•†æˆ·æ”¶æ¬¾
            // æ ¹æ?®èµ„é‡‘æµ?å?‘èŽ·å?–é…?ç½®ä¿¡æ?¯
            RpUserPayInfo rpUserPayInfo = rpUserPayInfoService.getByUserNo(merchantNo, PayWayEnum.WEIXIN.name());
            partnerKey = rpUserPayInfo.getPartnerKey();

        } else if (FundInfoTypeEnum.PLAT_RECEIVES.name().equals(fundIntoType)) {// å¹³å?°æ”¶æ¬¾
            partnerKey = WeixinConfigUtil.readConfig("partnerKey");

            RpUserPayConfig rpUserPayConfig = rpUserPayConfigService.getByUserNo(merchantNo);
            if (rpUserPayConfig == null) {
                throw new UserBizException(UserBizException.USER_PAY_CONFIG_ERRPR, "ç”¨æˆ·æ”¯ä»˜é…?ç½®æœ‰è¯¯");
            }
            // æ ¹æ?®æ”¯ä»˜äº§å“?å?Šæ”¯ä»˜æ–¹å¼?èŽ·å?–è´¹çŽ‡
            RpPayWay payWay = rpPayWayService.getByPayWayTypeCode(rpUserPayConfig.getProductCode(), rpTradePaymentRecord.getPayWayCode(), rpTradePaymentRecord.getPayTypeCode());
            if (payWay == null) {
                throw new UserBizException(UserBizException.USER_PAY_CONFIG_ERRPR, "ç”¨æˆ·æ”¯ä»˜é…?ç½®æœ‰è¯¯");
            }
        }

        if (PayWayEnum.WEIXIN.name().equals(payWayCode)) {
            String sign = notifyMap.remove("sign");
            if (WeiXinPayUtils.notifySign(notifyMap, sign, partnerKey)) {// æ ¹æ?®é…?ç½®ä¿¡æ?¯éªŒè¯?ç­¾å??
                if (WeixinTradeStateEnum.SUCCESS.name().equals(notifyMap.get("result_code"))) {// ä¸šåŠ¡ç»“æžœ
                    // æˆ?åŠŸ
                    String timeEndStr = notifyMap.get("time_end");
                    Date timeEnd = null;
                    if (!StringUtil.isEmpty(timeEndStr)) {
                        timeEnd = DateUtils.getDateFromString(timeEndStr, "yyyyMMddHHmmss");// è®¢å?•æ”¯ä»˜å®Œæˆ?æ—¶é—´
                    }
                    completeSuccessOrder(rpTradePaymentRecord, notifyMap.get("transaction_id"), timeEnd, notifyMap.toString());
                    returnStr = "<xml>\n" + "  <return_code><![CDATA[SUCCESS]]></return_code>\n" + "  <return_msg><![CDATA[OK]]></return_msg>\n" + "</xml>";
                } else {
                    completeFailOrder(rpTradePaymentRecord, notifyMap.toString());
                }
            } else {
                throw new TradeBizException(TradeBizException.TRADE_WEIXIN_ERROR, "å¾®ä¿¡ç­¾å??å¤±è´¥");
            }

        } else if ("WEIXIN_PROGRAM".equals(payWayCode)) {

            String sign = notifyMap.remove("sign");
            if (WeiXinPayUtils.notifySign(notifyMap, sign, WeixinConfigUtil.xPayKey)) {// æ ¹æ?®é…?ç½®ä¿¡æ?¯éªŒè¯?ç­¾å??
                if (WeixinTradeStateEnum.SUCCESS.name().equals(notifyMap.get("result_code"))) {// ä¸šåŠ¡ç»“æžœ
                    // æˆ?åŠŸ
                    String timeEndStr = notifyMap.get("time_end");
                    Date timeEnd = null;
                    if (!StringUtil.isEmpty(timeEndStr)) {
                        timeEnd = DateUtils.getDateFromString(timeEndStr, "yyyyMMddHHmmss");// è®¢å?•æ”¯ä»˜å®Œæˆ?æ—¶é—´
                    }
                    completeSuccessOrder(rpTradePaymentRecord, notifyMap.get("transaction_id"), timeEnd, notifyMap.toString());
                    returnStr = "<xml>\n" + "  <return_code><![CDATA[SUCCESS]]></return_code>\n" + "  <return_msg><![CDATA[OK]]></return_msg>\n" + "</xml>";
                } else {
                    completeFailOrder(rpTradePaymentRecord, notifyMap.toString());
                }
            } else {
                throw new TradeBizException(TradeBizException.TRADE_WEIXIN_ERROR, "å¾®ä¿¡ç­¾å??å¤±è´¥");
            }


        } else if (PayWayEnum.ALIPAY.name().equals(payWayCode)) {
            if (AlipayNotify.verify(notifyMap)) {// éªŒè¯?æˆ?åŠŸ
                String tradeStatus = notifyMap.get("trade_status");
                if (AliPayTradeStateEnum.TRADE_FINISHED.name().equals(tradeStatus)) {
                    // åˆ¤æ–­è¯¥ç¬”è®¢å?•æ˜¯å?¦åœ¨å•†æˆ·ç½‘ç«™ä¸­å·²ç»?å?šè¿‡å¤„ç?†
                    // å¦‚æžœæ²¡æœ‰å?šè¿‡å¤„ç?†ï¼Œæ ¹æ?®è®¢å?•å?·ï¼ˆout_trade_noï¼‰åœ¨å•†æˆ·ç½‘ç«™çš„è®¢å?•ç³»ç»Ÿä¸­æŸ¥åˆ°è¯¥ç¬”è®¢å?•çš„è¯¦ç»†ï¼Œå¹¶æ‰§è¡Œå•†æˆ·çš„ä¸šåŠ¡ç¨‹åº?
                    // è¯·åŠ¡å¿…åˆ¤æ–­è¯·æ±‚æ—¶çš„total_feeã€?seller_idä¸Žé€šçŸ¥æ—¶èŽ·å?–çš„total_feeã€?seller_idä¸ºä¸€è‡´çš„
                    // å¦‚æžœæœ‰å?šè¿‡å¤„ç?†ï¼Œä¸?æ‰§è¡Œå•†æˆ·çš„ä¸šåŠ¡ç¨‹åº?

                    // æ³¨æ„?ï¼š
                    // é€€æ¬¾æ—¥æœŸè¶…è¿‡å?¯é€€æ¬¾æœŸé™?å?Žï¼ˆå¦‚ä¸‰ä¸ªæœˆå?¯é€€æ¬¾ï¼‰ï¼Œæ”¯ä»˜å®?ç³»ç»Ÿå?‘é€?è¯¥äº¤æ˜“çŠ¶æ€?é€šçŸ¥
                } else if (AliPayTradeStateEnum.TRADE_SUCCESS.name().equals(tradeStatus)) {

                    String gmtPaymentStr = notifyMap.get("gmt_payment");// ä»˜æ¬¾æ—¶é—´
                    Date timeEnd = null;
                    if (!StringUtil.isEmpty(gmtPaymentStr)) {
                        timeEnd = DateUtils.getDateFromString(gmtPaymentStr, "yyyy-MM-dd HH:mm:ss");
                    }
                    completeSuccessOrder(rpTradePaymentRecord, notifyMap.get("trade_no"), timeEnd, notifyMap.toString());
                    returnStr = "success";
                } else {
                    completeFailOrder(rpTradePaymentRecord, notifyMap.toString());
                    returnStr = "fail";
                }
            } else {// éªŒè¯?å¤±è´¥
                throw new TradeBizException(TradeBizException.TRADE_ALIPAY_ERROR, "æ”¯ä»˜å®?ç­¾å??å¼‚å¸¸");
            }
        } else {
            throw new TradeBizException(TradeBizException.TRADE_PAY_WAY_ERROR, "é”™è¯¯çš„æ”¯ä»˜æ–¹å¼?");
        }

        LOG.info("è¿”å›žæ”¯ä»˜é€šé?“{}ä¿¡æ?¯{}", payWayCode, returnStr);
        return returnStr;
    }

    /**
     * æ”¯ä»˜æˆ?åŠŸå?Ž,å?ˆæ˜¯ä¼šå‡ºçŽ°é¡µé?¢é€šçŸ¥æ—©ä¸Žå?Žå?°é€šçŸ¥ çŽ°é¡µé?¢é€šçŸ¥,æš‚æ—¶ä¸?å?šæ•°æ?®å¤„ç?†åŠŸèƒ½,å?ªç”Ÿæˆ?é¡µé?¢é€šçŸ¥URL
     *
     * @param payWayCode
     * @param resultMap
     * @return
     */
    @Override
    public OrderPayResultVo completeScanPayByResult(String payWayCode, Map<String, String> resultMap) {

        OrderPayResultVo orderPayResultVo = new OrderPayResultVo();

        String bankOrderNo = resultMap.get("out_trade_no");
        // æ ¹æ?®é“¶è¡Œè®¢å?•å?·èŽ·å?–æ”¯ä»˜ä¿¡æ?¯
        RpTradePaymentRecord rpTradePaymentRecord = rpTradePaymentRecordDao.getByBankOrderNo(bankOrderNo);
        if (rpTradePaymentRecord == null) {
            throw new TradeBizException(TradeBizException.TRADE_ORDER_ERROR, ",é?žæ³•è®¢å?•,è®¢å?•ä¸?å­˜åœ¨");
        }

        orderPayResultVo.setOrderPrice(rpTradePaymentRecord.getOrderAmount());// è®¢å?•é‡‘é¢?
        orderPayResultVo.setProductName(rpTradePaymentRecord.getProductName());// äº§å“?å??ç§°

        RpTradePaymentOrder rpTradePaymentOrder = rpTradePaymentOrderDao.selectByMerchantNoAndMerchantOrderNo(rpTradePaymentRecord.getMerchantNo(), rpTradePaymentRecord.getMerchantOrderNo());

        String trade_status = resultMap.get("trade_status");
        // è®¡ç®—å¾—å‡ºé€šçŸ¥éªŒè¯?ç»“æžœ
        boolean verify_result = AlipayNotify.verify(resultMap);
        if (verify_result) {// éªŒè¯?æˆ?åŠŸ
            if (trade_status.equals("TRADE_FINISHED") || trade_status.equals("TRADE_SUCCESS")) {
                String resultUrl = getMerchantNotifyUrl(rpTradePaymentRecord, rpTradePaymentOrder, rpTradePaymentRecord.getReturnUrl(), TradeStatusEnum.SUCCESS);
                orderPayResultVo.setReturnUrl(resultUrl);
                orderPayResultVo.setStatus(TradeStatusEnum.SUCCESS.name());
            } else {
                String resultUrl = getMerchantNotifyUrl(rpTradePaymentRecord, rpTradePaymentOrder, rpTradePaymentRecord.getReturnUrl(), TradeStatusEnum.FAILED);
                orderPayResultVo.setReturnUrl(resultUrl);
                orderPayResultVo.setStatus(TradeStatusEnum.FAILED.name());
            }
        } else {
            throw new TradeBizException(TradeBizException.TRADE_ALIPAY_ERROR, "æ”¯ä»˜å®?ç­¾å??å¼‚å¸¸");
        }
        return orderPayResultVo;
    }

    /**
     * æ”¯ä»˜è®¢å?•å®žä½“å°?è£…
     *
     * @param merchantNo   å•†æˆ·ç¼–å?·
     * @param merchantName å•†æˆ·å??ç§°
     * @param productName  äº§å“?å??ç§°
     * @param orderNo      å•†æˆ·è®¢å?•å?·
     * @param orderDate    ä¸‹å?•æ—¥æœŸ
     * @param orderTime    ä¸‹å?•æ—¶é—´
     * @param orderPrice   è®¢å?•é‡‘é¢?
     * @param payWay       æ”¯ä»˜æ–¹å¼?
     * @param payWayName   æ”¯ä»˜æ–¹å¼?å??ç§°
     * @param payType      æ”¯ä»˜ç±»åž‹
     * @param fundIntoType èµ„é‡‘æµ?å…¥ç±»åž‹
     * @param orderIp      ä¸‹å?•IP
     * @param orderPeriod  è®¢å?•æœ‰æ•ˆæœŸ
     * @param returnUrl    é¡µé?¢é€šçŸ¥åœ°å?€
     * @param notifyUrl    å?Žå?°é€šçŸ¥åœ°å?€
     * @param remark       æ”¯ä»˜å¤‡æ³¨
     * @param field1       æ‰©å±•å­—æ®µ1
     * @param field2       æ‰©å±•å­—æ®µ2
     * @param field3       æ‰©å±•å­—æ®µ3
     * @param field4       æ‰©å±•å­—æ®µ4
     * @param field5       æ‰©å±•å­—æ®µ5
     * @return
     */
    private RpTradePaymentOrder sealRpTradePaymentOrder(String merchantNo, String merchantName, String productName, String orderNo, Date orderDate, Date orderTime, BigDecimal orderPrice, String payWay, String payWayName, PayTypeEnum payType, String fundIntoType, String orderIp, Integer orderPeriod, String returnUrl, String notifyUrl, String remark, String field1, String field2, String field3, String field4, String field5) {

        RpTradePaymentOrder rpTradePaymentOrder = new RpTradePaymentOrder();
        rpTradePaymentOrder.setProductName(productName);// å•†å“?å??ç§°
        if (StringUtil.isEmpty(orderNo)) {
            throw new TradeBizException(TradeBizException.TRADE_PARAM_ERROR, "è®¢å?•å?·é”™è¯¯");
        }

        rpTradePaymentOrder.setMerchantOrderNo(orderNo);// è®¢å?•å?·

        if (orderPrice == null || orderPrice.doubleValue() <= 0) {
            throw new TradeBizException(TradeBizException.TRADE_PARAM_ERROR, "è®¢å?•é‡‘é¢?é”™è¯¯");
        }

        rpTradePaymentOrder.setOrderAmount(orderPrice);// è®¢å?•é‡‘é¢?

        if (StringUtil.isEmpty(merchantName)) {
            throw new TradeBizException(TradeBizException.TRADE_PARAM_ERROR, "å•†æˆ·å??ç§°é”™è¯¯");
        }
        rpTradePaymentOrder.setMerchantName(merchantName);// å•†æˆ·å??ç§°

        if (StringUtil.isEmpty(merchantNo)) {
            throw new TradeBizException(TradeBizException.TRADE_PARAM_ERROR, "å•†æˆ·ç¼–å?·é”™è¯¯");
        }
        rpTradePaymentOrder.setMerchantNo(merchantNo);// å•†æˆ·ç¼–å?·

        if (orderDate == null) {
            throw new TradeBizException(TradeBizException.TRADE_PARAM_ERROR, "ä¸‹å?•æ—¥æœŸé”™è¯¯");
        }
        rpTradePaymentOrder.setOrderDate(orderDate);// ä¸‹å?•æ—¥æœŸ

        if (orderTime == null) {
            throw new TradeBizException(TradeBizException.TRADE_PARAM_ERROR, "ä¸‹å?•æ—¶é—´é”™è¯¯");
        }
        rpTradePaymentOrder.setOrderTime(orderTime);// ä¸‹å?•æ—¶é—´
        rpTradePaymentOrder.setOrderIp(orderIp);// ä¸‹å?•IP
        rpTradePaymentOrder.setOrderRefererUrl("");// ä¸‹å?•å‰?é¡µé?¢

        if (StringUtil.isEmpty(returnUrl)) {
            throw new TradeBizException(TradeBizException.TRADE_PARAM_ERROR, "é¡µé?¢é€šçŸ¥åœ°å?€é”™è¯¯");
        }
        rpTradePaymentOrder.setReturnUrl(returnUrl);// é¡µé?¢é€šçŸ¥åœ°å?€

        if (StringUtil.isEmpty(notifyUrl)) {
            throw new TradeBizException(TradeBizException.TRADE_PARAM_ERROR, "å?Žå?°é€šçŸ¥åœ°å?€é”™è¯¯");
        }
        rpTradePaymentOrder.setNotifyUrl(notifyUrl);// å?Žå?°é€šçŸ¥åœ°å?€

        if (orderPeriod == null || orderPeriod <= 0) {
            throw new TradeBizException(TradeBizException.TRADE_PARAM_ERROR, "è®¢å?•æœ‰æ•ˆæœŸé”™è¯¯");
        }
        rpTradePaymentOrder.setOrderPeriod(orderPeriod);// è®¢å?•æœ‰æ•ˆæœŸ

        Date expireTime = DateUtils.addMinute(orderTime, orderPeriod);// è®¢å?•è¿‡æœŸæ—¶é—´
        rpTradePaymentOrder.setExpireTime(expireTime);// è®¢å?•è¿‡æœŸæ—¶é—´
        rpTradePaymentOrder.setPayWayCode(payWay);// æ”¯ä»˜é€šé?“ç¼–ç ?
        rpTradePaymentOrder.setPayWayName(payWayName);// æ”¯ä»˜é€šé?“å??ç§°
        rpTradePaymentOrder.setStatus(TradeStatusEnum.WAITING_PAYMENT.name());// è®¢å?•çŠ¶æ€?
        // ç­‰å¾…æ”¯ä»˜

        if (payType != null) {
            rpTradePaymentOrder.setPayTypeCode(payType.name());// æ”¯ä»˜ç±»åž‹
            rpTradePaymentOrder.setPayTypeName(payType.getDesc());// æ”¯ä»˜æ–¹å¼?
        }
        rpTradePaymentOrder.setFundIntoType(fundIntoType);// èµ„é‡‘æµ?å…¥æ–¹å?‘

        rpTradePaymentOrder.setRemark(remark);// æ”¯ä»˜å¤‡æ³¨
        rpTradePaymentOrder.setField1(field1);// æ‰©å±•å­—æ®µ1
        rpTradePaymentOrder.setField2(field2);// æ‰©å±•å­—æ®µ2
        rpTradePaymentOrder.setField3(field3);// æ‰©å±•å­—æ®µ3
        rpTradePaymentOrder.setField4(field4);// æ‰©å±•å­—æ®µ4
        rpTradePaymentOrder.setField5(field5);// æ‰©å±•å­—æ®µ5

        return rpTradePaymentOrder;
    }

    /**
     * å°?è£…æ”¯ä»˜æµ?æ°´è®°å½•å®žä½“
     *
     * @param merchantNo   å•†æˆ·ç¼–å?·
     * @param merchantName å•†æˆ·å??ç§°
     * @param productName  äº§å“?å??ç§°
     * @param orderNo      å•†æˆ·è®¢å?•å?·
     * @param orderPrice   è®¢å?•é‡‘é¢?
     * @param payWay       æ”¯ä»˜æ–¹å¼?ç¼–ç ?
     * @param payWayName   æ”¯ä»˜æ–¹å¼?å??ç§°
     * @param payType      æ”¯ä»˜ç±»åž‹
     * @param fundIntoType èµ„é‡‘æµ?å…¥æ–¹å?‘
     * @param feeRate      æ”¯ä»˜è´¹çŽ‡
     * @param orderIp      è®¢å?•IP
     * @param returnUrl    é¡µé?¢é€šçŸ¥åœ°å?€
     * @param notifyUrl    å?Žå?°é€šçŸ¥åœ°å?€
     * @param remark       å¤‡æ³¨
     * @param field1       æ‰©å±•å­—æ®µ1
     * @param field2       æ‰©å±•å­—æ®µ2
     * @param field3       æ‰©å±•å­—æ®µ3
     * @param field4       æ‰©å±•å­—æ®µ4
     * @param field5       æ‰©å±•å­—æ®µ5
     * @return
     */
    private RpTradePaymentRecord sealRpTradePaymentRecord(String merchantNo, String merchantName, String productName, String orderNo, BigDecimal orderPrice, String payWay, String payWayName, PayTypeEnum payType, String fundIntoType, BigDecimal feeRate, String orderIp, String returnUrl, String notifyUrl, String remark, String field1, String field2, String field3, String field4, String field5) {
        RpTradePaymentRecord rpTradePaymentRecord = new RpTradePaymentRecord();
        rpTradePaymentRecord.setProductName(productName);// äº§å“?å??ç§°
        rpTradePaymentRecord.setMerchantOrderNo(orderNo);// äº§å“?ç¼–å?·

        String trxNo = buildNoService.buildTrxNo();
        rpTradePaymentRecord.setTrxNo(trxNo);// æ”¯ä»˜æµ?æ°´å?·

        String bankOrderNo = buildNoService.buildBankOrderNo();
        rpTradePaymentRecord.setBankOrderNo(bankOrderNo);// é“¶è¡Œè®¢å?•å?·
        rpTradePaymentRecord.setMerchantName(merchantName);
        rpTradePaymentRecord.setMerchantNo(merchantNo);// å•†æˆ·ç¼–å?·
        rpTradePaymentRecord.setOrderIp(orderIp);// ä¸‹å?•IP
        rpTradePaymentRecord.setOrderRefererUrl("");// ä¸‹å?•å‰?é¡µé?¢
        rpTradePaymentRecord.setReturnUrl(returnUrl);// é¡µé?¢é€šçŸ¥åœ°å?€
        rpTradePaymentRecord.setNotifyUrl(notifyUrl);// å?Žå?°é€šçŸ¥åœ°å?€
        rpTradePaymentRecord.setPayWayCode(payWay);// æ”¯ä»˜é€šé?“ç¼–ç ?
        rpTradePaymentRecord.setPayWayName(payWayName);// æ”¯ä»˜é€šé?“å??ç§°
        rpTradePaymentRecord.setTrxType(TrxTypeEnum.EXPENSE.name());// äº¤æ˜“ç±»åž‹
        rpTradePaymentRecord.setOrderFrom(OrderFromEnum.USER_EXPENSE.name());// è®¢å?•æ?¥æº?
        rpTradePaymentRecord.setOrderAmount(orderPrice);// è®¢å?•é‡‘é¢?
        rpTradePaymentRecord.setStatus(TradeStatusEnum.WAITING_PAYMENT.name());// è®¢å?•çŠ¶æ€?
        // ç­‰å¾…æ”¯ä»˜

        rpTradePaymentRecord.setPayTypeCode(payType.name());// æ”¯ä»˜ç±»åž‹
        rpTradePaymentRecord.setPayTypeName(payType.getDesc());// æ”¯ä»˜æ–¹å¼?
        rpTradePaymentRecord.setFundIntoType(fundIntoType);// èµ„é‡‘æµ?å…¥æ–¹å?‘

        if (FundInfoTypeEnum.PLAT_RECEIVES.name().equals(fundIntoType)) {// å¹³å?°æ”¶æ¬¾
            // éœ€è¦?ä¿®æ”¹è´¹çŽ‡
            // æˆ?æœ¬
            // åˆ©æ¶¦
            // æ”¶å…¥
            // ä»¥å?Šä¿®æ”¹å•†æˆ·è´¦æˆ·ä¿¡æ?¯
            BigDecimal orderAmount = rpTradePaymentRecord.getOrderAmount();// è®¢å?•é‡‘é¢?
            BigDecimal platIncome = orderAmount.multiply(feeRate).divide(BigDecimal.valueOf(100), 2, BigDecimal.ROUND_HALF_UP); // å¹³å?°æ”¶å…¥
            // =
            // è®¢å?•é‡‘é¢?
            // *
            // æ”¯ä»˜è´¹çŽ‡(è®¾ç½®çš„è´¹çŽ‡é™¤ä»¥100ä¸ºçœŸå®žè´¹çŽ‡)
            BigDecimal platCost = orderAmount.multiply(BigDecimal.valueOf(Double.valueOf(WeixinConfigUtil.readConfig("pay_rate")))).divide(BigDecimal.valueOf(100), 2, BigDecimal.ROUND_HALF_UP);// å¹³å?°æˆ?æœ¬
            // =
            // è®¢å?•é‡‘é¢?
            // *
            // å¾®ä¿¡è´¹çŽ‡(è®¾ç½®çš„è´¹çŽ‡é™¤ä»¥100ä¸ºçœŸå®žè´¹çŽ‡)
            BigDecimal platProfit = platIncome.subtract(platCost);// å¹³å?°åˆ©æ¶¦ = å¹³å?°æ”¶å…¥
            // - å¹³å?°æˆ?æœ¬

            rpTradePaymentRecord.setFeeRate(feeRate);// è´¹çŽ‡
            rpTradePaymentRecord.setPlatCost(platCost);// å¹³å?°æˆ?æœ¬
            rpTradePaymentRecord.setPlatIncome(platIncome);// å¹³å?°æ”¶å…¥
            rpTradePaymentRecord.setPlatProfit(platProfit);// å¹³å?°åˆ©æ¶¦

        }

        rpTradePaymentRecord.setRemark(remark);// æ”¯ä»˜å¤‡æ³¨
        rpTradePaymentRecord.setField1(field1);// æ‰©å±•å­—æ®µ1
        rpTradePaymentRecord.setField2(field2);// æ‰©å±•å­—æ®µ2
        rpTradePaymentRecord.setField3(field3);// æ‰©å±•å­—æ®µ3
        rpTradePaymentRecord.setField4(field4);// æ‰©å±•å­—æ®µ4
        rpTradePaymentRecord.setField5(field5);// æ‰©å±•å­—æ®µ5
        return rpTradePaymentRecord;
    }

    /**
     * å°?è£…é¢„æ”¯ä»˜å®žä½“
     *
     * @param appId               å…¬ä¼—å?·ID
     * @param mchId               å•†æˆ·å?·
     * @param productName         å•†å“?æ??è¿°
     * @param remark              æ”¯ä»˜å¤‡æ³¨
     * @param bankOrderNo         é“¶è¡Œè®¢å?•å?·
     * @param orderPrice          è®¢å?•ä»·æ ¼
     * @param orderTime           è®¢å?•ä¸‹å?•æ—¶é—´
     * @param orderPeriod         è®¢å?•æœ‰æ•ˆæœŸ
     * @param weiXinTradeTypeEnum å¾®ä¿¡æ”¯ä»˜æ–¹å¼?
     * @param productId           å•†å“?ID
     * @param openId              ç”¨æˆ·æ ‡è¯†
     * @param orderIp             ä¸‹å?•IP
     * @return
     */
    private WeiXinPrePay sealWeixinPerPay(String appId, String mchId, String productName, String remark, String bankOrderNo, BigDecimal orderPrice, Date orderTime, Integer orderPeriod, WeiXinTradeTypeEnum weiXinTradeTypeEnum, String productId, String openId, String orderIp) {
        WeiXinPrePay weiXinPrePay = new WeiXinPrePay();

        weiXinPrePay.setAppid(appId);
        weiXinPrePay.setMchId(mchId);
        weiXinPrePay.setBody(productName);// å•†å“?æ??è¿°
        weiXinPrePay.setAttach(remark);// æ”¯ä»˜å¤‡æ³¨
        weiXinPrePay.setOutTradeNo(bankOrderNo);// é“¶è¡Œè®¢å?•å?·

        Integer totalFee = orderPrice.multiply(BigDecimal.valueOf(100d)).intValue();
        weiXinPrePay.setTotalFee(totalFee);// è®¢å?•é‡‘é¢?
        weiXinPrePay.setTimeStart(DateUtils.formatDate(orderTime, "yyyyMMddHHmmss"));// è®¢å?•å¼€å§‹æ—¶é—´
        weiXinPrePay.setTimeExpire(DateUtils.formatDate(DateUtils.addMinute(orderTime, orderPeriod), "yyyyMMddHHmmss"));// è®¢å?•åˆ°æœŸæ—¶é—´
        weiXinPrePay.setNotifyUrl(WeixinConfigUtil.readConfig("notify_url"));// é€šçŸ¥åœ°å?€
        weiXinPrePay.setTradeType(weiXinTradeTypeEnum);// äº¤æ˜“ç±»åž‹
        weiXinPrePay.setProductId(productId);// å•†å“?ID
        weiXinPrePay.setOpenid(openId);// ç”¨æˆ·æ ‡è¯†
        weiXinPrePay.setSpbillCreateIp(orderIp);// ä¸‹å?•IP

        return weiXinPrePay;
    }

    /**
     * å¤„ç?†äº¤æ˜“è®°å½• å¦‚æžœäº¤æ˜“è®°å½•æ˜¯æˆ?åŠŸæˆ–è€…æœ¬åœ°æœªæ”¯ä»˜,æŸ¥è¯¢ä¸Šæ¸¸å·²æ”¯ä»˜,è¿”å›žTRUE å¦‚æžœä¸Šæ¸¸æ”¯ä»˜ç»“æžœä¸ºæœªæ”¯ä»˜,è¿”å›žFALSE
     *
     * @param bankOrderNo é“¶è¡Œè®¢å?•å?·
     * @return
     */
    @Override
    public boolean processingTradeRecord(String bankOrderNo) {
        RpTradePaymentRecord byBankOrderNo = rpTradePaymentRecordDao.getByBankOrderNo(bankOrderNo);
        if (byBankOrderNo == null) {
            LOG.info("ä¸?å­˜åœ¨è¯¥é“¶è¡Œè®¢å?•å?·[{}]å¯¹åº”çš„äº¤æ˜“è®°å½•", bankOrderNo);
            throw new TradeBizException(TradeBizException.TRADE_ORDER_ERROR, "é?žæ³•è®¢å?•å?·");
        }
        LOG.info("è®¢å?•å?·:[{}],äº¤æ˜“ç±»åž‹ï¼š[{}]", byBankOrderNo.getBankOrderNo(), byBankOrderNo.getPayWayCode());

        if (!TradeStatusEnum.WAITING_PAYMENT.name().equals(byBankOrderNo.getStatus())) {
            LOG.info("è¯¥é“¶è¡Œè®¢å?•å?·[{}]å¯¹åº”çš„äº¤æ˜“è®°å½•çŠ¶æ€?ä¸º:{},ä¸?éœ€è¦?å†?å¤„ç?†", bankOrderNo, byBankOrderNo.getStatus());
            return true;
        }

        // å¾®ä¿¡
        if (byBankOrderNo.getPayWayCode().equals(PayWayEnum.WEIXIN.name())) {
            Map<String, Object> resultMap;
            if (PayTypeEnum.WX_PROGRAM_PAY.name().equals(byBankOrderNo.getPayTypeCode())) {
                LOG.info("å¾®ä¿¡--å°?ç¨‹åº?è®¢å?•æŸ¥è¯¢!è®¢å?•å?·:[{}]", byBankOrderNo.getBankOrderNo());
                resultMap = WeiXinPayUtils.orderQuery(byBankOrderNo.getBankOrderNo(), WeixinConfigUtil.xAppId, WeixinConfigUtil.xMchId, WeixinConfigUtil.xPayKey);
            } else {
                LOG.info("å¾®ä¿¡--è®¢å?•æŸ¥è¯¢!è®¢å?•å?·:[{}]", byBankOrderNo.getBankOrderNo());
                resultMap = WeiXinPayUtils.orderQuery(byBankOrderNo.getBankOrderNo(), WeixinConfigUtil.appId, WeixinConfigUtil.mch_id, WeixinConfigUtil.partnerKey);
            }
            LOG.info("å¾®ä¿¡è®¢å?•æŸ¥è¯¢ç»“æžœ:{}", resultMap.toString());
            if (resultMap == null || resultMap.isEmpty()) {
                return false;
            }
            Object returnCode = resultMap.get("return_code");
            // æŸ¥è¯¢å¤±è´¥
            if (null == returnCode || "FAIL".equals(returnCode)) {
                return false;
            }
            // å½“trade_stateä¸ºSUCCESSæ—¶æ‰?è¿”å›žresult_code
            if ("SUCCESS".equals(resultMap.get("trade_state"))) {
                completeSuccessOrder(byBankOrderNo, byBankOrderNo.getBankTrxNo(), new Date(), "è®¢å?•äº¤æ˜“æˆ?åŠŸ");
                return true;
            }
            return false;
        }

        //æ”¯ä»˜å®?
        if (byBankOrderNo.getPayWayCode().equals(PayWayEnum.ALIPAY.name())) {
            if (PayTypeEnum.DIRECT_PAY.name().equals(byBankOrderNo.getPayTypeCode())) {
                //æ”¯ä»˜å®?--å?³æ—¶åˆ°è´¦
                LOG.info("æ”¯ä»˜å®?--å?³æ—¶åˆ°è´¦è®¢å?•æŸ¥è¯¢!è®¢å?•å?·:[{}]", byBankOrderNo.getBankOrderNo());
                Map<String, Object> resultMap = AliPayUtil.singleTradeQuery(byBankOrderNo.getBankOrderNo());
                if (resultMap.isEmpty() || !"T".equals(resultMap.get("is_success"))) {
                    return false;
                }
                // å½“è¿”å›žçŠ¶æ€?ä¸ºâ€œTRADE_FINISHEDâ€?äº¤æ˜“æˆ?åŠŸç»“æ?Ÿå’Œâ€œTRADE_SUCCESSâ€?æ”¯ä»˜æˆ?åŠŸæ—¶æ›´æ–°äº¤æ˜“çŠ¶æ€?
                if ("TRADE_SUCCESS".equals(resultMap.get("trade_status")) || "TRADE_FINISHED".equals(resultMap.get("trade_status"))) {
                    completeSuccessOrder(byBankOrderNo, byBankOrderNo.getBankTrxNo(), new Date(), "è®¢å?•äº¤æ˜“æˆ?åŠŸ");
                    return true;
                }
            } else if (PayTypeEnum.F2F_PAY.name().equals(byBankOrderNo.getPayTypeCode())) {
                //æ”¯ä»˜å®?--æ?¡ç ?æ”¯ä»˜
                LOG.info("æ”¯ä»˜å®?--æ?¡ç ?æ”¯ä»˜è®¢å?•æŸ¥è¯¢!è®¢å?•å?·:[{}]", byBankOrderNo.getBankOrderNo());
                Map<String, Object> resultMap = AliPayUtil.tradeQuery(byBankOrderNo.getBankOrderNo());
                if (!"10000".equals(resultMap.get("code"))) {
                    return false;
                }
                // å½“è¿”å›žçŠ¶æ€?ä¸ºâ€œTRADE_FINISHEDâ€?äº¤æ˜“æˆ?åŠŸç»“æ?Ÿå’Œâ€œTRADE_SUCCESSâ€?æ”¯ä»˜æˆ?åŠŸæ—¶æ›´æ–°äº¤æ˜“çŠ¶æ€?
                if ("TRADE_SUCCESS".equals(resultMap.get("tradeStatus")) || "TRADE_FINISHED".equals(resultMap.get("tradeStatus"))) {
                    completeSuccessOrder(byBankOrderNo, byBankOrderNo.getBankTrxNo(), new Date(), "è®¢å?•äº¤æ˜“æˆ?åŠŸ");
                    return true;
                }
                return false;
            }
        }
        return false;
    }

    @Override
    public ProgramPayResultVo programPay(String payKey, String openId, String productName, String orderNo, Date orderDate, Date orderTime, BigDecimal orderPrice, String payWayCode, String orderIp, String notifyUrl, String remark, String field1, String field2, String field3, String field4, String field5) {
        RpUserPayConfig rpUserPayConfig = rpUserPayConfigService.getByPayKey(payKey);
        if (rpUserPayConfig == null) {
            throw new UserBizException(UserBizException.USER_PAY_CONFIG_ERRPR, "ç”¨æˆ·æ”¯ä»˜é…?ç½®æœ‰è¯¯");
        }

        // æ ¹æ?®æ”¯ä»˜äº§å“?å?Šæ”¯ä»˜æ–¹å¼?èŽ·å?–è´¹çŽ‡
        RpPayWay payWay;
        PayTypeEnum payType;
        if (PayWayEnum.WEIXIN.name().equals(payWayCode)) {
            payType = PayTypeEnum.WX_PROGRAM_PAY;
            payWay = rpPayWayService.getByPayWayTypeCode(rpUserPayConfig.getProductCode(), payWayCode, payType.name());
        } else {
            throw new TradeBizException(TradeBizException.TRADE_PAY_WAY_ERROR, "æš‚ä¸?æ”¯æŒ?æ­¤æ”¯ä»˜æ–¹å¼?");
        }
        if (payWay == null) {
            throw new UserBizException(UserBizException.USER_PAY_CONFIG_ERRPR, "ç”¨æˆ·æ”¯ä»˜é…?ç½®æœ‰è¯¯");
        }

        String merchantNo = rpUserPayConfig.getUserNo();// å•†æˆ·ç¼–å?·
        RpUserInfo rpUserInfo = rpUserInfoService.getDataByMerchentNo(merchantNo);
        if (rpUserInfo == null) {
            throw new UserBizException(UserBizException.USER_IS_NULL, "ç”¨æˆ·ä¸?å­˜åœ¨");
        }

        //ç”Ÿäº§è®¢å?•è®°å½•
        RpTradePaymentOrder rpTradePaymentOrder = rpTradePaymentOrderDao.selectByMerchantNoAndMerchantOrderNo(merchantNo, orderNo);
        if (rpTradePaymentOrder == null) {
            rpTradePaymentOrder = sealRpTradePaymentOrder(merchantNo, rpUserInfo.getUserName(), productName, orderNo, orderDate, orderTime, orderPrice, payWayCode, PayWayEnum.getEnum(payWayCode).getDesc(), payType, rpUserPayConfig.getFundIntoType(), orderIp, 10, payType.name(), notifyUrl, remark, field1, field2, field3, field4, field5);
            rpTradePaymentOrderDao.insert(rpTradePaymentOrder);
        } else {
            if (TradeStatusEnum.SUCCESS.name().equals(rpTradePaymentOrder.getStatus())) {
                throw new TradeBizException(TradeBizException.TRADE_ORDER_ERROR, "è®¢å?•å·²æ”¯ä»˜æˆ?åŠŸ,æ— éœ€é‡?å¤?æ”¯ä»˜");
            }
            if (rpTradePaymentOrder.getOrderAmount().compareTo(orderPrice) != 0) {
                rpTradePaymentOrder.setOrderAmount(orderPrice);// å¦‚æžœé‡‘é¢?ä¸?ä¸€è‡´,ä¿®æ”¹é‡‘é¢?ä¸ºæœ€æ–°çš„é‡‘é¢?
            }
        }

        return getProgramPayResultVo(rpTradePaymentOrder, payWay, rpUserPayConfig.getPaySecret(), openId, null);
    }


    /**
     * é€šè¿‡æ”¯ä»˜è®¢å?•å?Šå•†æˆ·è´¹çŽ‡ç”Ÿæˆ?æ”¯ä»˜è®°å½•
     *
     * @param tradePaymentOrder æ”¯ä»˜è®¢å?•
     * @param payWay            å•†æˆ·æ”¯ä»˜é…?ç½®
     * @return
     */
    private ProgramPayResultVo getProgramPayResultVo(RpTradePaymentOrder tradePaymentOrder, RpPayWay payWay, String merchantPaySecret, String openId, List<RoncooPayGoodsDetails> roncooPayGoodsDetailses) {

        ProgramPayResultVo resultVo = new ProgramPayResultVo();
        String payWayCode = payWay.getPayWayCode();// æ”¯ä»˜æ–¹å¼?

        PayTypeEnum payType = null;
        if (PayWayEnum.WEIXIN.name().equals(payWay.getPayWayCode())) {
            payType = PayTypeEnum.WX_PROGRAM_PAY;
        } else if (PayWayEnum.ALIPAY.name().equals(payWay.getPayWayCode())) {
            // TODO æ”¯ä»˜å®?å°?ç¨‹åº?æ”¯ä»˜ï¼Œéœ€è¦?è‡ªå®šä¹‰æžšä¸¾
            throw new TradeBizException(TradeBizException.TRADE_PAY_WAY_ERROR, "æš‚ä¸?æ”¯æŒ?æ­¤æ”¯ä»˜æ–¹å¼?");
        }

        tradePaymentOrder.setPayTypeCode(payType.name());// æ”¯ä»˜ç±»åž‹
        tradePaymentOrder.setPayTypeName(payType.getDesc());// æ”¯ä»˜æ–¹å¼?
        tradePaymentOrder.setPayWayCode(payWay.getPayWayCode());//æ”¯ä»˜é€šé?“ç¼–å?·
        tradePaymentOrder.setPayWayName(payWay.getPayWayName());//æ”¯ä»˜é€šé?“å??ç§°

        //ç”Ÿæˆ?æ”¯ä»˜æµ?æ°´
        RpTradePaymentRecord rpTradePaymentRecord = sealRpTradePaymentRecord(tradePaymentOrder.getMerchantNo(), tradePaymentOrder.getMerchantName(), tradePaymentOrder.getProductName(), tradePaymentOrder.getMerchantOrderNo(), tradePaymentOrder.getOrderAmount(), payWay.getPayWayCode(), payWay.getPayWayName(), payType, tradePaymentOrder.getFundIntoType(), BigDecimal.valueOf(payWay.getPayRate()), tradePaymentOrder.getOrderIp(), tradePaymentOrder.getReturnUrl(), tradePaymentOrder.getNotifyUrl(), tradePaymentOrder.getRemark(), tradePaymentOrder.getField1(), tradePaymentOrder.getField2(), tradePaymentOrder.getField3(), tradePaymentOrder.getField4(), tradePaymentOrder.getField5());
        rpTradePaymentRecordDao.insert(rpTradePaymentRecord);

        if (PayWayEnum.WEIXIN.name().equals(payWayCode)) {// å¾®ä¿¡æ”¯ä»˜
            Map<String, Object> resultMap = WeiXinPayUtil.appletPay(rpTradePaymentRecord.getBankOrderNo(), rpTradePaymentRecord.getProductName(), rpTradePaymentRecord.getOrderAmount(), rpTradePaymentRecord.getOrderIp(), WeixinConfigUtil.x_notify_url, openId, roncooPayGoodsDetailses);
            if (resultMap == null || resultMap.isEmpty()) {
                resultVo.setStatus(PublicEnum.NO.name());
                resultVo.setBankReturnMsg("è¯·æ±‚æ”¯ä»˜å¤±è´¥!");
            } else {
                if ("YES".equals(resultMap.get("verify"))) {
                    if ("SUCCESS".equals(resultMap.get("return_code")) && "SUCCESS".equals(resultMap.get("result_code"))) {
                        resultVo.setStatus(PublicEnum.YES.name());
                        resultVo.setBankReturnMsg(String.valueOf(resultMap.get("return_msg")));

                        Object prepayId = resultMap.get("prepay_id");
                        Object appid = resultMap.get("appid");
                        SortedMap<String, Object> returnMap = new TreeMap<>();
                        returnMap.put("appId", appid);//appId
                        returnMap.put("timeStamp", System.currentTimeMillis());//å½“å‰?æ—¶é—´æˆ³
                        returnMap.put("nonceStr", WeiXinPayUtil.getnonceStr());//éš?æœºæ•°
                        returnMap.put("package", "prepay_id=" + prepayId);//
                        returnMap.put("signType", "MD5");//ç­¾å??æ–¹å¼?
                        returnMap.put("paySign", WeiXinPayUtil.getSign(returnMap, WeixinConfigUtil.xPayKey));
                        returnMap.remove("appId");
                        String jsonString = JSON.toJSONString(returnMap);
                        resultVo.setPayMessage(jsonString);
                        //è¯·æ±‚æˆ?åŠŸï¼Œå?‘èµ·è½®è¯¢
                        rpNotifyService.orderSend(rpTradePaymentRecord.getBankOrderNo());
                    } else {
                        resultVo.setStatus(PublicEnum.NO.name());
                        resultVo.setBankReturnMsg(String.valueOf(resultMap.get("return_msg")));
                    }


                } else {
                    resultVo.setStatus(PublicEnum.NO.name());
                    resultVo.setBankReturnMsg("è¯·æ±‚å¾®ä¿¡è¿”å›žä¿¡æ?¯éªŒç­¾ä¸?é€šè¿‡ï¼?");
                }
            }
        } else if (PayWayEnum.ALIPAY.name().equals(payWayCode)) {// æ”¯ä»˜å®?æ”¯ä»˜
            throw new TradeBizException(TradeBizException.TRADE_PAY_WAY_ERROR, "æš‚ä¸?æ”¯æŒ?æ­¤æ”¯ä»˜æ–¹å¼?");
        }

        Map<String, Object> paramMap = new HashMap<>();
        if (!StringUtil.isEmpty(resultVo.getPayMessage())) {
            paramMap.put("payMessage", resultVo.getPayMessage());//æ”¯ä»˜ä¿¡æ?¯
        }
        if (!StringUtil.isEmpty(resultVo.getBankReturnMsg())) {
            paramMap.put("bankReturnMsg", resultVo.getBankReturnMsg());
        }
        resultVo.setStatus(rpTradePaymentRecord.getStatus());// æ”¯ä»˜ç»“æžœ
        paramMap.put("status", rpTradePaymentRecord.getStatus());
        String sign = MerchantApiUtil.getSign(paramMap, merchantPaySecret);
        resultVo.setSign(sign);
        return resultVo;
    }
}
