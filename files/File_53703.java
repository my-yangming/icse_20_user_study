package com.lingjoin.demo;

/**
 * åˆ†è¯?ç»„ä»¶æ–¹æ³•ç±»
 * 
 * @author move
 *
 */
public class NlpirMethod {
	// åˆ?å§‹åŒ–
	static {
		boolean flag = NlpirLib.Instance.NLPIR_Init("", 1, "");

		if (flag) {
			System.out.println("nlpiråˆ?å§‹åŒ–æˆ?åŠŸ");
		} else {
			System.out.println("nlpiråˆ?å§‹åŒ–å¤±è´¥ï¼š" + NlpirLib.Instance.NLPIR_GetLastErrorMsg());
			System.exit(1);
		}
	}

	/**
	 * ç»„ä»¶åˆ?å§‹åŒ–
	 * 
	 * @param sDataPath
	 *            Dataæ–‡ä»¶å¤¹çš„çˆ¶ç›®å½•ï¼Œå¦‚æžœä¸ºç©ºå­—ç¬¦ä¸²ï¼ˆå?³ï¼š""ï¼‰ï¼Œé‚£ä¹ˆï¼Œç¨‹åº?è‡ªåŠ¨ä»Žé¡¹ç›®çš„æ ¹ç›®å½•ä¸­å¯»æ‰¾
	 * @param encoding
	 *            ç¼–ç ?æ ¼å¼?ï¼Œå…·ä½“çš„ç¼–ç ?å¯¹ç…§å¦‚ä¸‹ï¼š 0ï¼šGBKï¼›1ï¼šUTF8ï¼›2ï¼šBIG5ï¼›3ï¼šGBKï¼Œé‡Œé?¢åŒ…å?«ç¹?ä½“å­—
	 * @param sLicenceCode
	 *            æŽˆæ?ƒç ?ï¼Œä¸ºç©ºå­—ç¬¦ä¸²ï¼ˆå?³ï¼š""ï¼‰å°±å?¯ä»¥äº†
	 * @return trueï¼šåˆ?å§‹åŒ–æˆ?åŠŸï¼›falseï¼šåˆ?å§‹åŒ–å¤±è´¥
	 */
	public static boolean NLPIR_Init(String sDataPath, int encoding, String sLicenceCode) {
		return NlpirLib.Instance.NLPIR_Init(sDataPath, encoding, sLicenceCode);
	}

	/**
	 * åˆ†è¯?
	 * 
	 * @param sSrc
	 *            æ–‡æœ¬å†…å®¹
	 * @param bPOSTagged
	 *            1ï¼šæ˜¾ç¤ºè¯?æ€§ï¼›0ï¼šä¸?æ˜¾ç¤ºè¯?æ€§
	 * @return åˆ†è¯?ç»“æžœ
	 */
	public static String NLPIR_ParagraphProcess(String sParagraph, int bPOSTagged) {
		return NlpirLib.Instance.NLPIR_ParagraphProcess(sParagraph, bPOSTagged);
	}

	/**
	 * åˆ†è¯?
	 * 
	 * @param sSourceFilename
	 *            æ–‡æœ¬æ–‡ä»¶çš„è·¯å¾„
	 * @param sResultFilename
	 *            ç»“æžœæ–‡ä»¶çš„è·¯å¾„
	 * @param bPOStagged
	 *            1ï¼šæ˜¾ç¤ºè¯?æ€§ï¼›0ï¼šä¸?æ˜¾ç¤ºè¯?æ€§
	 * @return
	 */
	public static double NLPIR_FileProcess(String sSourceFilename, String sResultFilename, int bPOStagged) {
		return NlpirLib.Instance.NLPIR_FileProcess(sSourceFilename, sResultFilename, bPOStagged);
	}

	/**
	 * ç»†ç²’åº¦åˆ†è¯?
	 * 
	 * @param lenWords
	 *            æ–‡æœ¬å†…å®¹
	 * @return åˆ†è¯?ç»“æžœ
	 */
	public static String NLPIR_FinerSegment(String lenWords) {
		return NlpirLib.Instance.NLPIR_FinerSegment(lenWords);
	}

	/**
	 * å…³é”®è¯?
	 * 
	 * @param sLine
	 *            æ–‡æœ¬å†…å®¹
	 * @param nMaxKeyLimit
	 *            ç”Ÿæˆ?å…³é”®è¯?çš„ä¸ªæ•°ä¸Šé™?
	 * @param bWeightOut
	 *            trueï¼šæ˜¾ç¤ºè¯?æ€§ï¼›falseï¼šä¸?æ˜¾ç¤ºè¯?æ€§
	 * @return å…³é”®è¯?ç»„æˆ?çš„å­—ç¬¦ä¸² å¤‡æ³¨ï¼šé»‘å??å?•ä¸­å‡ºçŽ°çš„è¯?ï¼Œä¸?ä¼šä½œä¸ºå…³é”®è¯?å‡ºçŽ°
	 */
	public static String NLPIR_GetKeyWords(String sLine, int nMaxKeyLimit, boolean bWeightOut) {
		return NlpirLib.Instance.NLPIR_GetKeyWords(sLine, nMaxKeyLimit, bWeightOut);
	}

	/**
	 * å…³é”®è¯?
	 * 
	 * @param sFilename
	 *            æ–‡æœ¬æ–‡ä»¶çš„è·¯å¾„
	 * @param nMaxKeyLimit
	 *            ç”Ÿæˆ?çš„å…³é”®è¯?çš„ä¸ªæ•°ä¸Šé™?
	 * @param bWeightOut
	 *            trueï¼šæ˜¾ç¤ºè¯?æ€§ï¼›falseï¼šä¸?æ˜¾ç¤ºè¯?æ€§
	 * @return å…³é”®è¯?ç»„æˆ?çš„å­—ç¬¦ä¸² å¤‡æ³¨ï¼šé»‘å??å?•ä¸­å‡ºçŽ°çš„è¯?ï¼Œä¸?ä¼šä½œä¸ºå…³é”®è¯?å‡ºçŽ°
	 */
	public static String NLPIR_GetFileKeyWords(String sFilename, int nMaxKeyLimit, boolean bWeightOut) {
		return NlpirLib.Instance.NLPIR_GetFileKeyWords(sFilename, nMaxKeyLimit, bWeightOut);
	}

	/**
	 * æ–°è¯?
	 * 
	 * @param sLine
	 *            æ–‡æœ¬å†…å®¹
	 * @param nMaxKeyLimit
	 *            ç”Ÿæˆ?çš„æ–°è¯?çš„ä¸ªæ•°ä¸Šé™?
	 * @param bWeightOut
	 *            trueï¼šæ˜¾ç¤ºè¯?æ€§ï¼›falseï¼šä¸?æ˜¾ç¤ºè¯?æ€§
	 * @return æ–°è¯?ç»„æˆ?çš„å­—ç¬¦ä¸²
	 */
	public static String NLPIR_GetNewWords(String sLine, int nMaxKeyLimit, boolean bWeightOut) {
		return NlpirLib.Instance.NLPIR_GetNewWords(sLine, nMaxKeyLimit, bWeightOut);
	}

	/**
	 * æ–°è¯?
	 * 
	 * @param string
	 *            æ–‡æœ¬æ–‡ä»¶çš„è·¯å¾„
	 * @param nMaxKeyLimit
	 *            ç”Ÿæˆ?çš„æ–°è¯?çš„ä¸ªæ•°ä¸Šé™?
	 * @param bWeightOut
	 *            true:æ˜¾ç¤ºè¯?æ€§ä¿¡æ?¯ï¼›false:ä¸?æ˜¾ç¤ºè¯?æ€§ä¿¡æ?¯
	 * @return æ–°è¯?ç»„æˆ?çš„å­—ç¬¦ä¸²
	 */
	public static String NLPIR_GetFileNewWords(String sFilename, int nMaxKeyLimit, boolean bWeightOut) {
		return NlpirLib.Instance.NLPIR_GetFileNewWords(sFilename, nMaxKeyLimit, bWeightOut);
	}

	/**
	 * æ·»åŠ ç”¨æˆ·è‡ªå®šä¹‰è¯?
	 * 
	 * @param userWord
	 *            ç”¨æˆ·è¯? æ ¼å¼?ï¼šå?•è¯?+ç©ºæ ¼+è¯?æ€§ï¼Œä¾‹å¦‚ï¼šä½ å¥½ v
	 * @return 1ï¼šå†…å­˜ä¸­ä¸?å­˜åœ¨ï¼›2ï¼šå†…å­˜ä¸­å·²å­˜åœ¨ å¤‡æ³¨ï¼šä¿?å­˜åˆ°å†…å­˜ä¸­ï¼Œä¸‹æ¬¡åˆ?å§‹åŒ–å?Žå¤±æ•ˆï¼Œéœ€è¦?ç”¨saveä¿?å­˜åˆ°æ–‡ä»¶ä¸­
	 */
	public static int NLPIR_AddUserWord(String userWord) {
		return NlpirLib.Instance.NLPIR_AddUserWord(userWord);
	}

	/**
	 * ä¿?å­˜ç”¨æˆ·è‡ªå®šä¹‰è¯?(ä¿?å­˜åˆ°æ–‡ä»¶ä¸­)
	 * 
	 * @return 1ï¼šæˆ?åŠŸï¼›0ï¼šå¤±è´¥
	 */
	public static int NLPIR_SaveTheUsrDic() {
		return NlpirLib.Instance.NLPIR_SaveTheUsrDic();
	}

	/**
	 * åˆ é™¤ç”¨æˆ·è‡ªå®šä¹‰è¯?
	 * 
	 * @param sWord
	 *            éœ€è¦?åˆ é™¤çš„å?•è¯?
	 * @return è¢«åˆ é™¤å?•è¯?åœ¨å†…å­˜ä¸­çš„ä½?ç½®ï¼Œ-1è¡¨ç¤ºä¸?å­˜åœ¨ å¤‡æ³¨ï¼šåˆ é™¤å†…å­˜ä¸­çš„è‡ªå®šä¹‰è¯?ï¼Œä¸‹æ¬¡åˆ?å§‹åŒ–å?Žå¤±æ•ˆï¼Œéœ€è¦?ç”¨saveä¿?å­˜åˆ°æ–‡ä»¶ä¸­
	 */
	public static int NLPIR_DelUsrWord(String sWord) {
		return NlpirLib.Instance.NLPIR_DelUsrWord(sWord);
	}

	/**
	 * å¯¼å…¥ç”¨æˆ·è‡ªå®šä¹‰è¯?å…¸
	 * 
	 * @param dictFileName
	 *            ç”¨æˆ·è¯?å…¸çš„è·¯å¾„
	 * @param bOverwrite
	 *            æ˜¯å?¦åˆ é™¤åŽŸæœ‰çš„è‡ªå®šä¹‰ç”¨æˆ·è¯?å…¸ï¼Œtrueï¼šåˆ é™¤ï¼›falseï¼šä¸?åˆ é™¤
	 * @return å¯¼å…¥ç”¨æˆ·å?•è¯?ä¸ªæ•° å¤‡æ³¨ï¼šç³»ç»Ÿä¼šè‡ªåŠ¨å¤„ç?†é‡?å¤?è¯?çš„é—®é¢˜
	 */
	public static int NLPIR_ImportUserDict(String dictFileName, boolean bOverwrite) {
		return NlpirLib.Instance.NLPIR_ImportUserDict(dictFileName, bOverwrite);
	}

	/**
	 * å¯¼å…¥å…³é”®è¯?é»‘å??å?•
	 * 
	 * @param sFilename
	 *            æ–‡ä»¶çš„è·¯å¾„
	 * @return å¤‡æ³¨ï¼šæˆ?åŠŸå¯¼å…¥å?Žï¼Œé»‘å??å?•ä¸­å‡ºçŽ°çš„è¯?ï¼Œä¸?ä¼šä½œä¸ºå…³é”®è¯?å‡ºçŽ°
	 */
	public static int NLPIR_ImportKeyBlackList(String sFilename) {
		return NlpirLib.Instance.NLPIR_ImportKeyBlackList(sFilename);
	}

	/**
	 * æ–‡ç« æŒ‡çº¹ç ?
	 * 
	 * @param sLine
	 *            æ–‡æœ¬å†…å®¹
	 * @return æŒ‡çº¹ç ?
	 */
	public static long NLPIR_FingerPrint(String sLine) {
		return NlpirLib.Instance.NLPIR_FingerPrint(sLine);
	}

	/**
	 * å?•è¯?çš„è¯?æ€§
	 * 
	 * @param sWords
	 *            å?•è¯?ï¼Œä¾‹å¦‚ï¼šä¸­å?Žäººæ°‘å…±å’Œå›½
	 * @return å?•è¯?çš„è¯?æ€§ï¼Œä¾‹å¦‚ï¼šä¸­å?Žäººæ°‘å…±å’Œå›½/ns/607#
	 */
	public static String NLPIR_GetWordPOS(String sWords) {
		return NlpirLib.Instance.NLPIR_GetWordPOS(sWords);
	}

	/**
	 * åˆ¤æ–­å?•è¯?æ˜¯å?¦åœ¨æ ¸å¿ƒè¯?åº“ä¸­
	 * 
	 * @param word
	 *            è¾“å…¥çš„å?•è¯?
	 * @return å¦‚æžœå?•è¯?ä¸?å­˜åœ¨å°±è¿”å›ž-1ï¼Œå?¦åˆ™è¿”å›žå?•è¯?åœ¨è¯?å…¸ä¸­çš„å?¥æŸ„
	 */
	public static int NLPIR_IsWord(String word) {
		return NlpirLib.Instance.NLPIR_IsWord(word);
	}

	/**
	 * èŽ·å?–è¾“å…¥æ–‡æœ¬çš„è¯?ï¼Œè¯?æ€§ï¼Œé¢‘ç»Ÿè®¡ç»“æžœï¼ŒæŒ‰ç…§è¯?é¢‘å¤§å°?æŽ’åº?
	 * 
	 * @param sText
	 *            æ–‡æœ¬å†…å®¹
	 * @return è¯?é¢‘ç»Ÿè®¡ç»“æžœå½¢å¼?å¦‚ä¸‹ï¼šå¼ å?Žå¹³/nr/10#å?šå£«/n/9#åˆ†è¯?/n/8
	 */
	public static String NLPIR_WordFreqStat(String sText) {
		return NlpirLib.Instance.NLPIR_WordFreqStat(sText);
	}

	/**
	 * èŽ·å?–è¾“å…¥æ–‡æœ¬æ–‡ä»¶çš„è¯?ï¼Œè¯?æ€§ï¼Œé¢‘ç»Ÿè®¡ç»“æžœï¼ŒæŒ‰ç…§è¯?é¢‘å¤§å°?æŽ’åº?
	 * 
	 * @param sFilename
	 *            æ–‡æœ¬æ–‡ä»¶çš„å…¨è·¯å¾„
	 * @return è¯?é¢‘ç»Ÿè®¡ç»“æžœå½¢å¼?å¦‚ä¸‹ï¼šå¼ å?Žå¹³/nr/10#å?šå£«/n/9#åˆ†è¯?/n/8
	 */
	public static String NLPIR_FileWordFreqStat(String sFilename) {
		return NlpirLib.Instance.NLPIR_FileWordFreqStat(sFilename);
	}

	/**
	 * èŽ·å?–å?„ç±»è‹±æ–‡å?•è¯?çš„åŽŸåž‹ï¼Œè€ƒè™‘äº†è¿‡åŽ»åˆ†è¯?ã€?å?•å¤?æ•°ç­‰æƒ…å†µ
	 * 
	 * @param sWord
	 *            è¾“å…¥çš„å?•è¯?
	 * @return è¯?åŽŸåž‹å½¢å¼?ï¼Œä¾‹å¦‚ï¼šdriven->drive drives->drive drove-->drive
	 */
	public static String NLPIR_GetEngWordOrign(String sWord) {
		return NlpirLib.Instance.NLPIR_GetEngWordOrign(sWord);
	}

	/**
	 * è¿”å›žæœ€å?Žä¸€æ¬¡çš„å‡ºé”™ä¿¡æ?¯
	 * 
	 * @return æœ€å?Žä¸€æ¬¡çš„å‡ºé”™ä¿¡æ?¯
	 */
	public static String NLPIR_GetLastErrorMsg() {
		return NlpirLib.Instance.NLPIR_GetLastErrorMsg();
	}

	/**
	 * é€€å‡ºï¼Œé‡Šæ”¾èµ„æº?
	 * 
	 * @return
	 */
	public static boolean NLPIR_Exit() {
		return NlpirLib.Instance.NLPIR_Exit();
	}
}
