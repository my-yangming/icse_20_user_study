package org.nutz.aop;

import java.lang.reflect.Method;
import java.util.Collections;
import java.util.List;

import org.nutz.log.Log;
import org.nutz.log.Logs;

/**
 * æ‹¦æˆªå™¨é“¾,æŒ?æœ‰è¢«è°ƒç”¨æ–¹æ³•çš„ä¿¡æ?¯
 * 
 * @author wendal(wendal1985@gmail.com)
 * 
 */
public class InterceptorChain {

    protected Method callingMethod;

    protected int methodIndex;

    protected Object[] args;

    protected AopCallback callingObj;

    protected Object returnValue;

    protected List<MethodInterceptor> miList;

    private static Log log = Logs.get();

    private boolean invoked = false;

    private int currentMI = 0;

    public InterceptorChain(int methodIndex,
                            Object obj,
                            Method method,
                            List<MethodInterceptor> miList,
                            Object[] args) {
        this.methodIndex = methodIndex;
        this.callingObj = (AopCallback) obj;
        this.callingMethod = method;
        this.args = args;
        this.miList = miList;
    }

    /**
     * ç»§ç»­æ‰§è¡Œä¸‹ä¸€ä¸ªæ‹¦æˆªå™¨,å¦‚æžœå·²ç»?æ²¡æœ‰å‰©ä¸‹çš„æ‹¦æˆªå™¨,åˆ™æ‰§è¡ŒåŽŸæ–¹æ³•
     * 
     * @return æ‹¦æˆªå™¨é“¾æœ¬èº«
     * @throws Throwable
     *             ä¸‹å±‚æ‹¦æˆªå™¨æˆ–åŽŸæ–¹æ³•æŠ›å‡ºçš„ä¸€åˆ‡å¼‚å¸¸
     */
    public InterceptorChain doChain() throws Throwable {
        if (currentMI == miList.size())
            invoke();
        else {
            currentMI++;
            miList.get(currentMI - 1).filter(this);
        }
        return this;

    }

    /**
     * æ‰§è¡ŒåŽŸæ–¹æ³•,ä¸€èˆ¬æƒ…å†µä¸‹ä¸?åº”è¯¥ç›´æŽ¥è¢«è°ƒç”¨
     * 
     * @throws Throwable
     *             åŽŸæ–¹æ³•æŠ›å‡ºçš„ä¸€åˆ‡å¼‚å¸¸
     */
    public void invoke() throws Throwable {
        if (invoked)
            log.warnf("!! Calling Method more than once! Method --> %s", callingMethod.toString());
        else
            invoked = true;
        this.returnValue = callingObj._aop_invoke(methodIndex, args);
    }

    /**
     * èŽ·å?–è¿”å›žå€¼
     * 
     * @return è¿”å›žå€¼
     */
    public Object getReturn() {
        return returnValue;
    }

    /**
     * æ­£åœ¨è¢«è°ƒç”¨çš„Method
     */
    public Method getCallingMethod() {
        return callingMethod;
    }

    /**
     * æ–¹æ³•è°ƒç”¨çš„å?‚æ•°æ•°ç»„,å¦‚æžœä½ è¦?æ”¹å?˜å?‚æ•°,é‚£ä¹ˆå¿…é¡»ä¿?è¯?å?‚æ•°ç±»åž‹ä¸Žæ–¹æ³•å?‚æ•°å…¼å®¹.
     */
    public Object[] getArgs() {
        return args;
    }

    public void setReturnValue(Object returnValue) {
        this.returnValue = returnValue;
    }

    public AopCallback getCallingObj() {
        return callingObj;
    }

    public boolean isInvoked() {
        return invoked;
    }

    /**
     * èŽ·å?–å½“å‰?çš„æ–¹æ³•æ‹¦æˆªå™¨åˆ—è¡¨,æ³¨æ„?,è¿™ä¸ªåˆ—è¡¨æ˜¯ä¸?å?¯ä¿®æ”¹çš„.å¦‚æžœéœ€è¦?ä¿®æ”¹,é‚£ä¹ˆè¯·é€šè¿‡{@link #setMethodInterceptors(List)}
     */
    public List<MethodInterceptor> getMethodInterceptors() {
        return Collections.unmodifiableList(miList);
    }
    
    /**
     * è®¾ç½®å½“å‰?è°ƒç”¨çš„æ–¹æ³•æ‹¦æˆªå™¨åˆ—è¡¨,æ³¨æ„?,è¿™ä¸ªsetå?ªå¯¹å½“å‰?æ–¹æ³•è°ƒç”¨æœ‰æ•ˆ.
     */
    public void setMethodInterceptors(List<MethodInterceptor> miList) {
        this.miList = miList;
    }
}
