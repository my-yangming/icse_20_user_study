package jetbrains.mps.vcs.diff.changes;

/*Generated by MPS */

import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.vcs.diff.ChangeSet;
import org.jetbrains.mps.openapi.model.SNodeId;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.vcs.util.MergeStrategy;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.vcs.mergehints.runtime.VCSAspectUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SModel;

public class SetPropertyChange extends NodeChange {
  private SProperty myProperty;
  private String myNewValue;

  public SetPropertyChange(@NotNull ChangeSet changeSet, @NotNull SNodeId nodeId, SProperty property, String newValue) {
    super(changeSet, nodeId);
    myProperty = property;
    myNewValue = newValue;
  }
  @NotNull
  public String getPropertyName() {
    return myProperty.getName();
  }
  public SProperty getProperty() {
    return myProperty;
  }
  public boolean isAbout(SProperty property) {
    return myProperty.equals(property);
  }
  @Nullable
  @Override
  public MergeStrategy getMergeHint() {
    // get "nonconflicting" attribute in metamodel 
    SNode n = getChangeSet().getOldModel().getNode(getAffectedNodeId(false));
    MergeStrategy hint = VCSAspectUtil.getDefaultMergeStrategy(myProperty);
    if (hint != null) {
      return hint;
    }
    return VCSAspectUtil.getDefaultMergeStrategy(SNodeOperations.getConcept(n));
  }
  public String getNewValue() {
    return myNewValue;
  }
  @Override
  public void apply(@NotNull SModel model, @NotNull NodeCopier nodeCopier) {
    SNode node = model.getNode(getAffectedNodeId());
    assert node != null;
    node.setProperty(myProperty, myNewValue);
  }
  @NotNull
  @Override
  protected ModelChange createOppositeChange() {
    SNode node = getChangeSet().getOldModel().getNode(getAffectedNodeId(false));
    assert node != null;
    return new SetPropertyChange(getChangeSet().getOppositeChangeSet(), getAffectedNodeId(true), myProperty, node.getProperty(myProperty));
  }
  @Override
  public String toString() {
    return String.format("Set property %s to %s in node %s", myProperty, myNewValue, getAffectedNodeId(false));
  }
  @Override
  public String getDescription() {
    return String.format("Changed %s of #%s from '%s' to '%s'", myProperty, getAffectedNodeId(false), getChangeSet().getOldModel().getNode(getAffectedNodeId(false)).getProperty(myProperty), getChangeSet().getNewModel().getNode(getAffectedNodeId(true)).getProperty(myProperty));
  }
}
