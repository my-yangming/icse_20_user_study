package proxy.primary.three;

import net.sf.cglib.proxy.Enhancer;
import net.sf.cglib.proxy.MethodInterceptor;
import net.sf.cglib.proxy.MethodProxy;
import java.lang.reflect.Method;

//éœ€è¦?å®žçŽ°MethodInterceptor, å½“å‰?è¿™ä¸ªç±»çš„å¯¹è±¡å°±æ˜¯ä¸€ä¸ªå›žè°ƒå¯¹è±¡
// MyCglibFactory æ˜¯ ç±»Aï¼Œå®ƒè°ƒç”¨äº†Enhancer(ç±»B)çš„æ–¹æ³•: setCallback(this)ï¼Œè€Œä¸”å°†ç±»Aå¯¹è±¡ä¼ ç»™äº†ç±»B
// è€Œç±»A çš„ æ–¹æ³•interceptä¼šè¢«ç±»Bçš„ setCallbackè°ƒç”¨ï¼Œè¿™å°±æ˜¯å›žè°ƒè®¾è®¡æ¨¡å¼?
public class MyCglibFactory implements MethodInterceptor {  //public interface MethodInterceptor extends Callback

    private Tank target;

    public MyCglibFactory(Tank target) {
        this.target = target;
    }

    public Tank myCglibCreator() {
        Enhancer enhancer = new Enhancer();

        // è®¾ç½®éœ€è¦?ä»£ç?†çš„å¯¹è±¡ :  ç›®æ ‡ç±»(target) , ä¹Ÿæ˜¯çˆ¶ç±»
        enhancer.setSuperclass(Tank.class);

        // è®¾ç½®ä»£ç?†å¯¹è±¡ï¼Œ è¿™æ˜¯å›žè°ƒè®¾è®¡æ¨¡å¼?:  è®¾ç½®å›žè°ƒæŽ¥å?£å¯¹è±¡ :
        enhancer.setCallback(this); // thisä»£è¡¨å½“å‰?ç±»çš„å¯¹è±¡ï¼Œå› ä¸ºå½“å‰?ç±»å®žçŽ°äº†Callback

        return (Tank) enhancer.create();
    }

    // è¿™ä¸ªå°±æ˜¯å›žè°ƒæ–¹æ³•ï¼ˆç±»Açš„æ–¹æ³•ï¼‰
    @Override
    public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {
        // åœ¨å‰?é?¢å?šä¸€äº›äº‹æƒ…: è®°å½•å¼€å§‹æ—¶é—´
        long start = System.currentTimeMillis();
        System.out.println("start time : " + start);

        method.invoke(target, args);

        // åœ¨å?Žé?¢å?šä¸€äº›äº‹æƒ…: è®°å½•ç»“æ?Ÿæ—¶é—´,å¹¶è®¡ç®—move()è¿?è¡Œæ—¶é—´
        long end = System.currentTimeMillis();
        System.out.println("end time : " + end);
        System.out.println("spend all time : " + (end - start)/1000 + "s.");
        return null;
    }
}
