package com.xiaojinzi.component.impl.service;

import android.support.annotation.NonNull;

import com.xiaojinzi.component.error.RxJavaException;
import com.xiaojinzi.component.error.ServiceInvokeException;
import com.xiaojinzi.component.error.ServiceNotFoundException;
import com.xiaojinzi.component.support.Utils;

import org.reactivestreams.Publisher;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.concurrent.Callable;

import io.reactivex.Completable;
import io.reactivex.CompletableSource;
import io.reactivex.Flowable;
import io.reactivex.Maybe;
import io.reactivex.MaybeSource;
import io.reactivex.Observable;
import io.reactivex.ObservableSource;
import io.reactivex.Single;
import io.reactivex.SingleEmitter;
import io.reactivex.SingleOnSubscribe;
import io.reactivex.SingleSource;
import io.reactivex.functions.Function;

/**
 * å…³äºŽ Rxç‰ˆæœ¬çš„å¢žå¼ºç‰ˆæœ¬,ä½¿ç”¨è¿™ä¸ªç±»åœ¨æœ?åŠ¡ä¸Šå‡ºçŽ°çš„ä»»ä½•é”™è¯¯,å¦‚æžœæ‚¨ä¸?æƒ³å¤„ç?†
 * è¿™é‡Œéƒ½èƒ½å¸®æ‚¨è‡ªåŠ¨è¿‡æ»¤æŽ‰,å¦‚æžœä½ å†™äº†é”™è¯¯å¤„ç?†,åˆ™ä¼šå›žè°ƒç»™æ‚¨
 * time   : 2019/01/09
 *
 * @author : xiaojinzi 30212
 */
public class RxService {

    private RxService() {
    }

    /**
     * è¿™é‡Œæœ€ä¸»è¦?çš„å®žçŽ°å°±æ˜¯æŠŠå‡ºçŽ°çš„é”™è¯¯è½¬åŒ–ä¸º {@link RxJavaException} å’Œ {@link ServiceInvokeException}
     * ç„¶å?Žå°±å?¯ä»¥å½“ç”¨æˆ·ä¸?æƒ³å¤„ç?†RxJavaçš„é”™è¯¯çš„æ—¶å€™ {@link com.xiaojinzi.component.support.RxErrorConsumer} è¿›è¡Œå¿½ç•¥äº†
     * èŽ·å?–å®žçŽ°ç±»,è¿™ä¸ªæ–¹æ³•å®žçŽ°äº†å“ªäº›è¿™é‡Œç½—åˆ—ä¸€ä¸‹ï¼š
     * 1. ä¿?è¯?åœ¨æ‰¾ä¸?åˆ°æœ?åŠ¡å®žçŽ°ç±»çš„æ—¶å€™ä¸?ä¼šæœ‰å¼‚å¸¸,ä½ å?ªç®¡å†™æ­£ç¡®æƒ…å†µçš„é€»è¾‘ä»£ç ?
     * 2. ä¿?è¯?æœ?åŠ¡é‚£ä¸ªå®žçŽ°ç±»åœ¨ä¸»çº¿ç¨‹ä¸Šè¢«åˆ›å»º
     * 3. åœ¨ä¿?è¯?äº†ç¬¬ä¸€ç‚¹çš„æƒ…å†µä¸‹ä¿?è¯?ä¸?æ”¹å?˜ RxJava çš„æ‰§è¡Œçº¿ç¨‹
     * 4. ä¿?è¯?è°ƒç”¨ä»»ä½•ä¸€ä¸ªæœ?åŠ¡å®žçŽ°ç±»çš„æ—¶å€™å‡ºçŽ°çš„é”™è¯¯ç”¨ {@link ServiceInvokeException}
     * ä»£æ›¿,å½“ç„¶äº†,çœŸå®žçš„é”™è¯¯åœ¨ {@link Throwable#getCause()} ä¸­å?¯ä»¥èŽ·å?–åˆ°
     * 5. å¦‚æžœæœ?åŠ¡æ–¹æ³•è¿”å›žçš„æ˜¯ RxJava çš„äº”ç§? Observable : [Single,Observable,Flowable,Maybe,Completable]
     * å½“é”™è¯¯èµ°äº† RxJava çš„OnError,è¿™é‡Œä¹Ÿä¼šæŠŠé”™è¯¯åŒ…è£…æˆ? {@link RxJavaException},çœŸå®žé”™è¯¯åœ¨ {@link Throwable#getCause()} ä¸­
     *
     * @param tClass
     * @param <T>
     * @return
     */
    public static <T> Single<T> with(@NonNull final Class<T> tClass) {
        return Single.fromCallable(new Callable<T>() {
            @Override
            public T call() throws Exception {
                T tempImpl = null;
                if (Utils.isMainThread()) {
                    tempImpl = Service.get(tClass);
                } else {
                    // è¿™æ®µä»£ç ?å¦‚ä½•ä¸ºç©ºçš„è¯?ä¼šç›´æŽ¥æŠ›å‡ºå¼‚å¸¸
                    tempImpl = blockingGetInChildThread(tClass);
                }
                final T serviceImpl = tempImpl;
                if (serviceImpl == null) {
                    throw new ServiceNotFoundException(tClass.getName());
                }
                // è¿™ä¸ªæ˜¯ä¸ºäº†è®©æ¯?ä¸€ä¸ªé”™è¯¯éƒ½èƒ½è¢«ç®¡æŽ§,ç„¶å?Žå¦‚æžœç”¨æˆ·ä¸?æƒ³å¤„ç?†çš„è¯?,æˆ‘è¿™è¾¹éƒ½è‡ªåŠ¨å¿½ç•¥æŽ‰
                return proxy(tClass, serviceImpl);
            }


        });
    }

    /**
     * åˆ›å»ºä»£ç?†å¯¹è±¡åŒ…è£…é”™è¯¯
     *
     * @param tClass
     * @param serviceImpl
     * @param <T>
     * @return
     */
    private static <T> T proxy(@NonNull final Class<T> tClass, final T serviceImpl) {
        return (T) Proxy.newProxyInstance(tClass.getClassLoader(), new Class[]{tClass}, new InvocationHandler() {
            @Override
            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                try {
                    Class<?> returnType = method.getReturnType();
                    // 1 : Single
                    // 2 : Observable
                    // 3 : Flowable
                    // 4 : Maybe
                    // 5 : Completable
                    int rxType = -1;
                    // å¦‚æžœæ˜¯ RxJava çš„äº”ç§?å½¢å¼?
                    if (returnType == Single.class) {
                        rxType = 1;
                    } else if (returnType == Observable.class) {
                        rxType = 2;
                    } else if (returnType == Flowable.class) {
                        rxType = 3;
                    } else if (returnType == Maybe.class) {
                        rxType = 4;
                    } else if (returnType == Completable.class) {
                        rxType = 5;
                    }
                    // æ‹¿åˆ°æ–¹æ³•æ‰§è¡Œçš„å¯¹è±¡,å¦‚æžœå¯¹è±¡æ˜¯ [Observable] ç³»åˆ—ä¸­çš„äº”ä¸ª
                    Object result = method.invoke(serviceImpl, args);
                    if (rxType == 1) {
                        result = ((Single) result).onErrorResumeNext(new Function<Throwable, SingleSource>() {
                            @Override
                            public SingleSource apply(Throwable throwable) throws Exception {
                                return Single.error(new RxJavaException(throwable));
                            }
                        });
                    } else if (rxType == 2) {
                        result = ((Observable) result).onErrorResumeNext(new Function<Throwable, ObservableSource>() {
                            @Override
                            public ObservableSource apply(Throwable throwable) throws Exception {
                                return Observable.error(new RxJavaException(throwable));
                            }
                        });
                    } else if (rxType == 3) {
                        result = ((Flowable) result).onErrorResumeNext(new Function<Throwable, Publisher>() {
                            @Override
                            public Publisher apply(Throwable throwable) throws Exception {
                                return Flowable.error(new RxJavaException(throwable));
                            }
                        });
                    } else if (rxType == 4) {
                        result = ((Maybe) result).onErrorResumeNext(new Function<Throwable, MaybeSource>() {
                            @Override
                            public MaybeSource apply(Throwable throwable) throws Exception {
                                return Maybe.error(new RxJavaException(throwable));
                            }
                        });
                    } else if (rxType == 5) {
                        result = ((Completable) result).onErrorResumeNext(new Function<Throwable, CompletableSource>() {
                            @Override
                            public CompletableSource apply(Throwable throwable) throws Exception {
                                return Completable.error(new RxJavaException(throwable));
                            }
                        });
                    }
                    return result;
                } catch (Exception e) {
                    throw new ServiceInvokeException(e);
                }
            }
        });
    }

    /**
     * åœ¨ä¸»çº¿ç¨‹ä¸­åŽ»åˆ›å»ºå¯¹è±¡,ç„¶å?Žåœ¨å…¶ä»–çº¿ç¨‹æ‹¿åˆ°
     *
     * @param tClass
     * @param <T>
     * @return
     */
    private static <T> T blockingGetInChildThread(@NonNull final Class<T> tClass) {
        return Single.create(new SingleOnSubscribe<T>() {
            @Override
            public void subscribe(final SingleEmitter<T> emitter) throws Exception {
                // ä¸»çº¿ç¨‹åŽ»èŽ·å?–,å› ä¸ºæ¡†æž¶ä»»ä½•ä¸€ä¸ªç”¨æˆ·è‡ªå®šä¹‰çš„ç±»åˆ›å»ºçš„æ—¶å€™éƒ½ä¼šåœ¨ä¸»çº¿ç¨‹ä¸Šè¢«åˆ›å»º
                Utils.postActionToMainThread(new Runnable() {
                    @Override
                    public void run() {
                        T t = Service.get(tClass);
                        if (emitter.isDisposed()) {
                            return;
                        }
                        if (t == null) {
                            emitter.onError(new ServiceNotFoundException("class:" + tClass.getName()));
                        } else {
                            emitter.onSuccess(t);
                        }
                    }
                });
            }
        }).blockingGet();
    }

}
