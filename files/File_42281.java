package org.horaapps.leafpic.views;

import android.animation.ValueAnimator;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.PointF;
import android.graphics.RectF;
import android.util.AttributeSet;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.widget.ImageView;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

/**
 * æ‰‹åŠ¿å›¾ç‰‡æŽ§ä»¶
 *
 * @author clifford
 */
public class PinchImageView extends ImageView {

    ////////////////////////////////é…?ç½®å?‚æ•°////////////////////////////////

    /**
     * å›¾ç‰‡ç¼©æ”¾åŠ¨ç”»æ—¶é—´
     */
    public static final int SCALE_ANIMATOR_DURATION = 200;

    /**
     * æƒ¯æ€§åŠ¨ç”»è¡°å‡?å?‚æ•°
     */
    public static final float FLING_DAMPING_FACTOR = 0.9f;

    /**
     * å›¾ç‰‡æœ€å¤§æ”¾å¤§æ¯”ä¾‹
     */
    private static final float MAX_SCALE = 4f;

    ////////////////////////////////ç›‘å?¬å™¨////////////////////////////////

    /**
     * å¤–ç•Œç‚¹å‡»äº‹ä»¶
     *
     * @see #setOnClickListener(OnClickListener)
     */
    private OnClickListener mOnClickListener;

    /**
     * å¤–ç•Œé•¿æŒ‰äº‹ä»¶
     *
     * @see #setOnLongClickListener(OnLongClickListener)
     */
    private OnLongClickListener mOnLongClickListener;

    @Override
    public void setOnClickListener(OnClickListener l) {
        //é»˜è®¤çš„clickä¼šåœ¨ä»»ä½•ç‚¹å‡»æƒ…å†µä¸‹éƒ½ä¼šè§¦å?‘ï¼Œæ‰€ä»¥æ?žæˆ?è‡ªå·±çš„
        mOnClickListener = l;
    }

    @Override
    public void setOnLongClickListener(OnLongClickListener l) {
        //é»˜è®¤çš„long clickä¼šåœ¨ä»»ä½•é•¿æŒ‰æƒ…å†µä¸‹éƒ½ä¼šè§¦å?‘ï¼Œæ‰€ä»¥æ?žæˆ?è‡ªå·±çš„
        mOnLongClickListener = l;
    }

    ////////////////////////////////å…¬å…±çŠ¶æ€?èŽ·å?–////////////////////////////////

    /**
     * æ‰‹åŠ¿çŠ¶æ€?ï¼šè‡ªç”±çŠ¶æ€?
     *
     * @see #getPinchMode()
     */
    public static final int PINCH_MODE_FREE = 0;

    /**
     * æ‰‹åŠ¿çŠ¶æ€?ï¼šå?•æŒ‡æ»šåŠ¨çŠ¶æ€?
     *
     * @see #getPinchMode()
     */
    public static final int PINCH_MODE_SCROLL = 1;

    /**
     * æ‰‹åŠ¿çŠ¶æ€?ï¼šå?ŒæŒ‡ç¼©æ”¾çŠ¶æ€?
     *
     * @see #getPinchMode()
     */
    public static final int PINCH_MODE_SCALE = 2;

    /**
     * å¤–å±‚å?˜æ?¢çŸ©é˜µï¼Œå¦‚æžœæ˜¯å?•ä½?çŸ©é˜µï¼Œé‚£ä¹ˆå›¾ç‰‡æ˜¯fit centerçŠ¶æ€?
     *
     * @see #getOuterMatrix(Matrix)
     * @see #outerMatrixTo(Matrix, long)
     */
    private Matrix mOuterMatrix = new Matrix();

    /**
     * çŸ©å½¢é?®ç½©
     *
     * @see #getMask()
     * @see #zoomMaskTo(RectF, long)
     */
    private RectF mMask;

    /**
     * å½“å‰?æ‰‹åŠ¿çŠ¶æ€?
     *
     * @see #getPinchMode()
     * @see #PINCH_MODE_FREE
     * @see #PINCH_MODE_SCROLL
     * @see #PINCH_MODE_SCALE
     */
    private int mPinchMode = PINCH_MODE_FREE;

    /**
     * èŽ·å?–å¤–éƒ¨å?˜æ?¢çŸ©é˜µ.
     * <p>
     * å¤–éƒ¨å?˜æ?¢çŸ©é˜µè®°å½•äº†å›¾ç‰‡æ‰‹åŠ¿æ“?ä½œçš„æœ€ç»ˆç»“æžœ,æ˜¯ç›¸å¯¹äºŽå›¾ç‰‡fit centerçŠ¶æ€?çš„å?˜æ?¢.
     * é»˜è®¤å€¼ä¸ºå?•ä½?çŸ©é˜µ,æ­¤æ—¶å›¾ç‰‡ä¸ºfit centerçŠ¶æ€?.
     *
     * @param matrix ç”¨äºŽå¡«å……ç»“æžœçš„å¯¹è±¡
     * @return å¦‚æžœä¼ äº†matrixå?‚æ•°åˆ™å°†matrixå¡«å……å?Žè¿”å›ž, å?¦åˆ™newä¸€ä¸ªå¡«å……è¿”å›ž
     */
    public Matrix getOuterMatrix(Matrix matrix) {
        if (matrix == null) {
            matrix = new Matrix(mOuterMatrix);
        } else {
            matrix.set(mOuterMatrix);
        }
        return matrix;
    }

    /**
     * èŽ·å?–å†…éƒ¨å?˜æ?¢çŸ©é˜µ.
     * <p>
     * å†…éƒ¨å?˜æ?¢çŸ©é˜µæ˜¯åŽŸå›¾åˆ°fit centerçŠ¶æ€?çš„å?˜æ?¢,å½“åŽŸå›¾å°ºå¯¸å?˜åŒ–æˆ–è€…æŽ§ä»¶å¤§å°?å?˜åŒ–éƒ½ä¼šå?‘ç”Ÿæ”¹å?˜
     * å½“å°šæœªå¸ƒå±€æˆ–è€…åŽŸå›¾ä¸?å­˜åœ¨æ—¶,å…¶å€¼æ— æ„?ä¹‰.æ‰€ä»¥åœ¨è°ƒç”¨å‰?éœ€è¦?ç¡®ä¿?å‰?ç½®æ?¡ä»¶æœ‰æ•ˆ,å?¦åˆ™å°†å½±å“?è®¡ç®—ç»“æžœ.
     *
     * @param matrix ç”¨äºŽå¡«å……ç»“æžœçš„å¯¹è±¡
     * @return å¦‚æžœä¼ äº†matrixå?‚æ•°åˆ™å°†matrixå¡«å……å?Žè¿”å›ž, å?¦åˆ™newä¸€ä¸ªå¡«å……è¿”å›ž
     */
    public Matrix getInnerMatrix(Matrix matrix) {
        if (matrix == null) {
            matrix = new Matrix();
        } else {
            matrix.reset();
        }
        if (isReady()) {
            //åŽŸå›¾å¤§å°?
            RectF tempSrc = MathUtils.rectFTake(0, 0, getDrawable().getIntrinsicWidth(), getDrawable().getIntrinsicHeight());
            //æŽ§ä»¶å¤§å°?
            RectF tempDst = MathUtils.rectFTake(0, 0, getWidth(), getHeight());
            //è®¡ç®—fit centerçŸ©é˜µ
            matrix.setRectToRect(tempSrc, tempDst, Matrix.ScaleToFit.CENTER);
            //é‡Šæ”¾ä¸´æ—¶å¯¹è±¡
            MathUtils.rectFGiven(tempDst);
            MathUtils.rectFGiven(tempSrc);
        }
        return matrix;
    }

    /**
     * èŽ·å?–å›¾ç‰‡æ€»å?˜æ?¢çŸ©é˜µ.
     * <p>
     * æ€»å?˜æ?¢çŸ©é˜µä¸ºå†…éƒ¨å?˜æ?¢çŸ©é˜µxå¤–éƒ¨å?˜æ?¢çŸ©é˜µ,å†³å®šäº†åŽŸå›¾åˆ°æ‰€è§?æœ€ç»ˆçŠ¶æ€?çš„å?˜æ?¢
     * å½“å°šæœªå¸ƒå±€æˆ–è€…åŽŸå›¾ä¸?å­˜åœ¨æ—¶,å…¶å€¼æ— æ„?ä¹‰.æ‰€ä»¥åœ¨è°ƒç”¨å‰?éœ€è¦?ç¡®ä¿?å‰?ç½®æ?¡ä»¶æœ‰æ•ˆ,å?¦åˆ™å°†å½±å“?è®¡ç®—ç»“æžœ.
     *
     * @param matrix ç”¨äºŽå¡«å……ç»“æžœçš„å¯¹è±¡
     * @return å¦‚æžœä¼ äº†matrixå?‚æ•°åˆ™å°†matrixå¡«å……å?Žè¿”å›ž, å?¦åˆ™newä¸€ä¸ªå¡«å……è¿”å›ž
     * @see #getOuterMatrix(Matrix)
     * @see #getInnerMatrix(Matrix)
     */
    public Matrix getCurrentImageMatrix(Matrix matrix) {
        //èŽ·å?–å†…éƒ¨å?˜æ?¢çŸ©é˜µ
        matrix = getInnerMatrix(matrix);
        //ä¹˜ä¸Šå¤–éƒ¨å?˜æ?¢çŸ©é˜µ
        matrix.postConcat(mOuterMatrix);
        return matrix;
    }

    /**
     * èŽ·å?–å½“å‰?å?˜æ?¢å?Žçš„å›¾ç‰‡ä½?ç½®å’Œå°ºå¯¸
     * <p>
     * å½“å°šæœªå¸ƒå±€æˆ–è€…åŽŸå›¾ä¸?å­˜åœ¨æ—¶,å…¶å€¼æ— æ„?ä¹‰.æ‰€ä»¥åœ¨è°ƒç”¨å‰?éœ€è¦?ç¡®ä¿?å‰?ç½®æ?¡ä»¶æœ‰æ•ˆ,å?¦åˆ™å°†å½±å“?è®¡ç®—ç»“æžœ.
     *
     * @param rectF ç”¨äºŽå¡«å……ç»“æžœçš„å¯¹è±¡
     * @return å¦‚æžœä¼ äº†rectFå?‚æ•°åˆ™å°†rectFå¡«å……å?Žè¿”å›ž, å?¦åˆ™newä¸€ä¸ªå¡«å……è¿”å›ž
     * @see #getCurrentImageMatrix(Matrix)
     */
    public RectF getImageBound(RectF rectF) {
        if (rectF == null) {
            rectF = new RectF();
        } else {
            rectF.setEmpty();
        }
        if (!isReady()) {
            return rectF;
        } else {
            //ç”³è¯·ä¸€ä¸ªç©ºmatrix
            Matrix matrix = MathUtils.matrixTake();
            //èŽ·å?–å½“å‰?æ€»å?˜æ?¢çŸ©é˜µ
            getCurrentImageMatrix(matrix);
            //å¯¹åŽŸå›¾çŸ©å½¢è¿›è¡Œå?˜æ?¢å¾—åˆ°å½“å‰?æ˜¾ç¤ºçŸ©å½¢
            rectF.set(0, 0, getDrawable().getIntrinsicWidth(), getDrawable().getIntrinsicHeight());
            matrix.mapRect(rectF);
            //é‡Šæ”¾ä¸´æ—¶matrix
            MathUtils.matrixGiven(matrix);
            return rectF;
        }
    }

    /**
     * èŽ·å?–å½“å‰?è®¾ç½®çš„mask
     *
     * @return è¿”å›žå½“å‰?çš„maskå¯¹è±¡å‰¯æœ¬, å¦‚æžœå½“å‰?æ²¡æœ‰è®¾ç½®maskåˆ™è¿”å›žnull
     */
    public RectF getMask() {
        if (mMask != null) {
            return new RectF(mMask);
        } else {
            return null;
        }
    }

    /**
     * èŽ·å?–å½“å‰?æ‰‹åŠ¿çŠ¶æ€?
     *
     * @see #PINCH_MODE_FREE
     * @see #PINCH_MODE_SCROLL
     * @see #PINCH_MODE_SCALE
     */
    public int getPinchMode() {
        return mPinchMode;
    }

    /**
     * ä¸ŽViewPagerç»“å?ˆçš„æ—¶å€™ä½¿ç”¨
     *
     * @param direction
     * @return
     */
    @Override
    public boolean canScrollHorizontally(int direction) {
        if (mPinchMode == PinchImageView.PINCH_MODE_SCALE) {
            return true;
        }
        RectF bound = getImageBound(null);
        if (bound == null) {
            return false;
        }
        if (bound.isEmpty()) {
            return false;
        }
        if (direction > 0) {
            return bound.right > getWidth();
        } else {
            return bound.left < 0;
        }
    }

    /**
     * ä¸ŽViewPagerç»“å?ˆçš„æ—¶å€™ä½¿ç”¨
     *
     * @param direction
     * @return
     */
    @Override
    public boolean canScrollVertically(int direction) {
        if (mPinchMode == PinchImageView.PINCH_MODE_SCALE) {
            return true;
        }
        RectF bound = getImageBound(null);
        if (bound == null) {
            return false;
        }
        if (bound.isEmpty()) {
            return false;
        }
        if (direction > 0) {
            return bound.bottom > getHeight();
        } else {
            return bound.top < 0;
        }
    }

    ////////////////////////////////å…¬å…±çŠ¶æ€?è®¾ç½®////////////////////////////////

    /**
     * æ‰§è¡Œå½“å‰?outerMatrixåˆ°æŒ‡å®šouterMatrixæ¸?å?˜çš„åŠ¨ç”»
     * <p>
     * è°ƒç”¨æ­¤æ–¹æ³•ä¼šå?œæ­¢æ­£åœ¨è¿›è¡Œä¸­çš„æ‰‹åŠ¿ä»¥å?Šæ‰‹åŠ¿åŠ¨ç”».
     * å½“durationä¸º0æ—¶,outerMatrixå€¼ä¼šè¢«ç«‹å?³è®¾ç½®è€Œä¸?ä¼šå?¯åŠ¨åŠ¨ç”».
     *
     * @param endMatrix åŠ¨ç”»ç›®æ ‡çŸ©é˜µ
     * @param duration  åŠ¨ç”»æŒ?ç»­æ—¶é—´
     * @see #getOuterMatrix(Matrix)
     */
    public void outerMatrixTo(Matrix endMatrix, long duration) {
        if (endMatrix == null) {
            return;
        }
        //å°†æ‰‹åŠ¿è®¾ç½®ä¸ºPINCH_MODE_FREEå°†å?œæ­¢å?Žç»­æ‰‹åŠ¿çš„è§¦å?‘
        mPinchMode = PINCH_MODE_FREE;
        //å?œæ­¢æ‰€æœ‰æ­£åœ¨è¿›è¡Œçš„åŠ¨ç”»
        cancelAllAnimator();
        //å¦‚æžœæ—¶é—´ä¸?å?ˆæ³•ç«‹å?³æ‰§è¡Œç»“æžœ
        if (duration <= 0) {
            mOuterMatrix.set(endMatrix);
            dispatchOuterMatrixChanged();
            invalidate();
        } else {
            //åˆ›å»ºçŸ©é˜µå?˜åŒ–åŠ¨ç”»
            mScaleAnimator = new ScaleAnimator(mOuterMatrix, endMatrix, duration);
            mScaleAnimator.start();
        }
    }

    /**
     * æ‰§è¡Œå½“å‰?maskåˆ°æŒ‡å®šmaskçš„å?˜åŒ–åŠ¨ç”»
     * <p>
     * è°ƒç”¨æ­¤æ–¹æ³•ä¸?ä¼šå?œæ­¢æ‰‹åŠ¿ä»¥å?Šæ‰‹åŠ¿ç›¸å…³åŠ¨ç”»,ä½†ä¼šå?œæ­¢æ­£åœ¨è¿›è¡Œçš„maskåŠ¨ç”».
     * å½“å‰?maskä¸ºnullæ—¶,åˆ™ä¸?æ‰§è¡ŒåŠ¨ç”»ç«‹å?³è®¾ç½®ä¸ºç›®æ ‡mask.
     * å½“durationä¸º0æ—¶,ç«‹å?³å°†å½“å‰?maskè®¾ç½®ä¸ºç›®æ ‡mask,ä¸?ä¼šæ‰§è¡ŒåŠ¨ç”».
     *
     * @param mask     åŠ¨ç”»ç›®æ ‡mask
     * @param duration åŠ¨ç”»æŒ?ç»­æ—¶é—´
     * @see #getMask()
     */
    public void zoomMaskTo(RectF mask, long duration) {
        if (mask == null) {
            return;
        }
        //å?œæ­¢maskåŠ¨ç”»
        if (mMaskAnimator != null) {
            mMaskAnimator.cancel();
            mMaskAnimator = null;
        }
        //å¦‚æžœdurationä¸º0æˆ–è€…ä¹‹å‰?æ²¡æœ‰è®¾ç½®è¿‡mask,ä¸?æ‰§è¡ŒåŠ¨ç”»,ç«‹å?³è®¾ç½®
        if (duration <= 0 || mMask == null) {
            if (mMask == null) {
                mMask = new RectF();
            }
            mMask.set(mask);
            invalidate();
        } else {
            //æ‰§è¡ŒmaskåŠ¨ç”»
            mMaskAnimator = new MaskAnimator(mMask, mask, duration);
            mMaskAnimator.start();
        }
    }

    /**
     * é‡?ç½®æ‰€æœ‰çŠ¶æ€?
     * <p>
     * é‡?ç½®ä½?ç½®åˆ°fit centerçŠ¶æ€?,æ¸…ç©ºmask,å?œæ­¢æ‰€æœ‰æ‰‹åŠ¿,å?œæ­¢æ‰€æœ‰åŠ¨ç”».
     * ä½†ä¸?æ¸…ç©ºdrawable,ä»¥å?Šäº‹ä»¶ç»‘å®šç›¸å…³æ•°æ?®.
     */
    public void reset() {
        //é‡?ç½®ä½?ç½®åˆ°fit
        mOuterMatrix.reset();
        dispatchOuterMatrixChanged();
        //æ¸…ç©ºmask
        mMask = null;
        //å?œæ­¢æ‰€æœ‰æ‰‹åŠ¿
        mPinchMode = PINCH_MODE_FREE;
        mLastMovePoint.set(0, 0);
        mScaleCenter.set(0, 0);
        mScaleBase = 0;
        //å?œæ­¢æ‰€æœ‰åŠ¨ç”»
        if (mMaskAnimator != null) {
            mMaskAnimator.cancel();
            mMaskAnimator = null;
        }
        cancelAllAnimator();
        //é‡?ç»˜
        invalidate();
    }

    ////////////////////////////////å¯¹å¤–å¹¿æ’­äº‹ä»¶////////////////////////////////

    /**
     * å¤–éƒ¨çŸ©é˜µå?˜åŒ–äº‹ä»¶é€šçŸ¥ç›‘å?¬å™¨
     */
    public interface OuterMatrixChangedListener {

        /**
         * å¤–éƒ¨çŸ©é˜µå?˜åŒ–å›žè°ƒ
         * <p>
         * å¤–éƒ¨çŸ©é˜µçš„ä»»ä½•å?˜åŒ–å?Žéƒ½æ”¶åˆ°æ­¤å›žè°ƒ.
         * å¤–éƒ¨çŸ©é˜µå?˜åŒ–å?Ž,æ€»å?˜åŒ–çŸ©é˜µ,å›¾ç‰‡çš„å±•ç¤ºä½?ç½®éƒ½å°†å?‘ç”Ÿå?˜åŒ–.
         *
         * @param pinchImageView
         * @see #getOuterMatrix(Matrix)
         * @see #getCurrentImageMatrix(Matrix)
         * @see #getImageBound(RectF)
         */
        void onOuterMatrixChanged(PinchImageView pinchImageView);
    }

    /**
     * æ‰€æœ‰OuterMatrixChangedListenerç›‘å?¬åˆ—è¡¨
     *
     * @see #addOuterMatrixChangedListener(OuterMatrixChangedListener)
     * @see #removeOuterMatrixChangedListener(OuterMatrixChangedListener)
     */
    private List<OuterMatrixChangedListener> mOuterMatrixChangedListeners;

    /**
     * å½“mOuterMatrixChangedListenersè¢«é”?å®šä¸?å…?è®¸ä¿®æ”¹æ—¶,ä¸´æ—¶å°†ä¿®æ”¹å†™åˆ°è¿™ä¸ªå‰¯æœ¬ä¸­
     *
     * @see #mOuterMatrixChangedListeners
     */
    private List<OuterMatrixChangedListener> mOuterMatrixChangedListenersCopy;

    /**
     * mOuterMatrixChangedListenersçš„ä¿®æ”¹é”?å®š
     * <p>
     * å½“è¿›å…¥dispatchOuterMatrixChangedæ–¹æ³•æ—¶,è¢«åŠ 1,é€€å‡ºå‰?è¢«å‡?1
     *
     * @see #dispatchOuterMatrixChanged()
     * @see #addOuterMatrixChangedListener(OuterMatrixChangedListener)
     * @see #removeOuterMatrixChangedListener(OuterMatrixChangedListener)
     */
    private int mDispatchOuterMatrixChangedLock;

    /**
     * æ·»åŠ å¤–éƒ¨çŸ©é˜µå?˜åŒ–ç›‘å?¬
     *
     * @param listener
     */
    public void addOuterMatrixChangedListener(OuterMatrixChangedListener listener) {
        if (listener == null) {
            return;
        }
        //å¦‚æžœç›‘å?¬åˆ—è¡¨æ²¡æœ‰è¢«ä¿®æ”¹é”?å®šç›´æŽ¥å°†ç›‘å?¬æ·»åŠ åˆ°ç›‘å?¬åˆ—è¡¨
        if (mDispatchOuterMatrixChangedLock == 0) {
            if (mOuterMatrixChangedListeners == null) {
                mOuterMatrixChangedListeners = new ArrayList<OuterMatrixChangedListener>();
            }
            mOuterMatrixChangedListeners.add(listener);
        } else {
            //å¦‚æžœç›‘å?¬åˆ—è¡¨ä¿®æ”¹è¢«é”?å®š,é‚£ä¹ˆå°?è¯•åœ¨ç›‘å?¬åˆ—è¡¨å‰¯æœ¬ä¸Šæ·»åŠ 
            //ç›‘å?¬åˆ—è¡¨å‰¯æœ¬å°†ä¼šåœ¨é”?å®šè¢«è§£é™¤æ—¶æ›¿æ?¢åˆ°ç›‘å?¬åˆ—è¡¨é‡Œ
            if (mOuterMatrixChangedListenersCopy == null) {
                if (mOuterMatrixChangedListeners != null) {
                    mOuterMatrixChangedListenersCopy = new ArrayList<OuterMatrixChangedListener>(mOuterMatrixChangedListeners);
                } else {
                    mOuterMatrixChangedListenersCopy = new ArrayList<OuterMatrixChangedListener>();
                }
            }
            mOuterMatrixChangedListenersCopy.add(listener);
        }
    }

    /**
     * åˆ é™¤å¤–éƒ¨çŸ©é˜µå?˜åŒ–ç›‘å?¬
     *
     * @param listener
     */
    public void removeOuterMatrixChangedListener(OuterMatrixChangedListener listener) {
        if (listener == null) {
            return;
        }
        //å¦‚æžœç›‘å?¬åˆ—è¡¨æ²¡æœ‰è¢«ä¿®æ”¹é”?å®šç›´æŽ¥åœ¨ç›‘å?¬åˆ—è¡¨æ•°æ?®ç»“æž„ä¸Šä¿®æ”¹
        if (mDispatchOuterMatrixChangedLock == 0) {
            if (mOuterMatrixChangedListeners != null) {
                mOuterMatrixChangedListeners.remove(listener);
            }
        } else {
            //å¦‚æžœç›‘å?¬åˆ—è¡¨è¢«ä¿®æ”¹é”?å®š,é‚£ä¹ˆå°±åœ¨å…¶å‰¯æœ¬ä¸Šä¿®æ”¹
            //å…¶å‰¯æœ¬å°†ä¼šåœ¨é”?å®šè§£é™¤æ—¶æ›¿æ?¢å›žç›‘å?¬åˆ—è¡¨
            if (mOuterMatrixChangedListenersCopy == null) {
                if (mOuterMatrixChangedListeners != null) {
                    mOuterMatrixChangedListenersCopy = new ArrayList<OuterMatrixChangedListener>(mOuterMatrixChangedListeners);
                }
            }
            if (mOuterMatrixChangedListenersCopy != null) {
                mOuterMatrixChangedListenersCopy.remove(listener);
            }
        }
    }

    /**
     * è§¦å?‘å¤–éƒ¨çŸ©é˜µä¿®æ”¹äº‹ä»¶
     * <p>
     * éœ€è¦?åœ¨æ¯?æ¬¡ç»™å¤–éƒ¨çŸ©é˜µè®¾ç½®å€¼æ—¶éƒ½è°ƒç”¨æ­¤æ–¹æ³•.
     *
     * @see #mOuterMatrix
     */
    private void dispatchOuterMatrixChanged() {
        if (mOuterMatrixChangedListeners == null) {
            return;
        }
        //å¢žåŠ é”?
        //è¿™é‡Œä¹‹æ‰€ä»¥ç”¨è®¡æ•°å™¨å?šé”?å®šæ˜¯å› ä¸ºå?¯èƒ½åœ¨é”?å®šæœŸé—´å?ˆé—´æŽ¥è°ƒç”¨äº†æ­¤æ–¹æ³•äº§ç”Ÿé€’å½’
        //ä½¿ç”¨booleanæ— æ³•åˆ¤æ–­é€’å½’ç»“æ?Ÿ
        mDispatchOuterMatrixChangedLock++;
        //åœ¨åˆ—è¡¨å¾ªçŽ¯è¿‡ç¨‹ä¸­ä¸?å…?è®¸ä¿®æ”¹åˆ—è¡¨,å?¦åˆ™å°†å¼•å?‘å´©æºƒ
        for (OuterMatrixChangedListener listener : mOuterMatrixChangedListeners) {
            listener.onOuterMatrixChanged(this);
        }
        //å‡?é”?
        mDispatchOuterMatrixChangedLock--;
        //å¦‚æžœæ˜¯é€’å½’çš„æƒ…å†µ,mDispatchOuterMatrixChangedLockå?¯èƒ½å¤§äºŽ1,å?ªæœ‰å‡?åˆ°0æ‰?èƒ½ç®—åˆ—è¡¨çš„é”?å®šè§£é™¤
        if (mDispatchOuterMatrixChangedLock == 0) {
            //å¦‚æžœæœŸé—´æœ‰ä¿®æ”¹åˆ—è¡¨,é‚£ä¹ˆå‰¯æœ¬å°†ä¸?ä¸ºnull
            if (mOuterMatrixChangedListenersCopy != null) {
                //å°†å‰¯æœ¬æ›¿æ?¢æŽ‰æ­£å¼?çš„åˆ—è¡¨
                mOuterMatrixChangedListeners = mOuterMatrixChangedListenersCopy;
                //æ¸…ç©ºå‰¯æœ¬
                mOuterMatrixChangedListenersCopy = null;
            }
        }
    }

    ////////////////////////////////ç”¨äºŽé‡?è½½å®šåˆ¶////////////////////////////////

    /**
     * èŽ·å?–å›¾ç‰‡æœ€å¤§å?¯æ”¾å¤§çš„æ¯”ä¾‹
     * <p>
     * å¦‚æžœæ”¾å¤§å¤§äºŽè¿™ä¸ªæ¯”ä¾‹åˆ™ä¸?è¢«å…?è®¸.
     * åœ¨å?Œæ‰‹ç¼©æ”¾è¿‡ç¨‹ä¸­å¦‚æžœå›¾ç‰‡æ”¾å¤§æ¯”ä¾‹å¤§äºŽè¿™ä¸ªå€¼,æ‰‹æŒ‡é‡Šæ”¾å°†å›žå¼¹åˆ°è¿™ä¸ªæ¯”ä¾‹.
     * åœ¨å?Œå‡»æ”¾å¤§è¿‡ç¨‹ä¸­ä¸?å…?è®¸æ”¾å¤§æ¯”ä¾‹å¤§äºŽè¿™ä¸ªå€¼.
     * è¦†ç›–æ­¤æ–¹æ³•å?¯ä»¥å®šåˆ¶ä¸?å?Œæƒ…å†µä½¿ç”¨ä¸?å?Œçš„æœ€å¤§å?¯æ”¾å¤§æ¯”ä¾‹.
     *
     * @return ç¼©æ”¾æ¯”ä¾‹
     * @see #scaleEnd()
     * @see #doubleTap(float, float)
     */
    protected float getMaxScale() {
        return MAX_SCALE;
    }

    /**
     * è®¡ç®—å?Œå‡»ä¹‹å?Žå›¾ç‰‡æŽ¥ä¸‹æ?¥åº”è¯¥è¢«ç¼©æ”¾çš„æ¯”ä¾‹
     * <p>
     * å¦‚æžœå€¼å¤§äºŽgetMaxScaleæˆ–è€…å°?äºŽfit centerå°ºå¯¸ï¼Œåˆ™å®žé™…ä½¿ç”¨å?–è¾¹ç•Œå€¼.
     * é€šè¿‡è¦†ç›–æ­¤æ–¹æ³•å?¯ä»¥å®šåˆ¶ä¸?å?Œçš„å›¾ç‰‡è¢«å?Œå‡»æ—¶ä½¿ç”¨ä¸?å?Œçš„æ”¾å¤§ç­–ç•¥.
     *
     * @param innerScale å½“å‰?å†…éƒ¨çŸ©é˜µçš„ç¼©æ”¾å€¼
     * @param outerScale å½“å‰?å¤–éƒ¨çŸ©é˜µçš„ç¼©æ”¾å€¼
     * @return æŽ¥ä¸‹æ?¥çš„ç¼©æ”¾æ¯”ä¾‹
     * @see #doubleTap(float, float)
     * @see #getMaxScale()
     */
    protected float calculateNextScale(float innerScale, float outerScale) {
        float currentScale = innerScale * outerScale;
        if (currentScale < MAX_SCALE) {
            return MAX_SCALE;
        } else {
            return innerScale;
        }
    }

    ////////////////////////////////åˆ?å§‹åŒ–////////////////////////////////

    public PinchImageView(Context context) {
        super(context);
        initView();
    }

    public PinchImageView(Context context, AttributeSet attrs) {
        super(context, attrs);
        initView();
    }

    public PinchImageView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
        initView();
    }

    private void initView() {
        //å¼ºåˆ¶è®¾ç½®å›¾ç‰‡scaleTypeä¸ºmatrix
        super.setScaleType(ScaleType.MATRIX);
    }

    //ä¸?å…?è®¸è®¾ç½®scaleTypeï¼Œå?ªèƒ½ç”¨å†…éƒ¨è®¾ç½®çš„matrix
    @Override
    public void setScaleType(ScaleType scaleType) {
    }

    ////////////////////////////////ç»˜åˆ¶////////////////////////////////

    @Override
    protected void onDraw(Canvas canvas) {
        //åœ¨ç»˜åˆ¶å‰?è®¾ç½®å?˜æ?¢çŸ©é˜µ
        if (isReady()) {
            Matrix matrix = MathUtils.matrixTake();
            setImageMatrix(getCurrentImageMatrix(matrix));
            MathUtils.matrixGiven(matrix);
        }
        //å¯¹å›¾åƒ?å?šé?®ç½©å¤„ç?†
        if (mMask != null) {
            canvas.save();
            canvas.clipRect(mMask);
            super.onDraw(canvas);
            canvas.restore();
        } else {
            super.onDraw(canvas);
        }
    }

    ////////////////////////////////æœ‰æ•ˆæ€§åˆ¤æ–­////////////////////////////////

    /**
     * åˆ¤æ–­å½“å‰?æƒ…å†µæ˜¯å?¦èƒ½æ‰§è¡Œæ‰‹åŠ¿ç›¸å…³è®¡ç®—
     * <p>
     * åŒ…æ‹¬:æ˜¯å?¦æœ‰å›¾ç‰‡,å›¾ç‰‡æ˜¯å?¦æœ‰å°ºå¯¸,æŽ§ä»¶æ˜¯å?¦æœ‰å°ºå¯¸.
     *
     * @return æ˜¯å?¦èƒ½æ‰§è¡Œæ‰‹åŠ¿ç›¸å…³è®¡ç®—
     */
    private boolean isReady() {
        return getDrawable() != null && getDrawable().getIntrinsicWidth() > 0 && getDrawable().getIntrinsicHeight() > 0
                && getWidth() > 0 && getHeight() > 0;
    }

    ////////////////////////////////maskåŠ¨ç”»å¤„ç?†////////////////////////////////

    /**
     * maskä¿®æ”¹çš„åŠ¨ç”»
     * <p>
     * å’Œå›¾ç‰‡çš„åŠ¨ç”»ç›¸äº’ç‹¬ç«‹.
     *
     * @see #zoomMaskTo(RectF, long)
     */
    private MaskAnimator mMaskAnimator;

    /**
     * maskå?˜æ?¢åŠ¨ç”»
     * <p>
     * å°†maskä»Žä¸€ä¸ªrectåŠ¨ç”»åˆ°å?¦å¤–ä¸€ä¸ªrect
     */
    private class MaskAnimator extends ValueAnimator implements ValueAnimator.AnimatorUpdateListener {

        /**
         * å¼€å§‹mask
         */
        private float[] mStart = new float[4];

        /**
         * ç»“æ?Ÿmask
         */
        private float[] mEnd = new float[4];

        /**
         * ä¸­é—´ç»“æžœmask
         */
        private float[] mResult = new float[4];

        /**
         * åˆ›å»ºmaskå?˜æ?¢åŠ¨ç”»
         *
         * @param start    åŠ¨ç”»èµ·å§‹çŠ¶æ€?
         * @param end      åŠ¨ç”»ç»ˆç‚¹çŠ¶æ€?
         * @param duration åŠ¨ç”»æŒ?ç»­æ—¶é—´
         */
        public MaskAnimator(RectF start, RectF end, long duration) {
            super();
            setFloatValues(0, 1f);
            setDuration(duration);
            addUpdateListener(this);
            //å°†èµ·ç‚¹ç»ˆç‚¹æ‹·è´?åˆ°æ•°ç»„æ–¹ä¾¿è®¡ç®—
            mStart[0] = start.left;
            mStart[1] = start.top;
            mStart[2] = start.right;
            mStart[3] = start.bottom;
            mEnd[0] = end.left;
            mEnd[1] = end.top;
            mEnd[2] = end.right;
            mEnd[3] = end.bottom;
        }

        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            //èŽ·å?–åŠ¨ç”»è¿›åº¦,0-1èŒƒå›´
            float value = (Float) animation.getAnimatedValue();
            //æ ¹æ?®è¿›åº¦å¯¹èµ·ç‚¹ç»ˆç‚¹ä¹‹é—´å?šæ?’å€¼
            for (int i = 0; i < 4; i++) {
                mResult[i] = mStart[i] + (mEnd[i] - mStart[i]) * value;
            }
            //æœŸé—´maskæœ‰å?¯èƒ½è¢«ç½®ç©ºäº†,æ‰€ä»¥åˆ¤æ–­ä¸€ä¸‹
            if (mMask == null) {
                mMask = new RectF();
            }
            //è®¾ç½®æ–°çš„maskå¹¶ç»˜åˆ¶
            mMask.set(mResult[0], mResult[1], mResult[2], mResult[3]);
            invalidate();
        }
    }

    ////////////////////////////////æ‰‹åŠ¿åŠ¨ç”»å¤„ç?†////////////////////////////////

    /**
     * åœ¨å?•æŒ‡æ¨¡å¼?ä¸‹:
     * è®°å½•ä¸Šä¸€æ¬¡æ‰‹æŒ‡çš„ä½?ç½®,ç”¨äºŽè®¡ç®—æ–°çš„ä½?ç½®å’Œä¸Šä¸€æ¬¡ä½?ç½®çš„å·®å€¼.
     * <p>
     * å?ŒæŒ‡æ¨¡å¼?ä¸‹:
     * è®°å½•ä¸¤ä¸ªæ‰‹æŒ‡çš„ä¸­ç‚¹,ä½œä¸ºå’ŒmScaleCenterç»‘å®šçš„ç‚¹.
     * è¿™ä¸ªç»‘å®šå?¯ä»¥ä¿?è¯?mScaleCenteræ— è®ºå¦‚ä½•éƒ½ä¼šè·Ÿéš?è¿™ä¸ªä¸­ç‚¹.
     *
     * @see #mScaleCenter
     * @see #scale(PointF, float, float, PointF)
     * @see #scaleEnd()
     */
    private PointF mLastMovePoint = new PointF();

    /**
     * ç¼©æ”¾æ¨¡å¼?ä¸‹å›¾ç‰‡çš„ç¼©æ”¾ä¸­ç‚¹.
     * <p>
     * ä¸ºå…¶æŒ‡ä»£çš„ç‚¹ç»?è¿‡innerMatrixå?˜æ?¢ä¹‹å?Žçš„å€¼.
     * å…¶æŒ‡ä»£çš„ç‚¹åœ¨æ‰‹åŠ¿è¿‡ç¨‹ä¸­å§‹ç»ˆè·Ÿéš?mLastMovePoint.
     * é€šè¿‡å?ŒæŒ‡ç¼©æ”¾æ—¶,å…¶ä¸ºç¼©æ”¾ä¸­å¿ƒç‚¹.
     *
     * @see #saveScaleContext(float, float, float, float)
     * @see #mLastMovePoint
     * @see #scale(PointF, float, float, PointF)
     */
    private PointF mScaleCenter = new PointF();

    /**
     * ç¼©æ”¾æ¨¡å¼?ä¸‹çš„åŸºç¡€ç¼©æ”¾æ¯”ä¾‹
     * <p>
     * ä¸ºå¤–å±‚ç¼©æ”¾å€¼é™¤ä»¥å¼€å§‹ç¼©æ”¾æ—¶ä¸¤æŒ‡è·?ç¦».
     * å…¶å€¼ä¹˜ä¸Šæœ€æ–°çš„ä¸¤æŒ‡ä¹‹é—´è·?ç¦»ä¸ºæœ€æ–°çš„å›¾ç‰‡ç¼©æ”¾æ¯”ä¾‹.
     *
     * @see #saveScaleContext(float, float, float, float)
     * @see #scale(PointF, float, float, PointF)
     */
    private float mScaleBase = 0;

    /**
     * å›¾ç‰‡ç¼©æ”¾åŠ¨ç”»
     * <p>
     * ç¼©æ”¾æ¨¡å¼?æŠŠå›¾ç‰‡çš„ä½?ç½®å¤§å°?è¶…å‡ºé™?åˆ¶ä¹‹å?Žè§¦å?‘.
     * å?Œå‡»å›¾ç‰‡æ”¾å¤§æˆ–ç¼©å°?æ—¶è§¦å?‘.
     * æ‰‹åŠ¨è°ƒç”¨outerMatrixToè§¦å?‘.
     *
     * @see #scaleEnd()
     * @see #doubleTap(float, float)
     * @see #outerMatrixTo(Matrix, long)
     */
    private ScaleAnimator mScaleAnimator;

    /**
     * æ»‘åŠ¨äº§ç”Ÿçš„æƒ¯æ€§åŠ¨ç”»
     *
     * @see #fling(float, float)
     */
    private FlingAnimator mFlingAnimator;

    /**
     * å¸¸ç”¨æ‰‹åŠ¿å¤„ç?†
     * <p>
     * åœ¨onTouchEventæœ«å°¾è¢«æ‰§è¡Œ.
     */
    private GestureDetector mGestureDetector = new GestureDetector(PinchImageView.this.getContext(), new GestureDetector.SimpleOnGestureListener() {

        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
            //å?ªæœ‰åœ¨å?•æŒ‡æ¨¡å¼?ç»“æ?Ÿä¹‹å?Žæ‰?å…?è®¸æ‰§è¡Œfling
            if (mPinchMode == PINCH_MODE_FREE && !(mScaleAnimator != null && mScaleAnimator.isRunning())) {
                fling(velocityX, velocityY);
            }
            return true;
        }

        public void onLongPress(MotionEvent e) {
            //è§¦å?‘é•¿æŒ‰
            if (mOnLongClickListener != null) {
                mOnLongClickListener.onLongClick(PinchImageView.this);
            }
        }

        public boolean onDoubleTap(MotionEvent e) {
            //å½“æ‰‹æŒ‡å¿«é€Ÿç¬¬äºŒæ¬¡æŒ‰ä¸‹è§¦å?‘,æ­¤æ—¶å¿…é¡»æ˜¯å?•æŒ‡æ¨¡å¼?æ‰?å…?è®¸æ‰§è¡ŒdoubleTap
            if (mPinchMode == PINCH_MODE_SCROLL && !(mScaleAnimator != null && mScaleAnimator.isRunning())) {
                doubleTap(e.getX(), e.getY());
            }
            return true;
        }

        public boolean onSingleTapConfirmed(MotionEvent e) {
            //è§¦å?‘ç‚¹å‡»
            if (mOnClickListener != null) {
                mOnClickListener.onClick(PinchImageView.this);
            }
            return true;
        }
    });

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        super.onTouchEvent(event);
        int action = event.getAction() & MotionEvent.ACTION_MASK;
        //æœ€å?Žä¸€ä¸ªç‚¹æŠ¬èµ·æˆ–è€…å?–æ¶ˆï¼Œç»“æ?Ÿæ‰€æœ‰æ¨¡å¼?
        if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) {
            //å¦‚æžœä¹‹å‰?æ˜¯ç¼©æ”¾æ¨¡å¼?,è¿˜éœ€è¦?è§¦å?‘ä¸€ä¸‹ç¼©æ”¾ç»“æ?ŸåŠ¨ç”»
            if (mPinchMode == PINCH_MODE_SCALE) {
                scaleEnd();
            }
            mPinchMode = PINCH_MODE_FREE;
        } else if (action == MotionEvent.ACTION_POINTER_UP) {
            //å¤šä¸ªæ‰‹æŒ‡æƒ…å†µä¸‹æŠ¬èµ·ä¸€ä¸ªæ‰‹æŒ‡,æ­¤æ—¶éœ€è¦?æ˜¯ç¼©æ”¾æ¨¡å¼?æ‰?è§¦å?‘
            if (mPinchMode == PINCH_MODE_SCALE) {
                //æŠ¬èµ·çš„ç‚¹å¦‚æžœå¤§äºŽ2ï¼Œé‚£ä¹ˆç¼©æ”¾æ¨¡å¼?è¿˜æœ‰æ•ˆï¼Œä½†æ˜¯æœ‰å?¯èƒ½åˆ?å§‹ç‚¹å?˜äº†ï¼Œé‡?æ–°æµ‹é‡?åˆ?å§‹ç‚¹
                if (event.getPointerCount() > 2) {
                    //å¦‚æžœè¿˜æ²¡ç»“æ?Ÿç¼©æ”¾æ¨¡å¼?ï¼Œä½†æ˜¯ç¬¬ä¸€ä¸ªç‚¹æŠ¬èµ·äº†ï¼Œé‚£ä¹ˆè®©ç¬¬äºŒä¸ªç‚¹å’Œç¬¬ä¸‰ä¸ªç‚¹ä½œä¸ºç¼©æ”¾æŽ§åˆ¶ç‚¹
                    if (event.getAction() >> 8 == 0) {
                        saveScaleContext(event.getX(1), event.getY(1), event.getX(2), event.getY(2));
                        //å¦‚æžœè¿˜æ²¡ç»“æ?Ÿç¼©æ”¾æ¨¡å¼?ï¼Œä½†æ˜¯ç¬¬äºŒä¸ªç‚¹æŠ¬èµ·äº†ï¼Œé‚£ä¹ˆè®©ç¬¬ä¸€ä¸ªç‚¹å’Œç¬¬ä¸‰ä¸ªç‚¹ä½œä¸ºç¼©æ”¾æŽ§åˆ¶ç‚¹
                    } else if (event.getAction() >> 8 == 1) {
                        saveScaleContext(event.getX(0), event.getY(0), event.getX(2), event.getY(2));
                    }
                }
                //å¦‚æžœæŠ¬èµ·çš„ç‚¹ç­‰äºŽ2,é‚£ä¹ˆæ­¤æ—¶å?ªå‰©ä¸‹ä¸€ä¸ªç‚¹,ä¹Ÿä¸?å…?è®¸è¿›å…¥å?•æŒ‡æ¨¡å¼?,å› ä¸ºæ­¤æ—¶å?¯èƒ½å›¾ç‰‡æ²¡æœ‰åœ¨æ­£ç¡®çš„ä½?ç½®ä¸Š
            }
            //ç¬¬ä¸€ä¸ªç‚¹æŒ‰ä¸‹ï¼Œå¼€å?¯æ»šåŠ¨æ¨¡å¼?ï¼Œè®°å½•å¼€å§‹æ»šåŠ¨çš„ç‚¹
        } else if (action == MotionEvent.ACTION_DOWN) {
            //åœ¨çŸ©é˜µåŠ¨ç”»è¿‡ç¨‹ä¸­ä¸?å…?è®¸å?¯åŠ¨æ»šåŠ¨æ¨¡å¼?
            if (!(mScaleAnimator != null && mScaleAnimator.isRunning())) {
                //å?œæ­¢æ‰€æœ‰åŠ¨ç”»
                cancelAllAnimator();
                //åˆ‡æ?¢åˆ°æ»šåŠ¨æ¨¡å¼?
                mPinchMode = PINCH_MODE_SCROLL;
                //ä¿?å­˜è§¦å?‘ç‚¹ç”¨äºŽmoveè®¡ç®—å·®å€¼
                mLastMovePoint.set(event.getX(), event.getY());
            }
            //é?žç¬¬ä¸€ä¸ªç‚¹æŒ‰ä¸‹ï¼Œå…³é—­æ»šåŠ¨æ¨¡å¼?ï¼Œå¼€å?¯ç¼©æ”¾æ¨¡å¼?ï¼Œè®°å½•ç¼©æ”¾æ¨¡å¼?çš„ä¸€äº›åˆ?å§‹æ•°æ?®
        } else if (action == MotionEvent.ACTION_POINTER_DOWN) {
            //å?œæ­¢æ‰€æœ‰åŠ¨ç”»
            cancelAllAnimator();
            //åˆ‡æ?¢åˆ°ç¼©æ”¾æ¨¡å¼?
            mPinchMode = PINCH_MODE_SCALE;
            //ä¿?å­˜ç¼©æ”¾çš„ä¸¤ä¸ªæ‰‹æŒ‡
            saveScaleContext(event.getX(0), event.getY(0), event.getX(1), event.getY(1));
        } else if (action == MotionEvent.ACTION_MOVE) {
            if (!(mScaleAnimator != null && mScaleAnimator.isRunning())) {
                //åœ¨æ»šåŠ¨æ¨¡å¼?ä¸‹ç§»åŠ¨
                if (mPinchMode == PINCH_MODE_SCROLL) {
                    //æ¯?æ¬¡ç§»åŠ¨äº§ç”Ÿä¸€ä¸ªå·®å€¼ç´¯ç§¯åˆ°å›¾ç‰‡ä½?ç½®ä¸Š
                    scrollBy(event.getX() - mLastMovePoint.x, event.getY() - mLastMovePoint.y);
                    //è®°å½•æ–°çš„ç§»åŠ¨ç‚¹
                    mLastMovePoint.set(event.getX(), event.getY());
                    //åœ¨ç¼©æ”¾æ¨¡å¼?ä¸‹ç§»åŠ¨
                } else if (mPinchMode == PINCH_MODE_SCALE && event.getPointerCount() > 1) {
                    //ä¸¤ä¸ªç¼©æ”¾ç‚¹é—´çš„è·?ç¦»
                    float distance = MathUtils.getDistance(event.getX(0), event.getY(0), event.getX(1), event.getY(1));
                    //ä¿?å­˜ç¼©æ”¾ç‚¹ä¸­ç‚¹
                    float[] lineCenter = MathUtils.getCenterPoint(event.getX(0), event.getY(0), event.getX(1), event.getY(1));
                    mLastMovePoint.set(lineCenter[0], lineCenter[1]);
                    //å¤„ç?†ç¼©æ”¾
                    scale(mScaleCenter, mScaleBase, distance, mLastMovePoint);
                }
            }
        }
        //æ— è®ºå¦‚ä½•éƒ½å¤„ç?†å?„ç§?å¤–éƒ¨æ‰‹åŠ¿
        mGestureDetector.onTouchEvent(event);
        return true;
    }

    /**
     * è®©å›¾ç‰‡ç§»åŠ¨ä¸€æ®µè·?ç¦»
     * <p>
     * ä¸?èƒ½ç§»åŠ¨è¶…è¿‡å?¯ç§»åŠ¨èŒƒå›´,è¶…è¿‡äº†å°±åˆ°å?¯ç§»åŠ¨èŒƒå›´è¾¹ç•Œä¸ºæ­¢.
     *
     * @param xDiff ç§»åŠ¨è·?ç¦»
     * @param yDiff ç§»åŠ¨è·?ç¦»
     * @return æ˜¯å?¦æ”¹å?˜äº†ä½?ç½®
     */
    private boolean scrollBy(float xDiff, float yDiff) {
        if (!isReady()) {
            return false;
        }
        //åŽŸå›¾æ–¹æ¡†
        RectF bound = MathUtils.rectFTake();
        getImageBound(bound);
        //æŽ§ä»¶å¤§å°?
        float displayWidth = getWidth();
        float displayHeight = getHeight();
        //å¦‚æžœå½“å‰?å›¾ç‰‡å®½åº¦å°?äºŽæŽ§ä»¶å®½åº¦ï¼Œåˆ™ä¸?èƒ½ç§»åŠ¨
        if (bound.right - bound.left < displayWidth) {
            xDiff = 0;
            //å¦‚æžœå›¾ç‰‡å·¦è¾¹åœ¨ç§»åŠ¨å?Žè¶…å‡ºæŽ§ä»¶å·¦è¾¹
        } else if (bound.left + xDiff > 0) {
            //å¦‚æžœåœ¨ç§»åŠ¨ä¹‹å‰?æ˜¯æ²¡è¶…å‡ºçš„ï¼Œè®¡ç®—åº”è¯¥ç§»åŠ¨çš„è·?ç¦»
            if (bound.left < 0) {
                xDiff = -bound.left;
                //å?¦åˆ™æ— æ³•ç§»åŠ¨
            } else {
                xDiff = 0;
            }
            //å¦‚æžœå›¾ç‰‡å?³è¾¹åœ¨ç§»åŠ¨å?Žè¶…å‡ºæŽ§ä»¶å?³è¾¹
        } else if (bound.right + xDiff < displayWidth) {
            //å¦‚æžœåœ¨ç§»åŠ¨ä¹‹å‰?æ˜¯æ²¡è¶…å‡ºçš„ï¼Œè®¡ç®—åº”è¯¥ç§»åŠ¨çš„è·?ç¦»
            if (bound.right > displayWidth) {
                xDiff = displayWidth - bound.right;
                //å?¦åˆ™æ— æ³•ç§»åŠ¨
            } else {
                xDiff = 0;
            }
        }
        //ä»¥ä¸‹å?Œç?†
        if (bound.bottom - bound.top < displayHeight) {
            yDiff = 0;
        } else if (bound.top + yDiff > 0) {
            if (bound.top < 0) {
                yDiff = -bound.top;
            } else {
                yDiff = 0;
            }
        } else if (bound.bottom + yDiff < displayHeight) {
            if (bound.bottom > displayHeight) {
                yDiff = displayHeight - bound.bottom;
            } else {
                yDiff = 0;
            }
        }
        MathUtils.rectFGiven(bound);
        //åº”ç”¨ç§»åŠ¨å?˜æ?¢
        mOuterMatrix.postTranslate(xDiff, yDiff);
        dispatchOuterMatrixChanged();
        //è§¦å?‘é‡?ç»˜
        invalidate();
        //æ£€æŸ¥æ˜¯å?¦æœ‰å?˜åŒ–
        if (xDiff != 0 || yDiff != 0) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * è®°å½•ç¼©æ”¾å‰?çš„ä¸€äº›ä¿¡æ?¯
     * <p>
     * ä¿?å­˜åŸºç¡€ç¼©æ”¾å€¼.
     * ä¿?å­˜å›¾ç‰‡ç¼©æ”¾ä¸­ç‚¹.
     *
     * @param x1 ç¼©æ”¾ç¬¬ä¸€ä¸ªæ‰‹æŒ‡
     * @param y1 ç¼©æ”¾ç¬¬ä¸€ä¸ªæ‰‹æŒ‡
     * @param x2 ç¼©æ”¾ç¬¬äºŒä¸ªæ‰‹æŒ‡
     * @param y2 ç¼©æ”¾ç¬¬äºŒä¸ªæ‰‹æŒ‡
     */
    private void saveScaleContext(float x1, float y1, float x2, float y2) {
        //è®°å½•åŸºç¡€ç¼©æ”¾å€¼,å…¶ä¸­å›¾ç‰‡ç¼©æ”¾æ¯”ä¾‹æŒ‰ç…§xæ–¹å?‘æ?¥è®¡ç®—
        //ç?†è®ºä¸Šå›¾ç‰‡åº”è¯¥æ˜¯ç­‰æ¯”çš„,xå’Œyæ–¹å?‘æ¯”ä¾‹ç›¸å?Œ
        //ä½†æ˜¯æœ‰å?¯èƒ½å¤–éƒ¨è®¾å®šäº†ä¸?è§„èŒƒçš„å€¼.
        //ä½†æ˜¯å?Žç»­çš„scaleæ“?ä½œä¼šå°†xyä¸?ç­‰çš„ç¼©æ”¾å€¼çº æ­£,æ”¹æˆ?å’Œxæ–¹å?‘ç›¸å?Œ
        mScaleBase = MathUtils.getMatrixScale(mOuterMatrix)[0] / MathUtils.getDistance(x1, y1, x2, y2);
        //ä¸¤æ‰‹æŒ‡çš„ä¸­ç‚¹åœ¨å±?å¹•ä¸Šè?½åœ¨äº†å›¾ç‰‡çš„æŸ?ä¸ªç‚¹ä¸Š,å›¾ç‰‡ä¸Šçš„è¿™ä¸ªç‚¹åœ¨ç»?è¿‡æ€»çŸ©é˜µå?˜æ?¢å?Žå’Œæ‰‹æŒ‡ä¸­ç‚¹ç›¸å?Œ
        //çŽ°åœ¨æˆ‘ä»¬éœ€è¦?å¾—åˆ°å›¾ç‰‡ä¸Šè¿™ä¸ªç‚¹åœ¨å›¾ç‰‡æ˜¯fit centerçŠ¶æ€?ä¸‹åœ¨å±?å¹•ä¸Šçš„ä½?ç½®
        //å› ä¸ºå?Žç»­çš„è®¡ç®—éƒ½æ˜¯åŸºäºŽå›¾ç‰‡æ˜¯fit centerçŠ¶æ€?ä¸‹è¿›è¡Œå?˜æ?¢
        //æ‰€ä»¥éœ€è¦?æŠŠä¸¤æ‰‹æŒ‡ä¸­ç‚¹é™¤ä»¥å¤–å±‚å?˜æ?¢çŸ©é˜µå¾—åˆ°mScaleCenter
        float[] center = MathUtils.inverseMatrixPoint(MathUtils.getCenterPoint(x1, y1, x2, y2), mOuterMatrix);
        mScaleCenter.set(center[0], center[1]);
    }

    /**
     * å¯¹å›¾ç‰‡æŒ‰ç…§ä¸€äº›æ‰‹åŠ¿ä¿¡æ?¯è¿›è¡Œç¼©æ”¾
     *
     * @param scaleCenter mScaleCenter
     * @param scaleBase   mScaleBase
     * @param distance    æ‰‹æŒ‡ä¸¤ç‚¹ä¹‹é—´è·?ç¦»
     * @param lineCenter  æ‰‹æŒ‡ä¸¤ç‚¹ä¹‹é—´ä¸­ç‚¹
     * @see #mScaleCenter
     * @see #mScaleBase
     */
    private void scale(PointF scaleCenter, float scaleBase, float distance, PointF lineCenter) {
        if (!isReady()) {
            return;
        }
        //è®¡ç®—å›¾ç‰‡ä»Žfit centerçŠ¶æ€?åˆ°ç›®æ ‡çŠ¶æ€?çš„ç¼©æ”¾æ¯”ä¾‹
        float scale = scaleBase * distance;
        Matrix matrix = MathUtils.matrixTake();
        //æŒ‰ç…§å›¾ç‰‡ç¼©æ”¾ä¸­å¿ƒç¼©æ”¾ï¼Œå¹¶ä¸”è®©ç¼©æ”¾ä¸­å¿ƒåœ¨ç¼©æ”¾ç‚¹ä¸­ç‚¹ä¸Š
        matrix.postScale(scale, scale, scaleCenter.x, scaleCenter.y);
        //è®©å›¾ç‰‡çš„ç¼©æ”¾ä¸­ç‚¹è·Ÿéš?æ‰‹æŒ‡ç¼©æ”¾ä¸­ç‚¹
        matrix.postTranslate(lineCenter.x - scaleCenter.x, lineCenter.y - scaleCenter.y);
        //åº”ç”¨å?˜æ?¢
        mOuterMatrix.set(matrix);
        MathUtils.matrixGiven(matrix);
        dispatchOuterMatrixChanged();
        //é‡?ç»˜
        invalidate();
    }

    /**
     * å?Œå‡»å?Žæ”¾å¤§æˆ–è€…ç¼©å°?
     * <p>
     * å°†å›¾ç‰‡ç¼©æ”¾æ¯”ä¾‹ç¼©æ”¾åˆ°nextScaleæŒ‡å®šçš„å€¼.
     * ä½†nextScaleå€¼ä¸?èƒ½å¤§äºŽæœ€å¤§ç¼©æ”¾å€¼ä¸?èƒ½å°?äºŽfit centeræƒ…å†µä¸‹çš„ç¼©æ”¾å€¼.
     * å°†å?Œå‡»çš„ç‚¹å°½é‡?ç§»åŠ¨åˆ°æŽ§ä»¶ä¸­å¿ƒ.
     *
     * @param x å?Œå‡»çš„ç‚¹
     * @param y å?Œå‡»çš„ç‚¹
     * @see #calculateNextScale(float, float)
     * @see #getMaxScale()
     */
    private void doubleTap(float x, float y) {
        if (!isReady()) {
            return;
        }
        //èŽ·å?–ç¬¬ä¸€å±‚å?˜æ?¢çŸ©é˜µ
        Matrix innerMatrix = MathUtils.matrixTake();
        getInnerMatrix(innerMatrix);
        //å½“å‰?æ€»çš„ç¼©æ”¾æ¯”ä¾‹
        float innerScale = MathUtils.getMatrixScale(innerMatrix)[0];
        float outerScale = MathUtils.getMatrixScale(mOuterMatrix)[0];
        float currentScale = innerScale * outerScale;
        //æŽ§ä»¶å¤§å°?
        float displayWidth = getWidth();
        float displayHeight = getHeight();
        //æœ€å¤§æ”¾å¤§å¤§å°?
        float maxScale = getMaxScale();
        //æŽ¥ä¸‹æ?¥è¦?æ”¾å¤§çš„å¤§å°?
        float nextScale = calculateNextScale(innerScale, outerScale);
        //å¦‚æžœæŽ¥ä¸‹æ?¥æ”¾å¤§å¤§äºŽæœ€å¤§å€¼æˆ–è€…å°?äºŽfit centerå€¼ï¼Œåˆ™å?–è¾¹ç•Œ
        if (nextScale > maxScale) {
            nextScale = maxScale;
        }
        if (nextScale < innerScale) {
            nextScale = innerScale;
        }
        //å¼€å§‹è®¡ç®—ç¼©æ”¾åŠ¨ç”»çš„ç»“æžœçŸ©é˜µ
        Matrix animEnd = MathUtils.matrixTake(mOuterMatrix);
        //è®¡ç®—è¿˜éœ€ç¼©æ”¾çš„å€?æ•°
        animEnd.postScale(nextScale / currentScale, nextScale / currentScale, x, y);
        //å°†æ”¾å¤§ç‚¹ç§»åŠ¨åˆ°æŽ§ä»¶ä¸­å¿ƒ
        animEnd.postTranslate(displayWidth / 2f - x, displayHeight / 2f - y);
        //å¾—åˆ°æ”¾å¤§ä¹‹å?Žçš„å›¾ç‰‡æ–¹æ¡†
        Matrix testMatrix = MathUtils.matrixTake(innerMatrix);
        testMatrix.postConcat(animEnd);
        RectF testBound = MathUtils.rectFTake(0, 0, getDrawable().getIntrinsicWidth(), getDrawable().getIntrinsicHeight());
        testMatrix.mapRect(testBound);
        //ä¿®æ­£ä½?ç½®
        float postX = 0;
        float postY = 0;
        if (testBound.right - testBound.left < displayWidth) {
            postX = displayWidth / 2f - (testBound.right + testBound.left) / 2f;
        } else if (testBound.left > 0) {
            postX = -testBound.left;
        } else if (testBound.right < displayWidth) {
            postX = displayWidth - testBound.right;
        }
        if (testBound.bottom - testBound.top < displayHeight) {
            postY = displayHeight / 2f - (testBound.bottom + testBound.top) / 2f;
        } else if (testBound.top > 0) {
            postY = -testBound.top;
        } else if (testBound.bottom < displayHeight) {
            postY = displayHeight - testBound.bottom;
        }
        //åº”ç”¨ä¿®æ­£ä½?ç½®
        animEnd.postTranslate(postX, postY);
        //æ¸…ç?†å½“å‰?å?¯èƒ½æ­£åœ¨æ‰§è¡Œçš„åŠ¨ç”»
        cancelAllAnimator();
        //å?¯åŠ¨çŸ©é˜µåŠ¨ç”»
        mScaleAnimator = new ScaleAnimator(mOuterMatrix, animEnd);
        mScaleAnimator.start();
        //æ¸…ç?†ä¸´æ—¶å?˜é‡?
        MathUtils.rectFGiven(testBound);
        MathUtils.matrixGiven(testMatrix);
        MathUtils.matrixGiven(animEnd);
        MathUtils.matrixGiven(innerMatrix);
    }

    /**
     * å½“ç¼©æ”¾æ“?ä½œç»“æ?ŸåŠ¨ç”»
     * <p>
     * å¦‚æžœå›¾ç‰‡è¶…è¿‡è¾¹ç•Œ,æ‰¾åˆ°æœ€è¿‘çš„ä½?ç½®åŠ¨ç”»æ?¢å¤?.
     * å¦‚æžœå›¾ç‰‡ç¼©æ”¾å°ºå¯¸è¶…è¿‡æœ€å¤§å€¼æˆ–è€…æœ€å°?å€¼,æ‰¾åˆ°æœ€è¿‘çš„å€¼åŠ¨ç”»æ?¢å¤?.
     */
    private void scaleEnd() {
        if (!isReady()) {
            return;
        }
        //æ˜¯å?¦ä¿®æ­£äº†ä½?ç½®
        boolean change = false;
        //èŽ·å?–å›¾ç‰‡æ•´ä½“çš„å?˜æ?¢çŸ©é˜µ
        Matrix currentMatrix = MathUtils.matrixTake();
        getCurrentImageMatrix(currentMatrix);
        //æ•´ä½“ç¼©æ”¾æ¯”ä¾‹
        float currentScale = MathUtils.getMatrixScale(currentMatrix)[0];
        //ç¬¬äºŒå±‚ç¼©æ”¾æ¯”ä¾‹
        float outerScale = MathUtils.getMatrixScale(mOuterMatrix)[0];
        //æŽ§ä»¶å¤§å°?
        float displayWidth = getWidth();
        float displayHeight = getHeight();
        //æœ€å¤§ç¼©æ”¾æ¯”ä¾‹
        float maxScale = getMaxScale();
        //æ¯”ä¾‹ä¿®æ­£
        float scalePost = 1f;
        //ä½?ç½®ä¿®æ­£
        float postX = 0;
        float postY = 0;
        //å¦‚æžœæ•´ä½“ç¼©æ”¾æ¯”ä¾‹å¤§äºŽæœ€å¤§æ¯”ä¾‹ï¼Œè¿›è¡Œç¼©æ”¾ä¿®æ­£
        if (currentScale > maxScale) {
            scalePost = maxScale / currentScale;
        }
        //å¦‚æžœç¼©æ”¾ä¿®æ­£å?Žæ•´ä½“å¯¼è‡´ç¬¬äºŒå±‚ç¼©æ”¾å°?äºŽ1ï¼ˆå°±æ˜¯å›¾ç‰‡æ¯”fit centerçŠ¶æ€?è¿˜å°?ï¼‰ï¼Œé‡?æ–°ä¿®æ­£ç¼©æ”¾
        if (outerScale * scalePost < 1f) {
            scalePost = 1f / outerScale;
        }
        //å¦‚æžœç¼©æ”¾ä¿®æ­£ä¸?ä¸º1ï¼Œè¯´æ˜Žè¿›è¡Œäº†ä¿®æ­£
        if (scalePost != 1f) {
            change = true;
        }
        //å°?è¯•æ ¹æ?®ç¼©æ”¾ç‚¹è¿›è¡Œç¼©æ”¾ä¿®æ­£
        Matrix testMatrix = MathUtils.matrixTake(currentMatrix);
        testMatrix.postScale(scalePost, scalePost, mLastMovePoint.x, mLastMovePoint.y);
        RectF testBound = MathUtils.rectFTake(0, 0, getDrawable().getIntrinsicWidth(), getDrawable().getIntrinsicHeight());
        //èŽ·å?–ç¼©æ”¾ä¿®æ­£å?Žçš„å›¾ç‰‡æ–¹æ¡†
        testMatrix.mapRect(testBound);
        //æ£€æµ‹ç¼©æ”¾ä¿®æ­£å?Žä½?ç½®æœ‰æ— è¶…å‡ºï¼Œå¦‚æžœè¶…å‡ºè¿›è¡Œä½?ç½®ä¿®æ­£
        if (testBound.right - testBound.left < displayWidth) {
            postX = displayWidth / 2f - (testBound.right + testBound.left) / 2f;
        } else if (testBound.left > 0) {
            postX = -testBound.left;
        } else if (testBound.right < displayWidth) {
            postX = displayWidth - testBound.right;
        }
        if (testBound.bottom - testBound.top < displayHeight) {
            postY = displayHeight / 2f - (testBound.bottom + testBound.top) / 2f;
        } else if (testBound.top > 0) {
            postY = -testBound.top;
        } else if (testBound.bottom < displayHeight) {
            postY = displayHeight - testBound.bottom;
        }
        //å¦‚æžœä½?ç½®ä¿®æ­£ä¸?ä¸º0ï¼Œè¯´æ˜Žè¿›è¡Œäº†ä¿®æ­£
        if (postX != 0 || postY != 0) {
            change = true;
        }
        //å?ªæœ‰æœ‰æ‰§è¡Œä¿®æ­£æ‰?æ‰§è¡ŒåŠ¨ç”»
        if (change) {
            //è®¡ç®—ç»“æ?ŸçŸ©é˜µ
            Matrix animEnd = MathUtils.matrixTake(mOuterMatrix);
            animEnd.postScale(scalePost, scalePost, mLastMovePoint.x, mLastMovePoint.y);
            animEnd.postTranslate(postX, postY);
            //æ¸…ç?†å½“å‰?å?¯èƒ½æ­£åœ¨æ‰§è¡Œçš„åŠ¨ç”»
            cancelAllAnimator();
            //å?¯åŠ¨çŸ©é˜µåŠ¨ç”»
            mScaleAnimator = new ScaleAnimator(mOuterMatrix, animEnd);
            mScaleAnimator.start();
            //æ¸…ç?†ä¸´æ—¶å?˜é‡?
            MathUtils.matrixGiven(animEnd);
        }
        //æ¸…ç?†ä¸´æ—¶å?˜é‡?
        MathUtils.rectFGiven(testBound);
        MathUtils.matrixGiven(testMatrix);
        MathUtils.matrixGiven(currentMatrix);
    }

    /**
     * æ‰§è¡Œæƒ¯æ€§åŠ¨ç”»
     * <p>
     * åŠ¨ç”»åœ¨é?‡åˆ°ä¸?èƒ½ç§»åŠ¨å°±å?œæ­¢.
     * åŠ¨ç”»é€Ÿåº¦è¡°å‡?åˆ°å¾ˆå°?å°±å?œæ­¢.
     * <p>
     * å…¶ä¸­å?‚æ•°é€Ÿåº¦å?•ä½?ä¸º åƒ?ç´ /ç§’
     *
     * @param vx xæ–¹å?‘é€Ÿåº¦
     * @param vy yæ–¹å?‘é€Ÿåº¦
     */
    private void fling(float vx, float vy) {
        if (!isReady()) {
            return;
        }
        //æ¸…ç?†å½“å‰?å?¯èƒ½æ­£åœ¨æ‰§è¡Œçš„åŠ¨ç”»
        cancelAllAnimator();
        //åˆ›å»ºæƒ¯æ€§åŠ¨ç”»
        //FlingAnimatorå?•ä½?ä¸º åƒ?ç´ /å¸§,ä¸€ç§’60å¸§
        mFlingAnimator = new FlingAnimator(vx / 60f, vy / 60f);
        mFlingAnimator.start();
    }

    /**
     * å?œæ­¢æ‰€æœ‰æ‰‹åŠ¿åŠ¨ç”»
     */
    private void cancelAllAnimator() {
        if (mScaleAnimator != null) {
            mScaleAnimator.cancel();
            mScaleAnimator = null;
        }
        if (mFlingAnimator != null) {
            mFlingAnimator.cancel();
            mFlingAnimator = null;
        }
    }

    /**
     * æƒ¯æ€§åŠ¨ç”»
     * <p>
     * é€Ÿåº¦é€?æ¸?è¡°å‡?,æ¯?å¸§é€Ÿåº¦è¡°å‡?ä¸ºåŽŸæ?¥çš„FLING_DAMPING_FACTOR,å½“é€Ÿåº¦è¡°å‡?åˆ°å°?äºŽ1æ—¶å?œæ­¢.
     * å½“å›¾ç‰‡ä¸?èƒ½ç§»åŠ¨æ—¶,åŠ¨ç”»å?œæ­¢.
     */
    private class FlingAnimator extends ValueAnimator implements ValueAnimator.AnimatorUpdateListener {

        /**
         * é€Ÿåº¦å?‘é‡?
         */
        private float[] mVector;

        /**
         * åˆ›å»ºæƒ¯æ€§åŠ¨ç”»
         * <p>
         * å?‚æ•°å?•ä½?ä¸º åƒ?ç´ /å¸§
         *
         * @param vectorX é€Ÿåº¦å?‘é‡?
         * @param vectorY é€Ÿåº¦å?‘é‡?
         */
        public FlingAnimator(float vectorX, float vectorY) {
            super();
            setFloatValues(0, 1f);
            setDuration(1000000);
            addUpdateListener(this);
            mVector = new float[]{vectorX, vectorY};
        }

        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            //ç§»åŠ¨å›¾åƒ?å¹¶ç»™å‡ºç»“æžœ
            boolean result = scrollBy(mVector[0], mVector[1]);
            //è¡°å‡?é€Ÿåº¦
            mVector[0] *= FLING_DAMPING_FACTOR;
            mVector[1] *= FLING_DAMPING_FACTOR;
            //é€Ÿåº¦å¤ªå°?æˆ–è€…ä¸?èƒ½ç§»åŠ¨äº†å°±ç»“æ?Ÿ
            if (!result || MathUtils.getDistance(0, 0, mVector[0], mVector[1]) < 1f) {
                animation.cancel();
            }
        }
    }

    /**
     * ç¼©æ”¾åŠ¨ç”»
     * <p>
     * åœ¨ç»™å®šæ—¶é—´å†…ä»Žä¸€ä¸ªçŸ©é˜µçš„å?˜åŒ–é€?æ¸?åŠ¨ç”»åˆ°å?¦ä¸€ä¸ªçŸ©é˜µçš„å?˜åŒ–
     */
    private class ScaleAnimator extends ValueAnimator implements ValueAnimator.AnimatorUpdateListener {

        /**
         * å¼€å§‹çŸ©é˜µ
         */
        private float[] mStart = new float[9];

        /**
         * ç»“æ?ŸçŸ©é˜µ
         */
        private float[] mEnd = new float[9];

        /**
         * ä¸­é—´ç»“æžœçŸ©é˜µ
         */
        private float[] mResult = new float[9];

        /**
         * æž„å»ºä¸€ä¸ªç¼©æ”¾åŠ¨ç”»
         * <p>
         * ä»Žä¸€ä¸ªçŸ©é˜µå?˜æ?¢åˆ°å?¦å¤–ä¸€ä¸ªçŸ©é˜µ
         *
         * @param start å¼€å§‹çŸ©é˜µ
         * @param end   ç»“æ?ŸçŸ©é˜µ
         */
        public ScaleAnimator(Matrix start, Matrix end) {
            this(start, end, SCALE_ANIMATOR_DURATION);
        }

        /**
         * æž„å»ºä¸€ä¸ªç¼©æ”¾åŠ¨ç”»
         * <p>
         * ä»Žä¸€ä¸ªçŸ©é˜µå?˜æ?¢åˆ°å?¦å¤–ä¸€ä¸ªçŸ©é˜µ
         *
         * @param start    å¼€å§‹çŸ©é˜µ
         * @param end      ç»“æ?ŸçŸ©é˜µ
         * @param duration åŠ¨ç”»æ—¶é—´
         */
        public ScaleAnimator(Matrix start, Matrix end, long duration) {
            super();
            setFloatValues(0, 1f);
            setDuration(duration);
            addUpdateListener(this);
            start.getValues(mStart);
            end.getValues(mEnd);
        }

        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            //èŽ·å?–åŠ¨ç”»è¿›åº¦
            float value = (Float) animation.getAnimatedValue();
            //æ ¹æ?®åŠ¨ç”»è¿›åº¦è®¡ç®—çŸ©é˜µä¸­é—´æ?’å€¼
            for (int i = 0; i < 9; i++) {
                mResult[i] = mStart[i] + (mEnd[i] - mStart[i]) * value;
            }
            //è®¾ç½®çŸ©é˜µå¹¶é‡?ç»˜
            mOuterMatrix.setValues(mResult);
            dispatchOuterMatrixChanged();
            invalidate();
        }
    }


    ////////////////////////////////é˜²æ­¢å†…å­˜æŠ–åŠ¨å¤?ç”¨å¯¹è±¡////////////////////////////////

    /**
     * å¯¹è±¡æ± 
     * <p>
     * é˜²æ­¢é¢‘ç¹?newå¯¹è±¡äº§ç”Ÿå†…å­˜æŠ–åŠ¨.
     * ç”±äºŽå¯¹è±¡æ± æœ€å¤§é•¿åº¦é™?åˆ¶,å¦‚æžœå?žåº¦é‡?è¶…è¿‡å¯¹è±¡æ± å®¹é‡?,ä»?ç„¶ä¼šå?‘ç”ŸæŠ–åŠ¨.
     * æ­¤æ—¶éœ€è¦?å¢žå¤§å¯¹è±¡æ± å®¹é‡?,ä½†æ˜¯ä¼šå? ç”¨æ›´å¤šå†…å­˜.
     *
     * @param <T> å¯¹è±¡æ± å®¹çº³çš„å¯¹è±¡ç±»åž‹
     */
    private static abstract class ObjectsPool<T> {

        /**
         * å¯¹è±¡æ± çš„æœ€å¤§å®¹é‡?
         */
        private int mSize;

        /**
         * å¯¹è±¡æ± é˜Ÿåˆ—
         */
        private Queue<T> mQueue;

        /**
         * åˆ›å»ºä¸€ä¸ªå¯¹è±¡æ± 
         *
         * @param size å¯¹è±¡æ± æœ€å¤§å®¹é‡?
         */
        public ObjectsPool(int size) {
            mSize = size;
            mQueue = new LinkedList<T>();
        }

        /**
         * èŽ·å?–ä¸€ä¸ªç©ºé—²çš„å¯¹è±¡
         * <p>
         * å¦‚æžœå¯¹è±¡æ± ä¸ºç©º,åˆ™å¯¹è±¡æ± è‡ªå·±ä¼šnewä¸€ä¸ªè¿”å›ž.
         * å¦‚æžœå¯¹è±¡æ± å†…æœ‰å¯¹è±¡,åˆ™å?–ä¸€ä¸ªå·²å­˜åœ¨çš„è¿”å›ž.
         * takeå‡ºæ?¥çš„å¯¹è±¡ç”¨å®Œè¦?è®°å¾—è°ƒç”¨givenå½’è¿˜.
         * å¦‚æžœä¸?å½’è¿˜,è®©ç„¶ä¼šå?‘ç”Ÿå†…å­˜æŠ–åŠ¨,ä½†ä¸?ä¼šå¼•èµ·æ³„æ¼?.
         *
         * @return å?¯ç”¨çš„å¯¹è±¡
         * @see #given(Object)
         */
        public T take() {
            //å¦‚æžœæ± å†…ä¸ºç©ºå°±åˆ›å»ºä¸€ä¸ª
            if (mQueue.size() == 0) {
                return newInstance();
            } else {
                //å¯¹è±¡æ± é‡Œæœ‰å°±ä»Žé¡¶ç«¯æ‹¿å‡ºæ?¥ä¸€ä¸ªè¿”å›ž
                return resetInstance(mQueue.poll());
            }
        }

        /**
         * å½’è¿˜å¯¹è±¡æ± å†…ç”³è¯·çš„å¯¹è±¡
         * <p>
         * å¦‚æžœå½’è¿˜çš„å¯¹è±¡æ•°é‡?è¶…è¿‡å¯¹è±¡æ± å®¹é‡?,é‚£ä¹ˆå½’è¿˜çš„å¯¹è±¡å°±ä¼šè¢«ä¸¢å¼ƒ.
         *
         * @param obj å½’è¿˜çš„å¯¹è±¡
         * @see #take()
         */
        public void given(T obj) {
            //å¦‚æžœå¯¹è±¡æ± è¿˜æœ‰ç©ºä½?å­?å°±å½’è¿˜å¯¹è±¡
            if (obj != null && mQueue.size() < mSize) {
                mQueue.offer(obj);
            }
        }

        /**
         * å®žä¾‹åŒ–å¯¹è±¡
         *
         * @return åˆ›å»ºçš„å¯¹è±¡
         */
        abstract protected T newInstance();

        /**
         * é‡?ç½®å¯¹è±¡
         * <p>
         * æŠŠå¯¹è±¡æ•°æ?®æ¸…ç©ºåˆ°å°±åƒ?åˆšåˆ›å»ºçš„ä¸€æ ·.
         *
         * @param obj éœ€è¦?è¢«é‡?ç½®çš„å¯¹è±¡
         * @return è¢«é‡?ç½®ä¹‹å?Žçš„å¯¹è±¡
         */
        abstract protected T resetInstance(T obj);
    }

    /**
     * çŸ©é˜µå¯¹è±¡æ± 
     */
    private static class MatrixPool extends ObjectsPool<Matrix> {

        public MatrixPool(int size) {
            super(size);
        }

        @Override
        protected Matrix newInstance() {
            return new Matrix();
        }

        @Override
        protected Matrix resetInstance(Matrix obj) {
            obj.reset();
            return obj;
        }
    }

    /**
     * çŸ©å½¢å¯¹è±¡æ± 
     */
    private static class RectFPool extends ObjectsPool<RectF> {

        public RectFPool(int size) {
            super(size);
        }

        @Override
        protected RectF newInstance() {
            return new RectF();
        }

        @Override
        protected RectF resetInstance(RectF obj) {
            obj.setEmpty();
            return obj;
        }
    }


    ////////////////////////////////æ•°å­¦è®¡ç®—å·¥å…·ç±»////////////////////////////////

    /**
     * æ•°å­¦è®¡ç®—å·¥å…·ç±»
     */
    public static class MathUtils {

        /**
         * çŸ©é˜µå¯¹è±¡æ± 
         */
        private static MatrixPool mMatrixPool = new MatrixPool(16);

        /**
         * èŽ·å?–çŸ©é˜µå¯¹è±¡
         */
        public static Matrix matrixTake() {
            return mMatrixPool.take();
        }

        /**
         * èŽ·å?–æŸ?ä¸ªçŸ©é˜µçš„copy
         */
        public static Matrix matrixTake(Matrix matrix) {
            Matrix result = mMatrixPool.take();
            if (matrix != null) {
                result.set(matrix);
            }
            return result;
        }

        /**
         * å½’è¿˜çŸ©é˜µå¯¹è±¡
         */
        public static void matrixGiven(Matrix matrix) {
            mMatrixPool.given(matrix);
        }

        /**
         * çŸ©å½¢å¯¹è±¡æ± 
         */
        private static RectFPool mRectFPool = new RectFPool(16);

        /**
         * èŽ·å?–çŸ©å½¢å¯¹è±¡
         */
        public static RectF rectFTake() {
            return mRectFPool.take();
        }

        /**
         * æŒ‰ç…§æŒ‡å®šå€¼èŽ·å?–çŸ©å½¢å¯¹è±¡
         */
        public static RectF rectFTake(float left, float top, float right, float bottom) {
            RectF result = mRectFPool.take();
            result.set(left, top, right, bottom);
            return result;
        }

        /**
         * èŽ·å?–æŸ?ä¸ªçŸ©å½¢çš„å‰¯æœ¬
         */
        public static RectF rectFTake(RectF rectF) {
            RectF result = mRectFPool.take();
            if (rectF != null) {
                result.set(rectF);
            }
            return result;
        }

        /**
         * å½’è¿˜çŸ©å½¢å¯¹è±¡
         */
        public static void rectFGiven(RectF rectF) {
            mRectFPool.given(rectF);
        }

        /**
         * èŽ·å?–ä¸¤ç‚¹ä¹‹é—´è·?ç¦»
         *
         * @param x1 ç‚¹1
         * @param y1 ç‚¹1
         * @param x2 ç‚¹2
         * @param y2 ç‚¹2
         * @return è·?ç¦»
         */
        public static float getDistance(float x1, float y1, float x2, float y2) {
            float x = x1 - x2;
            float y = y1 - y2;
            return (float) Math.sqrt(x * x + y * y);
        }

        /**
         * èŽ·å?–ä¸¤ç‚¹çš„ä¸­ç‚¹
         *
         * @param x1 ç‚¹1
         * @param y1 ç‚¹1
         * @param x2 ç‚¹2
         * @param y2 ç‚¹2
         * @return float[]{x, y}
         */
        public static float[] getCenterPoint(float x1, float y1, float x2, float y2) {
            return new float[]{(x1 + x2) / 2f, (y1 + y2) / 2f};
        }

        /**
         * èŽ·å?–çŸ©é˜µçš„ç¼©æ”¾å€¼
         *
         * @param matrix è¦?è®¡ç®—çš„çŸ©é˜µ
         * @return float[]{scaleX, scaleY}
         */
        public static float[] getMatrixScale(Matrix matrix) {
            if (matrix != null) {
                float[] value = new float[9];
                matrix.getValues(value);
                return new float[]{value[0], value[4]};
            } else {
                return new float[2];
            }
        }

        /**
         * è®¡ç®—ç‚¹é™¤ä»¥çŸ©é˜µçš„å€¼
         * <p>
         * matrix.mapPoints(unknownPoint) -> point
         * å·²çŸ¥pointå’Œmatrix,æ±‚unknownPointçš„å€¼.
         *
         * @param point
         * @param matrix
         * @return unknownPoint
         */
        public static float[] inverseMatrixPoint(float[] point, Matrix matrix) {
            if (point != null && matrix != null) {
                float[] dst = new float[2];
                //è®¡ç®—matrixçš„é€†çŸ©é˜µ
                Matrix inverse = matrixTake();
                matrix.invert(inverse);
                //ç”¨é€†çŸ©é˜µå?˜æ?¢pointåˆ°dst,dstå°±æ˜¯ç»“æžœ
                inverse.mapPoints(dst, point);
                //æ¸…é™¤ä¸´æ—¶å?˜é‡?
                matrixGiven(inverse);
                return dst;
            } else {
                return new float[2];
            }
        }

        /**
         * è®¡ç®—ä¸¤ä¸ªçŸ©å½¢ä¹‹é—´çš„å?˜æ?¢çŸ©é˜µ
         * <p>
         * unknownMatrix.mapRect(to, from)
         * å·²çŸ¥fromçŸ©å½¢å’ŒtoçŸ©å½¢,æ±‚unknownMatrix
         *
         * @param from
         * @param to
         * @param result unknownMatrix
         */
        public static void calculateRectTranslateMatrix(RectF from, RectF to, Matrix result) {
            if (from == null || to == null || result == null) {
                return;
            }
            if (from.width() == 0 || from.height() == 0) {
                return;
            }
            result.reset();
            result.postTranslate(-from.left, -from.top);
            result.postScale(to.width() / from.width(), to.height() / from.height());
            result.postTranslate(to.left, to.top);
        }

        /**
         * è®¡ç®—å›¾ç‰‡åœ¨æŸ?ä¸ªImageViewä¸­çš„æ˜¾ç¤ºçŸ©å½¢
         *
         * @param container ImageViewçš„Rect
         * @param srcWidth  å›¾ç‰‡çš„å®½åº¦
         * @param srcHeight å›¾ç‰‡çš„é«˜åº¦
         * @param scaleType å›¾ç‰‡åœ¨ImageViewä¸­çš„ScaleType
         * @param result    å›¾ç‰‡åº”è¯¥åœ¨ImageViewä¸­å±•ç¤ºçš„çŸ©å½¢
         */
        public static void calculateScaledRectInContainer(RectF container, float srcWidth, float srcHeight, ScaleType scaleType, RectF result) {
            if (container == null || result == null) {
                return;
            }
            if (srcWidth == 0 || srcHeight == 0) {
                return;
            }
            //é»˜è®¤scaleTypeä¸ºfit center
            if (scaleType == null) {
                scaleType = ScaleType.FIT_CENTER;
            }
            result.setEmpty();
            if (ScaleType.FIT_XY.equals(scaleType)) {
                result.set(container);
            } else if (ScaleType.CENTER.equals(scaleType)) {
                Matrix matrix = matrixTake();
                RectF rect = rectFTake(0, 0, srcWidth, srcHeight);
                matrix.setTranslate((container.width() - srcWidth) * 0.5f, (container.height() - srcHeight) * 0.5f);
                matrix.mapRect(result, rect);
                rectFGiven(rect);
                matrixGiven(matrix);
                result.left += container.left;
                result.right += container.left;
                result.top += container.top;
                result.bottom += container.top;
            } else if (ScaleType.CENTER_CROP.equals(scaleType)) {
                Matrix matrix = matrixTake();
                RectF rect = rectFTake(0, 0, srcWidth, srcHeight);
                float scale;
                float dx = 0;
                float dy = 0;
                if (srcWidth * container.height() > container.width() * srcHeight) {
                    scale = container.height() / srcHeight;
                    dx = (container.width() - srcWidth * scale) * 0.5f;
                } else {
                    scale = container.width() / srcWidth;
                    dy = (container.height() - srcHeight * scale) * 0.5f;
                }
                matrix.setScale(scale, scale);
                matrix.postTranslate(dx, dy);
                matrix.mapRect(result, rect);
                rectFGiven(rect);
                matrixGiven(matrix);
                result.left += container.left;
                result.right += container.left;
                result.top += container.top;
                result.bottom += container.top;
            } else if (ScaleType.CENTER_INSIDE.equals(scaleType)) {
                Matrix matrix = matrixTake();
                RectF rect = rectFTake(0, 0, srcWidth, srcHeight);
                float scale;
                float dx;
                float dy;
                if (srcWidth <= container.width() && srcHeight <= container.height()) {
                    scale = 1f;
                } else {
                    scale = Math.min(container.width() / srcWidth, container.height() / srcHeight);
                }
                dx = (container.width() - srcWidth * scale) * 0.5f;
                dy = (container.height() - srcHeight * scale) * 0.5f;
                matrix.setScale(scale, scale);
                matrix.postTranslate(dx, dy);
                matrix.mapRect(result, rect);
                rectFGiven(rect);
                matrixGiven(matrix);
                result.left += container.left;
                result.right += container.left;
                result.top += container.top;
                result.bottom += container.top;
            } else if (ScaleType.FIT_CENTER.equals(scaleType)) {
                Matrix matrix = matrixTake();
                RectF rect = rectFTake(0, 0, srcWidth, srcHeight);
                RectF tempSrc = rectFTake(0, 0, srcWidth, srcHeight);
                RectF tempDst = rectFTake(0, 0, container.width(), container.height());
                matrix.setRectToRect(tempSrc, tempDst, Matrix.ScaleToFit.CENTER);
                matrix.mapRect(result, rect);
                rectFGiven(tempDst);
                rectFGiven(tempSrc);
                rectFGiven(rect);
                matrixGiven(matrix);
                result.left += container.left;
                result.right += container.left;
                result.top += container.top;
                result.bottom += container.top;
            } else if (ScaleType.FIT_START.equals(scaleType)) {
                Matrix matrix = matrixTake();
                RectF rect = rectFTake(0, 0, srcWidth, srcHeight);
                RectF tempSrc = rectFTake(0, 0, srcWidth, srcHeight);
                RectF tempDst = rectFTake(0, 0, container.width(), container.height());
                matrix.setRectToRect(tempSrc, tempDst, Matrix.ScaleToFit.START);
                matrix.mapRect(result, rect);
                rectFGiven(tempDst);
                rectFGiven(tempSrc);
                rectFGiven(rect);
                matrixGiven(matrix);
                result.left += container.left;
                result.right += container.left;
                result.top += container.top;
                result.bottom += container.top;
            } else if (ScaleType.FIT_END.equals(scaleType)) {
                Matrix matrix = matrixTake();
                RectF rect = rectFTake(0, 0, srcWidth, srcHeight);
                RectF tempSrc = rectFTake(0, 0, srcWidth, srcHeight);
                RectF tempDst = rectFTake(0, 0, container.width(), container.height());
                matrix.setRectToRect(tempSrc, tempDst, Matrix.ScaleToFit.END);
                matrix.mapRect(result, rect);
                rectFGiven(tempDst);
                rectFGiven(tempSrc);
                rectFGiven(rect);
                matrixGiven(matrix);
                result.left += container.left;
                result.right += container.left;
                result.top += container.top;
                result.bottom += container.top;
            } else {
                result.set(container);
            }
        }
    }
}
