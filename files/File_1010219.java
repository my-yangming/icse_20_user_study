package jetbrains.mps.checkers;

/*Generated by MPS */

import jetbrains.mps.errors.item.ReportItem;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.util.Consumer;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import org.apache.log4j.Level;

public class CatchingChecker<O, I extends ReportItem> implements IAbstractChecker<O, I> {
  private static final Logger LOG = LogManager.getLogger(CatchingChecker.class);
  private IAbstractChecker<O, ? extends I> myOrigin;
  private _FunctionTypes._return_P3_E0<? extends String, ? super O, ? super Exception, ? super SRepository> myMessage;
  public CatchingChecker(IAbstractChecker<O, ? extends I> origin, _FunctionTypes._return_P3_E0<? extends String, ? super O, ? super Exception, ? super SRepository> message) {
    myOrigin = origin;
    myMessage = message;
  }
  @Override
  public void check(O toCheck, SRepository repository, Consumer<? super I> errorCollector, ProgressMonitor monitor) {
    try {
      myOrigin.check(toCheck, repository, errorCollector, monitor);
    } catch (Exception e) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error(myMessage.invoke(toCheck, e, repository), e);
      }
    }
  }
}
