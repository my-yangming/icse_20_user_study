package jetbrains.mps.ide.modelchecker.platform.actions;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.model.SearchTask;
import java.util.List;
import jetbrains.mps.checkers.IChecker;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.checkers.ModelCheckerBuilder;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.errors.item.IssueKindReportItem;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.smodel.ModelAccessHelper;
import jetbrains.mps.util.Computable;
import jetbrains.mps.util.CollectConsumer;
import jetbrains.mps.errors.MessageStatus;
import jetbrains.mps.ide.findusages.model.CategoryKind;
import jetbrains.mps.ide.messages.Icons;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.util.Pair;

public class ModelCheckerIssueFinder implements SearchTask {
  private final List<IChecker<?, ?>> myExtraCheckers;
  private final SRepository myRepository;
  private final ModelCheckerBuilder.ItemsToCheck itemsToCheck = new ModelCheckerBuilder.ItemsToCheck();

  public ModelCheckerIssueFinder(SRepository repository, List<? extends IChecker<?, ?>> extraCheckers) {
    myRepository = repository;
    myExtraCheckers = ListSequence.fromList(new ArrayList<IChecker<?, ?>>());
    ListSequence.fromList(myExtraCheckers).addSequence(ListSequence.fromList(extraCheckers));
  }
  protected final List<IChecker<?, ?>> getSpecificCheckers() {
    return myExtraCheckers;
  }
  public void addModelScope(Iterable<SModel> models) {
    ListSequence.fromList(itemsToCheck.models).addSequence(Sequence.fromIterable(models));
  }
  public void addModuleScope(Iterable<SModule> modules) {
    ListSequence.fromList(itemsToCheck.modules).addSequence(Sequence.fromIterable(modules));
  }

  @Override
  public boolean canExecute() {
    return ListSequence.fromList(myExtraCheckers).isNotEmpty() && (ListSequence.fromList(itemsToCheck.models).isNotEmpty() || ListSequence.fromList(itemsToCheck.modules).isNotEmpty());
  }

  @Override
  public SearchResults<IssueKindReportItem> execute(final ProgressMonitor monitor) {
    return new ModelAccessHelper(myRepository).runReadAction(new Computable<SearchResults<IssueKindReportItem>>() {
      public SearchResults<IssueKindReportItem> compute() {
        CollectConsumer<IssueKindReportItem> errorCollector = new CollectConsumer<IssueKindReportItem>();
        List<IChecker<?, ? extends IssueKindReportItem>> specificCheckers = ListSequence.fromList(new ArrayList<IChecker<?, ? extends IssueKindReportItem>>());
        ListSequence.fromList(specificCheckers).addSequence(ListSequence.fromList(getSpecificCheckers()));
        // FIXME it's odd to create checker here provided outer code cares about ModelCheckerSettings and IssueKindReportItem anyway. 
        //       We could have passed IAbstractChecker (created the way from the line below) to the cons, however, can't do it right away 
        //       as I don't like to expose ModelCheckerBuilder.ItemsToCheck, and need to refactor this. 
        new ModelCheckerBuilder(ModelCheckerSettings.getInstance().isCheckStubs()).createChecker(specificCheckers).check(itemsToCheck, myRepository, errorCollector, monitor);
        SearchResults<IssueKindReportItem> result = new SearchResults<IssueKindReportItem>();
        for (IssueKindReportItem error : errorCollector.getResult()) {
          result.getSearchResults().add(getSearchResultForReportItem(error));
        }
        return result;
      }
    });
  }
  public static String getResultCategory(MessageStatus messageStatus) {
    switch (messageStatus) {
      case ERROR:
        return SEVERITY_ERROR;
      case WARNING:
        return SEVERITY_WARNING;
      case OK:
        return SEVERITY_INFO;
      default:
        return SEVERITY_ERROR;
    }
  }
  public static final CategoryKind CATEGORY_KIND_SEVERITY = new CategoryKind("Severity", Icons.ERROR_ICON, "Group by severity");
  public static final CategoryKind CATEGORY_KIND_ISSUE_TYPE = new CategoryKind("Issue type", jetbrains.mps.ide.findusages.view.icons.Icons.CATEGORY_ICON, "Group by issue type");
  public static final String SEVERITY_ERROR = "Errors";
  public static final String SEVERITY_WARNING = "Warnings";
  public static final String SEVERITY_INFO = "Infos";
  private SearchResult<IssueKindReportItem> getSearchResultForReportItem(IssueKindReportItem item) {
    String issueKind = IssueKindReportItem.FLAVOUR_ISSUE_KIND.get(item).getSpecialization();
    return new SearchResult<IssueKindReportItem>(item, IssueKindReportItem.PATH_OBJECT.get(item).resolve(myRepository), new Pair<CategoryKind, String>(CATEGORY_KIND_SEVERITY, getResultCategory(item.getSeverity())), new Pair<CategoryKind, String>(CATEGORY_KIND_ISSUE_TYPE, issueKind));
  }
}
