package jetbrains.mps.lang.core.refactorings;

/*Generated by MPS */

import jetbrains.mps.refactoring.framework.BaseRefactoring;
import jetbrains.mps.refactoring.framework.IRefactoringTarget;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.List;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.progress.EmptyProgressMonitor;

public class Rename extends BaseRefactoring {
  public Rename() {
    this.addTransientParameter("newName");
  }
  public IRefactoringTarget getRefactoringTarget() {
    return new Rename_Target();
  }
  public String getUserFriendlyName() {
    return "Rename";
  }
  public boolean init(final RefactoringContext refactoringContext) {
    return true;
  }
  public void refactor(final RefactoringContext refactoringContext) {
    SPropertyOperations.assign(refactoringContext.getSelectedNode(), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), ((String) refactoringContext.getParameter("newName")));
  }
  public List<SModel> getModelsToGenerate(final RefactoringContext refactoringContext) {
    return (List<SModel>) refactoringContext.getModelsFromUsages(refactoringContext.getSelectedModel());
  }
  public SearchResults getAffectedNodes(final RefactoringContext refactoringContext) {
    return FindUtils.getSearchResults(new EmptyProgressMonitor(), refactoringContext.getSelectedNode(), refactoringContext.getCurrentScope(), "jetbrains.mps.lang.core.findUsages.NodeAndDescendantsUsages_Finder");
  }
}
