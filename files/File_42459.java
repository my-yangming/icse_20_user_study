/*
 * Copyright 2015-2102 RonCoo(http://www.roncoo.com) Group.
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *  
 *      http://www.apache.org/licenses/LICENSE-2.0
 *  
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.roncoo.pay.account.service.impl;

import com.roncoo.pay.account.dao.RpAccountDao;
import com.roncoo.pay.account.dao.RpAccountHistoryDao;
import com.roncoo.pay.account.entity.RpAccount;
import com.roncoo.pay.account.entity.RpAccountHistory;
import com.roncoo.pay.account.enums.AccountFundDirectionEnum;
import com.roncoo.pay.account.exception.AccountBizException;
import com.roncoo.pay.account.service.RpAccountTransactionService;
import com.roncoo.pay.common.core.enums.PublicEnum;
import com.roncoo.pay.common.core.utils.DateUtils;
import com.roncoo.pay.common.core.utils.StringUtil;
import com.roncoo.pay.trade.enums.TrxTypeEnum;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * è´¦æˆ·æ“?ä½œserviceå®žçŽ°ç±»
 * é¾™æžœå­¦é™¢ï¼šwww.roncoo.com
 * @authorï¼šzenghao
 */
@Service("rpAccountTransactionService")
public class RpAccountTransactionServiceImpl implements RpAccountTransactionService {
	
	private static final Log LOG = LogFactory.getLog(RpAccountTransactionServiceImpl.class);
	
	@Autowired
	private RpAccountDao rpAccountDao;
	@Autowired
	private RpAccountHistoryDao rpAccountHistoryDao;
	
	

	/**
	 * æ ¹æ?®ç”¨æˆ·ç¼–å?·ç¼–å?·èŽ·å?–è´¦æˆ·ä¿¡æ?¯
	 * 
	 * @param userNO
	 *            ç”¨æˆ·ç¼–å?·
	 * @param isPessimist
	 *            æ˜¯å?¦åŠ è¡Œé”?
	 * @return
	 */
	private RpAccount getByUserNo_IsPessimist(String userNo, boolean isPessimist) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("userNo", userNo);
		map.put("isPessimist", isPessimist);
		return rpAccountDao.getByUserNo(map);
	}

	/**
	 * åŠ æ¬¾
	 * 
	 * @param userNo
	 *            ç”¨æˆ·ç¼–å?·
	 * @param amount
	 *            åŠ æ¬¾é‡‘é¢?
	 * @param requestNo
	 *            è¯·æ±‚å?·
	 * @param trxType
	 *            ä¸šåŠ¡ç±»åž‹
	 * @param remark
	 *            å¤‡æ³¨
	 */
	@Transactional(rollbackFor = Exception.class)
	public RpAccount creditToAccount(String userNo, BigDecimal amount, String requestNo, String trxType, String remark){

		return this.creditToAccount(userNo, amount, requestNo, null, trxType, remark);
	}

	/**
	 * åŠ æ¬¾:æœ‰é“¶è¡Œæµ?æ°´
	 * 
	 * @param userNo
	 *            ç”¨æˆ·ç¼–å?·
	 * @param amount
	 *            åŠ æ¬¾é‡‘é¢?
	 * @param requestNo
	 *            è¯·æ±‚å?·
	 * @param trxType
	 *            ä¸šåŠ¡ç±»åž‹
	 * @param remark
	 *            å¤‡æ³¨
	 */
	@Transactional(rollbackFor = Exception.class)
	public RpAccount creditToAccount(String userNo, BigDecimal amount, String requestNo, String bankTrxNo, String trxType, String remark) {
		RpAccount account = this.getByUserNo_IsPessimist(userNo, true);
		if (account == null) {
			throw AccountBizException.ACCOUNT_NOT_EXIT;
		}

		Date lastModifyDate = account.getEditTime();
		// ä¸?æ˜¯å?Œä¸€å¤©ç›´æŽ¥æ¸…0
		if (!DateUtils.isSameDayWithToday(lastModifyDate)) {
			account.setTodayExpend(BigDecimal.ZERO);
			account.setTodayIncome(BigDecimal.ZERO);
		}

		// æ€»æ”¶ç›Šç´¯åŠ å’Œä»Šæ—¥æ”¶ç›Š
		if (TrxTypeEnum.EXPENSE.name().equals(trxType)) {// ä¸šåŠ¡ç±»åž‹æ˜¯äº¤æ˜“
			account.setTotalIncome(account.getTotalIncome().add(amount));

			/***** æ ¹æ?®ä¸Šæ¬¡ä¿®æ”¹æ—¶é—´ï¼Œç»Ÿè®¡ä»Šæ—¥æ”¶ç›Š *******/
			if (DateUtils.isSameDayWithToday(lastModifyDate)) {
				// å¦‚æžœæ˜¯å?Œä¸€å¤©
				account.setTodayIncome(account.getTodayIncome().add(amount));
			} else {
				// ä¸?æ˜¯å?Œä¸€å¤©
				account.setTodayIncome(amount);
			}
			/************************************/
		}

		String completeSett = PublicEnum.NO.name();
		String isAllowSett = PublicEnum.YES.name();

		/** è®¾ç½®ä½™é¢?çš„å€¼ **/
		account.setBalance(account.getBalance().add(amount));
		account.setEditTime(new Date());

		// è®°å½•è´¦æˆ·åŽ†å?²
		RpAccountHistory accountHistoryEntity = new RpAccountHistory();
		accountHistoryEntity.setCreateTime(new Date());
		accountHistoryEntity.setEditTime(new Date());
		accountHistoryEntity.setIsAllowSett(isAllowSett);
		accountHistoryEntity.setAmount(amount);
		accountHistoryEntity.setBalance(account.getBalance());
		accountHistoryEntity.setRequestNo(requestNo);
		accountHistoryEntity.setBankTrxNo(bankTrxNo);
		accountHistoryEntity.setIsCompleteSett(completeSett);
		accountHistoryEntity.setRemark(remark);
		accountHistoryEntity.setFundDirection(AccountFundDirectionEnum.ADD.name());
		accountHistoryEntity.setAccountNo(account.getAccountNo());
		accountHistoryEntity.setTrxType(trxType);
		accountHistoryEntity.setId(StringUtil.get32UUID());
		accountHistoryEntity.setUserNo(userNo);

		this.rpAccountHistoryDao.insert(accountHistoryEntity);
		this.rpAccountDao.update(account);
		LOG.info("è´¦æˆ·åŠ æ¬¾æˆ?åŠŸï¼Œå¹¶è®°å½•äº†è´¦æˆ·åŽ†å?²");
		return account;
	}

	/**
	 * å‡?æ¬¾
	 * 
	 * @param userNo
	 *            ç”¨æˆ·ç¼–å?·
	 * @param amount
	 *            å‡?æ¬¾é‡‘é¢?
	 * @param requestNo
	 *            è¯·æ±‚å?·
	 * @param trxType
	 *            ä¸šåŠ¡ç±»åž‹
	 * @param remark
	 *            å¤‡æ³¨
	 */
	@Transactional(rollbackFor = Exception.class)
	public RpAccount debitToAccount(String userNo, BigDecimal amount, String requestNo, String trxType, String remark){
		return this.debitToAccount(userNo, amount, requestNo, null, trxType, remark);
	}

	/**
	 * å‡?æ¬¾:æœ‰é“¶è¡Œæµ?æ°´
	 * 
	 * @param userNo
	 *            ç”¨æˆ·ç¼–å?·
	 * @param amount
	 *            å‡?æ¬¾é‡‘é¢?
	 * @param requestNo
	 *            è¯·æ±‚å?·
	 * @param trxType
	 *            ä¸šåŠ¡ç±»åž‹
	 * @param remark
	 *            å¤‡æ³¨
	 */
	@Transactional(rollbackFor = Exception.class)
	public RpAccount debitToAccount(String userNo, BigDecimal amount, String requestNo, String bankTrxNo, String trxType, String remark) {
		RpAccount account = this.getByUserNo_IsPessimist(userNo, true);
		if (account == null) {
			throw AccountBizException.ACCOUNT_NOT_EXIT;
		}
		// èŽ·å?–å?¯ç”¨ä½™é¢?
		BigDecimal availableBalance = account.getAvailableBalance();

		String isAllowSett = PublicEnum.YES.name();
		String completeSett = PublicEnum.NO.name();

		if (availableBalance.compareTo(amount) == -1) {
			throw AccountBizException.ACCOUNT_SUB_AMOUNT_OUTLIMIT;
		}

		/** å‡?å°‘æ€»ä½™é¢? **/
		account.setBalance(account.getBalance().subtract(amount));

		Date lastModifyDate = account.getEditTime();
		// ä¸?æ˜¯å?Œä¸€å¤©ç›´æŽ¥æ¸…0
		if (!DateUtils.isSameDayWithToday(lastModifyDate)) {
			account.setTodayExpend(BigDecimal.ZERO);
			account.setTodayIncome(BigDecimal.ZERO);
			account.setTodayExpend(amount);
		}else{
			account.setTodayExpend(account.getTodayExpend().add(amount));
		}
		account.setTotalExpend(account.getTodayExpend().add(amount));
		account.setEditTime(new Date());

		// è®°å½•è´¦æˆ·åŽ†å?²
		RpAccountHistory accountHistoryEntity = new RpAccountHistory();
		accountHistoryEntity.setCreateTime(new Date());
		accountHistoryEntity.setEditTime(new Date());
		accountHistoryEntity.setIsAllowSett(isAllowSett);
		accountHistoryEntity.setAmount(amount);
		accountHistoryEntity.setBalance(account.getBalance());
		accountHistoryEntity.setRequestNo(requestNo);
		accountHistoryEntity.setBankTrxNo(bankTrxNo);
		accountHistoryEntity.setIsCompleteSett(completeSett);
		accountHistoryEntity.setRemark(remark);
		accountHistoryEntity.setFundDirection(AccountFundDirectionEnum.SUB.name());
		accountHistoryEntity.setAccountNo(account.getAccountNo());
		accountHistoryEntity.setTrxType(trxType);
		accountHistoryEntity.setId(StringUtil.get32UUID());
		accountHistoryEntity.setUserNo(userNo);
		this.rpAccountHistoryDao.insert(accountHistoryEntity);
		this.rpAccountDao.update(account);
		return account;
	}

	/**
	 * å†»ç»“è´¦æˆ·èµ„é‡‘
	 * 
	 * @param userNo
	 *            ç”¨æˆ·ç¼–å?·
	 * @param freezeAmount
	 *            å†»ç»“é‡‘é¢?
	 **/

	@Transactional(rollbackFor = Exception.class)
	public RpAccount freezeAmount(String userNo, BigDecimal freezeAmount) {
		RpAccount account = this.getByUserNo_IsPessimist(userNo, true);
		if (account == null) {
			throw AccountBizException.ACCOUNT_NOT_EXIT;
		}
		account.setEditTime(new Date());
		// æ¯”è¾ƒå?¯ç”¨ä½™é¢?å’Œå†»ç»“é‡‘é¢?
		if (!account.availableBalanceIsEnough(freezeAmount)) {
			// å?¯ç”¨ä½™é¢?ä¸?è¶³
			throw AccountBizException.ACCOUNT_FROZEN_AMOUNT_OUTLIMIT;
		}
		account.setUnbalance(account.getUnbalance().add(freezeAmount));
		this.rpAccountDao.update(account);
		return account;
	}

	/**
	 * ç»“ç®—æˆ?åŠŸ è§£å†»é‡‘é¢?+å‡?æ¬¾
	 * 
	 * @param userNo
	 *            ç”¨æˆ·ç¼–å?·
	 * @param amount
	 *            è§£å†»å’Œå‡?æ¬¾é‡‘é¢?
	 * @param requestNo
	 *            æµ?æ°´å?·
	 * @param trxType
	 *            ä¸šåŠ¡ç±»åž‹
	 * @param remark
	 *            å¤‡æ³¨
	 */

	@Transactional(rollbackFor = Exception.class)
	public RpAccount unFreezeAmount(String userNo, BigDecimal amount, String requestNo, String trxType, String remark) {
		RpAccount account = this.getByUserNo_IsPessimist(userNo, true);
		if (account == null) {
			throw AccountBizException.ACCOUNT_NOT_EXIT;
		}

		Date lastModifyDate = account.getEditTime();
		// ä¸?æ˜¯å?Œä¸€å¤©ç›´æŽ¥æ¸…0
		if (!DateUtils.isSameDayWithToday(lastModifyDate)) {
			account.setTodayExpend(BigDecimal.ZERO);
			account.setTodayIncome(BigDecimal.ZERO);
			account.setTodayExpend(amount);
		}else{
			account.setTodayExpend(account.getTodayExpend().add(amount));
		}
		account.setTotalExpend(account.getTodayExpend().add(amount));

		// åˆ¤æ–­è§£å†»é‡‘é¢?æ˜¯å?¦å……è¶³
		if (account.getUnbalance().subtract(amount).compareTo(BigDecimal.ZERO) == -1) {
			// è§£å†»é‡‘é¢?è¶…é™?
			throw AccountBizException.ACCOUNT_UN_FROZEN_AMOUNT_OUTLIMIT;
		}
		account.setEditTime(new Date());
		account.setBalance(account.getBalance().subtract(amount));// å‡?æ¬¾
		account.setUnbalance(account.getUnbalance().subtract(amount));// è§£å†»
		account.setSettAmount(account.getSettAmount().subtract(amount));// å‡?å°‘å?¯ç»“ç®—é‡‘é¢?

		String isAllowSett = PublicEnum.NO.name();
		String completeSett = PublicEnum.NO.name();
		// è®°å½•è´¦æˆ·åŽ†å?²
		RpAccountHistory accountHistoryEntity = new RpAccountHistory();
		accountHistoryEntity.setCreateTime(new Date());
		accountHistoryEntity.setEditTime(new Date());
		accountHistoryEntity.setIsAllowSett(isAllowSett);
		accountHistoryEntity.setAmount(amount);
		accountHistoryEntity.setBalance(account.getBalance());
		accountHistoryEntity.setRequestNo(requestNo);
		accountHistoryEntity.setIsCompleteSett(completeSett);
		accountHistoryEntity.setRemark(remark);
		accountHistoryEntity.setFundDirection(AccountFundDirectionEnum.SUB.name());
		accountHistoryEntity.setAccountNo(account.getAccountNo());
		accountHistoryEntity.setTrxType(trxType);
		accountHistoryEntity.setUserNo(userNo);
		this.rpAccountHistoryDao.insert(accountHistoryEntity);
		this.rpAccountDao.update(account);
		return account;
	}

	/**
	 * ç»“ç®—å¤±è´¥ è§£å†»é‡‘é¢?
	 * 
	 * @param userNo
	 *            ç”¨æˆ·ç¼–å?·
	 * @param amount
	 *            è§£å†»å’Œå‡?æ¬¾é‡‘é¢?
	 * @param requestNo
	 *            æµ?æ°´å?·
	 * @param trxType
	 *            ä¸šåŠ¡ç±»åž‹
	 * @param remark
	 *            å¤‡æ³¨
	 */

	@Transactional(rollbackFor = Exception.class)
	public RpAccount unFreezeSettAmount(String userNo, BigDecimal amount) {
		RpAccount account = this.getByUserNo_IsPessimist(userNo, true);
		if (account == null) {
			throw AccountBizException.ACCOUNT_NOT_EXIT;
		}

		Date lastModifyDate = account.getEditTime();
		// ä¸?æ˜¯å?Œä¸€å¤©ç›´æŽ¥æ¸…0
		if (!DateUtils.isSameDayWithToday(lastModifyDate)) {
			account.setTodayExpend(BigDecimal.ZERO);
			account.setTodayIncome(BigDecimal.ZERO);
		}

		// åˆ¤æ–­è§£å†»é‡‘é¢?æ˜¯å?¦å……è¶³
		if (account.getUnbalance().subtract(amount).compareTo(BigDecimal.ZERO) == -1) {
			// è§£å†»é‡‘é¢?è¶…é™?
			throw AccountBizException.ACCOUNT_UN_FROZEN_AMOUNT_OUTLIMIT;
		}
		account.setEditTime(new Date());
		account.setUnbalance(account.getUnbalance().subtract(amount));// è§£å†»

		this.rpAccountDao.update(account);
		return account;
	}

	/**
	 * æ›´æ–°è´¦æˆ·åŽ†å?²ä¸­çš„ç»“ç®—çŠ¶æ€?ï¼Œå¹¶ä¸”ç´¯åŠ å?¯ç»“ç®—é‡‘é¢?
	 * 
	 * @param userNo
	 *            ç”¨æˆ·ç¼–å?·
	 * @param collectDate
	 *            æ±‡æ€»æ—¥æœŸ
	 * @param riskDay
	 *            é£Žé™©é¢„å­˜æœŸ
	 * @param totalAmount
	 *            å?¯ç»“ç®—é‡‘é¢?ç´¯è®¡
	 * 
	 */
	@Transactional(rollbackFor = Exception.class)
	public void settCollectSuccess(String userNo, String collectDate, int riskDay, BigDecimal totalAmount) {

		LOG.info("==>settCollectSuccess");
		LOG.info(String.format("==>userNo:%s, collectDate:%s, riskDay:%s", userNo, collectDate, riskDay));

		RpAccount account = this.getByUserNo_IsPessimist(userNo, true);
		if (account == null) {
			throw AccountBizException.ACCOUNT_NOT_EXIT.newInstance("è´¦æˆ·ä¸?å­˜åœ¨,ç”¨æˆ·ç¼–å?·{%s}", userNo).print();
		}
		// æ›´æ–°è´¦æˆ·åŽ†å?²çŠ¶æ€?
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("accountNo", account.getAccountNo());
		params.put("statDate", collectDate);
		params.put("riskDay", riskDay);
		rpAccountHistoryDao.updateCompleteSettTo100(params);

		// è´¦æˆ·å?¯ç»“ç®—é‡‘é¢?çš„ç´¯åŠ 
		account.setSettAmount(account.getSettAmount().add(totalAmount));
		rpAccountDao.update(account);
		LOG.info("==>settCollectSuccess<==");
	}
}
