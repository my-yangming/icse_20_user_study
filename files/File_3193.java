/*
 * <summary></summary>
 * <author>He Han</author>
 * <email>hankcs.cn@gmail.com</email>
 * <create-date>2014/10/8 0:52</create-date>
 *
 * <copyright file="MutualInformationPhraseExactor.java" company="ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸">
 * Copyright (c) 2003-2014, ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸. All Right Reserved, http://www.linrunsoft.com/
 * This source is subject to the LinrunSpace License. Please contact ä¸Šæµ·æž—åŽŸä¿¡æ?¯ç§‘æŠ€æœ‰é™?å…¬å?¸ to get more information.
 * </copyright>
 */
package com.hankcs.hanlp.mining.phrase;

import com.hankcs.hanlp.HanLP;
import com.hankcs.hanlp.corpus.occurrence.Occurrence;
import com.hankcs.hanlp.corpus.occurrence.PairFrequency;
import com.hankcs.hanlp.dictionary.stopword.CoreStopWordDictionary;
import com.hankcs.hanlp.dictionary.stopword.Filter;
import com.hankcs.hanlp.seg.common.Term;
import com.hankcs.hanlp.tokenizer.NotionalTokenizer;

import java.util.LinkedList;
import java.util.List;

import static com.hankcs.hanlp.corpus.tag.Nature.nx;
import static com.hankcs.hanlp.corpus.tag.Nature.t;

/**
 * åˆ©ç”¨äº’ä¿¡æ?¯å’Œå·¦å?³ç†µçš„çŸ­è¯­æ??å?–å™¨
 * @author hankcs
 */
public class MutualInformationEntropyPhraseExtractor implements IPhraseExtractor
{
    @Override
    public List<String> extractPhrase(String text, int size)
    {
        List<String> phraseList = new LinkedList<String>();
        Occurrence occurrence = new Occurrence();
        Filter[] filterChain = new Filter[]
                {
                        CoreStopWordDictionary.FILTER,
                        new Filter()
                        {
                            @Override
                            public boolean shouldInclude(Term term)
                            {
                                if (term.nature == t || term.nature == nx)
                                    return false;
                                return true;
                            }
                        }
                };
        for (List<Term> sentence : NotionalTokenizer.seg2sentence(text, filterChain))
        {
            if (HanLP.Config.DEBUG)
            {
                System.out.println(sentence);
            }
            occurrence.addAll(sentence);
        }
        occurrence.compute();
        if (HanLP.Config.DEBUG)
        {
            System.out.println(occurrence);
            for (PairFrequency phrase : occurrence.getPhraseByMi())
            {
                System.out.print(phrase.getKey().replace(Occurrence.RIGHT, 'â†’') + "\tmi=" + phrase.mi + " , ") ;
            }
            System.out.println();
            for (PairFrequency phrase : occurrence.getPhraseByLe())
            {
                System.out.print(phrase.getKey().replace(Occurrence.RIGHT, 'â†’') + "\tle=" + phrase.le + " , ");
            }
            System.out.println();
            for (PairFrequency phrase : occurrence.getPhraseByRe())
            {
                System.out.print(phrase.getKey().replace(Occurrence.RIGHT, 'â†’') + "\tre=" + phrase.re + " , ");
            }
            System.out.println();
            for (PairFrequency phrase : occurrence.getPhraseByScore())
            {
                System.out.print(phrase.getKey().replace(Occurrence.RIGHT, 'â†’') + "\tscore=" + phrase.score + " , ");
            }
            System.out.println();
        }

        for (PairFrequency phrase : occurrence.getPhraseByScore())
        {
            if (phraseList.size() == size) break;
            phraseList.add(phrase.first + phrase.second);
        }
        return phraseList;
    }

    /**
     * ä¸€å?¥è¯?æ??å?–
     * @param text
     * @param size
     * @return
     */
    public static List<String> extract(String text, int size)
    {
        IPhraseExtractor extractor = new MutualInformationEntropyPhraseExtractor();
        return extractor.extractPhrase(text, size);
    }

//    public static void main(String[] args)
//    {
//        MutualInformationEntropyPhraseExtractor extractor = new MutualInformationEntropyPhraseExtractor();
//        String text = "ç®—æ³•å·¥ç¨‹å¸ˆ\n" +
//                "ç®—æ³•ï¼ˆAlgorithmï¼‰æ˜¯ä¸€ç³»åˆ—è§£å†³é—®é¢˜çš„æ¸…æ™°æŒ‡ä»¤ï¼Œä¹Ÿå°±æ˜¯è¯´ï¼Œèƒ½å¤Ÿå¯¹ä¸€å®šè§„èŒƒçš„è¾“å…¥ï¼Œåœ¨æœ‰é™?æ—¶é—´å†…èŽ·å¾—æ‰€è¦?æ±‚çš„è¾“å‡ºã€‚å¦‚æžœä¸€ä¸ªç®—æ³•æœ‰ç¼ºé™·ï¼Œæˆ–ä¸?é€‚å?ˆäºŽæŸ?ä¸ªé—®é¢˜ï¼Œæ‰§è¡Œè¿™ä¸ªç®—æ³•å°†ä¸?ä¼šè§£å†³è¿™ä¸ªé—®é¢˜ã€‚ä¸?å?Œçš„ç®—æ³•å?¯èƒ½ç”¨ä¸?å?Œçš„æ—¶é—´ã€?ç©ºé—´æˆ–æ•ˆçŽ‡æ?¥å®Œæˆ?å?Œæ ·çš„ä»»åŠ¡ã€‚ä¸€ä¸ªç®—æ³•çš„ä¼˜åŠ£å?¯ä»¥ç”¨ç©ºé—´å¤?æ?‚åº¦ä¸Žæ—¶é—´å¤?æ?‚åº¦æ?¥è¡¡é‡?ã€‚ç®—æ³•å·¥ç¨‹å¸ˆå°±æ˜¯åˆ©ç”¨ç®—æ³•å¤„ç?†äº‹ç‰©çš„äººã€‚\n" +
//                "\n" +
//                "1è?Œä½?ç®€ä»‹\n" +
//                "ç®—æ³•å·¥ç¨‹å¸ˆæ˜¯ä¸€ä¸ªé?žå¸¸é«˜ç«¯çš„è?Œä½?ï¼›\n" +
//                "ä¸“ä¸šè¦?æ±‚ï¼šè®¡ç®—æœºã€?ç”µå­?ã€?é€šä¿¡ã€?æ•°å­¦ç­‰ç›¸å…³ä¸“ä¸šï¼›\n" +
//                "å­¦åŽ†è¦?æ±‚ï¼šæœ¬ç§‘å?Šå…¶ä»¥ä¸Šçš„å­¦åŽ†ï¼Œå¤§å¤šæ•°æ˜¯ç¡•å£«å­¦åŽ†å?Šå…¶ä»¥ä¸Šï¼›\n" +
//                "è¯­è¨€è¦?æ±‚ï¼šè‹±è¯­è¦?æ±‚æ˜¯ç†Ÿç»ƒï¼ŒåŸºæœ¬ä¸Šèƒ½é˜…è¯»å›½å¤–ä¸“ä¸šä¹¦åˆŠï¼›\n" +
//                "å¿…é¡»æŽŒæ?¡è®¡ç®—æœºç›¸å…³çŸ¥è¯†ï¼Œç†Ÿç»ƒä½¿ç”¨ä»¿çœŸå·¥å…·MATLABç­‰ï¼Œå¿…é¡»ä¼šä¸€é—¨ç¼–ç¨‹è¯­è¨€ã€‚\n" +
//                "\n" +
//                "2ç ”ç©¶æ–¹å?‘\n" +
//                "è§†é¢‘ç®—æ³•å·¥ç¨‹å¸ˆã€?å›¾åƒ?å¤„ç?†ç®—æ³•å·¥ç¨‹å¸ˆã€?éŸ³é¢‘ç®—æ³•å·¥ç¨‹å¸ˆ é€šä¿¡åŸºå¸¦ç®—æ³•å·¥ç¨‹å¸ˆ\n" +
//                "\n" +
//                "3ç›®å‰?å›½å†…å¤–çŠ¶å†µ\n" +
//                "ç›®å‰?å›½å†…ä»Žäº‹ç®—æ³•ç ”ç©¶çš„å·¥ç¨‹å¸ˆä¸?å°‘ï¼Œä½†æ˜¯é«˜çº§ç®—æ³•å·¥ç¨‹å¸ˆå?´å¾ˆå°‘ï¼Œæ˜¯ä¸€ä¸ªé?žå¸¸ç´§ç¼ºçš„ä¸“ä¸šå·¥ç¨‹å¸ˆã€‚ç®—æ³•å·¥ç¨‹å¸ˆæ ¹æ?®ç ”ç©¶é¢†åŸŸæ?¥åˆ†ä¸»è¦?æœ‰éŸ³é¢‘/è§†é¢‘ç®—æ³•å¤„ç?†ã€?å›¾åƒ?æŠ€æœ¯æ–¹é?¢çš„äºŒç»´ä¿¡æ?¯ç®—æ³•å¤„ç?†å’Œé€šä¿¡ç‰©ç?†å±‚ã€?é›·è¾¾ä¿¡å?·å¤„ç?†ã€?ç”Ÿç‰©åŒ»å­¦ä¿¡å?·å¤„ç?†ç­‰é¢†åŸŸçš„ä¸€ç»´ä¿¡æ?¯ç®—æ³•å¤„ç?†ã€‚\n" +
//                "åœ¨è®¡ç®—æœºéŸ³è§†é¢‘å’Œå›¾å½¢å›¾åƒ?æŠ€æœ¯ç­‰äºŒç»´ä¿¡æ?¯ç®—æ³•å¤„ç?†æ–¹é?¢ç›®å‰?æ¯”è¾ƒå…ˆè¿›çš„è§†é¢‘å¤„ç?†ç®—æ³•ï¼šæœºå™¨è§†è§‰æˆ?ä¸ºæ­¤ç±»ç®—æ³•ç ”ç©¶çš„æ ¸å¿ƒï¼›å?¦å¤–è¿˜æœ‰2Dè½¬3Dç®—æ³•(2D-to-3D conversion)ï¼ŒåŽ»éš”è¡Œç®—æ³•(de-interlacing)ï¼Œè¿?åŠ¨ä¼°è®¡è¿?åŠ¨è¡¥å?¿ç®—æ³•(Motion estimation/Motion Compensation)ï¼ŒåŽ»å™ªç®—æ³•(Noise Reduction)ï¼Œç¼©æ”¾ç®—æ³•(scaling)ï¼Œé”?åŒ–å¤„ç?†ç®—æ³•(Sharpness)ï¼Œè¶…åˆ†è¾¨çŽ‡ç®—æ³•(Super Resolution),æ‰‹åŠ¿è¯†åˆ«(gesture recognition),äººè„¸è¯†åˆ«(face recognition)ã€‚\n" +
//                "åœ¨é€šä¿¡ç‰©ç?†å±‚ç­‰ä¸€ç»´ä¿¡æ?¯é¢†åŸŸç›®å‰?å¸¸ç”¨çš„ç®—æ³•ï¼šæ— çº¿é¢†åŸŸçš„RRMã€?RTTï¼Œä¼ é€?é¢†åŸŸçš„è°ƒåˆ¶è§£è°ƒã€?ä¿¡é?“å?‡è¡¡ã€?ä¿¡å?·æ£€æµ‹ã€?ç½‘ç»œä¼˜åŒ–ã€?ä¿¡å?·åˆ†è§£ç­‰ã€‚\n" +
//                "å?¦å¤–æ•°æ?®æŒ–æŽ˜ã€?äº’è?”ç½‘æ?œç´¢ç®—æ³•ä¹Ÿæˆ?ä¸ºå½“ä»Šçš„çƒ­é—¨æ–¹å?‘ã€‚\n" +
//                "ç®—æ³•å·¥ç¨‹å¸ˆé€?æ¸?å¾€äººå·¥æ™ºèƒ½æ–¹å?‘å?‘å±•ã€‚";
////        System.out.println(text);
//        List<String> phraseList = extractor.extractPhrase(text, 10);
//        System.out.println(phraseList);
//    }
}
