package com.zinc.velocitytracker_scroller.widget;

import android.animation.ValueAnimator;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.support.annotation.Nullable;
import android.util.AttributeSet;
import android.util.Log;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.View;
import android.view.ViewConfiguration;
import android.widget.Scroller;

import java.util.ArrayList;
import java.util.List;

/**
 * author : zinc
 * email : 56002982@qq.com
 * time : 2019/3/1 ä¸‹å?ˆ5:04
 * desc : å¸¦æ»‘åŠ¨æ•ˆæžœçš„æŸ±å½¢å›¾
 * version :
 */
public class BarChart extends View {

    private static final String TAG = "BarChart";
    /**
     * å†…åœ†çš„é¢œè‰²
     */
    private static final String INNER_DOT_COLOR = "#99E35B5B";
    /**
     * å¤–åœ†çš„é¢œè‰²
     */
    private static final String OUTER_DOT_COLOR = "#28E35B5B";
    /**
     * æŸ±çš„é¢œè‰²
     */
    private static final String BAR_COLOR = "#bb434343";
    /**
     * æ–‡å­—é¢œè‰²
     */
    private static final String TEXT_COLOR = "#64C5C5C5";
    /**
     * åŠ¨ç”»æ—¶é•¿
     */
    private static final int ANIM_DURATION = 2000;

    /**
     * æŸ±å­?çš„æ•°æ?®
     */
    private List<BarInfo> mBarInfoList = new ArrayList<>();
    /**
     * æ??è¿°å­—ä½“çš„å¤§å°?
     */
    private float mDescTextSize;
    /**
     * ç‚¹çš„å†…å?Šå¾„
     */
    private float mDotInnerRadius;
    /**
     * ç‚¹çš„å¤–å?Šå¾„
     */
    private float mDotOuterRadius;
    /**
     * åº•éƒ¨è¾¹è·?
     */
    private float mBottomSpacing;
    /**
     * æŸ±ä¸Žæ–‡å­—çš„è·?ç¦»
     */
    private float mBarTextSpacing;
    /**
     * æŸ±å­?ä¸ŽæŸ±å­?çš„é—´éš”
     */
    private float mBarInterval;
    /**
     * æŸ±å­?ä¸Žä¸Šè¾¹è·?çš„è·?ç¦»
     */
    private float mTopSpacing;
    /**
     * æŸ±å­?çš„é«˜åº¦
     */
    private float mBarHeight;
    /**
     * æ¯?æ ¹æŸ±å­?çš„å®½åº¦
     */
    private float mBarWidth;
    /**
     * æœ‰æ•°æ?®çš„ç”»å¸ƒå®½
     */
    private float mCanvasWidth;
    /**
     * ç”¨æˆ·å?¯è§?çš„è§†å›¾å®½
     */
    private float mViewWidth;
    /**
     * æŸ±å­?è·¯å¾„
     */
    private Path mBarPath;
    /**
     * ç”»ç¬”
     */
    private Paint mPaint;
    /**
     * å½“å‰?åŠ¨ç”»çš„è¿›åº¦
     */
    private float mAnimRate = 0;
    /**
     * æŸ±å­?é¢œè‰²
     */
    private int mBarColor;
    /**
     * å†…åœ†é¢œè‰²
     */
    private int mInnerDotColor;
    /**
     * å¤–åœ†é¢œè‰²
     */
    private int mOuterDotColor;
    /**
     * å­—ä½“å¤§å°?
     */
    private int mTextColor;
    /**
     * æœ€å?Žè§¦ç¢°çš„xå??æ ‡
     */
    private float mLastTouchX;
    /**
     * åŠ¨ç”»
     */
    private ValueAnimator mAnim;

    /**
     * æ»‘åŠ¨é€Ÿåº¦è¿½è¸ª
     */
    private VelocityTracker mVelocityTracker;
    /**
     * æ»‘åŠ¨çš„æœ€å¤§é€Ÿåº¦
     */
    private int mMaximumVelocity;
    /**
     * æ»‘åŠ¨çš„æœ€å°?é€Ÿåº¦
     */
    private int mMinimumVelocity;

    /**
     * æ»‘åŠ¨çº¿ç¨‹
     */
    private FlingRunnable mFling;

    public BarChart(Context context) {
        this(context, null, 0);
    }

    public BarChart(Context context, @Nullable AttributeSet attrs) {
        this(context, attrs, 0);
    }

    public BarChart(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        init(context);
    }

    private void init(Context context) {

        setClickable(true);

        mDescTextSize = dip2px(context, 12f);
        mDotInnerRadius = dip2px(context, 3.5f);
        mDotOuterRadius = dip2px(context, 5f);
        mBarInterval = dip2px(context, 40f);
        mBottomSpacing = dip2px(context, 10f);
        mBarTextSpacing = dip2px(context, 12f);
        mTopSpacing = dip2px(context, 10f);
        mBarWidth = dip2px(context, 1.25f);

        mPaint = new Paint();
        mPaint.setAntiAlias(true);

        mBarPath = new Path();

        mBarColor = Color.parseColor(BAR_COLOR);
        mInnerDotColor = Color.parseColor(INNER_DOT_COLOR);
        mOuterDotColor = Color.parseColor(OUTER_DOT_COLOR);
        mTextColor = Color.parseColor(TEXT_COLOR);

        mMaximumVelocity = ViewConfiguration.get(context).getScaledMaximumFlingVelocity();
        mMinimumVelocity = ViewConfiguration.get(context).getScaledMinimumFlingVelocity();

        mFling = new FlingRunnable(context);

        mAnim = ValueAnimator.ofFloat(0, 1);
        mAnim.setDuration(ANIM_DURATION);
        mAnim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                mAnimRate = (float) animation.getAnimatedValue();
                postInvalidate();
            }
        });
    }

    /**
     * è®¾ç½®åŠ¨ç”»æ•°æ?®
     *
     * @param barInfoList
     */
    public void setBarInfoList(List<BarInfo> barInfoList) {
        this.mBarInfoList.clear();
        this.mBarInfoList.addAll(barInfoList);
        this.mCanvasWidth = (this.mBarInfoList.size() + 1) * this.mBarInterval;

        // å?œæ­¢æ­£åœ¨æ‰§è¡Œçš„åŠ¨ç”»
        if (mAnim != null && mAnim.isRunning()) {
            mAnim.cancel();
        }

        // å?œæ­¢æ»šåŠ¨
        if (mFling != null) {
            mFling.stop();
        }

        // é‡?ç½®åŠ¨ç”»è¿›åº¦
        mAnimRate = 0;

        // æ»šå›žæœ€å¼€å§‹çš„å??æ ‡
        scrollTo(0, 0);

        // æ??äº¤åˆ·æ–°
        postInvalidate();
    }

    /**
     * å?¯åŠ¨åŠ¨ç”»
     */
    public void start() {
        if (mBarInfoList == null || mBarInfoList.size() == 0) {
            Log.e(TAG, "å?¯åŠ¨åŠ¨ç”»å‰?ï¼Œè¯·å…ˆè®¾ç½®æ•°æ?®");
            return;
        }

        mAnimRate = 0;

        if (mAnim.isRunning()) {
            mAnim.cancel();
        }

        mAnim.start();
    }

    @Override
    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);
        // æŸ±å­?çš„é«˜åº¦ = æŽ§ä»¶é«˜åº¦ - ä¸Šå†…è¾¹è·? - ä¸‹å†…è¾¹è·? - å­—ä½“å¤§å°? - å­—ä½“ä¸ŽæŸ±å­?çš„é—´è·?
        this.mBarHeight = h - mTopSpacing - mBottomSpacing - mDescTextSize - mBarTextSpacing;
        this.mViewWidth = w;
    }

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);

        drawBar(canvas);
        drawDot(canvas);
        drawText(canvas);
    }

    /**
     * æŽ§åˆ¶å±?å¹•ä¸?è¶Šç•Œ
     *
     * @param event
     * @return
     */
    @Override
    public boolean onTouchEvent(MotionEvent event) {

        // å½“æ•°æ?®çš„é•¿åº¦ä¸?è¶³ä»¥æ»‘åŠ¨æ—¶ï¼Œä¸?å?šæ»‘åŠ¨å¤„ç?†
        if (mCanvasWidth < mViewWidth) {
            return true;
        }

        if (mVelocityTracker == null) {
            mVelocityTracker = VelocityTracker.obtain();
        }
        mVelocityTracker.addMovement(event);

        if (MotionEvent.ACTION_DOWN == event.getAction()) {
            mLastTouchX = event.getX();

            mFling.stop();
        } else if (MotionEvent.ACTION_MOVE == event.getAction()) {
            // æ»‘åŠ¨çš„è·?ç¦»
            float scrollLengthX = event.getX() - mLastTouchX;
            // getScrollX() å°?äºŽ0ï¼Œè¯´æ˜Žç”»å¸ƒå?³ç§»äº†
            // getScrollX() å¤§äºŽ0ï¼Œè¯´æ˜Žç”»å¸ƒå·¦ç§»äº†
            float endX = getScrollX() - scrollLengthX;

            if (scrollLengthX > 0) {    // ç”»å¸ƒå¾€å?³ç§»åŠ¨ -->

                // æ³¨æ„?ï¼šè¿™é‡Œçš„ç­‰å?·ä¸?èƒ½åŽ»é™¤ï¼Œå?¦åˆ™ä¼šæœ‰é—ªåŠ¨
                if (endX <= 0) {
                    scrollTo(0, 0);
                } else {
                    scrollBy((int) -scrollLengthX, 0);
                }

            } else if (scrollLengthX < 0) {                    // ç”»å¸ƒå¾€å·¦ç§»åŠ¨  <--

                if (endX >= mCanvasWidth - mViewWidth) {     // éœ€è¦?è€ƒè™‘æ˜¯å?¦å?³è¶Šç•Œ
                    scrollTo((int) (mCanvasWidth - mViewWidth), 0);
                } else {
                    scrollBy((int) -scrollLengthX, 0);
                }

            }
            mLastTouchX = event.getX();
        } else if (MotionEvent.ACTION_UP == event.getAction()) {
            // è®¡ç®—å½“å‰?é€Ÿåº¦ï¼Œ 1000è¡¨ç¤ºæ¯?ç§’åƒ?ç´ æ•°ç­‰
            mVelocityTracker.computeCurrentVelocity(1000, mMaximumVelocity);

            // èŽ·å?–æ¨ªå?‘é€Ÿåº¦
            int velocityX = (int) mVelocityTracker.getXVelocity();

            // é€Ÿåº¦è¦?å¤§äºŽæœ€å°?çš„é€Ÿåº¦å€¼ï¼Œæ‰?å¼€å§‹æ»‘åŠ¨
            if (Math.abs(velocityX) > mMinimumVelocity) {

                int initX = getScrollX();

                int maxX = (int) (mCanvasWidth - mViewWidth);
                if (maxX > 0) {
                    mFling.start(initX, velocityX, initX, maxX);
                }
            }

            if (mVelocityTracker != null) {
                mVelocityTracker.recycle();
                mVelocityTracker = null;
            }

        }

        return super.onTouchEvent(event);

    }

    /**
     * ç”»æŸ±
     *
     * @param canvas
     */
    private void drawBar(Canvas canvas) {
        mBarPath.reset();
        for (int i = 0; i < mBarInfoList.size(); ++i) {

            float x = (i + 1) * mBarInterval;

            if (isInVisibleArea(x)) {
                mBarPath.moveTo(x, mTopSpacing);
                mBarPath.lineTo(x, mBarHeight + mTopSpacing);
            }

        }

        mPaint.setColor(mBarColor);
        mPaint.setStrokeWidth(mBarWidth);
        mPaint.setStyle(Paint.Style.STROKE);
        canvas.drawPath(mBarPath, mPaint);
    }

    /**
     * ç”»æ•°æ?®ç‚¹
     *
     * @param canvas
     */
    private void drawDot(Canvas canvas) {

        mPaint.setStyle(Paint.Style.FILL);

        for (int i = 0; i < mBarInfoList.size(); ++i) {
            float x = (i + 1) * mBarInterval;

            if (isInVisibleArea(x)) {

                BarInfo barInfo = mBarInfoList.get(i);

                float curBarDotY = (float) (mBarHeight * (1 - barInfo.percent * mAnimRate) + mTopSpacing);

                // ç”»å¤–åœ†
                mPaint.setColor(mOuterDotColor);
                canvas.drawCircle(x, curBarDotY, mDotOuterRadius, mPaint);

                // ç”»å†…åœ†
                mPaint.setColor(mInnerDotColor);
                canvas.drawCircle(x, curBarDotY, mDotInnerRadius, mPaint);
            }

        }
    }

    /**
     * ç”»æ–‡å­—
     *
     * @param canvas
     */
    private void drawText(Canvas canvas) {

        float textY = mTopSpacing + mBarHeight + mBarTextSpacing + mDescTextSize / 2;

        for (int i = 0; i < mBarInfoList.size(); ++i) {
            float x = (i + 1) * mBarInterval;

            if (isInVisibleArea(x)) {
                BarInfo barInfo = mBarInfoList.get(i);

                mPaint.setColor(mTextColor);
                mPaint.setTextSize(mDescTextSize);
                mPaint.setTextAlign(Paint.Align.CENTER);
                canvas.drawText(barInfo.desc, x, textY, mPaint);
            }
        }
    }

    /**
     * æ˜¯å?¦åœ¨å?¯è§†çš„èŒƒå›´å†…
     *
     * @param x
     * @return trueï¼šåœ¨å?¯è§†çš„èŒƒå›´å†…ï¼›falseï¼šä¸?åœ¨å?¯è§†çš„èŒƒå›´å†…
     */
    private boolean isInVisibleArea(float x) {
        float dx = x - getScrollX();

        return -mBarInterval <= dx && dx <= mViewWidth + mBarInterval;
    }

    private int dip2px(Context context, float dipValue) {
        float density = context.getResources().getDisplayMetrics().density;
        return (int) (dipValue * density + 0.5f);
    }

    /**
     * author : Jiang zinc
     * email : 56002982@qq.com
     * time : 2019/3/1 ä¸‹å?ˆ5:08
     * desc : æŸ±å½¢å›¾çš„æ•°æ?®
     * version :
     */
    public static final class BarInfo {
        /**
         * è¯¥æŸ±çš„æ??è¿°
         */
        private String desc;
        /**
         * è¯¥æŸ±çš„å? æ¯”
         */
        private double percent;

        public BarInfo(String desc, double percent) {
            this.desc = desc;
            this.percent = percent;
        }
    }

    /**
     * æ»šåŠ¨çº¿ç¨‹
     */
    private class FlingRunnable implements Runnable {

        private Scroller mScroller;

        private int mInitX;
        private int mMinX;
        private int mMaxX;
        private int mVelocityX;

        FlingRunnable(Context context) {
            this.mScroller = new Scroller(context, null, false);
        }

        void start(int initX,
                   int velocityX,
                   int minX,
                   int maxX) {
            this.mInitX = initX;
            this.mVelocityX = velocityX;
            this.mMinX = minX;
            this.mMaxX = maxX;

            // å…ˆå?œæ­¢ä¸Šä¸€æ¬¡çš„æ»šåŠ¨
            if (!mScroller.isFinished()) {
                mScroller.abortAnimation();
            }

            // å¼€å§‹ fling
            mScroller.fling(initX, 0, velocityX,
                    0, 0, maxX, 0, 0);
            post(this);
        }

        @Override
        public void run() {

            // å¦‚æžœå·²ç»?ç»“æ?Ÿï¼Œå°±ä¸?å†?è¿›è¡Œ
            if (!mScroller.computeScrollOffset()) {
                return;
            }

            // è®¡ç®—å??ç§»é‡?
            int currX = mScroller.getCurrX();
            int diffX = mInitX - currX;

            Log.i(TAG, "run: [currX: " + currX + "]\n"
                    + "[diffX: " + diffX + "]\n"
                    + "[initX: " + mInitX + "]\n"
                    + "[minX: " + mMinX + "]\n"
                    + "[maxX: " + mMaxX + "]\n"
                    + "[velocityX: " + mVelocityX + "]\n"
            );

            // ç”¨äºŽè®°å½•æ˜¯å?¦è¶…å‡ºè¾¹ç•Œï¼Œå¦‚æžœå·²ç»?è¶…å‡ºè¾¹ç•Œï¼Œåˆ™ä¸?å†?è¿›è¡Œå›žè°ƒï¼Œå?³ä½¿æ»šåŠ¨è¿˜æ²¡æœ‰å®Œæˆ?
            boolean isEnd = false;

            if (diffX != 0) {

                // è¶…å‡ºå?³è¾¹ç•Œï¼Œè¿›è¡Œä¿®æ­£
                if (getScrollX() + diffX >= mCanvasWidth - mViewWidth) {
                    diffX = (int) (mCanvasWidth - mViewWidth - getScrollX());
                    isEnd = true;
                }

                // è¶…å‡ºå·¦è¾¹ç•Œï¼Œè¿›è¡Œä¿®æ­£
                if (getScrollX() <= 0) {
                    diffX = -getScrollX();
                    isEnd = true;
                }

                if (!mScroller.isFinished()) {
                    scrollBy(diffX, 0);
                }
                mInitX = currX;
            }

            if (!isEnd) {
                post(this);
            }
        }

        /**
         * è¿›è¡Œå?œæ­¢
         */
        void stop() {
            if (!mScroller.isFinished()) {
                mScroller.abortAnimation();
            }
        }
    }
}
