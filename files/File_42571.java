package com.roncoo.pay.reconciliation.utils;

import com.roncoo.pay.reconciliation.utils.https.HttpResponse;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.io.*;
import java.nio.ByteBuffer;
import java.nio.channels.Channels;
import java.nio.channels.FileChannel;
import java.nio.channels.ReadableByteChannel;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

/**
 * 
 * @ç±»åŠŸèƒ½è¯´æ˜Žï¼š æ–‡ä»¶å·¥å…·ç±».
 * @ç±»ä¿®æ”¹è€…ï¼š
 * @ä¿®æ”¹æ—¥æœŸï¼š
 * @ä¿®æ”¹è¯´æ˜Žï¼š
 * @å…¬å?¸å??ç§°ï¼šå¹¿å·žé¢†è¯¾ç½‘ç»œç§‘æŠ€æœ‰é™?å…¬å?¸ï¼ˆé¾™æžœå­¦é™¢:www.roncoo.comï¼‰
 * @ä½œè€…ï¼šAlong.shen
 * @åˆ›å»ºæ—¶é—´ï¼š2016å¹´5æœˆ23æ—¥,ä¸Šå?ˆ11:33:56.
 * @ç‰ˆæœ¬ï¼šV1.0
 *
 */

public class FileUtils {
	private static final Log LOG = LogFactory.getLog(FileUtils.class);

	/**
	 * @param response
	 * @param file
	 * @return
	 * @throws IOException
	 */
	public static File saveFile(HttpResponse response, File file) throws IOException {

		// åˆ¤æ–­çˆ¶æ–‡ä»¶æ˜¯å?¦å­˜åœ¨,ä¸?å­˜åœ¨å°±åˆ›å»º
		if (!file.getParentFile().exists()) {
			if (!file.getParentFile().mkdirs()) {
				// æ–°å»ºæ–‡ä»¶ç›®å½•å¤±è´¥ï¼ŒæŠ›å¼‚å¸¸
				throw new IOException("åˆ›å»ºæ–‡ä»¶(çˆ¶å±‚æ–‡ä»¶å¤¹)å¤±è´¥, filepath: " + file.getAbsolutePath());
			}
		}
		// åˆ¤æ–­æ–‡ä»¶æ˜¯å?¦å­˜åœ¨ï¼Œä¸?å­˜åœ¨åˆ™åˆ›å»º
		if (!file.exists()) {
			if (!file.createNewFile()) {
				// æ–°å»ºæ–‡ä»¶å¤±è´¥ï¼ŒæŠ›å¼‚å¸¸
				throw new IOException("åˆ›å»ºæ–‡ä»¶å¤±è´¥, filepath: " + file.getAbsolutePath());
			}
		}

		InputStream is = response.getInputStream();
		FileOutputStream fileOut = null;
		FileChannel fileChannel = null;
		try {
			fileOut = new FileOutputStream(file);
			fileChannel = fileOut.getChannel();

			ReadableByteChannel readableChannel = Channels.newChannel(is);
			ByteBuffer buffer = ByteBuffer.allocate(1024 * 32);
			while (true) {
				buffer.clear();
				if (readableChannel.read(buffer) == -1) {
					readableChannel.close();
					break;
				}
				buffer.flip();
				fileChannel.write(buffer);
			}
			return file;
		} catch (FileNotFoundException e) {
			throw new FileNotFoundException("ä¿?å­˜è´¦å?•æ–‡ä»¶å¤±è´¥, filepath: " + file.getAbsolutePath());
		} catch (IOException e) {
			throw new IOException("ä¿?å­˜è´¦å?•æ–‡ä»¶å¤±è´¥, filepath: " + file.getAbsolutePath(), e);
		} finally {
			if (fileOut != null) {
				try {
					fileOut.close();
				} catch (IOException e) {
					LOG.error("ä¿?å­˜è´¦å?•æ—¶å…³é—­æµ?å¤±è´¥", e);
				}
			}
			if (is != null) {
				try {
					is.close();
				} catch (IOException e) {
					LOG.error("ä¿?å­˜è´¦å?•æ—¶å…³é—­æµ?å¤±è´¥", e);
				}
			}
			if (fileChannel != null) {
				try {
					fileChannel.close();
				} catch (IOException e) {
					LOG.error("ä¿?å­˜è´¦å?•æ—¶å…³é—­æµ?å¤±è´¥", e);
				}
			}
		}
	}

	/**
	 * è§£åŽ‹åˆ°æŒ‡å®šç›®å½•
	 *
	 * @param zipPath
	 * @param descDir
	 * @author isea533
	 */
	public static List<String> unZipFiles(String zipPath, String descDir) throws IOException {
		return unZipFiles(new File(zipPath), descDir);
	}

	/**
	 * è§£åŽ‹æ–‡ä»¶åˆ°æŒ‡å®šç›®å½•
	 *
	 * @param zipFile
	 * @param descDir
	 * @author isea533
	 */
	@SuppressWarnings("rawtypes")
	public static List<String> unZipFiles(File zipFile, String descDir) throws IOException {
		List<String> result = new ArrayList<String>();
		File pathFile = new File(descDir);
		if (!pathFile.exists()) {
			pathFile.mkdirs();
		}
		Charset charset = Charset.forName("GBK");
		ZipFile zip = new ZipFile(zipFile, charset);
		for (Enumeration entries = zip.entries(); entries.hasMoreElements();) {
			ZipEntry entry = (ZipEntry) entries.nextElement();
			String zipEntryName = entry.getName();
			InputStream in = zip.getInputStream(entry);
			String outPath = (descDir + zipEntryName).replaceAll("\\*", "/");
			;
			// åˆ¤æ–­è·¯å¾„æ˜¯å?¦å­˜åœ¨,ä¸?å­˜åœ¨åˆ™åˆ›å»ºæ–‡ä»¶è·¯å¾„
			File file = new File(outPath.substring(0, outPath.lastIndexOf('/')));
			if (!file.exists()) {
				file.mkdirs();
			}
			// åˆ¤æ–­æ–‡ä»¶å…¨è·¯å¾„æ˜¯å?¦ä¸ºæ–‡ä»¶å¤¹,å¦‚æžœæ˜¯ä¸Šé?¢å·²ç»?ä¸Šä¼ ,ä¸?éœ€è¦?è§£åŽ‹
			if (new File(outPath).isDirectory()) {
				continue;
			}
			// è¾“å‡ºæ–‡ä»¶è·¯å¾„ä¿¡æ?¯
			result.add(outPath);

			OutputStream out = new FileOutputStream(outPath);
			byte[] buf1 = new byte[1024];
			int len;
			while ((len = in.read(buf1)) > 0) {
				out.write(buf1, 0, len);
			}
			in.close();
			out.close();
		}
		return result;
	}

	/**
	 * è§£æž?csvæ–‡ä»¶ åˆ°ä¸€ä¸ªlistä¸­ æ¯?ä¸ªå?•å…ƒä¸ªä¸ºä¸€ä¸ªStringç±»åž‹è®°å½•ï¼Œæ¯?ä¸€è¡Œä¸ºä¸€ä¸ªlistã€‚ å†?å°†æ‰€æœ‰çš„è¡Œæ”¾åˆ°ä¸€ä¸ªæ€»listä¸­
	 *
	 * @param file
	 *            è¦?è§£æž?çš„cvsæ–‡ä»¶
	 * @param charsetName
	 *            æŒ‡å®šçš„å­—ç¬¦ç¼–å?·
	 * @return
	 * @throws IOException
	 */
	public static List<List<String>> readCSVFile(String file, String charsetName) throws IOException {
		if (file == null || !file.contains(".csv")) {
			return null;
		}
		InputStreamReader fr = new InputStreamReader(new FileInputStream(file), charsetName);

		BufferedReader br = new BufferedReader(fr);
		String rec = null;// ä¸€è¡Œ
		String str;// ä¸€ä¸ªå?•å…ƒæ ¼
		List<List<String>> listFile = new ArrayList<List<String>>();
		try {
			// è¯»å?–ä¸€è¡Œ
			while ((rec = br.readLine()) != null) {
				Pattern pCells = Pattern.compile("(\"[^\"]*(\"{2})*[^\"]*\")*[^,]*,");
				Matcher mCells = pCells.matcher(rec);
				List<String> cells = new ArrayList<String>();// æ¯?è¡Œè®°å½•ä¸€ä¸ªlist
				// è¯»å?–æ¯?ä¸ªå?•å…ƒæ ¼
				while (mCells.find()) {
					str = mCells.group();
					str = str.replaceAll("(?sm)\"?([^\"]*(\"{2})*[^\"]*)\"?.*,", "$1");
					str = str.replaceAll("(?sm)(\"(\"))", "$2");
					cells.add(str);
				}
				listFile.add(cells);
			}
		} catch (Exception e) {
			LOG.error("å¼‚å¸¸", e);
		} finally {
			if (fr != null) {
				fr.close();
			}
			if (br != null) {
				br.close();
			}
		}
		return listFile;
	}
}
