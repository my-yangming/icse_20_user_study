package org.nutz.mapl;

import java.io.Reader;
import java.lang.reflect.Type;
import java.util.List;

import org.nutz.mapl.impl.MaplMerge;
import org.nutz.mapl.impl.MaplRebuild;
import org.nutz.mapl.impl.compile.ObjCompileImpl;
import org.nutz.mapl.impl.convert.FilterConvertImpl;
import org.nutz.mapl.impl.convert.ObjConvertImpl;
import org.nutz.mapl.impl.convert.StructureConvert;

/**
 * é›†å?ˆäº†å¯¹è±¡è½¬æ?¢å?ˆå¹¶ç­‰é«˜çº§æ“?ä½œ
 * 
 * @author juqkai(juqkai@gmail.com)
 * 
 */
public class Mapl {
    /**
     * è¿™ä¸ªå®žçŽ°, ä¸»è¦?å°† List, Map çš„å¯¹è±¡ç»“æž„è½¬æ?¢æˆ?çœŸå®žçš„å¯¹è±¡.
     * <p>
     * è§„åˆ™:
     * <ul>
     * <li>å¯¹è±¡ä»¥Mapå­˜å‚¨, keyä¸ºå±žæ€§å??, valueä¸ºå±žæ€§å€¼
     * <li>æ•°ç»„ä»¥Listå­˜å‚¨
     * <li>Mapç›´æŽ¥å­˜å‚¨ä¸ºMap
     * <li>Listç›´æŽ¥å­˜å‚¨ä¸ºList
     * <li>å?ªè¦?ä¸?æ˜¯List, Map å­˜å‚¨çš„, éƒ½è®¤ä¸ºæ˜¯å?¯ä»¥ç›´æŽ¥å†™å…¥å¯¹è±¡çš„. TODO è¿™ç‚¹å?¯ä»¥è°ƒæ•´ä¸€ä¸‹.
     * </ul>
     */
    public static Object maplistToObj(Object maplist, Type type) {
        return new ObjConvertImpl(type).convert(maplist);
    }

    /**
     * ä¸ŽmaplistToObjå®žçŽ°ä¸€æ ·, å°‘äº†ä¸€æ­¥å¼ºåˆ¶è½¬æ?¢è€Œå·²
     * 
     */
    @SuppressWarnings("unchecked")
    public static <T> T maplistToT(Object maplist, Class<T> clz) {
        return (T) new ObjConvertImpl(clz).convert(maplist);
    }

    // ------------------------------------------------------------------
    /**
     * è®¿é—®MAP, Listç»“æž„çš„æ•°æ?®, é€šè¿‡ uers[2].name è¿™ç§?å½¢å¼?.
     * 
     * @param maplist
     * @param path
     *            è·¯å¾„
     */
    public static Object cell(Object maplist, String path) {
        MaplRebuild mr = new MaplRebuild(maplist);
        return mr.cell(path);
    }

    // ------------------------------------------------------------------

    /**
     * è½¬æ?¢å™¨ä¸­é—´å¯¹è±¡å?ˆå¹¶å™¨<br/>
     * å?ˆå¹¶ {@link Mapl} ä¸­å®šä¹‰çš„ä¸­é—´ç»“æž„.<br/>
     * è§„åˆ™:<br>
     * <ul>
     * <li>æ™®é€šå¯¹è±¡, ä¿?å­˜ä¸ºList, ä½†æ˜¯è¦?åŽ»æŽ‰é‡?å¤?.
     * <li>å?ˆå¹¶ map , å¦‚æžœ key å€¼ç›¸å?Œ, é‚£ä¹ˆå?Žä¸€ä¸ªå€¼è¦†ç›–å‰?é?¢çš„å€¼.é€’å½’å?ˆå¹¶
     * <li>listä¸?å?šé€’å½’å?ˆå¹¶, å?ªå?šç®€å?•çš„å?ˆå¹¶, æ¸…é™¤é‡?å¤?çš„æ“?ä½œ.
     * </ul>
     */
    public static Object merge(Object... maplists) {
        return MaplMerge.merge(maplists);
    }

    // ------------------------------------------------------------------
    /**
     * åŒ…å?«MapListè¿‡æ»¤å™¨, è¯¦æƒ…å?‚è§?: {@link FilterConvertImpl}
     * 
     * @param maplist
     *            maplistç»“æž„çš„å¯¹è±¡
     * @param paths
     *            è¿‡æ»¤åˆ—è¡¨
     */
    public static Object includeFilter(Object maplist, List<String> paths) {
        FilterConvertImpl filter = new FilterConvertImpl(paths);
        filter.useIncludeModel();
        return filter.convert(maplist);
    }

    /**
     * æŽ’é™¤MapListè¿‡æ»¤å™¨, è¯¦æƒ…å?‚è§?: {@link FilterConvertImpl}
     * 
     * @param maplist
     *            maplistç»“æž„çš„å¯¹è±¡
     * @param paths
     *            è¿‡æ»¤åˆ—è¡¨
     */
    public static Object excludeFilter(Object maplist, List<String> paths) {
        FilterConvertImpl filter = new FilterConvertImpl(paths);
        filter.useExcludeModel();
        return filter.convert(maplist);
    }

    // ------------------------------------------------------------------

    /**
     * ç»“æž„è½¬æ?¢, è¯¦æƒ…å?‚è§?: {@link StructureConvert}
     * 
     * @param maplist
     *            maplistç»“æž„çš„å¯¹è±¡
     * @param model
     *            è½¬æ?¢æ¨¡æ?¿, ä¸€ä¸ªJSONæ ¼å¼?çš„reader
     */
    public static Object convert(Object maplist, Reader model) {
        StructureConvert convert = new StructureConvert(model);
        return convert.convert(maplist);
    }

    /**
     * ç»“æž„è½¬æ?¢, è¯¦æƒ…å?‚è§?: {@link StructureConvert}
     * 
     * @param maplist
     *            maplistç»“æž„çš„å¯¹è±¡
     * @param model
     *            è½¬æ?¢æ¨¡æ?¿, ä¹Ÿæ˜¯ä¸€ä¸ªè§„å®šæ ¼å¼?çš„maplistç»“æž„
     */
    public static Object convert(Object maplist, Object model) {
        StructureConvert convert = new StructureConvert(model);
        return convert.convert(maplist);
    }

    // ------------------------------------------------------------------
    /**
     * å°†å¯¹è±¡è½¬æ?¢æˆ?Maplistç»“æž„
     * 
     * @param obj
     *            å¾…è½¬æ?¢çš„å¯¹è±¡
     */
    public static Object toMaplist(Object obj) {
        ObjCompileImpl convert = new ObjCompileImpl();
        return convert.parse(obj);
    }

    /**
     * æ·»åŠ æ–°çš„ç»“ç‚¹
     * 
     * @param obj
     *            åŽŸå§‹çš„MapList
     * @param path
     *            è·¯å¾„
     * @param val
     *            å€¼
     */
    public static void put(Object obj, String path, Object val) {
        Object mapList = Mapl.toMaplist(val);
        MaplRebuild rebuild = new MaplRebuild(obj);
        rebuild.put(path, mapList);
    }

    /**
     * åˆ é™¤ä¸€ä¸ªç»“ç‚¹
     * 
     * @param obj
     *            åŽŸå§‹çš„Maplist
     * @param path
     *            è·¯å¾„
     */
    public static void del(Object obj, String path) {
        MaplRebuild rebuild = new MaplRebuild(obj);
        rebuild.remove(path);
    }

    /**
     * æ›´æ–°
     * 
     * @param obj
     *            åŽŸå§‹çš„Maplist
     * @param path
     *            è·¯å¾„
     * @param val
     *            æ–°çš„å€¼
     */
    public static void update(Object obj, String path, Object val) {
        put(obj, path, val);
    }
}
