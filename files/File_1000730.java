package org.nutz.mapl.impl.convert;

import java.io.Reader;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.nutz.json.Json;
import org.nutz.lang.Lang;
import org.nutz.lang.Streams;
import org.nutz.mapl.MaplConvert;
import org.nutz.mapl.impl.MaplEach;
import org.nutz.mapl.impl.MaplRebuild;

/**
 * MapListç»“æž„è½¬æ?¢.
 * <p> å°†ä¸€ç§?MapListç»“æž„è½¬æ?¢æˆ?å?¦å¤–ä¸€ç§?MapListç»“æž„.ä¾‹:
 * <pre>
 *  {
 *      "age":"123",
 *      "name":"juqkai"
 *  }
 *  è½¬æ?¢æˆ?:
 *  {
 *      "å¹´é¾„":"123",
 *      "å§“å??":"juqkai"
 *  }
 * </pre>
 * <p>è¦?è¿›è¡Œè¿™æ ·çš„è½¬æ?¢éœ€è¦?é¢„å…ˆé…?ç½®ä¸€ä¸ªå¯¹åº”å…³ç³»çš„é…?ç½®, å…·ä½“çš„é…?ç½®å…³ç³»è¯´æ˜Žå¦‚ä¸‹:
 * <ul>
 * <li>ä½¿ç”¨åŽŸMapListä¸€æ ·çš„ç»“æž„
 * <li>æœ‰æ•°ç»„çš„, å?ªå†™ç¬¬ä¸€ä¸ªå…ƒç´ çš„ç»“æž„
 * <li>åŽŸç»“æž„ä¸­çš„å€¼, ä»¥å­—ç¬¦ä¸²æˆ–å­—ç¬¦ä¸²æ•°ç»„å?šä¸ºç›®æ ‡ç»“æž„çš„å¯¹åº”å…³ç³»
 * <li>å¯¹åº”å…³ç³»å?¯ä»¥ä¸ºæ•°ç»„
 * <li>æœ‰æ•°ç»„çš„, ç›®æ ‡ç»“æž„ä»¥key[].abcæ?¥ä»£æ›¿æ•°ç»„
 * <li>åŽŸç»“æž„æ•°ç»„å±‚æ¬¡å¼ºåˆ¶é™?å®šä¸€è‡´, ç›®æ ‡ç»“æž„ä¸­'[]'çš„ç´¢å¼•æŒ‰åŽŸç»“æž„ä¸­å‡ºçŽ°å…ˆå?Žé¡ºåº?è¿›è¡ŒåŒ¹é…?.
 * <li>å¦‚æžœåŽŸç»“æžœä¸?å­˜åœ¨, é‚£é»˜è®¤ä¸º0
 * <li>æœªåœ¨æ¨¡æ?¿ä¸­ç”³æ˜Žçš„ä¸?å?šè½¬æ?¢
 * </ul>
 * <p> ä¾‹:
 * <pre>
 * ä¾‹1:
 *  {
 *      "age":"user.å¹´é¾„",
 *      "name":["user.name", "user.å§“å??"]
 *  }
 * ä¾‹2(åŽŸjson:[{"name":"nutz"},{"name":"juqkai"}]):
 * [{
 *      "name":"[].å§“å??"
 * }]
 * ä¾‹3:
 * {
 *      users:[
 *          {
 *              "name":["people[].name", "users[].name"],
 *              "age":"users[].name"
 *          }
 *      ]
 * }
 * </pre>
 * @author juqkai(juqkai@gmail.com)
 */
public class StructureConvert extends MaplEach implements MaplConvert{
    //å…³ç³»
    private Map<String, List<String>> relation = new LinkedHashMap<String, List<String>>();
    
    private MaplRebuild structure = new MaplRebuild();
    
    /**
     * 
     * @param path æ¨¡æ?¿æ–‡ä»¶è·¯å¾„
     */
    public StructureConvert(String path){
        Object obj = Json.fromJson(Streams.fileInr(path));
        loadRelation(obj, "");
    }
    /**
     * 
     * @param reader æ¨¡æ?¿æµ?
     */
    public StructureConvert(Reader reader){
        Object obj = Json.fromJson(reader);
        loadRelation(obj, "");
    }
    /**
     * 
     * @param obj æ¨¡æ?¿çš„Map, Listç»“æž„
     */
    public StructureConvert(Object obj){
        loadRelation(obj, "");
    }
    
    /**
     * è½¬æ?¢
     * @param obj ç›®æ ‡å¯¹è±¡
     */
    public Object convert(Object obj){
        each(obj);
        return structure.fetchNewobj();
    }
    
    protected void LRD(String path, Object item) {}

    /**
     * é‡?å»ºæ–°å¯¹è±¡
     */
    protected void DLR(String path, Object object) {
        if(relation.containsKey(path)){
            List<String> dests = relation.get(path);
            for(String dest : dests){
                if(dest.equals("")){
                    structure.put(path, object, arrayIndex);
                    continue;
                } 
                structure.put(dest, object, arrayIndex);
            }
        }
    }
    
    /**
     * è§£æž?é…?ç½®ä¿¡æ?¯
     * @param obj
     * @param path
     */
    private void loadRelation(Object obj, String path) {
        if(obj instanceof Map){
            loadMapRelation((Map<?, ?>) obj, path);
        } else if(obj instanceof List){
            loadListRelation((List<?>) obj, path);
        } else {
            throw new RuntimeException("æ— æ³•è¯†åˆ«çš„ç±»åž‹!");
        }
    }
    /**
     * è§£æž?Listé…?ç½®ä¿¡æ?¯
     * @param obj
     * @param path
     */
    @SuppressWarnings("unchecked")
    private void loadListRelation(List<?> obj, String path) {
        if(obj.size() <= 0){
            return;
        }
        if(obj.get(0) instanceof String){
            relation.put(path, (List<String>) obj);
            return;
        }
        loadRelation(obj.get(0), path + "[]");
    }
    /**
     * è§£æž?MAPé…?ç½®ä¿¡æ?¯
     * @param obj
     * @param path
     */
    private void loadMapRelation(Map<?, ?> obj, String path) {
        for(Object key : obj.keySet()){
            Object val = obj.get(key);
            if(val instanceof String){
                relation.put(path + space(path) + key.toString(), Lang.list(val.toString()));
                continue;
            }
            loadRelation(obj.get(key), path + space(path) + key.toString());
        }
    }
    
    private static String space(String path){
        return "".equals(path) ? "" : ".";
    }
    
    
}
