package com.xiaojinzi.component.impl.application;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;

import com.xiaojinzi.component.Component;
import com.xiaojinzi.component.ComponentUtil;
import com.xiaojinzi.component.application.IComponentHostApplication;
import com.xiaojinzi.component.application.IComponentModuleApplication;
import com.xiaojinzi.component.impl.RouterCenter;
import com.xiaojinzi.component.impl.interceptor.InterceptorCenter;
import com.xiaojinzi.component.support.LogUtil;

import java.util.HashMap;
import java.util.Map;

/**
 * è¿™ä¸ªç±»å¿…é¡»æ”¾åœ¨ {@link ComponentUtil#IMPL_OUTPUT_PKG} åŒ…ä¸‹é?¢
 * è¿™æ˜¯æ˜¯ç®¡ç?†æ¯?ä¸€ä¸ªæ¨¡å?—ä¹‹å‰?è?”ç³»çš„ç®¡ç?†ç±»,åŠ è½½æ¨¡å?—çš„åŠŸèƒ½ä¹Ÿæ˜¯è¿™ä¸ªç±»è´Ÿè´£çš„
 *
 * @author xiaojinzi 30212
 */
public class ModuleManager implements IComponentModuleApplication {

    /**
     * å?•ä¾‹å¯¹è±¡
     */
    private static volatile ModuleManager instance;

    private ModuleManager() {
    }

    /**
     * èŽ·å?–å?•ä¾‹å¯¹è±¡
     *
     * @return
     */
    public static ModuleManager getInstance() {
        if (instance == null) {
            synchronized (ModuleManager.class) {
                if (instance == null) {
                    instance = new ModuleManager();
                }
            }
        }
        return instance;
    }

    private static Map<String, IComponentHostApplication> moduleApplicationMap = new HashMap<>();

    @Override
    public void register(@NonNull IComponentHostApplication moduleApp) {
        moduleApplicationMap.put(moduleApp.getHost(), moduleApp);
        moduleApp.onCreate(Component.getApplication());
    }

    @Override
    public void register(@NonNull String host) {
        if (host == null || "".equals(host)) {
            throw new RuntimeException("the host can't be null or empty");
        }
        if (moduleApplicationMap.containsKey(host)) {
            LogUtil.log("the host '" + host + "' is already load");
            return;
        }
        IComponentHostApplication moduleApplication = findModuleApplication(host);
        if (moduleApplication == null) {
            LogUtil.log("æ¨¡å?— '" + host + "' åŠ è½½å¤±è´¥");
        } else {
            register(moduleApplication);
        }
    }

    public void registerArr(@Nullable String... hosts) {
        if (hosts != null) {
            for (String host : hosts) {
                IComponentHostApplication moduleApplication = findModuleApplication(host);
                if (moduleApplication == null) {
                    LogUtil.log("æ¨¡å?— '" + host + "' åŠ è½½å¤±è´¥");
                } else {
                    register(moduleApplication);
                }
            }
        }
    }

    @Override
    public void unregister(@NonNull IComponentHostApplication moduleApp) {
        moduleApp.onDestory();
    }

    @Override
    public void unregister(@NonNull String host) {
        IComponentHostApplication moduleApp = moduleApplicationMap.remove(host);
        if (moduleApp == null) {
            LogUtil.log("æ¨¡å?— '" + host + "' å?¸è½½å¤±è´¥");
        } else {
            unregister(moduleApp);
        }
    }

    @Nullable
    public static IComponentHostApplication findModuleApplication(String host) {
        IComponentHostApplication result = null;
        try {
            // å…ˆæ‰¾æ­£å¸¸çš„
            Class<?> clazz = Class.forName(ComponentUtil.genHostModuleApplicationClassName(host));
            result = (IComponentHostApplication) clazz.newInstance();
        } catch (Exception ignore) {
            // ignore
        }
        if (result == null) {
            try {
                // æ‰¾é»˜è®¤çš„
                Class<?> clazz = Class.forName(ComponentUtil.genDefaultHostModuleApplicationClassName(host));
                result = (IComponentHostApplication) clazz.newInstance();
            } catch (Exception ignore) {
                // ignore
            }
        }
        return result;
    }

    /**
     * ä½¿ç”¨è€…åº”è¯¥åœ¨å¼€å?‘é˜¶æ®µè°ƒç”¨è¿™ä¸ªå‡½æ•°æ?¥æ£€æŸ¥ä»¥ä¸‹çš„é—®é¢˜ï¼š
     * 1.è·¯ç”±è¡¨åœ¨ä¸?å?Œçš„å­?è·¯ç”±è¡¨ä¸­æ˜¯å?¦æœ‰é‡?å¤?
     * 2.æœ?åŠ¡åœ¨ä¸?å?Œæ¨¡å?—ä¸­çš„å£°æ˜Žæ˜¯å?¦ä¹Ÿæœ‰é‡?å¤?çš„å??ç§°
     */
    public void check() {
        RouterCenter.getInstance().check();
        InterceptorCenter.getInstance().check();
    }

}
