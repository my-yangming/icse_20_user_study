import java.util.TreeMap;

/// ä½¿ç”¨Leetcode 208å?·é—®é¢˜æµ‹è¯•æˆ‘ä»¬å®žçŽ°çš„TrieR
public class Trie208 {

    private class Node{

        public boolean isWord;
        public TreeMap<Character, Node> next;

        public Node(boolean isWord){
            this.isWord = isWord;
            next = new TreeMap<>();
        }

        public Node(){
            this(false);
        }
    }

    private Node root;

    public Trie208(){
        root = new Node();
    }

    // å?‘Trieä¸­æ·»åŠ ä¸€ä¸ªæ–°çš„å?•è¯?word
    public void insert(String word){
        add(root, word, 0);
    }

    // å?‘ä»¥nodeä¸ºæ ¹çš„Trieä¸­æ·»åŠ word[index...end), é€’å½’ç®—æ³•
    private void add(Node node, String word, int index){

        if(index == word.length()){
            if(!node.isWord)
                node.isWord = true;
            return;
        }

        char c = word.charAt(index);
        if(node.next.get(c) == null)
            node.next.put(c, new Node());
        add(node.next.get(c), word, index + 1);
    }

    // æŸ¥è¯¢å?•è¯?wordæ˜¯å?¦åœ¨Trieä¸­
    public boolean search(String word){
        return contains(root, word, 0);
    }

    // åœ¨ä»¥nodeä¸ºæ ¹çš„Trieä¸­æŸ¥è¯¢å?•è¯?word[index...end)æ˜¯å?¦å­˜åœ¨, é€’å½’ç®—æ³•
    private boolean contains(Node node, String word, int index){

        if(index == word.length())
            return node.isWord;

        char c = word.charAt(index);
        if(node.next.get(c) == null)
            return false;

        return contains(node.next.get(c), word, index + 1);
    }

    // æŸ¥è¯¢æ˜¯å?¦åœ¨Trieä¸­æœ‰å?•è¯?ä»¥prefixä¸ºå‰?ç¼€
    public boolean startsWith(String prefix){
        return isPrefix(root, prefix, 0);
    }

    // æŸ¥è¯¢åœ¨ä»¥Nodeä¸ºæ ¹çš„Trieä¸­æ˜¯å?¦æœ‰å?•è¯?ä»¥prefix[index...end)ä¸ºå‰?ç¼€, é€’å½’ç®—æ³•
    private boolean isPrefix(Node node, String prefix, int index){

        if(index == prefix.length())
            return true;

        char c = prefix.charAt(index);
        if(node.next.get(c) == null)
            return false;

        return isPrefix(node.next.get(c), prefix, index + 1);
    }
}
