package com.cg.baseproject.utils.android;

import android.content.Context;
import android.content.ContextWrapper;
import android.content.SharedPreferences;
import android.os.Environment;

import com.cg.baseproject.BaseApplication;

import java.io.File;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Map;

/**
 * https://www.jianshu.com/p/64ef6eb7406f
 * https://github.com/grandcentrix/tray
 * SharedPreferencesçš„ä¸€ä¸ªå·¥å…·ç±»ï¼Œè°ƒç”¨setParamå°±èƒ½ä¿?å­˜String, Integer, Boolean, Float, Longç±»åž‹çš„å?‚æ•°
 * å?Œæ ·è°ƒç”¨getParamå°±èƒ½èŽ·å?–åˆ°ä¿?å­˜åœ¨æ‰‹æœºé‡Œé?¢çš„æ•°æ?®
 *
 * @author xiaanming
 *         <p>
 *         ä¿?å­˜æ•°æ?®ï¼š
 *         SharedPreferencesUtils.setParam(this, "String", "xiaanming");
 *         SharedPreferencesUtils.setParam(this, "int", 10);
 *         SharedPreferencesUtils.setParam(this, "boolean", true);
 *         SharedPreferencesUtils.setParam(this, "long", 100L);
 *         SharedPreferencesUtils.setParam(this, "float", 1.1f);
 *         èŽ·å?–æ•°æ?®ï¼š
 *         1     SharedPreferencesUtils.getParam(TimerActivity.this, "String", "");                                                                                        SharedPreferencesUtils.getParam(TimerActivity.this, "int", 0);
 *         2     SharedPreferencesUtils.getParam(TimerActivity.this, "boolean", false);
 *         3     SharedPreferencesUtils.getParam(TimerActivity.this, "long", 0L);
 *         4     SharedPreferencesUtils.getParam(TimerActivity.this, "float", 0.0f);
 */
public class SharedPreferencesUtils {
    /**
     * ä¿?å­˜åœ¨æ‰‹æœºé‡Œé?¢çš„æ–‡ä»¶å??
     */
    private static final String SharedFILE_NAME = "share_date";
    // SDå?¡è·¯å¾„
    public final static String SDCARDPATH = Environment.getExternalStorageDirectory().getAbsolutePath();
    // SDå?¡ç›®å½•è·¯å¾„
    public final static String SDCARDDIR = SDCARDPATH + File.separator;
    // æ‰‹æœºå†…å­˜è·¯å¾„
    public String PHONEPATH;// eg.PHONEPATH:/data/data/com.example.androidtest/cache
    // æ‰‹æœºå†…å­˜ç›®å½•è·¯å¾„
    public String PHONEDIR;//
    private SharedPreferences mSharedPreferences;
    private static SharedPreferencesUtils preferenceUtils = null;
    private SharedPreferences.Editor editor;

    protected SharedPreferencesUtils() {
        mSharedPreferences = BaseApplication.getContext().getSharedPreferences(SharedFILE_NAME, Context.MODE_PRIVATE);
        editor = mSharedPreferences.edit();
    }


    public static SharedPreferencesUtils getInstance() {
        if (preferenceUtils == null) {
            synchronized (SharedPreferencesUtils.class) {
                if (preferenceUtils == null) {
                    preferenceUtils = new SharedPreferencesUtils();
                }
            }
        }
        return preferenceUtils;
    }

    /**
     * å­˜å…¥æŸ?ä¸ªkeyå¯¹åº”çš„valueå€¼
     *
     * @param key
     * @param value
     */
    public static void setParam(String key, Object value) {
        SharedPreferences sharedPreferences = BaseApplication.getContext().getSharedPreferences(SharedFILE_NAME, Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = sharedPreferences.edit();
        if (value instanceof String) {
            editor.putString(key, (String) value);
        } else if (value instanceof Integer) {
            editor.putInt(key, (Integer) value);
        } else if (value instanceof Boolean) {
            editor.putBoolean(key, (Boolean) value);
        } else if (value instanceof Float) {
            editor.putFloat(key, (Float) value);
        } else if (value instanceof Long) {
            editor.putLong(key, (Long) value);
        }
        editor.apply();
    }

    /**
     * å¾—åˆ°æŸ?ä¸ªkeyå¯¹åº”çš„å€¼
     *
     * @param key
     * @param defValue
     * @return
     */
    public static Object getParam(String key, Object defValue) {
        SharedPreferences sharedPreferences = BaseApplication.getContext().getSharedPreferences(SharedFILE_NAME, Context.MODE_PRIVATE);
        SharedPreferences.Editor edit = sharedPreferences.edit();
        if (defValue instanceof String) {
            return sharedPreferences.getString(key, (String) defValue);
        } else if (defValue instanceof Integer) {
            return sharedPreferences.getInt(key, (Integer) defValue);
        } else if (defValue instanceof Boolean) {
            return sharedPreferences.getBoolean(key, (Boolean) defValue);
        } else if (defValue instanceof Float) {
            return sharedPreferences.getFloat(key, (Float) defValue);
        } else if (defValue instanceof Long) {
            return sharedPreferences.getLong(key, (Long) defValue);
        }
        return null;
    }

    /**
     * ä¿?å­˜æ•°æ?®çš„æ–¹æ³•ï¼Œæˆ‘ä»¬éœ€è¦?æ‹¿åˆ°ä¿?å­˜æ•°æ?®çš„å…·ä½“ç±»åž‹ï¼Œç„¶å?Žæ ¹æ?®ç±»åž‹è°ƒç”¨ä¸?å?Œçš„ä¿?å­˜æ–¹æ³•
     *
     * @param context
     * @param key
     * @param object
     */
    public static void setParam(Context context, String key, Object object) {
        String type = object.getClass().getSimpleName();
        SharedPreferences sp = context.getSharedPreferences(SharedFILE_NAME, Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = sp.edit();

        if ("String".equals(type)) {
            editor.putString(key, (String) object);
        } else if ("Integer".equals(type)) {
            editor.putInt(key, (Integer) object);
        } else if ("Boolean".equals(type)) {
            editor.putBoolean(key, (Boolean) object);
        } else if ("Float".equals(type)) {
            editor.putFloat(key, (Float) object);
        } else if ("Long".equals(type)) {
            editor.putLong(key, (Long) object);
        }

        editor.commit();
    }


    /**
     * å¾—åˆ°ä¿?å­˜æ•°æ?®çš„æ–¹æ³•ï¼Œæˆ‘ä»¬æ ¹æ?®é»˜è®¤å€¼å¾—åˆ°ä¿?å­˜çš„æ•°æ?®çš„å…·ä½“ç±»åž‹ï¼Œç„¶å?Žè°ƒç”¨ç›¸å¯¹äºŽçš„æ–¹æ³•èŽ·å?–å€¼
     *
     * @param context
     * @param key
     * @param defaultObject
     * @return
     */
    public static Object getParam(Context context, String key, Object defaultObject) {
        String type = defaultObject.getClass().getSimpleName();
        SharedPreferences sp = context.getSharedPreferences(SharedFILE_NAME, Context.MODE_PRIVATE);
        if ("String".equals(type)) {
            return sp.getString(key, (String) defaultObject);
        } else if ("Integer".equals(type)) {
            return sp.getInt(key, (Integer) defaultObject);
        } else if ("Boolean".equals(type)) {
            return sp.getBoolean(key, (Boolean) defaultObject);
        } else if ("Float".equals(type)) {
            return sp.getFloat(key, (Float) defaultObject);
        } else if ("Long".equals(type)) {
            return sp.getLong(key, (Long) defaultObject);
        }
        return null;
    }

    public Object get(String key, Object defValue) {
        if (defValue instanceof String) {
            return mSharedPreferences.getString(key, (String) defValue);
        } else if (defValue instanceof Integer) {
            return mSharedPreferences.getInt(key, (Integer) defValue);
        } else if (defValue instanceof Boolean) {
            return mSharedPreferences.getBoolean(key, (Boolean) defValue);
        } else if (defValue instanceof Float) {
            return mSharedPreferences.getFloat(key, (Float) defValue);
        } else if (defValue instanceof Long) {
            return mSharedPreferences.getLong(key, (Long) defValue);
        }
        return null;
    }

    public void set(String key, Object value) {
        if (value instanceof String) {
            editor.putString(key, (String) value);
        } else if (value instanceof Integer) {
            editor.putInt(key, (Integer) value);
        } else if (value instanceof Boolean) {
            editor.putBoolean(key, (Boolean) value);
        } else if (value instanceof Float) {
            editor.putFloat(key, (Float) value);
        } else if (value instanceof Long) {
            editor.putLong(key, (Long) value);
        }
        editor.apply();
    }
    public static boolean isHaveSD() {
        return Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED);
    }

    public static void setSharedPreferencesToPath(Context context, String dirName, String sharePreName, String key, String value) {
        SharedPreferences mySharedPreferences = null;
        SharedPreferences.Editor editor = null;
        try {
            Field field;
            // èŽ·å?–ContextWrapperå¯¹è±¡ä¸­çš„mBaseå?˜é‡?ã€‚è¯¥å?˜é‡?ä¿?å­˜äº†ContextImplå¯¹è±¡
            field = ContextWrapper.class.getDeclaredField("mBase");
            field.setAccessible(true);
            // èŽ·å?–mBaseå?˜é‡?
            Object obj = field.get(context);
            // èŽ·å?–ContextImplã€‚mPreferencesDirå?˜é‡?ï¼Œè¯¥å?˜é‡?ä¿?å­˜äº†æ•°æ?®æ–‡ä»¶çš„ä¿?å­˜è·¯å¾„
            field = obj.getClass().getDeclaredField("mPreferencesDir");
            field.setAccessible(true);
            // åˆ›å»ºè‡ªå®šä¹‰è·¯å¾„
            File file;
            if (isHaveSD()) {
                file = new File(SDCARDDIR, dirName);
            } else {
                file = new File(context.getCacheDir().getAbsolutePath() + File.separator, dirName);
            }
            //			System.out.println("@@@context.getCacheDir().getAbsolutePath()+java.io.File.separator:"+context.getCacheDir().getAbsolutePath()+java.io.File.separator);
            // ä¿®æ”¹mPreferencesDirå?˜é‡?çš„å€¼
            field.set(obj, file);
            mySharedPreferences = context.getSharedPreferences(sharePreName, Context.MODE_PRIVATE);
            editor = mySharedPreferences.edit();
            // if (isExistFile) {
            // Toast.makeText(this, "æ–‡ä»¶è¿˜ä¸?å­˜åœ¨", 5000).show();
            editor.putString(key, value);
            editor.commit();
            // }
            // new Handler().postDelayed(delayRunable,5000);
            // firstUseTime = mySharedPreferences.getString("time", null);
            // // ä½¿ç”¨Toastæ??ç¤ºä¿¡æ?¯
        } catch (NoSuchFieldException e) {
            e.printStackTrace();
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }
    }

    public static String getSharedPreferencesFromPath(Context context, String dirName, String sharePreName, String key, String defaultValue) {
        SharedPreferences mySharedPreferences = null;
        try {
            Field field;
            // èŽ·å?–ContextWrapperå¯¹è±¡ä¸­çš„mBaseå?˜é‡?ã€‚è¯¥å?˜é‡?ä¿?å­˜äº†ContextImplå¯¹è±¡
            field = ContextWrapper.class.getDeclaredField("mBase");
            field.setAccessible(true);
            // èŽ·å?–mBaseå?˜é‡?
            Object obj = field.get(context);
            // èŽ·å?–ContextImplã€‚mPreferencesDirå?˜é‡?ï¼Œè¯¥å?˜é‡?ä¿?å­˜äº†æ•°æ?®æ–‡ä»¶çš„ä¿?å­˜è·¯å¾„
            field = obj.getClass().getDeclaredField("mPreferencesDir");
            field.setAccessible(true);
            // åˆ›å»ºè‡ªå®šä¹‰è·¯å¾„
            File file;
            if (isHaveSD()) {
                file = new File(SDCARDDIR, dirName);
            } else {
                file = new File(context.getCacheDir().getAbsolutePath() + File.separator, dirName);
            }
            // ä¿®æ”¹mPreferencesDirå?˜é‡?çš„å€¼
            field.set(obj, file);
            mySharedPreferences = context.getSharedPreferences(sharePreName, Context.MODE_PRIVATE);
        } catch (NoSuchFieldException e) {
            e.printStackTrace();
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }
        return mySharedPreferences.getString(key, defaultValue);
    }

    /**
     * ç§»é™¤æŸ?ä¸ªkeyå€¼å·²ç»?å¯¹åº”çš„å€¼
     *
     * @param context
     * @param key
     */
    public static void remove(Context context, String key) {
        SharedPreferences sp = context.getSharedPreferences(SharedFILE_NAME, Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = sp.edit();
        editor.remove(key);
        SharedPreferencesCompat.apply(editor);
    }

    /**
     * æ¸…é™¤æ‰€æœ‰æ•°æ?®
     *
     * @param context
     */
    public static void clear(Context context) {
        SharedPreferences sp = context.getSharedPreferences(SharedFILE_NAME, Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = sp.edit();
        editor.clear();
        SharedPreferencesCompat.apply(editor);
    }

    /**
     * æŸ¥è¯¢æŸ?ä¸ªkeyæ˜¯å?¦å·²ç»?å­˜åœ¨
     *
     * @param context
     * @param key
     * @return
     */
    public static boolean contains(Context context, String key) {
        SharedPreferences sp = context.getSharedPreferences(SharedFILE_NAME, Context.MODE_PRIVATE);
        return sp.contains(key);
    }

    /**
     * è¿”å›žæ‰€æœ‰çš„é”®å€¼å¯¹
     *
     * @param context
     * @return
     */
    public static Map<String, ?> getAll(Context context) {
        SharedPreferences sp = context.getSharedPreferences(SharedFILE_NAME, Context.MODE_PRIVATE);
        return sp.getAll();
    }

    /**
     * åˆ›å»ºä¸€ä¸ªè§£å†³SharedPreferencesCompat.applyæ–¹æ³•çš„ä¸€ä¸ªå…¼å®¹ç±»
     *
     * @author zhy
     */
    private static class SharedPreferencesCompat {
        private static final Method sApplyMethod = findApplyMethod();

        /**
         * å??å°„æŸ¥æ‰¾applyçš„æ–¹æ³•
         *
         * @return
         */
        @SuppressWarnings({"unchecked", "rawtypes"})
        private static Method findApplyMethod() {
            try {
                Class clz = SharedPreferences.Editor.class;
                return clz.getMethod("apply");
            } catch (NoSuchMethodException e) {
            }

            return null;
        }

        /**
         * å¦‚æžœæ‰¾åˆ°åˆ™ä½¿ç”¨applyæ‰§è¡Œï¼Œå?¦åˆ™ä½¿ç”¨commit
         *
         * @param editor
         */
        public static void apply(SharedPreferences.Editor editor) {
            try {
                if (sApplyMethod != null) {
                    sApplyMethod.invoke(editor);
                    return;
                }
            } catch (IllegalArgumentException e) {
            } catch (IllegalAccessException e) {
            } catch (InvocationTargetException e) {
            }
            editor.commit();
        }
    }
}
