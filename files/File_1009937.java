package com.xiaojinzi.component.impl;

import android.app.Activity;
import android.content.Context;
import android.net.Uri;
import android.support.annotation.MainThread;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;

import com.xiaojinzi.component.ComponentUtil;
import com.xiaojinzi.component.cache.Cache;
import com.xiaojinzi.component.cache.CacheType;
import com.xiaojinzi.component.cache.DefaultCacheFactory;
import com.xiaojinzi.component.router.IComponentHostRouter;
import com.xiaojinzi.component.support.NavigationDisposable;
import com.xiaojinzi.component.support.Utils;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

/**
 * æ•´ä¸ªè·¯ç”±æ¡†æž¶,æ•´ä½“éƒ½æ˜¯åœ¨ä¸»çº¿ç¨‹ä¸­æ‰§è¡Œçš„,åœ¨æ‹¦æˆªå™¨ä¸­æ??ä¾›äº† callback æœºåˆ¶
 * æ‰€ä»¥æœ‰è€—æ—¶çš„æ“?ä½œå?¯ä»¥åœ¨æ‹¦æˆªå™¨ä¸­åŽ»å¼€å­?çº¿ç¨‹æ‰§è¡Œç„¶å?Žåœ¨å›žè°ƒä¸­ç»§ç»­ä¸‹ä¸€ä¸ªæ‹¦æˆªå™¨
 * <p>
 * è¿™ä¸ªç±»å¿…é¡»æ”¾åœ¨ {@link ComponentUtil#IMPL_OUTPUT_PKG} åŒ…ä¸‹é?¢
 * è¿™ä¸ªç±»ä½œä¸ºæ¡†æž¶å¯¹å¤–çš„ä¸€ä¸ªä½¿ç”¨çš„ç±»,é‡Œé?¢ä¼šå¾ˆå¤šæ˜“ç”¨çš„æ–¹æ³•
 * <p>
 * time   : 2018/07/26
 *
 * @author : xiaojinzi 30212
 */
public class Router {

    protected Router() {
    }

    /**
     * ç±»çš„æ ‡å¿—
     */
    public static final String TAG = "Router";

    /**
     * æ‹¦æˆªå™¨ Class --> RouterInterceptor çš„ç¼“å­˜
     */
    private static final Cache<Class, Object> apiClassCache =
            DefaultCacheFactory.INSTANCE.build(CacheType.CLASS_CACHE);

    /**
     * ç©ºå®žçŽ°,é‡Œå¤´éƒ½æ˜¯ä¸?èƒ½è°ƒç”¨çš„æ–¹æ³•
     * è¿™ä¸ªå¯¹è±¡å?ªä¼šåœ¨æž„å»º {@link RouterRequest} å¯¹è±¡å¤±è´¥æˆ–è€…æž„å»ºä¹‹å‰?å°±å?‘ç”Ÿé”™è¯¯çš„æƒ…å†µæ‰?ä¼šè¢«è¿”å›ž
     * è¿™é‡Œä¸ºä»€ä¹ˆä¼šæœ‰è¿™ä¸ªç±»æ˜¯å› ä¸ºåœ¨è°ƒç”¨ {@link Navigator#navigate()} çš„æ—¶å€™,ä¼šè¿”å›žä¸€ä¸ª
     */
    public static final NavigationDisposable emptyNavigationDisposable = new NavigationDisposable() {

        @Nullable
        @Override
        public RouterRequest originalRequest() {
            return null;
        }

        @Override
        public void cancel() {
            // ignore
        }

        @Override
        public boolean isCanceled() {
            return true;
        }

    };

    /**
     * è·¯ç”±çš„ç›‘å?¬å™¨
     */
    static Collection<RouterListener> routerListeners = Collections
            .synchronizedCollection(new ArrayList<RouterListener>(0));

    // æ”¯æŒ?å?–æ¶ˆçš„ä¸€ä¸ª Callback é›†å?ˆ,éœ€è¦?çº¿ç¨‹å®‰å…¨
    static List<NavigationDisposable> mNavigationDisposableList = new CopyOnWriteArrayList<>();

    public static void clearRouterListeners() {
        routerListeners.clear();
    }

    public static void addRouterListener(@NonNull RouterListener listener) {
        if (routerListeners.contains(listener)) {
            return;
        }
        routerListeners.add(listener);
    }

    public static void removeRouterListener(RouterListener listener) {
        if (listener == null) {
            return;
        }
        routerListeners.remove(listener);
    }

    public static void register(IComponentHostRouter router) {
        RouterCenter.getInstance().register(router);
    }

    public static void register(@NonNull String host) {
        RouterCenter.getInstance().register(host);
    }

    public static void unregister(IComponentHostRouter router) {
        RouterCenter.getInstance().unregister(router);
    }

    public static void unregister(@NonNull String host) {
        RouterCenter.getInstance().unregister(host);
    }

    public static Navigator with(){
        return new Navigator();
    }

    public static Navigator with(@NonNull Context context) {
        return new Navigator(context);
    }

    public static Navigator with(@NonNull Fragment fragment) {
        return new Navigator(fragment);
    }

    /**
     * æ‹¿åˆ°ä¸€ä¸ªæŽ¥å?£çš„å®žçŽ°ç±»
     *
     * @param apiClass
     * @param <T>
     * @return
     */
    public static <T> T withApi(@NonNull Class<T> apiClass) {
        T t = (T) apiClassCache.get(apiClass);
        if (t == null) {
            String className = ComponentUtil.genRouterApiImplClassName(apiClass);
            try {
                t = (T) Class.forName(className).newInstance();
                apiClassCache.put(apiClass, t);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
        return t;
    }

    public static boolean isMatchUri(@NonNull Uri uri) {
        return RouterCenter.getInstance().isMatchUri(uri);
    }

    /**
     * å?–æ¶ˆæŸ?ä¸€ä¸ª Activityçš„æœ‰å…³çš„è·¯ç”±ä»»åŠ¡
     *
     * @param act
     */
    @MainThread
    public static void cancel(@NonNull Activity act) {
        synchronized (mNavigationDisposableList) {
            for (int i = mNavigationDisposableList.size() - 1; i >= 0; i--) {
                NavigationDisposable disposable = mNavigationDisposableList.get(i);
                if (act == Utils.getActivityFromContext(disposable.originalRequest().context)) {
                    disposable.cancel();
                    mNavigationDisposableList.remove(i);
                }
            }
        }
    }

    /**
     * å?–æ¶ˆä¸€ä¸ª Fragment çš„æœ‰å…³è·¯ç”±ä»»åŠ¡
     *
     * @param fragment
     */
    @MainThread
    public static void cancel(@NonNull Fragment fragment) {
        synchronized (mNavigationDisposableList) {
            for (int i = mNavigationDisposableList.size() - 1; i >= 0; i--) {
                NavigationDisposable disposable = mNavigationDisposableList.get(i);
                if (fragment == disposable.originalRequest().fragment) {
                    disposable.cancel();
                    mNavigationDisposableList.remove(i);
                }
            }
        }
    }

}
