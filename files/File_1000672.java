package org.nutz.lang.util;

import java.io.File;
import java.io.FileFilter;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.net.URLDecoder;
import java.util.LinkedList;

import org.nutz.lang.Encoding;
import org.nutz.lang.Files;
import org.nutz.lang.Lang;
import org.nutz.lang.Strings;

/**
 * ç£?ç›˜æ“?ä½œçš„å¸®åŠ©å‡½æ•°é›†å?ˆ
 * 
 * @author zozoh(zozohtnt@gmail.com)
 * @author bonyfish(mc02cxj@gmail.com)
 */
public abstract class Disks {

    /**
     * ä¸€ä¸ª Vistor æ¨¡å¼?çš„ç›®å½•æ·±å±‚é??åŽ†
     * 
     * @param f
     *            è¦?é??åŽ†çš„ç›®å½•æˆ–è€…æ–‡ä»¶ï¼Œå¦‚æžœæ˜¯ç›®å½•ï¼Œæ·±å±‚é??åŽ†ï¼Œå?¦åˆ™ï¼Œå?ªè®¿é—®ä¸€æ¬¡æ–‡ä»¶
     * @param fv
     *            å¯¹æ–‡ä»¶è¦?è¿›è¡Œçš„æ“?ä½œ
     * @param filter
     *            é??åŽ†ç›®å½•æ—¶ï¼Œå“ªäº›æ–‡ä»¶åº”è¯¥è¢«å¿½ç•¥
     * @return é??åŽ†çš„æ–‡ä»¶ä¸ªæ•°
     */
    public static int visitFile(File f, FileVisitor fv, FileFilter filter) {
        int re = 0;
        if (f.isFile()) {
            fv.visit(f);
            re++;
        } else if (f.isDirectory()) {
            File[] fs = null == filter ? f.listFiles() : f.listFiles(filter);
            if (fs != null)
                for (File theFile : fs)
                    re += visitFile(theFile, fv, filter);
        }
        return re;
    }

    /**
     * ä¸€ä¸ª Vistor æ¨¡å¼?çš„ç›®å½•æ·±å±‚é??åŽ†, åŒ…å?«ç›®å½•ä¹Ÿä¼šè¿”å›ž
     * 
     * @param f
     *            è¦?é??åŽ†çš„ç›®å½•æˆ–è€…æ–‡ä»¶ï¼Œå¦‚æžœæ˜¯ç›®å½•ï¼Œæ·±å±‚é??åŽ†ï¼Œå?¦åˆ™ï¼Œå?ªè®¿é—®ä¸€æ¬¡æ–‡ä»¶
     * @param fv
     *            å¯¹æ–‡ä»¶è¦?è¿›è¡Œçš„æ“?ä½œ
     * @param filter
     *            é??åŽ†ç›®å½•æ—¶ï¼Œå“ªäº›æ–‡ä»¶åº”è¯¥è¢«å¿½ç•¥
     * @return é??åŽ†çš„æ–‡ä»¶ï¼ˆç›®å½•ï¼‰ä¸ªæ•°
     */
    public static int visitFileWithDir(File f, FileVisitor fv, FileFilter filter) {
        int re = 0;
        fv.visit(f);
        re++;
        if (f.isDirectory()) {
            File[] fs = null == filter ? f.listFiles() : f.listFiles(filter);
            if (fs != null)
                for (File theFile : fs)
                    re += visitFileWithDir(theFile, fv, filter);
        }
        return re;
    }

    /**
     * å°†ä¸¤ä¸ªæ–‡ä»¶å¯¹è±¡æ¯”è¾ƒï¼Œå¾—å‡ºç›¸å¯¹è·¯å¾„
     * 
     * @param base
     *            åŸºç¡€æ–‡ä»¶å¯¹è±¡
     * @param file
     *            ç›¸å¯¹æ–‡ä»¶å¯¹è±¡
     * @return ç›¸å¯¹äºŽåŸºç¡€æ–‡ä»¶å¯¹è±¡çš„ç›¸å¯¹è·¯å¾„
     */
    public static String getRelativePath(File base, File file) {
        String pathBase = base.getAbsolutePath();
        if (base.isDirectory())
            pathBase += "/";

        String pathFile = file.getAbsolutePath();
        if (file.isDirectory())
            pathFile += "/";

        return getRelativePath(pathBase, pathFile);
    }

    /**
     * å°†ä¸¤ä¸ªè·¯å¾„æ¯”è¾ƒï¼Œå¾—å‡ºç›¸å¯¹è·¯å¾„
     * 
     * @param base
     *            åŸºç¡€è·¯å¾„ï¼Œä»¥ '/' ç»“æ?Ÿï¼Œè¡¨ç¤ºç›®å½•
     * @param path
     *            ç›¸å¯¹æ–‡ä»¶è·¯å¾„ï¼Œä»¥ '/' ç»“æ?Ÿï¼Œè¡¨ç¤ºç›®å½•
     * @return ç›¸å¯¹äºŽåŸºç¡€è·¯å¾„å¯¹è±¡çš„ç›¸å¯¹è·¯å¾„
     */
    public static String getRelativePath(String base, String path) {
        return getRelativePath(base, path, "./");
    }

    /**
     * å°†ä¸¤ä¸ªè·¯å¾„æ¯”è¾ƒï¼Œå¾—å‡ºç›¸å¯¹è·¯å¾„
     * 
     * @param base
     *            åŸºç¡€è·¯å¾„ï¼Œä»¥ '/' ç»“æ?Ÿï¼Œè¡¨ç¤ºç›®å½•
     * @param path
     *            ç›¸å¯¹æ–‡ä»¶è·¯å¾„ï¼Œä»¥ '/' ç»“æ?Ÿï¼Œè¡¨ç¤ºç›®å½•
     * @param equalPath
     *            å¦‚æžœä¸¤ä¸ªè·¯å¾„ç›¸ç­‰ï¼Œè¿”å›žä»€ä¹ˆï¼Œé€šå¸¸ä¸º "./"ã€‚ ä½ ä¹Ÿå?¯ä»¥ç”¨ "" æˆ–è€… "." æˆ–è€…éš?ä¾¿ä»€ä¹ˆå­—ç¬¦ä¸²æ?¥è¡¨ç¤º
     * 
     * @return ç›¸å¯¹äºŽåŸºç¡€è·¯å¾„å¯¹è±¡çš„ç›¸å¯¹è·¯å¾„
     */
    public static String getRelativePath(String base, String path, String equalPath) {
        // å¦‚æžœä¸¤ä¸ªè·¯å¾„ç›¸ç­‰
        if (base.equals(path) || "./".equals(path) || ".".equals(path)) {
            return equalPath;
        }

        // å¼€å§‹åˆ¤æ–­
        String[] bb = Strings.splitIgnoreBlank(getCanonicalPath(base), "[\\\\/]");
        String[] ff = Strings.splitIgnoreBlank(getCanonicalPath(path), "[\\\\/]");
        int len = Math.min(bb.length, ff.length);
        int pos = 0;
        for (; pos < len; pos++)
            if (!bb[pos].equals(ff[pos]))
                break;

        // è¯?æ˜Žè·¯å¾„æ˜¯ç›¸ç­‰çš„
        if (len == pos && bb.length == ff.length) {
            return equalPath;
        }

        // å¼€å§‹æŸ¥æ‰¾ä¸?å?Œ
        int dir = 1;
        if (base.endsWith("/"))
            dir = 0;

        StringBuilder sb = new StringBuilder(Strings.dup("../", bb.length - pos - dir));
        sb.append(Lang.concat(pos, ff.length - pos, '/', ff));
        if (path.endsWith("/"))
            sb.append('/');
        return sb.toString();
    }

    /**
     * èŽ·å?–ä¸¤ä¸ªè·¯å¾„ä»Žå¤´éƒ¨å¼€å§‹è®¡ç®—çš„äº¤é›†
     * 
     * @param ph0
     *            è·¯å¾„1
     * @param ph1
     *            è·¯å¾„2
     * @param dft
     *            å¦‚æžœä¸¤ä¸ªè·¯å¾„å®Œå…¨æ²¡æœ‰ç›¸äº¤ï¼Œé‚£ä¹ˆè¿”å›žä»€ä¹ˆ
     * @return ä¸¤ä¸ªè·¯å¾„çš„äº¤é›†
     */
    public static String getIntersectPath(String ph0, String ph1, String dft) {
        // æœ¨å?¯èƒ½æœ‰äº¤é›†
        if (null == ph0 || null == ph1)
            return dft;

        String[] ss0 = Strings.splitIgnoreBlank(ph0, "[\\\\/]");
        String[] ss1 = Strings.splitIgnoreBlank(ph1, "[\\\\/]");

        int pos = 0;
        int len = Math.min(ss0.length, ss1.length);
        for (; pos < len; pos++) {
            if (!ss0[pos].equals(ss1[pos]))
                break;
        }

        // æœ¨æœ‰äº¤é›†
        if (pos == 0)
            return dft;

        // å¾—åˆ°
        String re = Lang.concat(0, pos, "/", ss0).toString();

        // éœ€è¦?è¡¥å…¨å?Žé?¢çš„ "/" å?—
        if (ph0.endsWith("/") && ph1.endsWith("/"))
            return re + "/";

        return re;
    }

    /**
     * æ•´ç?†è·¯å¾„ã€‚ å°†ä¼šå?ˆå¹¶è·¯å¾„ä¸­çš„ ".."
     * 
     * @param path
     *            è·¯å¾„
     * @return æ•´ç?†å?Žçš„è·¯å¾„
     */
    public static String getCanonicalPath(String path) {
        if (Strings.isBlank(path))
            return path;
        String[] pa = Strings.splitIgnoreBlank(path, "[\\\\/]");
        LinkedList<String> paths = new LinkedList<String>();
        for (String s : pa) {
            if ("..".equals(s)) {
                if (paths.size() > 0)
                    paths.removeLast();
                continue;
            }
            if (".".equals(s)) {
                // pass
            } else {
                paths.add(s);
            }
        }

        StringBuilder sb = Lang.concat("/", paths);
        if (path.startsWith("/"))
            sb.insert(0, '/');
        if (path.endsWith("/"))
            sb.append('/');
        return sb.toString();
    }

    /**
     * @return å½“å‰?è´¦æˆ·çš„ä¸»ç›®å½•å…¨è·¯å¾„
     */
    public static String home() {
        return System.getProperty("user.home");
    }

    /**
     * @param path
     *            ç›¸å¯¹ç”¨æˆ·ä¸»ç›®å½•çš„è·¯å¾„
     * @return ç›¸å¯¹ç”¨æˆ·ä¸»ç›®å½•çš„å…¨è·¯å¾„
     */
    public static String home(String path) {
        return home() + path;
    }

    /**
     * èŽ·å?–ä¸€ä¸ªè·¯å¾„çš„ç»?å¯¹è·¯å¾„ã€‚å¦‚æžœè¯¥è·¯å¾„ä¸?å­˜åœ¨ï¼Œåˆ™è¿”å›žnull
     * 
     * @param path
     *            è·¯å¾„
     * @return ç»?å¯¹è·¯å¾„
     */
    public static String absolute(String path) {
        return absolute(path, ClassTools.getClassLoader(), Encoding.defaultEncoding());
    }

    /**
     * èŽ·å?–ä¸€ä¸ªè·¯å¾„çš„ç»?å¯¹è·¯å¾„ã€‚å¦‚æžœè¯¥è·¯å¾„ä¸?å­˜åœ¨ï¼Œåˆ™è¿”å›žnull
     * 
     * @param path
     *            è·¯å¾„
     * @param klassLoader
     *            å?‚è€ƒ ClassLoader
     * @param enc
     *            è·¯å¾„ç¼–ç ?æ–¹å¼?
     * @return ç»?å¯¹è·¯å¾„
     */
    public static String absolute(String path, ClassLoader klassLoader, String enc) {
        path = normalize(path, enc);
        if (Strings.isEmpty(path))
            return null;

        File f = new File(path);
        if (!f.exists()) {
            URL url = null;
            try {
                url = klassLoader.getResource(path);
                if (null == url)
                    url = Thread.currentThread().getContextClassLoader().getResource(path);
                if (null == url)
                    url = ClassLoader.getSystemResource(path);
            }
            catch (Throwable e) {}
            if (null != url)
                return normalize(url.getPath(), Encoding.UTF8);// é€šè¿‡URLèŽ·å?–String,ä¸€å¾‹ä½¿ç”¨UTF-8ç¼–ç ?è¿›è¡Œè§£ç ?
            return null;
        }
        return path;
    }

    /**
     * è®©è·¯å¾„å?˜æˆ?æ­£å¸¸è·¯å¾„ï¼Œå°† ~ æ›¿æ?¢æˆ?ç”¨æˆ·ä¸»ç›®å½•
     * 
     * @param path
     *            è·¯å¾„
     * @return æ­£å¸¸åŒ–å?Žçš„è·¯å¾„
     */
    public static String normalize(String path) {
        return normalize(path, Encoding.defaultEncoding());
    }

    /**
     * è®©è·¯å¾„å?˜æˆ?æ­£å¸¸è·¯å¾„ï¼Œå°† ~ æ›¿æ?¢æˆ?ç”¨æˆ·ä¸»ç›®å½•
     * 
     * @param path
     *            è·¯å¾„
     * @param enc
     *            è·¯å¾„ç¼–ç ?æ–¹å¼?
     * @return æ­£å¸¸åŒ–å?Žçš„è·¯å¾„
     */
    public static String normalize(String path, String enc) {
        if (Strings.isEmpty(path))
            return null;
        if (path.charAt(0) == '~')
            path = Disks.home() + path.substring(1);
        try {
            return URLDecoder.decode(path, enc);
        }
        catch (UnsupportedEncodingException e) {
            return null;
        }
    }

    /**
     * é??åŽ†æ–‡ä»¶å¤¹ä¸‹ä»¥ç‰¹å®šå?Žç¼€ç»“å°¾çš„æ–‡ä»¶(ä¸?åŒ…æ‹¬æ–‡ä»¶å¤¹,ä¸?åŒ…æ‹¬.å¼€å¤´çš„æ–‡ä»¶)
     * 
     * @param path
     *            æ ¹è·¯å¾„
     * @param regex
     *            æ–‡ä»¶å??çš„æ­£åˆ™è¡¨è¾¾å¼?
     * @param deep
     *            æ˜¯å?¦æ·±å±‚é??åŽ†
     * @param fv
     *            ä½ æ‰€æ??ä¾›çš„è®¿é—®å™¨,å½“ç„¶å°±æ˜¯ä½ è‡ªå·±çš„é€»è¾‘å’¯
     */
    public static final void visitFile(String path,
                                       final String regex,
                                       final boolean deep,
                                       final FileVisitor fv) {
        File d = Files.findFile(path);
        if (null == d)
            return;
        visitFile(d, new FileVisitor() {
            @Override
            public void visit(File f) {
                if (f.isDirectory())
                    return;
                fv.visit(f);
            }
        }, new FileFilter() {
            @Override
            public boolean accept(File f) {
                if (f.isDirectory())
                    return deep;
                if (f.isHidden())
                    return false;
                if (Strings.isEmpty(regex))
                    return true;
                return Regex.match(regex, f.getName());
            }
        });
    }

    /**
     * é??åŽ†æ–‡ä»¶å¤¹ä¸‹ä»¥ç‰¹å®šå?Žç¼€ç»“å°¾çš„æ–‡ä»¶ä¸Žæ–‡ä»¶å¤¹ ä¸?åŒ…æ‹¬.å¼€å¤´çš„æ–‡ä»¶
     * 
     * @param path
     *            æ ¹è·¯å¾„
     * @param regex
     *            æ–‡ä»¶å??çš„æ­£åˆ™è¡¨è¾¾å¼?
     * @param deep
     *            æ˜¯å?¦æ·±å±‚é??åŽ†
     * @param fv
     *            ä½ æ‰€æ??ä¾›çš„è®¿é—®å™¨,å½“ç„¶å°±æ˜¯ä½ è‡ªå·±çš„é€»è¾‘å’¯
     */
    public static final void visitFileWithDir(String path,
                                              final String regex,
                                              final boolean deep,
                                              final FileVisitor fv) {
        File d = Files.findFile(path);
        if (null == d)
            return;
        visitFileWithDir(d, new FileVisitor() {
            @Override
            public void visit(File f) {
                fv.visit(f);
            }
        }, new FileFilter() {
            @Override
            public boolean accept(File f) {
                if (f.isDirectory())
                    return deep;
                if (f.isHidden())
                    return false;
                if (Strings.isEmpty(regex))
                    return true;
                return f.getName().matches(regex);
            }
        });
    }

    /**
     * å°†å¤šä¸ªè·¯å¾„æ‹¼å?ˆæˆ?ä¸€ä¸ªè·¯å¾„ï¼Œä»–ä¼šè‡ªåŠ¨åŽ»é™¤é‡?å¤?çš„ "/"
     * 
     * <pre>
     * appendPath("a","b")  => "a/b"
     * appendPath("/a","b/c")  => "/a/b/c"
     * appendPath("/a/","/b/c")  => "/a/b/c"
     * </pre>
     * 
     * @param phs
     *            è·¯å¾„æ•°ç»„
     * @return æ‹¼å?ˆå?Žçš„è·¯å¾„
     */
    public static String appendPath(String... phs) {
        String[] paths = Lang.without(phs, null);
        if (null != paths && paths.length > 0) {
            // zozoh: å—¯ä¸‹é?¢çš„é€»è¾‘æœ¨æœ‰å¿…è¦?äº†å?§
            // if (null == paths[0])
            // paths[0] = "/";
            String str = Lang.concat("/", paths).toString();
            String[] ss = Strings.splitIgnoreBlank(str, "/");
            str = Lang.concat("/", ss).toString();
            if (paths[0].startsWith("/")) {
                return "/" + str;
            }
            return str;
        }
        return null;
    }
}
