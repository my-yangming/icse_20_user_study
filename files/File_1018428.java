package com.xiaolyuh.service.impl;

import com.alibaba.fastjson.JSON;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;
import com.xiaolyuh.entity.Person;
import com.xiaolyuh.entity.Result;
import com.xiaolyuh.service.PersonService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

@Service
public class PersonServiceImpl implements PersonService {
    private static final Logger logger = LoggerFactory.getLogger(PersonServiceImpl.class);

    @Autowired
    RedisTemplate redisTemplate;

    @HystrixCommand(groupKey = "hystrixSemaphoreTestGroupKey", commandKey = "hystrixSemaphoreTestCommandKey",
            fallbackMethod = "fallbackMethodSemaphore",
            commandProperties = {
                    //æŒ‡å®šå¤šä¹…è¶…æ—¶ï¼Œå?•ä½?æ¯«ç§’ã€‚è¶…æ—¶è¿›fallback
                    @HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds", value = "10000"),
                    //åˆ¤æ–­ç†”æ–­çš„æœ€å°‘è¯·æ±‚æ•°ï¼Œé»˜è®¤æ˜¯10ï¼›å?ªæœ‰åœ¨ä¸€ä¸ªç»Ÿè®¡çª—å?£å†…å¤„ç?†çš„è¯·æ±‚æ•°é‡?è¾¾åˆ°è¿™ä¸ªé˜ˆå€¼ï¼Œæ‰?ä¼šè¿›è¡Œç†”æ–­ä¸Žå?¦çš„åˆ¤æ–­
                    @HystrixProperty(name = "circuitBreaker.requestVolumeThreshold", value = "10"),
                    //åˆ¤æ–­ç†”æ–­çš„é˜ˆå€¼ï¼Œé»˜è®¤å€¼50ï¼Œè¡¨ç¤ºåœ¨ä¸€ä¸ªç»Ÿè®¡çª—å?£å†…æœ‰50%çš„è¯·æ±‚å¤„ç?†å¤±è´¥ï¼Œä¼šè§¦å?‘ç†”æ–­
                    @HystrixProperty(name = "circuitBreaker.errorThresholdPercentage", value = "80"),
                    //ç†”æ–­å¤šå°‘æ¯«ç§’å?Žå¼€å§‹å°?è¯•è¯·æ±‚ é»˜è®¤5000ms
                    @HystrixProperty(name = "circuitBreaker.sleepWindowInMilliseconds", value = "5000"),
                    @HystrixProperty(name = "execution.isolation.strategy", value = "SEMAPHORE"),
                    // æœ€å¤§å¹¶å?‘è¯·æ±‚æ•°ï¼Œé»˜è®¤10ï¼Œè¯¥å?‚æ•°å½“ä½¿ç”¨ExecutionIsolationStrategy.SEMAPHOREç­–ç•¥æ—¶æ‰?æœ‰æ•ˆã€‚
                    @HystrixProperty(name = "execution.isolation.semaphore.maxConcurrentRequests", value = "10"),
                    // å¦‚æžœå¹¶å?‘æ•°è¾¾åˆ°è¯¥è®¾ç½®å€¼ï¼Œè¯·æ±‚ä¼šè¢«æ‹’ç»?å’ŒæŠ›å‡ºå¼‚å¸¸å¹¶ä¸”fallbackä¸?ä¼šè¢«è°ƒç”¨ã€‚é»˜è®¤10
                    @HystrixProperty(name = "fallback.isolation.semaphore.maxConcurrentRequests", value = "100")
            }
    )
    @Override
    public Result semaphore(String arg) {
        redisTemplate.opsForValue().get("semaphore");
        Person person = new Person();
        person.setAge(18);
        person.setId(2L);
        person.setName("å??ç§°semaphore");
        person.setAddress("åœ°å?€semaphore");
        logger.info(JSON.toJSONString(person));
        return Result.success(person);
    }

    @HystrixCommand(groupKey = "hystrixThreadTestGroupKey", commandKey = "hystrixThreadTestCommandKey",
            fallbackMethod = "fallbackMethodThread",
            commandProperties = {
                    //æŒ‡å®šå¤šä¹…è¶…æ—¶ï¼Œå?•ä½?æ¯«ç§’ã€‚è¶…æ—¶è¿›fallback
                    @HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds", value = "10000"),
                    //åˆ¤æ–­ç†”æ–­çš„æœ€å°‘è¯·æ±‚æ•°ï¼Œé»˜è®¤æ˜¯10ï¼›å?ªæœ‰åœ¨ä¸€ä¸ªç»Ÿè®¡çª—å?£å†…å¤„ç?†çš„è¯·æ±‚æ•°é‡?è¾¾åˆ°è¿™ä¸ªé˜ˆå€¼ï¼Œæ‰?ä¼šè¿›è¡Œç†”æ–­ä¸Žå?¦çš„åˆ¤æ–­
                    @HystrixProperty(name = "circuitBreaker.requestVolumeThreshold", value = "10"),
                    //åˆ¤æ–­ç†”æ–­çš„é˜ˆå€¼ï¼Œé»˜è®¤å€¼50ï¼Œè¡¨ç¤ºåœ¨ä¸€ä¸ªç»Ÿè®¡çª—å?£å†…æœ‰50%çš„è¯·æ±‚å¤„ç?†å¤±è´¥ï¼Œä¼šè§¦å?‘ç†”æ–­
                    @HystrixProperty(name = "circuitBreaker.errorThresholdPercentage", value = "90"),
                    //ç†”æ–­å¤šå°‘æ¯«ç§’å?Žå¼€å§‹å°?è¯•è¯·æ±‚ é»˜è®¤5000ms
                    @HystrixProperty(name = "circuitBreaker.sleepWindowInMilliseconds", value = "60000"),
                    @HystrixProperty(name = "execution.isolation.strategy", value = "THREAD"),
                    // å¦‚æžœå¹¶å?‘æ•°è¾¾åˆ°è¯¥è®¾ç½®å€¼ï¼Œè¯·æ±‚ä¼šè¢«æ‹’ç»?å’ŒæŠ›å‡ºå¼‚å¸¸å¹¶ä¸”fallbackä¸?ä¼šè¢«è°ƒç”¨ã€‚é»˜è®¤10
                    @HystrixProperty(name = "fallback.isolation.semaphore.maxConcurrentRequests", value = "100"),
                    //è®¾ç½®rolling percentile windowçš„æ—¶é—´ï¼Œé»˜è®¤60000
                    @HystrixProperty(name = "metrics.rollingPercentile.timeInMilliseconds", value = "600000")
            },
            threadPoolProperties = {
                    @HystrixProperty(name = "coreSize", value = "10"),
                    @HystrixProperty(name = "maxQueueSize", value = "100"),
                    @HystrixProperty(name = "keepAliveTimeMinutes", value = "2"),
                    @HystrixProperty(name = "metrics.rollingStats.numBuckets", value = "12"),
                    @HystrixProperty(name = "metrics.rollingStats.timeInMilliseconds", value = "1440")
            }

    )
    @Override
    public Result thread(String arg) {
        redisTemplate.opsForValue().get("thread");
        Person person = new Person();
        person.setAge(18);
        person.setId(2L);
        person.setName("å??ç§°thread");
        person.setAddress("åœ°å?€thread");
        logger.info(JSON.toJSONString(person));
        return Result.success(person);
    }

    public Result fallbackMethodSemaphore(String arg, Throwable throwable) {
        logger.info("ç†”æ–­é™?çº§");
        return Result.error("ç†”æ–­é™?çº§");
    }

    public Result fallbackMethodThread(String arg) {
        logger.info("ç†”æ–­é™?çº§");
        return Result.error("ç†”æ–­é™?çº§");
    }
}
