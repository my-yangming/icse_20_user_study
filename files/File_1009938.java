package com.xiaojinzi.component.impl;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.support.annotation.MainThread;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;

import com.xiaojinzi.component.ComponentUtil;
import com.xiaojinzi.component.bean.RouterBean;
import com.xiaojinzi.component.error.ignore.InterceptorNotFoundException;
import com.xiaojinzi.component.error.ignore.NavigationFailException;
import com.xiaojinzi.component.error.ignore.TargetActivityNotFoundException;
import com.xiaojinzi.component.impl.interceptor.InterceptorCenter;
import com.xiaojinzi.component.support.RouterInterceptorCache;
import com.xiaojinzi.component.router.IComponentCenterRouter;
import com.xiaojinzi.component.router.IComponentHostRouter;
import com.xiaojinzi.component.support.ParameterSupport;
import com.xiaojinzi.component.support.Utils;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import static com.xiaojinzi.component.ComponentConstants.SEPARATOR;

/**
 * ä¸­å¤®è·¯ç”±,æŒ‚è½½ç?€å¤šä¸ªå­?è·¯ç”±è¡¨,è¿™é‡Œæœ‰æ€»è·¯ç”±è¡¨
 * å®žé™…çš„è·³è½¬ä¹Ÿæ˜¯è¿™é‡Œå®žçŽ°çš„,å½“æœ‰æ¨¡å?—çš„æ³¨å†Œå’Œå??æ³¨å†Œå?‘ç”Ÿçš„æ—¶å€™
 * æ€»è·¯ç”±è¡¨ä¼šæœ‰å“?åº”çš„å?˜åŒ–
 *
 * @author xiaojinzi 30212
 * @hide
 */
public class RouterCenter implements IComponentCenterRouter {

    /**
     * å?•ä¾‹å¯¹è±¡
     */
    private static volatile RouterCenter instance;

    private RouterCenter() {
    }

    public static RouterCenter getInstance() {
        if (instance == null) {
            synchronized (RouterCenter.class) {
                if (instance == null) {
                    instance = new RouterCenter();
                }
            }
        }
        return instance;
    }

    /**
     * å­?è·¯ç”±è¡¨å¯¹è±¡
     */
    private static Map<String, IComponentHostRouter> hostRouterMap = new HashMap<>();

    /**
     * ä¿?å­˜æ˜ å°„å…³ç³»çš„mapé›†å?ˆ,æ˜¯ä¸€ä¸ªæ€»è·¯ç”±è¡¨
     */
    protected final Map<String, RouterBean> routerMap = new HashMap<>();

    @Override
    @MainThread
    public void openUri(@NonNull final RouterRequest routerRequest) throws Exception {
        doOpenUri(routerRequest);
    }

    /**
     * content å?‚æ•°å’Œ fragment å?‚æ•°å¿…é¡»æœ‰ä¸€ä¸ªæœ‰å€¼çš„
     *
     * @param request
     * @return
     */
    @MainThread
    private void doOpenUri(@NonNull final RouterRequest request) throws Exception {
        if (!Utils.isMainThread()) {
            throw new NavigationFailException("Router must run on main thread");
        }
        if (request.uri == null) {
            throw new NavigationFailException("target Uri is null");
        }
        // å?‚æ•°æ£€æµ‹å®Œæ¯•
        RouterBean target = getTarget(request.uri);
        // router://component1/test?data=xxxx
        String uriString = request.uri.toString();
        // æ²¡æœ‰æ‰¾åˆ°ç›®æ ‡ç•Œé?¢
        if (target == null) {
            throw new TargetActivityNotFoundException(uriString);
        }
        if (request.context == null && request.fragment == null) {
            throw new NavigationFailException("one of the Context and Fragment must not be null,do you forget call method: \nRouter.with(Context) or Router.with(Fragment)");
        }
        // do startActivity
        Context context = request.getRawContext();
        // å¦‚æžœ Context å’Œ Fragment ä¸­çš„ Context éƒ½æ˜¯ null
        if (context == null) {
            throw new NavigationFailException("is your fragment or Activity is Destoried?");
        }
        // è½¬åŒ– query åˆ° bundle,è¿™å?¥è¯?ä¸?èƒ½éš?ä¾¿æ”¾,å› ä¸ºè¿™å?¥è¯?ä¹‹å‰?æ˜¯å› ä¸ºæ‹¦æˆªå™¨å?¯ä»¥ä¿®æ”¹ routerRequest å¯¹è±¡ä¸­çš„å?‚æ•°æˆ–è€…æ•´ä¸ªå¯¹è±¡
        // æ‰€ä»¥ç›´æŽ¥å½“æ‰€æœ‰æ‹¦æˆªå™¨éƒ½æ‰§è¡Œå®Œæ¯•çš„æ—¶å€™,åœ¨ç¡®å®šè¦?è·³è½¬äº†,è¿™ä¸ª query å?‚æ•°å?¯ä»¥å¾€ bundle é‡Œé?¢å­˜äº†
        ParameterSupport.putQueryBundleToBundle(request.bundle, request.uri);
        Intent intent = null;
        if (target.getTargetClass() != null) {
            intent = new Intent(context, target.getTargetClass());
        } else if (target.getCustomerIntentCall() != null) {
            intent = target.getCustomerIntentCall().get(request);
        }
        if (intent == null) {
            throw new TargetActivityNotFoundException(uriString);
        }
        // æ‰€æœ‰çš„å?‚æ•°å­˜åˆ° Intent ä¸­
        intent.putExtras(request.bundle);
        // æŠŠç”¨æˆ·çš„ flags å’Œ categories éƒ½è®¾ç½®è¿›æ?¥
        for (String intentCategory : request.intentCategories) {
            intent.addCategory(intentCategory);
        }
        for (Integer intentFlag : request.intentFlags) {
            intent.addFlags(intentFlag);
        }
        if (request.intentConsumer != null) {
            request.intentConsumer.accept(intent);
        }
        jump(request, intent);
    }

    /**
     * æ‹¿åˆ° Intent ä¹‹å?ŽçœŸæ­£çš„è·³è½¬
     *
     * @param request
     * @param intent
     */
    private void jump(@NonNull RouterRequest request, Intent intent) {
        // å¦‚æžœæ˜¯æ™®é€šçš„å?¯åŠ¨ç•Œé?¢
        if (request.requestCode == null) { // å¦‚æžœæ˜¯ startActivity
            if (request.context != null) {
                request.context.startActivity(intent, request.options);
            } else if (request.fragment != null) {
                request.fragment.startActivity(intent, request.options);
            } else {
                throw new NavigationFailException("the context or fragment both are null");
            }
            return;
        }
        // ä½¿ç”¨ context è·³è½¬ startActivityForResult
        if (request.context != null) {
            Fragment rxFragment = findFragment(request.context);
            Activity rawAct = null;
            if (rxFragment != null) {
                rxFragment.startActivityForResult(intent, request.requestCode, request.options);
            } else if ((rawAct = Utils.getActivityFromContext(request.context)) != null) {
                rawAct.startActivityForResult(intent, request.requestCode, request.options);
            } else {
                throw new NavigationFailException("Context is not a Activity,so can't use 'startActivityForResult' method");
            }
        } else if (request.fragment != null) { // ä½¿ç”¨ Fragment è·³è½¬
            Fragment rxFragment = findFragment(request.fragment);
            if (rxFragment != null) {
                rxFragment.startActivityForResult(intent, request.requestCode, request.options);
            } else {
                request.fragment.startActivityForResult(intent, request.requestCode, request.options);
            }
        } else {
            throw new NavigationFailException("the context or fragment both are null");
        }
    }

    @NonNull
    @Override
    public synchronized List<RouterInterceptor> interceptors(@NonNull Uri uri) {
        // èŽ·å?–ç›®æ ‡å¯¹è±¡
        final String targetUrl = getTargetUrl(uri);
        final RouterBean routerBean = routerMap.get(targetUrl);
        if (routerBean == null) {
            return Collections.emptyList();
        }
        final List<Class<? extends RouterInterceptor>> targetInterceptors = routerBean.getInterceptors();
        final List<String> targetInterceptorNames = routerBean.getInterceptorNames();
        // å¦‚æžœæ²¡æœ‰æ‹¦æˆªå™¨ç›´æŽ¥è¿”å›ž null
        if ((targetInterceptors == null || targetInterceptors.isEmpty()) && (targetInterceptorNames == null || targetInterceptorNames.isEmpty())) {
            return Collections.emptyList();
        }
        final List<RouterInterceptor> result = new ArrayList<>();
        if (targetInterceptors != null) {
            for (Class<? extends RouterInterceptor> interceptorClass : targetInterceptors) {
                final RouterInterceptor interceptor = RouterInterceptorCache.getInterceptorByClass(interceptorClass);
                if (interceptor == null) {
                    throw new InterceptorNotFoundException("can't find the interceptor and it's className is " + interceptorClass + ",target url is " + uri.toString());
                }
                result.add(interceptor);
            }
        }
        if (targetInterceptorNames != null) {
            for (String interceptorName : targetInterceptorNames) {
                final RouterInterceptor interceptor = InterceptorCenter.getInstance().getByName(interceptorName);
                if (interceptor == null) {
                    throw new InterceptorNotFoundException("can't find the interceptor and it's name is " + interceptorName + ",target url is " + uri.toString());
                }
                result.add(interceptor);
            }
        }
        return result;
    }

    /**
     * èŽ·å?–urlåœ°å?€
     *
     * @param uri
     * @return
     */
    private String getTargetUrl(@NonNull Uri uri) {
        // "/component1/test" ä¸?å?«host
        String targetPath = uri.getPath();
        if (targetPath == null || targetPath.isEmpty()) {
            return null;
        }
        if (targetPath.charAt(0) != '/') {
            targetPath = SEPARATOR + targetPath;
        }
        targetPath = uri.getHost() + targetPath;
        return targetPath;
    }

    @Nullable
    private RouterBean getTarget(@NonNull Uri uri) {
        // "/component1/test" ä¸?å?«host
        String targetPath = uri.getPath();

        if (targetPath == null || targetPath.isEmpty()) {
            return null;
        }
        if (targetPath.charAt(0) != '/') {
            targetPath = SEPARATOR + targetPath;
        }
        targetPath = uri.getHost() + targetPath;
        return routerMap.get(targetPath);
    }

    /**
     * æ‰¾åˆ°é‚£ä¸ª Activity ä¸­éš?è—?çš„ä¸€ä¸ª Fragment,å¦‚æžœæ‰¾çš„åˆ°å°±ä¼šç”¨è¿™ä¸ª Fragment æ‹¿æ?¥è·³è½¬
     *
     * @param context
     * @return
     */
    @Nullable
    private Fragment findFragment(Context context) {
        Fragment result = null;
        Activity act = Utils.getActivityFromContext(context);
        if (act instanceof FragmentActivity) {
            FragmentManager ft = ((FragmentActivity) act).getSupportFragmentManager();
            result = ft.findFragmentByTag(ComponentUtil.FRAGMENT_TAG);
        }
        return result;
    }

    @Nullable
    private Fragment findFragment(Fragment fragment) {
        Fragment result = null;
        if (fragment != null) {
            result = fragment.getChildFragmentManager().findFragmentByTag(ComponentUtil.FRAGMENT_TAG);
        }
        return result;
    }

    @Nullable
    private Fragment findFragment(@NonNull RouterRequest request) {
        Fragment fragment = findFragment(request.context);
        if (fragment == null) {
            fragment = findFragment(request.fragment);
        }
        return fragment;
    }

    @Override
    public synchronized boolean isMatchUri(@NonNull Uri uri) {
        return getTarget(uri) != null;
    }

    @Override
    public void register(IComponentHostRouter router) {
        if (router == null) {
            return;
        }
        hostRouterMap.put(router.getHost(), router);
        routerMap.putAll(router.getRouterMap());
    }

    @Override
    public void register(@NonNull String host) {
        IComponentHostRouter router = findUiRouter(host);
        register(router);
    }

    @Override
    public void unregister(IComponentHostRouter router) {
        if (router == null) {
            return;
        }
        hostRouterMap.remove(router.getHost());
        Map<String, RouterBean> childRouterMap = router.getRouterMap();
        if (childRouterMap != null) {
            // key = host/path
            for (String key : childRouterMap.keySet()) {
                routerMap.remove(key);
            }
        }
    }

    @Override
    public void unregister(@NonNull String host) {
        IComponentHostRouter router = hostRouterMap.remove(host);
        unregister(router);
    }

    /**
     * æ ¹æ?®æ¨¡å?—å??ç§°å¯»æ‰¾å­?è·¯ç”±å¯¹è±¡
     *
     * @param host
     * @return
     * @hide
     */
    @Nullable
    public IComponentHostRouter findUiRouter(String host) {
        final String className = ComponentUtil.genHostRouterClassName(host);
        try {
            Class<?> clazz = Class.forName(className);
            return (IComponentHostRouter) clazz.newInstance();
        } catch (Exception ignore) {
            // ignore
        }
        return null;
    }

    /**
     * è·¯ç”±è¡¨é‡?å¤?çš„æ£€æŸ¥å·¥ä½œ
     */
    public void check() {
        Set<String> set = new HashSet<>();
        for (Map.Entry<String, IComponentHostRouter> entry : hostRouterMap.entrySet()) {
            IComponentHostRouter childRouter = entry.getValue();
            if (childRouter == null || childRouter.getRouterMap() == null) {
                continue;
            }
            Map<String, RouterBean> childRouterMap = childRouter.getRouterMap();
            for (String key : childRouterMap.keySet()) {
                if (set.contains(key)) {
                    throw new IllegalStateException("the target uri is existï¼š" + key);
                }
                set.add(key);
            }
        }
    }
}
