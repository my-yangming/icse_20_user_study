package com.vondear.rxtool;

import android.content.Context;
import android.content.Intent;
import android.location.LocationManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Build;
import android.telephony.TelephonyManager;

import com.vondear.rxtool.view.RxToast;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.List;


/**
 * @author vondear
 * @date 2016/1/29
 */
public class RxNetTool {

    /**
     * no network
     */
    public static final int NETWORK_NO = -1;
    /**
     * wifi network
     */
    public static final int NETWORK_WIFI = 1;
    /**
     * "2G" networks
     */
    public static final int NETWORK_2G = 2;
    /**
     * "3G" networks
     */
    public static final int NETWORK_3G = 3;
    /**
     * "4G" networks
     */
    public static final int NETWORK_4G = 4;
    /**
     * unknown network
     */
    public static final int NETWORK_UNKNOWN = 5;

    private static final int NETWORK_TYPE_GSM = 16;
    private static final int NETWORK_TYPE_TD_SCDMA = 17;
    private static final int NETWORK_TYPE_IWLAN = 18;

    /**
     * éœ€æ·»åŠ æ?ƒé™?
     *
     * @param context ä¸Šä¸‹æ–‡
     * @return ç½‘ç»œç±»åž‹
     * @code <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
     * <p>
     * å®ƒä¸»è¦?è´Ÿè´£çš„æ˜¯
     * 1 ç›‘è§†ç½‘ç»œè¿žæŽ¥çŠ¶æ€? åŒ…æ‹¬ï¼ˆWi-Fi, 2G, 3G, 4Gï¼‰
     * 2 å½“ç½‘ç»œçŠ¶æ€?æ”¹å?˜æ—¶å?‘é€?å¹¿æ’­é€šçŸ¥
     * 3 ç½‘ç»œè¿žæŽ¥å¤±è´¥å°?è¯•è¿žæŽ¥å…¶ä»–ç½‘ç»œ
     * 4 æ??ä¾›APIï¼Œå…?è®¸åº”ç”¨ç¨‹åº?èŽ·å?–å?¯ç”¨çš„ç½‘ç»œçŠ¶æ€?
     * <p>
     * netTyped çš„ç»“æžœ
     * @link #NETWORK_NO      = -1; å½“å‰?æ— ç½‘ç»œè¿žæŽ¥
     * @link #NETWORK_WIFI    =  1; wifiçš„æƒ…å†µä¸‹
     * @link #NETWORK_2G      =  2; åˆ‡æ?¢åˆ°2GçŽ¯å¢ƒä¸‹
     * @link #NETWORK_3G      =  3; åˆ‡æ?¢åˆ°3GçŽ¯å¢ƒä¸‹
     * @link #NETWORK_4G      =  4; åˆ‡æ?¢åˆ°4GçŽ¯å¢ƒä¸‹
     * @link #NETWORK_UNKNOWN =  5; æœªçŸ¥ç½‘ç»œ
     */
    public static int getNetWorkType(Context context) {
        // èŽ·å?–ConnectivityManager
        ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);

        NetworkInfo ni = cm.getActiveNetworkInfo();// èŽ·å?–å½“å‰?ç½‘ç»œçŠ¶æ€?

        int netType = NETWORK_NO;

        if (ni != null && ni.isConnectedOrConnecting()) {

            switch (ni.getType()) {//èŽ·å?–å½“å‰?ç½‘ç»œçš„çŠ¶æ€?
                case ConnectivityManager.TYPE_WIFI:// wifiçš„æƒ…å†µä¸‹
                    netType = NETWORK_WIFI;
                    RxToast.success("åˆ‡æ?¢åˆ°wifiçŽ¯å¢ƒä¸‹");
                    break;
                case ConnectivityManager.TYPE_MOBILE:

                    switch (ni.getSubtype()) {
                        case NETWORK_TYPE_GSM:
                        case TelephonyManager.NETWORK_TYPE_GPRS: // è?”é€š2g
                        case TelephonyManager.NETWORK_TYPE_CDMA: // ç”µä¿¡2g
                        case TelephonyManager.NETWORK_TYPE_EDGE: // ç§»åŠ¨2g
                        case TelephonyManager.NETWORK_TYPE_1xRTT:
                        case TelephonyManager.NETWORK_TYPE_IDEN:
                            netType = NETWORK_2G;
                            RxToast.info("åˆ‡æ?¢åˆ°2GçŽ¯å¢ƒä¸‹");
                            break;
                        case TelephonyManager.NETWORK_TYPE_EVDO_A: // ç”µä¿¡3g
                        case TelephonyManager.NETWORK_TYPE_UMTS:
                        case TelephonyManager.NETWORK_TYPE_EVDO_0:
                        case TelephonyManager.NETWORK_TYPE_HSDPA:
                        case TelephonyManager.NETWORK_TYPE_HSUPA:
                        case TelephonyManager.NETWORK_TYPE_HSPA:
                        case TelephonyManager.NETWORK_TYPE_EVDO_B:
                        case TelephonyManager.NETWORK_TYPE_EHRPD:
                        case TelephonyManager.NETWORK_TYPE_HSPAP:
                        case NETWORK_TYPE_TD_SCDMA:
                            netType = NETWORK_3G;
                            RxToast.info("åˆ‡æ?¢åˆ°3GçŽ¯å¢ƒä¸‹");
                            break;
                        case TelephonyManager.NETWORK_TYPE_LTE:

                        case NETWORK_TYPE_IWLAN:
                            netType = NETWORK_4G;
                            RxToast.info("åˆ‡æ?¢åˆ°4GçŽ¯å¢ƒä¸‹");
                            break;
                        default:

                            String subtypeName = ni.getSubtypeName();
                            if (subtypeName.equalsIgnoreCase("TD-SCDMA")
                                    || subtypeName.equalsIgnoreCase("WCDMA")
                                    || subtypeName.equalsIgnoreCase("CDMA2000")) {
                                netType = NETWORK_3G;
                            } else {
                                netType = NETWORK_UNKNOWN;
                            }
                            RxToast.normal("æœªçŸ¥ç½‘ç»œ");
                    }
                    break;
                default:
                    netType = 5;
                    RxToast.normal("æœªçŸ¥ç½‘ç»œ");
            }

        } else {
            netType = NETWORK_NO;
            RxToast.error(context, "å½“å‰?æ— ç½‘ç»œè¿žæŽ¥").show();
        }
        return netType;
    }

    /**
     * èŽ·å?–å½“å‰?çš„ç½‘ç»œç±»åž‹(WIFI,2G,3G,4G)
     * <p>ä¾?èµ–ä¸Šé?¢çš„æ–¹æ³•</p>
     *
     * @param context ä¸Šä¸‹æ–‡
     * @return ç½‘ç»œç±»åž‹å??ç§°
     * <ul>
     * <li>NETWORK_WIFI   </li>
     * <li>NETWORK_4G     </li>
     * <li>NETWORK_3G     </li>
     * <li>NETWORK_2G     </li>
     * <li>NETWORK_UNKNOWN</li>
     * <li>NETWORK_NO     </li>
     * </ul>
     */
    public static String getNetWorkTypeName(Context context) {
        switch (getNetWorkType(context)) {
            case NETWORK_WIFI:
                return "NETWORK_WIFI";
            case NETWORK_4G:
                return "NETWORK_4G";
            case NETWORK_3G:
                return "NETWORK_3G";
            case NETWORK_2G:
                return "NETWORK_2G";
            case NETWORK_NO:
                return "NETWORK_NO";
            default:
                return "NETWORK_UNKNOWN";
        }
    }

    /**
     * åˆ¤æ–­ç½‘ç»œè¿žæŽ¥æ˜¯å?¦å?¯ç”¨
     */
    public static boolean isNetworkAvailable(Context context) {
        ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
        if (cm == null) {
        } else {
            //å¦‚æžœä»…ä»…æ˜¯ç”¨æ?¥åˆ¤æ–­ç½‘ç»œè¿žæŽ¥
            //åˆ™å?¯ä»¥ä½¿ç”¨ cm.getActiveNetworkInfo().isAvailable();
            NetworkInfo[] info = cm.getAllNetworkInfo();
            if (info != null) {
                for (int i = 0; i < info.length; i++) {
                    if (info[i].getState() == NetworkInfo.State.CONNECTED) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    /**
     * åˆ¤æ–­ç½‘ç»œæ˜¯å?¦å?¯ç”¨
     * éœ€æ·»åŠ æ?ƒé™?
     *
     * @code <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
     */
    public static boolean isAvailable(Context context) {
        NetworkInfo info = getActiveNetworkInfo(context);
        return info != null && info.isAvailable();
    }

    /**
     * åˆ¤æ–­ç½‘ç»œæ˜¯å?¦è¿žæŽ¥
     * éœ€æ·»åŠ æ?ƒé™?
     *
     * @code <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
     */
    public static boolean isConnected(Context context) {
        NetworkInfo info = getActiveNetworkInfo(context);
        return info != null && info.isConnected();
    }

    /**
     * åˆ¤æ–­æ˜¯å?¦æœ‰å¤–ç½‘è¿žæŽ¥ï¼ˆæ™®é€šæ–¹æ³•ä¸?èƒ½åˆ¤æ–­å¤–ç½‘çš„ç½‘ç»œæ˜¯å?¦è¿žæŽ¥ï¼Œæ¯”å¦‚è¿žæŽ¥ä¸Šå±€åŸŸç½‘ï¼‰
     * ä¸?è¦?åœ¨ä¸»çº¿ç¨‹ä½¿ç”¨ï¼Œä¼šé˜»å¡žçº¿ç¨‹
     */
    public static final boolean ping() {

        String result = null;
        try {
            String ip = "www.baidu.com";// ping çš„åœ°å?€ï¼Œå?¯ä»¥æ?¢æˆ?ä»»ä½•ä¸€ç§?å?¯é? çš„å¤–ç½‘
            Process p = Runtime.getRuntime().exec("ping -c 3 -w 100 " + ip);// pingç½‘å?€3æ¬¡
            // è¯»å?–pingçš„å†…å®¹ï¼Œå?¯ä»¥ä¸?åŠ 
            InputStream input = p.getInputStream();
            BufferedReader in = new BufferedReader(new InputStreamReader(input));
            StringBuffer stringBuffer = new StringBuffer();
            String content = "";
            while ((content = in.readLine()) != null) {
                stringBuffer.append(content);
            }
//            Log.d("------ping-----", "result content : " + stringBuffer.toString());
            // pingçš„çŠ¶æ€?
            int status = p.waitFor();
            if (status == 0) {
                result = "success";
                return true;
            } else {
                result = "failed";
            }
        } catch (IOException e) {
            result = "IOException";
        } catch (InterruptedException e) {
            result = "InterruptedException";
        } finally {
//            Log.d("----result---", "result = " + result);
        }
        return false;
    }

    /**
     * ping IP
     * ä¸?è¦?åœ¨ä¸»çº¿ç¨‹ä½¿ç”¨ï¼Œä¼šé˜»å¡žçº¿ç¨‹
     */
    public static final boolean ping(String ip) {

        String result = null;
        try {
            // pingç½‘å?€3æ¬¡
            Process p = Runtime.getRuntime().exec("ping -c 3 -w 100 " + ip);
            // è¯»å?–pingçš„å†…å®¹ï¼Œå?¯ä»¥ä¸?åŠ 
            InputStream input = p.getInputStream();
            BufferedReader in = new BufferedReader(new InputStreamReader(input));
            StringBuffer stringBuffer = new StringBuffer();
            String content = "";
            while ((content = in.readLine()) != null) {
                stringBuffer.append(content);
            }
            //Log.d("------ping-----", "result content : " + stringBuffer.toString());
            // pingçš„çŠ¶æ€?
            int status = p.waitFor();
            if (status == 0) {
                result = "success";
                return true;
            } else {
                result = "failed";
            }
        } catch (IOException e) {
            result = "IOException";
        } catch (InterruptedException e) {
            result = "InterruptedException";
        } finally {
            //Log.d("----result---", "result = " + result);
        }
        return false;
    }

    /**
     * åˆ¤æ–­WIFIæ˜¯å?¦æ‰“å¼€
     */
    public static boolean isWifiEnabled(Context context) {
        ConnectivityManager mgrConn = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
        TelephonyManager mgrTel = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
        return ((mgrConn.getActiveNetworkInfo() != null
                && mgrConn.getActiveNetworkInfo().getState() == NetworkInfo.State.CONNECTED)
                || mgrTel.getNetworkType() == TelephonyManager.NETWORK_TYPE_UMTS);
    }

    /**
     * åˆ¤æ–­ç½‘ç»œè¿žæŽ¥æ–¹å¼?æ˜¯å?¦ä¸ºWIFI
     */
    public static boolean isWifi(Context context) {
        NetworkInfo networkINfo = getActiveNetworkInfo(context);
        return networkINfo != null && networkINfo.getType() == ConnectivityManager.TYPE_WIFI;
    }

    /**
     * åˆ¤æ–­wifiæ˜¯å?¦è¿žæŽ¥çŠ¶æ€?
     * <p>éœ€æ·»åŠ æ?ƒé™? {@code <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>}</p>
     *
     * @param context ä¸Šä¸‹æ–‡
     * @return {@code true}: è¿žæŽ¥<br>{@code false}: æœªè¿žæŽ¥
     */
    public static boolean isWifiConnected(Context context) {
        ConnectivityManager cm = (ConnectivityManager) context
                .getSystemService(Context.CONNECTIVITY_SERVICE);
        return cm != null && cm.getActiveNetworkInfo() != null
                && cm.getActiveNetworkInfo().getType() == ConnectivityManager.TYPE_WIFI;
    }

    /**
     * åˆ¤æ–­æ˜¯å?¦ä¸º3Gç½‘ç»œ
     */
    public static boolean is3rd(Context context) {
        ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo networkINfo = cm.getActiveNetworkInfo();
        return networkINfo != null
                && networkINfo.getType() == ConnectivityManager.TYPE_MOBILE;
    }

    /**
     * åˆ¤æ–­ç½‘ç»œæ˜¯å?¦æ˜¯4G
     * éœ€æ·»åŠ æ?ƒé™?
     *
     * @code <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
     */
    public static boolean is4G(Context context) {
        NetworkInfo info = getActiveNetworkInfo(context);
        return info != null && info.isAvailable() && info.getSubtype() == TelephonyManager.NETWORK_TYPE_LTE;
    }

    /**
     * GPSæ˜¯å?¦æ‰“å¼€
     *
     * @param context
     * @return
     */
    public static boolean isGpsEnabled(Context context) {
        LocationManager lm = ((LocationManager) context.getSystemService(Context.LOCATION_SERVICE));
        List<String> accessibleProviders = lm.getProviders(true);
        return accessibleProviders != null && accessibleProviders.size() > 0;
    }

    /*
     * ä¸‹é?¢åˆ—ä¸¾å‡ ä¸ªå?¯ç›´æŽ¥è·³åˆ°è?”ç½‘è®¾ç½®çš„æ„?å›¾,ä¾›å¤§å®¶å­¦ä¹ 
     *
     *      startActivity(new Intent(android.provider.Settings.ACTION_APN_SETTINGS));
     *      startActivity(new Intent(android.provider.Settings.ACTION_SETTINGS));
     *
     *  ç”¨ä¸‹é?¢ä¸¤ç§?æ–¹å¼?è®¾ç½®ç½‘ç»œ
     *
     *      startActivity(new Intent(android.provider.Settings.ACTION_WIFI_SETTINGS));
     *      startActivity(new Intent(android.provider.Settings.ACTION_WIRELESS_SETTINGS));
     */

    /**
     * æ‰“å¼€ç½‘ç»œè®¾ç½®ç•Œé?¢
     * <p>3.0ä»¥ä¸‹æ‰“å¼€è®¾ç½®ç•Œé?¢</p>
     *
     * @param context ä¸Šä¸‹æ–‡
     */
    public static void openWirelessSettings(Context context) {
        if (Build.VERSION.SDK_INT > 10) {
            context.startActivity(new Intent(android.provider.Settings.ACTION_SETTINGS));
        } else {
            context.startActivity(new Intent(android.provider.Settings.ACTION_WIRELESS_SETTINGS));
        }
    }

    /**
     * èŽ·å?–æ´»åŠ¨ç½‘ç»œä¿¡æ?¯
     *
     * @param context ä¸Šä¸‹æ–‡
     * @return NetworkInfo
     */
    private static NetworkInfo getActiveNetworkInfo(Context context) {
        ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
        return cm.getActiveNetworkInfo();
    }

    /**
     * èŽ·å?–ç§»åŠ¨ç½‘ç»œè¿?è?¥å•†å??ç§°
     * <p>å¦‚ä¸­å›½è?”é€šã€?ä¸­å›½ç§»åŠ¨ã€?ä¸­å›½ç”µä¿¡</p>
     *
     * @param context ä¸Šä¸‹æ–‡
     * @return ç§»åŠ¨ç½‘ç»œè¿?è?¥å•†å??ç§°
     */
    public static String getNetworkOperatorName(Context context) {
        TelephonyManager tm = (TelephonyManager) context
                .getSystemService(Context.TELEPHONY_SERVICE);
        return tm != null ? tm.getNetworkOperatorName() : null;
    }

    /**
     * èŽ·å?–ç§»åŠ¨ç»ˆç«¯ç±»åž‹
     *
     * @param context ä¸Šä¸‹æ–‡
     * @return æ‰‹æœºåˆ¶å¼?
     * <ul>
     * <li>{@link TelephonyManager#PHONE_TYPE_NONE } : 0 æ‰‹æœºåˆ¶å¼?æœªçŸ¥</li>
     * <li>{@link TelephonyManager#PHONE_TYPE_GSM  } : 1 æ‰‹æœºåˆ¶å¼?ä¸ºGSMï¼Œç§»åŠ¨å’Œè?”é€š</li>
     * <li>{@link TelephonyManager#PHONE_TYPE_CDMA } : 2 æ‰‹æœºåˆ¶å¼?ä¸ºCDMAï¼Œç”µä¿¡</li>
     * <li>{@link TelephonyManager#PHONE_TYPE_SIP  } : 3</li>
     * </ul>
     */
    public static int getPhoneType(Context context) {
        TelephonyManager tm = (TelephonyManager) context
                .getSystemService(Context.TELEPHONY_SERVICE);
        return tm != null ? tm.getPhoneType() : -1;
    }
}
