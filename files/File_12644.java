/**
 * 
 * IK ä¸­æ–‡åˆ†è¯?  ç‰ˆæœ¬ 5.0
 * IK Analyzer release 5.0
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * æº?ä»£ç ?ç”±æž—è‰¯ç›Š(linliangyi2005@gmail.com)æ??ä¾›
 * ç‰ˆæ?ƒå£°æ˜Ž 2012ï¼Œä¹Œé¾™èŒ¶å·¥ä½œå®¤
 * provided by Linliangyi and copyright 2012 by Oolong studio
 * 
 */
package org.wltea.analyzer.dic;

import java.util.Arrays;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * è¯?å…¸æ ‘åˆ†æ®µï¼Œè¡¨ç¤ºè¯?å…¸æ ‘çš„ä¸€ä¸ªåˆ†æž?
 */
class DictSegment implements Comparable<DictSegment>{
	
	//å…¬ç”¨å­—å…¸è¡¨ï¼Œå­˜å‚¨æ±‰å­—
	private static final Map<Character , Character> charMap = new ConcurrentHashMap<Character , Character>(16 , 0.95f);
	//æ•°ç»„å¤§å°?ä¸Šé™?
	private static final int ARRAY_LENGTH_LIMIT = 3;

	
	//Mapå­˜å‚¨ç»“æž„
	private Map<Character , DictSegment> childrenMap;
	//æ•°ç»„æ–¹å¼?å­˜å‚¨ç»“æž„
	private DictSegment[] childrenArray;
	
	
	//å½“å‰?èŠ‚ç‚¹ä¸Šå­˜å‚¨çš„å­—ç¬¦
	private Character nodeChar;
	//å½“å‰?èŠ‚ç‚¹å­˜å‚¨çš„Segmentæ•°ç›®
	//storeSize <=ARRAY_LENGTH_LIMIT ï¼Œä½¿ç”¨æ•°ç»„å­˜å‚¨ï¼Œ storeSize >ARRAY_LENGTH_LIMIT ,åˆ™ä½¿ç”¨Mapå­˜å‚¨
	private int storeSize = 0;
	//å½“å‰?DictSegmentçŠ¶æ€? ,é»˜è®¤ 0 , 1è¡¨ç¤ºä»Žæ ¹èŠ‚ç‚¹åˆ°å½“å‰?èŠ‚ç‚¹çš„è·¯å¾„è¡¨ç¤ºä¸€ä¸ªè¯?
	private int nodeState = 0;	
	
	
	DictSegment(Character nodeChar){
		if(nodeChar == null){
			throw new IllegalArgumentException("å?‚æ•°ä¸ºç©ºå¼‚å¸¸ï¼Œå­—ç¬¦ä¸?èƒ½ä¸ºç©º");
		}
		this.nodeChar = nodeChar;
	}

	Character getNodeChar() {
		return nodeChar;
	}
	
	/*
	 * åˆ¤æ–­æ˜¯å?¦æœ‰ä¸‹ä¸€ä¸ªèŠ‚ç‚¹
	 */
	boolean hasNextNode(){
		return  this.storeSize > 0;
	}
	
	/**
	 * åŒ¹é…?è¯?æ®µ
	 * @param charArray
	 * @return Hit
	 */
	Hit match(char[] charArray){
		return this.match(charArray , 0 , charArray.length , null);
	}
	
	/**
	 * åŒ¹é…?è¯?æ®µ
	 * @param charArray
	 * @param begin
	 * @param length
	 * @return Hit 
	 */
	Hit match(char[] charArray , int begin , int length){
		return this.match(charArray , begin , length , null);
	}
	
	/**
	 * åŒ¹é…?è¯?æ®µ
	 * @param charArray
	 * @param begin
	 * @param length
	 * @param searchHit
	 * @return Hit 
	 */
	Hit match(char[] charArray , int begin , int length , Hit searchHit){
		
		if(searchHit == null){
			//å¦‚æžœhitä¸ºç©ºï¼Œæ–°å»º
			searchHit= new Hit();
			//è®¾ç½®hitçš„å…¶å®žæ–‡æœ¬ä½?ç½®
			searchHit.setBegin(begin);
		}else{
			//å?¦åˆ™è¦?å°†HITçŠ¶æ€?é‡?ç½®
			searchHit.setUnmatch();
		}
		//è®¾ç½®hitçš„å½“å‰?å¤„ç?†ä½?ç½®
		searchHit.setEnd(begin);

        Character keyChar = Character.valueOf(charArray[begin]);
		DictSegment ds = null;
		
		//å¼•ç”¨å®žä¾‹å?˜é‡?ä¸ºæœ¬åœ°å?˜é‡?ï¼Œé?¿å…?æŸ¥è¯¢æ—¶é?‡åˆ°æ›´æ–°çš„å?Œæ­¥é—®é¢˜
		DictSegment[] segmentArray = this.childrenArray;
		Map<Character , DictSegment> segmentMap = this.childrenMap;		
		
		//STEP1 åœ¨èŠ‚ç‚¹ä¸­æŸ¥æ‰¾keyCharå¯¹åº”çš„DictSegment
		if(segmentArray != null){
			//åœ¨æ•°ç»„ä¸­æŸ¥æ‰¾
			DictSegment keySegment = new DictSegment(keyChar);
			int position = Arrays.binarySearch(segmentArray, 0 , this.storeSize , keySegment);
			if(position >= 0){
				ds = segmentArray[position];
			}

		}else if(segmentMap != null){
			//åœ¨mapä¸­æŸ¥æ‰¾
			ds = (DictSegment)segmentMap.get(keyChar);
		}
		
		//STEP2 æ‰¾åˆ°DictSegmentï¼Œåˆ¤æ–­è¯?çš„åŒ¹é…?çŠ¶æ€?ï¼Œæ˜¯å?¦ç»§ç»­é€’å½’ï¼Œè¿˜æ˜¯è¿”å›žç»“æžœ
		if(ds != null){			
			if(length > 1){
				//è¯?æœªåŒ¹é…?å®Œï¼Œç»§ç»­å¾€ä¸‹æ?œç´¢
				return ds.match(charArray, begin + 1 , length - 1 , searchHit);
			}else if (length == 1){
				
				//æ?œç´¢æœ€å?Žä¸€ä¸ªchar
				if(ds.nodeState == 1){
					//æ·»åŠ HITçŠ¶æ€?ä¸ºå®Œå…¨åŒ¹é…?
					searchHit.setMatch();
				}
				if(ds.hasNextNode()){
					//æ·»åŠ HITçŠ¶æ€?ä¸ºå‰?ç¼€åŒ¹é…?
					searchHit.setPrefix();
					//è®°å½•å½“å‰?ä½?ç½®çš„DictSegment
					searchHit.setMatchedDictSegment(ds);
				}
				return searchHit;
			}
			
		}
		//STEP3 æ²¡æœ‰æ‰¾åˆ°DictSegmentï¼Œ å°†HITè®¾ç½®ä¸ºä¸?åŒ¹é…?
		return searchHit;		
	}

	/**
	 * åŠ è½½å¡«å……è¯?å…¸ç‰‡æ®µ
	 * @param charArray
	 */
	void fillSegment(char[] charArray){
		this.fillSegment(charArray, 0 , charArray.length , 1); 
	}
	
	/**
	 * å±?è”½è¯?å…¸ä¸­çš„ä¸€ä¸ªè¯?
	 * @param charArray
	 */
	void disableSegment(char[] charArray){
		this.fillSegment(charArray, 0 , charArray.length , 0); 
	}
	
	/**
	 * åŠ è½½å¡«å……è¯?å…¸ç‰‡æ®µ
	 * @param charArray
	 * @param begin
	 * @param length
	 * @param enabled
	 */
	private synchronized void fillSegment(char[] charArray , int begin , int length , int enabled){
		//èŽ·å?–å­—å…¸è¡¨ä¸­çš„æ±‰å­—å¯¹è±¡
		Character beginChar = Character.valueOf(charArray[begin]);
		Character keyChar = charMap.get(beginChar);
		//å­—å…¸ä¸­æ²¡æœ‰è¯¥å­—ï¼Œåˆ™å°†å…¶æ·»åŠ å…¥å­—å…¸
		if(keyChar == null){
			charMap.put(beginChar, beginChar);
			keyChar = beginChar;
		}
		
		//æ?œç´¢å½“å‰?èŠ‚ç‚¹çš„å­˜å‚¨ï¼ŒæŸ¥è¯¢å¯¹åº”keyCharçš„keyCharï¼Œå¦‚æžœæ²¡æœ‰åˆ™åˆ›å»º
		DictSegment ds = lookforSegment(keyChar , enabled);
		if(ds != null){
			//å¤„ç?†keyCharå¯¹åº”çš„segment
			if(length > 1){
				//è¯?å…ƒè¿˜æ²¡æœ‰å®Œå…¨åŠ å…¥è¯?å…¸æ ‘
				ds.fillSegment(charArray, begin + 1, length - 1 , enabled);
			}else if (length == 1){
				//å·²ç»?æ˜¯è¯?å…ƒçš„æœ€å?Žä¸€ä¸ªchar,è®¾ç½®å½“å‰?èŠ‚ç‚¹çŠ¶æ€?ä¸ºenabledï¼Œ
				//enabled=1è¡¨æ˜Žä¸€ä¸ªå®Œæ•´çš„è¯?ï¼Œenabled=0è¡¨ç¤ºä»Žè¯?å…¸ä¸­å±?è”½å½“å‰?è¯?
				ds.nodeState = enabled;
			}
		}

	}
	
	/**
	 * æŸ¥æ‰¾æœ¬èŠ‚ç‚¹ä¸‹å¯¹åº”çš„keyCharçš„segment	 * 
	 * @param keyChar
	 * @param create  =1å¦‚æžœæ²¡æœ‰æ‰¾åˆ°ï¼Œåˆ™åˆ›å»ºæ–°çš„segment ; =0å¦‚æžœæ²¡æœ‰æ‰¾åˆ°ï¼Œä¸?åˆ›å»ºï¼Œè¿”å›žnull
	 * @return
	 */
	private DictSegment lookforSegment(Character keyChar ,  int create){
		
		DictSegment ds = null;

		if(this.storeSize <= ARRAY_LENGTH_LIMIT){
			//èŽ·å?–æ•°ç»„å®¹å™¨ï¼Œå¦‚æžœæ•°ç»„æœªåˆ›å»ºåˆ™åˆ›å»ºæ•°ç»„
			DictSegment[] segmentArray = getChildrenArray();			
			//æ?œå¯»æ•°ç»„
			DictSegment keySegment = new DictSegment(keyChar);
			int position = Arrays.binarySearch(segmentArray, 0 , this.storeSize, keySegment);
			if(position >= 0){
				ds = segmentArray[position];
			}
		
			//é??åŽ†æ•°ç»„å?Žæ²¡æœ‰æ‰¾åˆ°å¯¹åº”çš„segment
			if(ds == null && create == 1){
				ds = keySegment;
				if(this.storeSize < ARRAY_LENGTH_LIMIT){
					//æ•°ç»„å®¹é‡?æœªæ»¡ï¼Œä½¿ç”¨æ•°ç»„å­˜å‚¨
					segmentArray[this.storeSize] = ds;
					//segmentæ•°ç›®+1
					this.storeSize++;
					Arrays.sort(segmentArray , 0 , this.storeSize);
					
				}else{
					//æ•°ç»„å®¹é‡?å·²æ»¡ï¼Œåˆ‡æ?¢Mapå­˜å‚¨
					//èŽ·å?–Mapå®¹å™¨ï¼Œå¦‚æžœMapæœªåˆ›å»º,åˆ™åˆ›å»ºMap
					Map<Character , DictSegment> segmentMap = getChildrenMap();
					//å°†æ•°ç»„ä¸­çš„segmentè¿?ç§»åˆ°Mapä¸­
					migrate(segmentArray ,  segmentMap);
					//å­˜å‚¨æ–°çš„segment
					segmentMap.put(keyChar, ds);
					//segmentæ•°ç›®+1 ï¼Œ  å¿…é¡»åœ¨é‡Šæ”¾æ•°ç»„å‰?æ‰§è¡ŒstoreSize++ ï¼Œ ç¡®ä¿?æž?ç«¯æƒ…å†µä¸‹ï¼Œä¸?ä¼šå?–åˆ°ç©ºçš„æ•°ç»„
					this.storeSize++;
					//é‡Šæ”¾å½“å‰?çš„æ•°ç»„å¼•ç”¨
					this.childrenArray = null;
				}

			}			
			
		}else{
			//èŽ·å?–Mapå®¹å™¨ï¼Œå¦‚æžœMapæœªåˆ›å»º,åˆ™åˆ›å»ºMap
			Map<Character , DictSegment> segmentMap = getChildrenMap();
			//æ?œç´¢Map
			ds = (DictSegment)segmentMap.get(keyChar);
			if(ds == null && create == 1){
				//æž„é€ æ–°çš„segment
				ds = new DictSegment(keyChar);
				segmentMap.put(keyChar , ds);
				//å½“å‰?èŠ‚ç‚¹å­˜å‚¨segmentæ•°ç›®+1
				this.storeSize ++;
			}
		}

		return ds;
	}
	
	
	/**
	 * èŽ·å?–æ•°ç»„å®¹å™¨
	 * çº¿ç¨‹å?Œæ­¥æ–¹æ³•
	 */
	private DictSegment[] getChildrenArray(){
		synchronized(this){
			if(this.childrenArray == null){
					this.childrenArray = new DictSegment[ARRAY_LENGTH_LIMIT];
			}
		}
		return this.childrenArray;
	}
	
	/**
	 * èŽ·å?–Mapå®¹å™¨
	 * çº¿ç¨‹å?Œæ­¥æ–¹æ³•
	 */	
	private Map<Character , DictSegment> getChildrenMap(){
		synchronized(this){
			if(this.childrenMap == null){
				this.childrenMap = new ConcurrentHashMap<Character, DictSegment>(ARRAY_LENGTH_LIMIT * 2,0.8f);
			}
		}
		return this.childrenMap;
	}
	
	/**
	 * å°†æ•°ç»„ä¸­çš„segmentè¿?ç§»åˆ°Mapä¸­
	 * @param segmentArray
	 */
	private void migrate(DictSegment[] segmentArray , Map<Character , DictSegment> segmentMap){
		for(DictSegment segment : segmentArray){
			if(segment != null){
				segmentMap.put(segment.nodeChar, segment);
			}
		}
	}

	/**
	 * å®žçŽ°ComparableæŽ¥å?£
	 * @param o
	 * @return int
	 */
	public int compareTo(DictSegment o) {
		//å¯¹å½“å‰?èŠ‚ç‚¹å­˜å‚¨çš„charè¿›è¡Œæ¯”è¾ƒ
		return this.nodeChar.compareTo(o.nodeChar);
	}
	
}
